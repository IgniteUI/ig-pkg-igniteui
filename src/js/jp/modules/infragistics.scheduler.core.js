/*!@license
* Infragistics.Web.ClientUI infragistics.scheduler.core.js 17.1.20171.1012
*
* Copyright (c) 2011-2017 Infragistics Inc.
*
* http://www.infragistics.com/
*
* Depends:
*     jquery-1.4.4.js
*     jquery.ui.core.js
*     jquery.ui.widget.js
*     infragistics.util.js
*     infragistics.ui.scroll.js
*     infragistics.ext_core.js
*     infragistics.ext_collections.js
*     infragistics.ext_collectionsExtended.js
*     infragistics.ext_io.js
*     infragistics.ext_text.js
*     infragistics.ext_web.js
*     infragistics.dv_core.js
*     infragistics.dv_jquerydom.js
*     infragistics.ext_ui.js
*/
/*<BeginHeader/>*/
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		define( [
			'./infragistics.util',
			'./infragistics.ext_core',
			'./infragistics.ext_collections',
			'./infragistics.ext_collectionsExtended',
			'./infragistics.ext_io',
			'./infragistics.ext_text',
			'./infragistics.ext_web',
			'./infragistics.dv_core',
			'./infragistics.dv_jquerydom',
			'./infragistics.ext_ui'
		], factory );
	} else {
		factory(igRoot);
	}
}
(function ($) {
	/*!@license
* Infragistics.Web.ClientUI infragistics.scheduler.core.js resources 17.1.20171.1012
*
* Copyright (c) 2011-2017 Infragistics Inc.
*
* http://www.infragistics.com/
*
*/

/*global define, jQuery */

	$.ig = $.ig || {};
	$.ig.schedulerCore = $.ig.schedulerCore || {};
	$.ig.schedulerCore.locale = $.ig.schedulerCore.locale || {};
	$.extend($.ig.schedulerCore.locale, {

		getString: function(name) {
			var str = this[name];
			if (!str) return null;
			if (arguments.length === 1) return str;
			return $.ig.util.stringFormat1(str, Array.prototype.slice.call(arguments, 1));
		},
		LE_ActivityBase_DisassociatedResource: "The specified resource is not associated with the same data source as this activity.",
		LE_AppointmentItemsSource_CannotEdit: "The appointment item source does not support modification of its contents.",
		LE_AppointmentItemsSource_InvalidValue_JS: "The specified value must be a JSON array or an $.ig.DataSource instance.",
		LE_AppointmentItemsSource_NoIList_DOTNET: "The AppointmentItemsSource does not support modification of its contents. The item source must implement System.Collections.IList in order to support modifications.",
		LE_AppointmentPropertyMapping_RecurrenceRoot: "The RecurrenceRoot property is not bindable and cannot be mapped. Create a mapping for the RecurrenceId property instead.",
		LE_AppointmentPropertyMapping_Resource: "The Resource property is not bindable and cannot be mapped. Create a mapping for the ResourceId property instead.",
		LE_BeginEdit_CreatePending: "The specified activity cannot be edited because there is a 'Create' operation pending.",
		LE_CannotCreateDataObject_DOTNET: "Could not create new data object instance. Ensure that your data object type has a parameterless constructor. If it does not, assign a delegate to the CreateAppointmentDataObjectCallback property which creates new instances of this type.",
		LE_CannotModifyApppointmentsWhenDataSourceSet: "Operation is not valid while DataSource is in use. Access and modify elements with Scheduler.DataSource instead.",
		LE_CannotSetDataSourceWhenAppointmentsAreDefined: "Appointments collection must be empty before using DataSource.",
		LE_CouldNotConvertColorScheme: "The value '{0}' could not be converted to a ScheduleResourceColorScheme value.",
		LE_CouldNotConvertValue: "The value '{0}' could not be converted to type {1}.",
		LE_CreateDataObjectFailed: "Could not create new data object instance.",
		LE_DataObjectNotAssociated: "The specified data object is not associated with an Appointment.",
		LE_DuplicateIdentifier: "The identifier '{0}' is already in use. Activity/Resource identifiers must be unique.",
		LE_EndEdit_DataObjectAlreadyAssociated: "This data object is already associated with an activity.",
		LE_EndEdit_NotInEditMode: "EndEdit cannot be called on the specified activity because it is not in edit mode. BeginEdit must be called first before an activity edit operation can be committed.",
		LE_InvalidDayOfWeekRule: "The specified day of week rule is invalid.",
		LE_MissingIdentifier: "Missing identifier.",
		LE_NoAppointmentItemsSource: "The AppointmentItemsSource has not been assigned.",
		LE_NoCreateAppointmentDataObjectCallback_JS: "A new data object instance could not be created. You must specify a value for the CreateAppointmentDataObjectCallback property.",
		LE_NoDataObject: "The specified activity's underlying data object does not exist in the item source.",
		LE_NoPropertyMapping_Appointment: "No property mapping exists for Appointment property '{0}'.",
		LE_RecurrenceParsing: "Error parsing recurrence, context: {0}",
		LE_RecurrenceSerializing: "Error serializing recurrence, context: {0}",
		LE_SchedulePropertyMap_Missing: "The following required property mappings were not defined:",
		LE_SchedulePropertyMap_NoPropertyFound: "No public property named '{0}' was found on the underlying data object.",
		LIT_AgendaDayHeader_Today: "Today",
		LIT_AgendaNoEventsMessage: "No Events",
		LIT_AgendaStartTime_AllDay: "all-day",
		LIT_AgendaStartTime_Ends: "Ends",
		RD_And: "and",
		RD_AtTime: "at {0}",
		RD_Effective1: "effective {0}",
		RD_Effective2: "effective {0} until {1}",
		RD_Effective3: "effective {0} from {1} to {2}",
		RD_Effective4: "effective {0} at {1}",
		RD_Effective5: "effective {0} until {1} at {2}",
		RD_Effective6: "effective {0} until {1} from {2} to {3}",
		RD_Every: "every {0} {1}",
		RD_FrequencyLiterals: "year,month,week,day,hour,minute,second",
		RD_FrequencyLiterals2: "yearly,monthly,weekly,daily,hourly,minutely,secondly",
		RD_FrequencyLiteralsPlural: "years,months,weeks,days,hours,minutes,seconds",
		RD_InMonth: "in {0}",
		RD_Last: "last",
		RD_NumberSuffix_nd: "nd",
		RD_NumberSuffix_rd: "rd",
		RD_NumberSuffix_st: "st",
		RD_NumberSuffix_th: "th",
		RD_OccurrenceOfThe: "occurrence of the",
		RD_OfEveryMinuteOrHour: "of every {0}",
		RD_OfTheMonthOrYear: "of the {0}",
		RD_OfTheNthMinuteOrHour: "of the {0} {1}",
		RD_OnEach: "on each",
		RD_OnEverySecond: "on every second",
		RD_OnThe: "on the",
		RD_OnTheNthSecond: "on the {0} second",
		RD_Or: "or",
		RD_OrdinalDayOfMonthUsesSuffix: "true",
		RD_OrdinalNumberWithSuffix: "{0}{1}",
		RD_RecurrenceDescriptionOverallStructure: "Occurs {0}{1}{2}",
		RD_RepeatingMultipleTimes: "repeating {0} times",
		RD_RepeatingOneTime: "repeating once",
		RD_RulesInMonth: "{0} {1}",
		RD_ToTheLast: "to the last",
		RD_Weekday: "weekday",
		RD_WeekendDay: "weekend day",
		RD_WeekOrDayOfTheMonthOrYear: "{0} {1}"
	});


/*<EndHeader/>*/
$.ig = $.ig || {};
var $$t = {};
$.ig.globalDefs = $.ig.globalDefs || {};
$.ig.globalDefs.$$aj = $$t;
$$0 = $.ig.globalDefs.$$0;
$$4 = $.ig.globalDefs.$$4;
$$5 = $.ig.globalDefs.$$5;
$$7 = $.ig.globalDefs.$$7;
$$8 = $.ig.globalDefs.$$8;
$$b = $.ig.globalDefs.$$b;
$$1 = $.ig.globalDefs.$$1;
$$w = $.ig.globalDefs.$$w;
$$ag = $.ig.globalDefs.$$ag;
$$6 = $.ig.globalDefs.$$6;
$$a = $.ig.globalDefs.$$a;
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine([
"scheduler.DateRecurrence:d",
"scheduler.RulesCollection:e",
"scheduler.DateRecurrenceRuleBase:h",
"scheduler.MonthOfYearRecurrenceRule:i",
"scheduler.WeekOfYearRecurrenceRule:j",
"scheduler.DayOfYearRecurrenceRule:k",
"scheduler.DayOfMonthRecurrenceRule:l",
"scheduler.DayOfWeekRecurrenceRule:m",
"HourRecurrenceRule:n",
"scheduler.MinuteRecurrenceRule:o",
"scheduler.SecondRecurrenceRule:p",
"scheduler.SubsetRecurrenceRule:q",
"scheduler.ActivityBase:r",
"scheduler.Appointment:t",
"scheduler.ScheduleResource:w",
"ScheduleResourceStorage:x",
"ScheduleResourceStorageList:y",
"ScheduleResourceStorageTable:z",
"CanvasContainer:ab",
"AppointmentDoubleClickedEventHandler:ac",
"LayoutUpdatedEventHandler:ae",
"PresenterBase:ag",
"SchedulerPresenterManager:ah",
"ShapePresenter:ai",
"TextContentPresenter:aj",
"TimeSlotPresenter:ak",
"Scheduler:al",
"scheduler.SchedulerHitTestResult:an",
"SchedulerUtils:ao",
"ElementView:ap",
"MonthViewSelectedDateView:ar",
"SchedulerLayoutPanel:as",
"SchedulerScrollingView:at",
"SchedulerView:au",
"SelectableViewBase:az",
"ShapeView:a0",
"SplitterView:a1",
"TextContentView:a2",
"TextOnlyNoBackgroundView:a3",
"TimeSlotView:a4",
"AgendaInfo:a5",
"AgendaDayMetrics:a6",
"AgendaInfo___Days__IteratorClass:a7",
"MonthInfo:a8",
"MonthMetrics:a9",
"Utilities:ba",
"IModelActionManager:bc",
"DefaultModelActionManager:bd",
"INativeSchedulerView:bf",
"INativeView:bg",
"ModelFactories:bh",
"ModelFactoryBase:bi",
"RecyclingManager:bk",
"AppointmentClickedEventHandler:bl",
"AppointmentSelectedEventHandler:bn",
"DayClickedEventHandler:bp",
"DayOfWeekHeaderClickedEventHandler:br",
"MonthHeaderClickedEventHandler:bt",
"SelectedDateChangedEventHandler:bv",
"WeekNumberClickedEventHandler:bx",
"DateTimeFormatProvider:bz",
"ILayoutEngine:cj",
"MonthViewCurrentMonthLayoutData:cn",
"SchedulerLayerController:co",
"SpatialEngine:cp",
"SpatialEngineAgendaView:cq",
"SpatialEngineMonthView:cr",
"VisibilityEngine:ct",
"VisibilityEngineAgendaView:cu",
"VisibilityEngineMonthView:cv",
"SchedulerDefaultThemeInfo:cw",
"AgendaDayHeaderModel:cy",
"AgendaDayHeaderModelFactory:c0",
"AgendaApptEndTimeModel:c1",
"AgendaApptEndTimeModelFactory:c3",
"AgendaApptSubjectModel:c4",
"AgendaApptSubjectModelFactory:c6",
"AgendaApptLocationModel:c7",
"AgendaApptLocationModelFactory:c9",
"AgendaApptStartTimeModel:da",
"AgendaApptStartTimeModelFactory:dc",
"VisualModelAgendaView:dd",
"MonthNameModel:dg",
"MonthNameModelFactory:di",
"MonthWeekNumberModel:dj",
"MonthWeekNumberModelFactory:dl",
"VisualModelMonthView:dm",
"SchedulerViewModeInfo:dp",
"SchedulerViewModeManager:dq",
"DayOfWeekHeaderModelFactory:dr",
"ShapeModel:ds",
"ShapeModelFactory:dv",
"TextModel:dw",
"TextModelFactory:dy",
"TimeSlotModel:dz",
"DayOfWeekHeaderModel:d1",
"ModelBase:d3",
"TimeSlotModelFactory:d5",
"IModelPresenter:d6",
"VisualModel:d9",
"VisualModel___GetAllModels__IteratorClass:eb",
"VisualModel___GetHiddenModels__IteratorClass:ec",
"CanvasContainerBase:eg",
"HybridModelPresenter:eh",
"IRoleMetricsProvider:ei",
"CanvasNonTextPresenter:ej",
"CanvasPresenterBase:ek",
"CanvasPresenterManager:el",
"CanvasShapePresenter:em",
"CanvasTextPresenter:en",
"CanvasElementView:eo",
"CanvasNonTextView:ep",
"CanvasShapeView:eq",
"CanvasTextView:er",
"JSItemsSourceProxy:es",
"JSIGDataSourceWrapper:et",
"JSListModificationManager:eu",
"JSAppointmentListModificationManager:ev",
"JSDateTimeFormatProvider:fj",
"ColorSchemeManager:fk",
"ActivityTree:fl",
"DayNode:fm",
"MonthNode:fn",
"YearNode:fo",
"DataObjectWrapper:fp",
"ActivityStorageList:fr",
"ActivityStorageHashSet:fs",
"IActivityDataObject:ft",
"scheduler.DataErrorEventHandler:fu",
"AppointmentsChangedEventHandler:fw",
"ResourcesChangedEventHandler:fy",
"ResourcesChangedEventArgs:fz",
"AppointmentPropertyChangedEventHandler:f1",
"AppointmentPropertyChangedEventArgs:f2",
"ResourcePropertyChangedEventHandler:f3",
"ResourcePropertyChangedEventArgs:f4",
"ListModificationManager:gb",
"PropertyAccessor:gc",
"JSPropertyAccessor:gd",
"scheduler.DateRangeQueryResultBase:gf",
"scheduler.AppointmentOperationResult:gh",
"scheduler.ActivityQueryResult$1:gi",
"scheduler.AppointmentQueryResult:gj",
"scheduler.DateQueryResult:gk",
"scheduler.DateQueryResultBase:gl",
"ActivityCountQueryResult:gm",
"scheduler.ScheduleListDataSource:gu",
"scheduler.ScheduleDataSource:g3",
"DateRecurrenceCache:g4",
"DateRecurrenceParser:g5",
"DateRecurrenceEnumerable:g7",
"DateRecurrenceEnumerator:g8",
"DateRecurrenceState:ha",
"RecurrenceInfo:he",
"DateRecurrenceSubsetInfo:hg",
"RecurrenceManager:hi",
"AppointmentRecurrenceManager:hj",
"RecurrenceStorageList$1:hn",
"RecurrenceStorageTable$1:ho",
"GridLayout:hp",
"GridLayout___GetCellRects__IteratorClass:hq",
"GridLayout___GetCellRectsInRow__IteratorClass:hr",
"GridLayout___GetCellRectsInColumn__IteratorClass:hs",
"GridLayoutItem:hu",
"GridLayoutUtilities:hz",
"IGridLayoutDefinition:h0"]);
/*<BeginType Name="Infragistics.Scheduler.Core.YearFormat" />*/

$.ig.util.defEnum('YearFormat', false, false, {
	TwoDigit: 0,
	FourDigit: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.YearFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeType" />*/

$.ig.scheduler.ShapeType = $.ig.util.defEnum('scheduler.ShapeType', false, true, {
	Rectangle: 0,
	Ellipse: 1,
	Lines: 2
});

/*<EndType Name="Infragistics.Scheduler.Core.ShapeType" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientationMode" />*/

$.ig.scheduler.SchedulerViewSplitOrientationMode = $.ig.util.defEnum('scheduler.SchedulerViewSplitOrientationMode', false, true, {
	Manual: 0,
	Auto: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientationMode" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientation" />*/

$.ig.scheduler.SchedulerViewSplitOrientation = $.ig.util.defEnum('scheduler.SchedulerViewSplitOrientation', false, true, {
	Vertical: 0,
	Horizontal: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientation" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewMode" />*/

$.ig.scheduler.SchedulerViewMode = $.ig.util.defEnum('scheduler.SchedulerViewMode', false, true, {
	MonthView: 0,
	AgendaView: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewMode" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection" />*/

$.ig.scheduler.SchedulerViewScrollDirection = $.ig.util.defEnum('scheduler.SchedulerViewScrollDirection', false, true, {
	Vertical: 0,
	Horizontal: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerElementRole" />*/

$.ig.scheduler.SchedulerElementRole = $.ig.util.defEnum('scheduler.SchedulerElementRole', false, true, {
	Scheduler: 0,
	AgendaView: 1,
	DayView: 2,
	MonthView: 3,
	MonthViewActivityIndicator: 4,
	MonthViewDay: 5,
	MonthViewDayLeading: 6,
	MonthViewDaySelected: 7,
	MonthViewDayToday: 8,
	MonthViewDayTodayIndicator: 9,
	MonthViewDayTrailing: 10,
	MonthViewDayOfWeekHeader: 11,
	MonthViewDayHorizontalSeparator: 12,
	MonthViewDayVerticalSeparator: 13,
	MonthViewMonthHeader: 14,
	MonthViewWeekHeader: 15,
	MonthViewDayAppointment: 16,
	MonthViewMonthHeaderHorizontalSeparator: 17,
	WeekView: 18,
	AgendaViewDayHeader: 19,
	AgendaApptStartTime: 20,
	AgendaApptStartTimeSelected: 21,
	AgendaApptEndTime: 22,
	AgendaApptEndTimeSelected: 23,
	AgendaApptSubject: 24,
	AgendaApptSubjectSelected: 25,
	AgendaApptLocation: 26,
	AgendaApptLocationSelected: 27,
	AgendaApptArea: 28,
	AgendaApptColorBar: 29,
	AgendaApptHorizontalSeparator: 30,
	AgendaApptSelected: 31,
	AgendaViewMessage: 32,
	AgendaDayHeaderHorizontalSeparator: 33,
	HorizontalViewSplitter: 34,
	VerticalViewSplitter: 35
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerElementRole" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthViewScrollMode" />*/

$.ig.util.defEnum('MonthViewScrollMode', false, false, {
	Infinite: 0,
	InfiniteAndSizedToFill: 1,
	Paged: 2
});

/*<EndType Name="Infragistics.Scheduler.Core.MonthViewScrollMode" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthViewDayContentDisplayMode" />*/

$.ig.scheduler.MonthViewDayContentDisplayMode = $.ig.util.defEnum('scheduler.MonthViewDayContentDisplayMode', false, true, {
	SquareIndicator: 0,
	ActivitySubject: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.MonthViewDayContentDisplayMode" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthFormat" />*/

$.ig.util.defEnum('MonthFormat', false, false, {
	Numeric: 0,
	TwoDigit: 1,
	"Short:$short": 2,
	"Long:$long": 3
});

/*<EndType Name="Infragistics.Scheduler.Core.MonthFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthNameFormat" />*/

$.ig.util.defEnum('MonthNameFormat', false, false, {
	Abbreviated: 0,
	Full: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.MonthNameFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelStates" />*/

$.ig.util.defEnum('ModelStates', false, false, {
	"New:$new": 0,
	Recycled: 1,
	Inview: 2
});

/*<EndType Name="Infragistics.Scheduler.Core.ModelStates" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelType" />*/

$.ig.util.defEnum('ModelType', false, false, {
	TimeSlot: 1,
	Header: 2,
	Separator: 3,
	MonthView: 4,
	Shape: 5,
	Text: 6,
	WeekNumber: 7,
	Area: 8,
	Time: 9
});

/*<EndType Name="Infragistics.Scheduler.Core.ModelType" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.LineBreakStyle" />*/

$.ig.util.defEnum('LineBreakStyle', false, false, {
	"Default:$default": 0,
	HeadClipWithEllipsis: 1,
	MiddleClipWithEllipsis: 2,
	TailClipWithEllipsis: 3,
	TailClip: 4
});

/*<EndType Name="Infragistics.Scheduler.Core.LineBreakStyle" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekFormat" />*/

$.ig.util.defEnum('DayOfWeekFormat', false, false, {
	None: 0,
	Shortest: 1,
	Abbreviated: 2,
	Full: 3
});

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ContentVerticalAlignment" />*/

$.ig.scheduler.ContentVerticalAlignment = $.ig.util.defEnum('scheduler.ContentVerticalAlignment', false, true, {
	Top: 0,
	Center: 1,
	Bottom: 2,
	Stretch: 3,
	Auto: 4
});

/*<EndType Name="Infragistics.Scheduler.Core.ContentVerticalAlignment" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment" />*/

$.ig.scheduler.ContentHorizontalAlignment = $.ig.util.defEnum('scheduler.ContentHorizontalAlignment', false, true, {
	Left: 0,
	Center: 1,
	Right: 2,
	Stretch: 3,
	Auto: 4
});

/*<EndType Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaViewAppointmentScope" />*/

$.ig.scheduler.AgendaViewAppointmentScope = $.ig.util.defEnum('scheduler.AgendaViewAppointmentScope', false, true, {
	AllAppointments: 0,
	OnlyAppointmentsForSelectedDate: 1
});

/*<EndType Name="Infragistics.Scheduler.Core.AgendaViewAppointmentScope" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualElementInputType" />*/

$.ig.util.defEnum('VisualElementInputType', false, false, {
	MouseDown: 0,
	MouseOver: 1,
	MouseUp: 2
});

/*<EndType Name="Infragistics.Scheduler.Core.VisualElementInputType" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerView_PropertyRole" />*/

$.ig.util.defEnum('SchedulerView_PropertyRole', false, false, {
	Background: 0,
	Font: 1,
	Foreground: 2,
	Margin: 3
});

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerView_PropertyRole" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ElementView_PropertyIds" />*/

$.ig.util.defEnum('ElementView_PropertyIds', true, false, {
	Background: 1,
	IsSelected: 2,
	Opacity: 4,
	Padding: 8,
	TextBrush: 16,
	Text: 32,
	All: 0x7FFFFFFF
});

/*<EndType Name="Infragistics.Scheduler.Core.ElementView_PropertyIds" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.CultureGroups" />*/

$.ig.util.defEnum('CultureGroups', true, false, {
	CJK: 1,
	Mideast: 2,
	CBVUT: 4,
	West: 8,
	Other: 16,
	All: 31
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.CultureGroups" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormat" />*/

$.ig.util.defEnum('TimeZoneNameFormat', false, false, {
	"Short:$short": 0,
	"Long:$long": 1
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat" />*/

$.ig.util.defEnum('NumericDateFormat', false, false, {
	Numeric: 0,
	TwoDigit: 1
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraDateFormat" />*/

$.ig.util.defEnum('EraDateFormat', false, false, {
	Narrow: 0,
	"Short:$short": 1,
	"Long:$long": 2
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraDateFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat" />*/

$.ig.util.defEnum('WeekdayDateFormat', false, false, {
	Narrow: 0,
	"Short:$short": 1,
	"Long:$long": 2
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat" />*/

$.ig.util.defEnum('MonthDateFormat', false, false, {
	Numeric: 0,
	TwoDigit: 1,
	Narrow: 2,
	"Short:$short": 3,
	"Long:$long": 4
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateFormatPart" />*/

$.ig.util.defEnum('DateFormatPart', false, false, {
	Weekday: 0,
	Era: 1,
	Year: 2,
	Month: 3,
	Day: 4,
	Hour: 5,
	Minute: 6,
	Second: 7,
	TimeZoneName: 8
});

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateFormatPart" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataSourceOperation" />*/

$.ig.scheduler.DataSourceOperation = $.ig.util.defEnum('scheduler.DataSourceOperation', false, true, {
	VerifyPropertyMappings: 0,
	CreateDataObject: 1,
	ModifyDataObjectList: 2,
	DeleteDataObject: 3,
	UpdateDataObject: 4,
	InitializeDataObject: 5,
	GetDataObjectProperty: 6,
	SetDataObjectProperty: 7,
	ConvertDataObjectProperty: 8,
	ConvertScheduleObjectProperty: 9,
	Query: 10
});

/*<EndType Name="Infragistics.Scheduler.Data.DataSourceOperation" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme" />*/

$.ig.scheduler.ScheduleResourceColorScheme = $.ig.util.defEnum('scheduler.ScheduleResourceColorScheme', false, true, {
	Grape: 0,
	Fuchsia: 1,
	Pumpkin: 2,
	Leafy: 3,
	Skye: 4,
	Chocolate: 5,
	Lime: 6,
	Sunflower: 7,
	Teal: 8,
	Indigo: 9,
	Strawberry: 10
});

/*<EndType Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ScheduleResourceProperty" />*/

$.ig.scheduler.ScheduleResourceProperty = $.ig.util.defEnum('scheduler.ScheduleResourceProperty', false, true, {
	Id: 0,
	DisplayName: 1,
	ColorScheme: 2
});

/*<EndType Name="Infragistics.Scheduler.Data.ScheduleResourceProperty" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentProperty" />*/

$.ig.scheduler.AppointmentProperty = $.ig.util.defEnum('scheduler.AppointmentProperty', false, true, {
	Id: 0,
	Subject: 1,
	Location: 2,
	Description: 3,
	Start: 4,
	End: 5,
	Recurrence: 6,
	RecurrenceRoot: 7,
	ResourceId: 8,
	Resource: 9,
	RecurrenceId: 10,
	OriginalStart: 11,
	IsRemoved: 12
});

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentProperty" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityOperation" />*/

$.ig.scheduler.ActivityOperation = $.ig.util.defEnum('scheduler.ActivityOperation', false, true, {
	None: 0,
	Create: 1,
	"Delete:del": 2,
	Edit: 3
});

/*<EndType Name="Infragistics.Scheduler.Data.ActivityOperation" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.OperationStatus" />*/

$.ig.scheduler.OperationStatus = $.ig.util.defEnum('scheduler.OperationStatus', false, true, {
	Pending: 0,
	Completed: 1,
	Canceled: 2
});

/*<EndType Name="Infragistics.Scheduler.Data.OperationStatus" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser_ListSeparator" />*/

$.ig.util.defEnum('DateRecurrenceParser_ListSeparator', false, false, {
	AndLiteral: 0,
	OrLiteral: 1
});

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser_ListSeparator" />*/

/*<BeginType Name="Infragistics.Scheduler.DayOfWeekFlags" />*/

$.ig.util.defEnum('DayOfWeekFlags', true, false, {
	None: 0,
	Sunday: 1,
	Monday: 2,
	Tuesday: 4,
	Wednesday: 8,
	Thursday: 16,
	Friday: 32,
	Saturday: 64
});

/*<EndType Name="Infragistics.Scheduler.DayOfWeekFlags" />*/

/*<BeginType Name="Infragistics.Scheduler.DateRecurrenceFrequency" />*/

$.ig.scheduler.DateRecurrenceFrequency = $.ig.util.defEnum('scheduler.DateRecurrenceFrequency', false, true, {
	Yearly: 0,
	Monthly: 1,
	Weekly: 2,
	Daily: 3,
	Hourly: 4,
	Minutely: 5,
	Secondly: 6
});

/*<EndType Name="Infragistics.Scheduler.DateRecurrenceFrequency" />*/

/*<BeginType Name="Infragistics.Layout.GridUnitType" />*/

$.ig.util.defEnum('GridUnitType', false, false, {
	Auto: 0,
	Pixel: 1,
	Star: 2
});

/*<EndType Name="Infragistics.Layout.GridUnitType" />*/

/*<BeginType Name="SR" />*/

$.ig.util.defType('SR', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String SR::GetString(System.String)" />*/
	getString: function (resourceName) {
		return resourceName;
	}
	/*<EndMethod Name="System.String SR::GetString(System.String)" />*/
	,
	/*<BeginMethod Name="System.String SR::GetString(System.String, )" />*/
	getString1: function (resourceName, args) {
		return resourceName;
	}
	/*<EndMethod Name="System.String SR::GetString(System.String, )" />*/
	,
	$type: new $.ig.Type('SR', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="SR" />*/

/*<BeginType Name="Infragistics.DateTimeRange" />*/

$.ig.scheduler.DateTimeRange = $.ig.util.defType('scheduler.DateTimeRange', 'Object', {
	___start: new Date(),
	___end: new Date(),
	init: function (start, end) {
		$.ig.Object.prototype.init.call(this);
		if (start > end) {
			var temp = start;
			start = end;
			end = temp;
		}
		this.___start = start;
		this.___end = end;
	},
	/*<BeginProperty Name="System.DateTime Infragistics.DateTimeRange::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this.___start = value;
			return value;
		} else {
			return this.___start;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.DateTimeRange::Start()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.DateTimeRange::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this.___end = value;
			return value;
		} else {
			return this.___end;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.DateTimeRange::End()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.DateTimeRange::Contains(System.DateTime)" />*/
	contains: function (value) {
		return value >= this.start() && value <= this.end();
	}
	/*<EndMethod Name="System.Boolean Infragistics.DateTimeRange::Contains(System.DateTime)" />*/
	,
	intersectsWith: function () {
		var n;
		if (arguments.length === 1) {
			n = 0;
		} else if (arguments.length === 2) {
			if ($.ig.util.cast($.ig.scheduler.DateTimeRange.prototype.$type, arguments[0]) !== null) {
				n = 0;
			} else if ($.ig.util.cast($.ig.Date.prototype.$type, arguments[0]) !== null) {
				n = 1;
			} else if (arguments[0] == null) {
				n = 0;
			}
		} else if (arguments.length === 3) {
			n = 1;
		}
		switch (n) {
			case 0: return this._intersectsWith.apply(this, arguments);
			case 1: return this._intersectsWith1.apply(this, arguments);
			default: throw new Error('Invalid arguments');
		}
	},
	/*<BeginMethod Name="System.Boolean Infragistics.DateTimeRange::IntersectsWith(Infragistics.DateTimeRange, System.Boolean)" />*/
	_intersectsWith: function (range, isEndExclusive) {
		isEndExclusive = (isEndExclusive !== void 0 ? isEndExclusive : true);
		if (range == null) {
			throw new $.ig.ArgumentNullException(0, "range");
		}
		return this._intersectsWith1(range.start(), range.end(), isEndExclusive);
	}
	/*<EndMethod Name="System.Boolean Infragistics.DateTimeRange::IntersectsWith(Infragistics.DateTimeRange, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.DateTimeRange::IntersectsWith(System.DateTime, System.DateTime, System.Boolean)" />*/
	_intersectsWith1: function (start, end, isEndExclusive) {
		isEndExclusive = (isEndExclusive !== void 0 ? isEndExclusive : true);
		return $.ig.scheduler.DateTimeRange.prototype._doRangesIntersect(this.___start, this.___end, start, end, isEndExclusive);
	}
	/*<EndMethod Name="System.Boolean Infragistics.DateTimeRange::IntersectsWith(System.DateTime, System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.DateTimeRange::DoRangesIntersect(System.DateTime, System.DateTime, System.DateTime, System.DateTime, System.Boolean)" />*/
	_doRangesIntersect: function (thisStart, thisEnd, thatStart, thatEnd, isEndExclusive) {
		if (isEndExclusive && +thatStart == +thisEnd) {
			return false;
		}
		return (thatStart > thisEnd || thatEnd < thisStart) == false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.DateTimeRange::DoRangesIntersect(System.DateTime, System.DateTime, System.DateTime, System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.DateTimeRange Infragistics.DateTimeRange::Intersect(Infragistics.DateTimeRange, Infragistics.DateTimeRange)" />*/
	_intersect: function (range1, range2) {
		if (range1 == null) {
			throw new $.ig.ArgumentNullException(0, "range1");
		}
		if (range2 == null) {
			throw new $.ig.ArgumentNullException(0, "range2");
		}
		if (range1._intersectsWith(range2, false) == false) {
			return null;
		}
		var start = range1.start() > range2.start() ? range1.start() : range2.start();
		var end = range1.end() < range2.end() ? range1.end() : range2.end();
		return new $.ig.scheduler.DateTimeRange(start, end);
	}
	/*<EndMethod Name="Infragistics.DateTimeRange Infragistics.DateTimeRange::Intersect(Infragistics.DateTimeRange, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.DateTimeRange::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0} - {1}", this.start(), this.end());
	}
	/*<EndMethod Name="System.String Infragistics.DateTimeRange::ToString()" />*/
	,
	$type: new $.ig.Type('scheduler.DateTimeRange', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.DateTimeRange" />*/

/*<BeginType Name="Infragistics.ScrollManager" />*/

$.ig.util.defType('ScrollManager', 'Object', {
	__contentElement: null,
	__content: null,
	__horizontalExtent: 0,
	__verticalExtent: 0,
	init: function (content, renderedCallback, scrollingCallback, scrolledCallback, thumbDragStartCallback, thumbDragMoveCallback, thumbDragEndCallback, resizingCallback, resizedCallback) {
		$.ig.Object.prototype.init.call(this);
		this.__contentElement = content;
		this.__content = $(content);
		this.__content.igScroll({ alwaysVisible: true, smoothing: true, scrollbarType: "custom" });;
		if (renderedCallback != null) {
			this.__content.igScroll({ rendered: renderedCallback });;
		}
		if (scrollingCallback != null) {
			this.__content.igScroll({ scrolling: scrollingCallback });;
		}
		if (scrolledCallback != null) {
			this.__content.igScroll({ scrolled: scrolledCallback });;
		}
		if (thumbDragStartCallback != null) {
			this.__content.igScroll({ thumbDragStart: thumbDragStartCallback });;
		}
		if (thumbDragMoveCallback != null) {
			this.__content.igScroll({ thumbDragMove: thumbDragMoveCallback });;
		}
		if (thumbDragEndCallback != null) {
			this.__content.igScroll({ thumbDragEnd: thumbDragEndCallback });;
		}
		if (resizingCallback != null) {
			this.__content.igScroll({ resizing: resizingCallback });;
		}
		if (resizedCallback != null) {
			this.__content.igScroll({ resized: resizedCallback });;
		}
		this.__content.data("igScroll")._bKeyboardNavigation = false;;
	},
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::HorizontalExtent()" />*/
	horizontalExtent: function (value) {
		if (arguments.length === 1) {
			if (value != this.__horizontalExtent) {
				this.__horizontalExtent = value;
				this.__content.igScroll("option", "scrollWidth", value);;
			}
			return value;
		} else {
			return this.__horizontalExtent;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::HorizontalExtent()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::HorizontalOffset()" />*/
	horizontalOffset: function (value) {
		if (arguments.length === 1) {
			this.__content.igScroll("option", "scrollLeft", value);;
			return value;
		} else {
			return this.__content.igScroll("option", "scrollLeft");;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::HorizontalOffset()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::HorizontalScrollbarHeight()" />*/
	horizontalScrollbarHeight: function () {
		return $.ig.util.getScrollHeight();;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::HorizontalScrollbarHeight()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::VerticalExtent()" />*/
	verticalExtent: function (value) {
		if (arguments.length === 1) {
			if (value != this.__verticalExtent) {
				this.__verticalExtent = value;
				this.__content.igScroll("option", "scrollHeight", value);;
			}
			return value;
		} else {
			return this.__verticalExtent;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::VerticalExtent()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::VerticalOffset()" />*/
	verticalOffset: function (value) {
		if (arguments.length === 1) {
			this.__content.igScroll("option", "scrollTop", value);;
			return value;
		} else {
			return this.__content.igScroll("option", "scrollTop");;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::VerticalOffset()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.ScrollManager::VerticalScrollbarWidth()" />*/
	verticalScrollbarWidth: function () {
		return $.ig.util.getScrollWidth();;
	}
	/*<EndProperty Name="System.Double Infragistics.ScrollManager::VerticalScrollbarWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollManager::Dispose()" />*/
	dispose: function () {
		this.__content.data("igScroll").destroy();;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollManager::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.ScrollManager::Refresh()" />*/
	refresh: function () {
		this.__content.data("igScroll").refresh();;
	}
	/*<EndMethod Name="System.Void Infragistics.ScrollManager::Refresh()" />*/
	,
	$type: new $.ig.Type('ScrollManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.ScrollManager" />*/

/*<BeginType Name="Infragistics.Layout.GridLayout" />*/

$.ig.util.defType('GridLayout', 'Object', {
	__rowDefinitions: null,
	__columnDefinitions: null,
	__defaultRowDefinitions: null,
	__defaultColumnDefinitions: null,
	__layoutItems: null,
	__constraint: null,
	__calculationsDirty: false,
	__inCalculateItemRects: false,
	__totalRows: 0,
	__totalCols: 0,
	__colWidths: null,
	__rowHeights: null,
	__cellOrigins: null,
	init: function (constraint) {
		this.__constraint = new $.ig.Size();
		$.ig.Object.prototype.init.call(this);
		this.constraint(constraint);
		this.__defaultRowDefinitions = new $.ig.ObservableCollection$1($.ig.GridLayoutRowDefinition.prototype.$type, 0);
		this.__defaultRowDefinitions.add(new $.ig.GridLayoutRowDefinition(0, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.star)));
		this.__defaultColumnDefinitions = new $.ig.ObservableCollection$1($.ig.GridLayoutColumnDefinition.prototype.$type, 0);
		this.__defaultColumnDefinitions.add(new $.ig.GridLayoutColumnDefinition(0, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.star)));
	},
	/*<BeginProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::ColumnDefinitions()" />*/
	columnDefinitions: function () {
		if (null == this.__columnDefinitions) {
			this.__columnDefinitions = new $.ig.ObservableCollection$1($.ig.GridLayoutColumnDefinition.prototype.$type, 0);
			var $t = this.__columnDefinitions;
			$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.onRowColDefinitionsChanged.runOn(this));
		}
		return this.__columnDefinitions;
	}
	/*<EndProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::ColumnDefinitions()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Layout.GridLayout::Constraint()" />*/
	constraint: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Size.prototype.l_op_Inequality(value, this.__constraint)) {
				this.__constraint = value;
				this.dirtyCalculations(true);
			}
			return value;
		} else {
			return this.__constraint;
		}
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Layout.GridLayout::Constraint()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayout::IsLayoutDirty()" />*/
	isLayoutDirty: function () {
		return this.__calculationsDirty;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayout::IsLayoutDirty()" />*/
	,
	/*<BeginProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::LayoutItems()" />*/
	layoutItems: function () {
		if (null == this.__layoutItems) {
			this.__layoutItems = new $.ig.ObservableCollection$1($.ig.GridLayoutItem.prototype.$type, 0);
			var $t = this.__layoutItems;
			$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.onLayoutItemsChanged.runOn(this));
		}
		return this.__layoutItems;
	}
	/*<EndProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::LayoutItems()" />*/
	,
	_processLayoutUpdatedHandler: null,
	/*<BeginProperty Name="System.Action Infragistics.Layout.GridLayout::ProcessLayoutUpdatedHandler()" />*/
	processLayoutUpdatedHandler: function (value) {
		if (arguments.length === 1) {
			this._processLayoutUpdatedHandler = value;
			return value;
		} else {
			return this._processLayoutUpdatedHandler;
		}
	}
	/*<EndProperty Name="System.Action Infragistics.Layout.GridLayout::ProcessLayoutUpdatedHandler()" />*/
	,
	/*<BeginProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::ColumnDefinitionsResolved()" />*/
	columnDefinitionsResolved: function () {
		if (this.columnDefinitions().count() < 1) {
			return this.__defaultColumnDefinitions;
		} else {
			return this.columnDefinitions();
		}
	}
	/*<EndProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::ColumnDefinitionsResolved()" />*/
	,
	/*<BeginProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::RowDefinitions()" />*/
	rowDefinitions: function () {
		if (null == this.__rowDefinitions) {
			this.__rowDefinitions = new $.ig.ObservableCollection$1($.ig.GridLayoutRowDefinition.prototype.$type, 0);
			var $t = this.__rowDefinitions;
			$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.onRowColDefinitionsChanged.runOn(this));
		}
		return this.__rowDefinitions;
	}
	/*<EndProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::RowDefinitions()" />*/
	,
	/*<BeginProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::RowDefinitionsResolved()" />*/
	rowDefinitionsResolved: function () {
		if (this.rowDefinitions().count() < 1) {
			return this.__defaultRowDefinitions;
		} else {
			return this.rowDefinitions();
		}
	}
	/*<EndProperty Name="System.Collections.ObjectModel.ObservableCollection Infragistics.Layout.GridLayout::RowDefinitionsResolved()" />*/
	,
	_showGridLines: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayout::ShowGridLines()" />*/
	showGridLines: function (value) {
		if (arguments.length === 1) {
			this._showGridLines = value;
			return value;
		} else {
			return this._showGridLines;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayout::ShowGridLines()" />*/
	,
	/*<BeginMethod Name="System.Windows.Rect Infragistics.Layout.GridLayout::GetCellRect(System.Int32, System.Int32)" />*/
	getCellRect: function (row, col) {
		return new $.ig.Rect(3, this.__cellOrigins[row][col], new $.ig.Size(1, this.__colWidths[col], this.__rowHeights[row]));
	}
	/*<EndMethod Name="System.Windows.Rect Infragistics.Layout.GridLayout::GetCellRect(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRects()" />*/
	getCellRects: function () {
		var d__ = new $.ig.GridLayout___GetCellRects__IteratorClass(-2);
		d__.___4__this = this;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRects()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRectsInRow(System.Int32)" />*/
	getCellRectsInRow: function (row) {
		var d__ = new $.ig.GridLayout___GetCellRectsInRow__IteratorClass(-2);
		d__.___4__this = this;
		d__.___3__row = row;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRectsInRow(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRectsInColumn(System.Int32)" />*/
	getCellRectsInColumn: function (col) {
		var d__ = new $.ig.GridLayout___GetCellRectsInColumn__IteratorClass(-2);
		d__.___4__this = this;
		d__.___3__col = col;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Layout.GridLayout::GetCellRectsInColumn(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayout::GetGridLayoutItemFromItem(System.Object)" />*/
	getGridLayoutItemFromItem: function (item) {
		if (null == item) {
			return null;
		}
		var en = this.layoutItems().getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			if (layoutItem.item() == item) {
				return layoutItem;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayout::GetGridLayoutItemFromItem(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Windows.Rect Infragistics.Layout.GridLayout::GetCombinedRect(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	getCombinedRect: function (row, col, rowSpan, colSpan) {
		var rect = this.getCellRect(row, col);
		var left = rect.left();
		var top = rect.top();
		var width = 0;
		var height = 0;
		for (var r = row; r < row + rowSpan; r++) {
			height += this.getCellRect(r, col).height();
		}
		for (var c = col; c < col + colSpan; c++) {
			width += this.getCellRect(row, c).width();
		}
		return new $.ig.Rect(0, left, top, width, height);
	}
	/*<EndMethod Name="System.Windows.Rect Infragistics.Layout.GridLayout::GetCombinedRect(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::RecalculateGridLayoutItemRectsIfNecessary(Infragistics.Layout.GridLayout, System.Boolean)" />*/
	recalculateGridLayoutItemRectsIfNecessary: function (layout, force) {
		if (layout != null) {
			layout.recalculateGridLayoutItemRectsIfNecessary1(force);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::RecalculateGridLayoutItemRectsIfNecessary(Infragistics.Layout.GridLayout, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::RecalculateGridLayoutItemRectsIfNecessary(System.Boolean)" />*/
	recalculateGridLayoutItemRectsIfNecessary1: function (force) {
		if (force) {
			this.dirtyCalculations(true);
		}
		this.calculateItemRects();
		if (null != this.processLayoutUpdatedHandler()) {
			this.processLayoutUpdatedHandler()();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::RecalculateGridLayoutItemRectsIfNecessary(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::CreateAutoGrid(System.Windows.Size, System.Int32, System.Int32)" />*/
	createAutoGrid: function (constraint, totalRows, totalCols) {
		var gridLayout = new $.ig.GridLayout(constraint);
		for (var i = 0; i < totalRows; i++) {
			gridLayout.rowDefinitions().add(new $.ig.GridLayoutRowDefinition(0, $.ig.GridLength.prototype._auto()));
		}
		for (var i1 = 0; i1 < totalCols; i1++) {
			gridLayout.columnDefinitions().add(new $.ig.GridLayoutColumnDefinition(0, $.ig.GridLength.prototype._auto()));
		}
		return gridLayout;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::CreateAutoGrid(System.Windows.Size, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::CreateStarGrid(System.Windows.Size, System.Int32, System.Int32)" />*/
	createStarGrid: function (constraint, totalRows, totalCols) {
		var gridLayout = new $.ig.GridLayout(constraint);
		for (var i = 0; i < totalRows; i++) {
			gridLayout.rowDefinitions().add(new $.ig.GridLayoutRowDefinition(0, $.ig.GridLength.prototype._star()));
		}
		for (var i1 = 0; i1 < totalCols; i1++) {
			gridLayout.columnDefinitions().add(new $.ig.GridLayoutColumnDefinition(0, $.ig.GridLength.prototype._star()));
		}
		return gridLayout;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::CreateStarGrid(System.Windows.Size, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::Create(System.Windows.Size)" />*/
	create: function (constraint) {
		return new $.ig.GridLayout(constraint);
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::Create(System.Windows.Size)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRows()" />*/
	withRows: function (rowDefs) {
		if (this.rowDefinitions().count() > 0) {
			return this;
		}
		for (var i = 0; i < rowDefs.length; i++) {
			var rowDef = rowDefs[i];
			this.rowDefinitions().add(rowDef);
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRows()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRows()" />*/
	withRows1: function (rowHeights) {
		if (this.rowDefinitions().count() > 0) {
			return this;
		}
		for (var i = 0; i < rowHeights.length; i++) {
			var rowHeight = rowHeights[i];
			this.rowDefinitions().add(new $.ig.GridLayoutRowDefinition(0, rowHeight));
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRows()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRowMinHeights()" />*/
	withRowMinHeights: function (rowMinHeights) {
		if (rowMinHeights.length != this.rowDefinitions().count()) {
			return this;
		}
		$.ig.Utils.prototype.withHelper$1($.ig.GridLayoutRowDefinition.prototype.$type, this.rowDefinitions(), function (item, index) {
			item._minHeight(rowMinHeights[index]);
		});
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRowMinHeights()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRowMaxHeights()" />*/
	withRowMaxHeights: function (rowMaxHeights) {
		if (rowMaxHeights.length != this.rowDefinitions().count()) {
			return this;
		}
		$.ig.Utils.prototype.withHelper$1($.ig.GridLayoutRowDefinition.prototype.$type, this.rowDefinitions(), function (item, index) {
			item._maxHeight(rowMaxHeights[index]);
		});
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithRowMaxHeights()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumns()" />*/
	withColumns: function (colDefs) {
		if (this.columnDefinitions().count() > 0) {
			return this;
		}
		for (var i = 0; i < colDefs.length; i++) {
			var colDef = colDefs[i];
			this.columnDefinitions().add(colDef);
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumns()" />*/
	withColumns1: function (colWidths) {
		if (this.columnDefinitions().count() > 0) {
			return this;
		}
		for (var i = 0; i < colWidths.length; i++) {
			var columnWidth = colWidths[i];
			this.columnDefinitions().add(new $.ig.GridLayoutColumnDefinition(0, columnWidth));
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumns()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumnMinWidths()" />*/
	withColumnMinWidths: function (colMinWidths) {
		if (colMinWidths.length != this.columnDefinitions().count()) {
			return this;
		}
		$.ig.Utils.prototype.withHelper$1($.ig.GridLayoutColumnDefinition.prototype.$type, this.columnDefinitions(), function (item, index) {
			item._minWidth(colMinWidths[index]);
		});
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumnMinWidths()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumnMaxWidths()" />*/
	withColumnMaxWidths: function (colMaxWidths) {
		if (colMaxWidths.length != this.columnDefinitions().count()) {
			return this;
		}
		$.ig.Utils.prototype.withHelper$1($.ig.GridLayoutColumnDefinition.prototype.$type, this.columnDefinitions(), function (item, index) {
			item._maxWidth(colMaxWidths[index]);
		});
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayout::WithColumnMaxWidths()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyAvailableExtentToStarRowsCols(System.Double, System.Int32, , )" />*/
	applyAvailableExtentToStarRowsCols: function (availableExtent, totalRowsOrCols, extents, rowColDefinitions) {
		var shouldProcessRowCol = new Array(extents.length);
		for (var i = 0; i < totalRowsOrCols; i++) {
			var rowColDef = rowColDefinitions[i];
			shouldProcessRowCol[i] = rowColDef.length()._isStar() || (rowColDef.length()._isAuto() && $.ig.util.isNaN(extents[i]));
		}
		var GetStarCount = function (o) {
			if (o.length()._isStar()) {
				return o.length()._value();
			}
			return 1;
		};
		for (var i1 = 0; i1 < totalRowsOrCols; i1++) {
			var rowColDef1 = rowColDefinitions[i1];
			if (false == shouldProcessRowCol[i1]) {
				continue;
			}
			if ($.ig.util.isNaN(extents[i1])) {
				extents[i1] = 0;
			}
			if (availableExtent < 0) {
				continue;
			}
			var extentUsedByThisRowCol = 0;
			if (rowColDef1.hasMinExtent()) {
				extentUsedByThisRowCol = Math.min(availableExtent, rowColDef1.minExtent());
				extents[i1] += extentUsedByThisRowCol;
				availableExtent = Math.max(0, availableExtent - extentUsedByThisRowCol);
			}
		}
		if (availableExtent <= 0) {
			return {
				p2: extents
			};
		}
		var totalStars = 0;
		for (var i2 = 0; i2 < totalRowsOrCols; i2++) {
			if (shouldProcessRowCol[i2]) {
				totalStars += GetStarCount(rowColDefinitions[i2]);
			}
		}
		var starExtent = availableExtent / totalStars;
		var starsToRemove = 0;
		var totalStarsOrig = totalStars;
		while (availableExtent > 0 && totalStars > 0) {
			totalStars = Math.max(0, totalStarsOrig - starsToRemove);
			starExtent = availableExtent / totalStars;
			$.ig.Debug.prototype.assert1((totalStars == 0 && availableExtent == 0) || (totalStars > 0 && availableExtent > 0), "Unexpected layout issue assigning unused space to star rows/cols!");
			for (var i3 = 0; i3 < totalRowsOrCols; i3++) {
				var rowColDef2 = rowColDefinitions[i3];
				if (shouldProcessRowCol[i3]) {
					var starCountForThisRowCol = GetStarCount(rowColDef2);
					var extentAvailForThisRowColThisPass = starCountForThisRowCol * starExtent;
					var extentUsedByThisRowColThisPass = 0;
					var extentAlreadyAssignedToThisRowCol = extents[i3];
					if (rowColDef2.hasMaxExtent() && extentAlreadyAssignedToThisRowCol < rowColDef2.maxExtent()) {
						extentUsedByThisRowColThisPass = Math.min(extentAvailForThisRowColThisPass, rowColDef2.maxExtent());
						if ($.ig.GridLayoutUtilities.prototype.doublesAreClose((extentAlreadyAssignedToThisRowCol + extentUsedByThisRowColThisPass), rowColDef2.maxExtent())) {
							starsToRemove += starCountForThisRowCol;
						}
					} else {
						extentUsedByThisRowColThisPass = extentAvailForThisRowColThisPass;
					}
					extents[i3] += extentUsedByThisRowColThisPass;
					availableExtent = Math.max(0, availableExtent - extentUsedByThisRowColThisPass);
					totalStars = Math.max(0, totalStars - starCountForThisRowCol);
					if (totalStars > 0) {
						starExtent = availableExtent / totalStars;
					} else {
						starExtent = 0;
					}
				}
			}
		}
		return {
			p2: extents
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyAvailableExtentToStarRowsCols(System.Double, System.Int32, , )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyExtentToRowColAndUpdateAvailableExtent(Infragistics.Layout.GridLength, System.Double, System.Double)" />*/
	applyExtentToRowColAndUpdateAvailableExtent: function (extentToApply, extentToUpdate, availableExtent) {
		if (extentToApply._isAbsolute()) {
			if (availableExtent < 1) {
				extentToUpdate = 0;
			} else if (availableExtent - extentToApply._value() < 0) {
				extentToUpdate = availableExtent;
				availableExtent = 0;
			} else {
				extentToUpdate = extentToApply._value();
				availableExtent -= extentToApply._value();
			}
		} else {
			extentToUpdate = NaN;
		}
		return {
			p1: extentToUpdate,
			p2: availableExtent
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyExtentToRowColAndUpdateAvailableExtent(Infragistics.Layout.GridLength, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyMinMaxRowColWidthHeight(System.Collections.Generic.List, System.Collections.Generic.List, , )" />*/
	applyMinMaxRowColWidthHeight: function (rowDefs, colDefs, rowHeights, colWidths) {
		for (var i = 0; i < rowDefs.count(); i++) {
			var rowDef = rowDefs.__inner[i];
			if (rowDef._hasMinHeight()) {
				rowHeights[i] = Math.max(rowDef._minHeight(), rowHeights[i]);
			}
			if (rowDef._hasMaxHeight()) {
				rowHeights[i] = Math.min(rowDef._maxHeight(), rowHeights[i]);
			}
		}
		for (var i1 = 0; i1 < colDefs.count(); i1++) {
			var colDef = colDefs.__inner[i1];
			if (colDef._hasMinWidth()) {
				colWidths[i1] = Math.max(colDef._minWidth(), colWidths[i1]);
			}
			if (colDef._hasMaxWidth()) {
				colWidths[i1] = Math.min(colDef._maxWidth(), colWidths[i1]);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::ApplyMinMaxRowColWidthHeight(System.Collections.Generic.List, System.Collections.Generic.List, , )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::CalculateItemRects()" />*/
	calculateItemRects: function () {
		if (false == this.__calculationsDirty || true == this.__inCalculateItemRects) {
			return;
		}
		this.__inCalculateItemRects = true;
		var rowDefs = $.ig.Utils.prototype.toList$1($.ig.GridLayoutRowDefinition.prototype.$type, this.rowDefinitionsResolved());
		var colDefs = $.ig.Utils.prototype.toList$1($.ig.GridLayoutColumnDefinition.prototype.$type, this.columnDefinitionsResolved());
		this.__totalRows = rowDefs.count();
		this.__totalCols = colDefs.count();
		this.__colWidths = new Array(this.__totalCols);
		this.__rowHeights = new Array(this.__totalRows);
		var availableWidth = this.constraint().width();
		var availableHeight = this.constraint().height();
		this.normalizeLayoutItemValues(this.__totalRows, this.__totalCols);
		for (var i = 0; i < this.__totalRows; i++) {
			var $ret = this.applyExtentToRowColAndUpdateAvailableExtent(rowDefs.__inner[i]._height(), this.__rowHeights[i], availableHeight);
			this.__rowHeights[i] = $ret.p1;
			availableHeight = $ret.p2;
		}
		for (var i1 = 0; i1 < this.__totalCols; i1++) {
			var $ret1 = this.applyExtentToRowColAndUpdateAvailableExtent(colDefs.__inner[i1]._width(), this.__colWidths[i1], availableWidth);
			this.__colWidths[i1] = $ret1.p1;
			availableWidth = $ret1.p2;
		}
		var en = this.layoutItems().getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			if (layoutItem.hasDesiredWidth(availableWidth)) {
				var itemCol = layoutItem.gridColumnNormalized();
				if (true == colDefs.__inner[itemCol]._width()._isAuto() && layoutItem.gridColumnSpanNormalized() == 1) {
					var $ret2 = this.processRowColForAuto(itemCol, layoutItem.getDesiredWidthResolved(availableWidth), this.__colWidths, availableWidth);
					this.__colWidths = $ret2.p2;
					availableWidth = $ret2.p3;
				}
			}
			if (layoutItem.hasDesiredHeight(availableHeight)) {
				var itemRow = layoutItem.gridRowNormalized();
				if (true == rowDefs.__inner[itemRow]._height()._isAuto() && layoutItem.gridRowSpanNormalized() == 1) {
					var $ret3 = this.processRowColForAuto(itemRow, layoutItem.getDesiredHeightResolved(availableHeight), this.__rowHeights, availableHeight);
					this.__rowHeights = $ret3.p2;
					availableHeight = $ret3.p3;
				}
			}
		}
		var $ret4 = this.applyAvailableExtentToStarRowsCols(availableWidth, this.__totalCols, this.__colWidths, colDefs.toArray());
		this.__colWidths = $ret4.p2;
		var $ret5 = this.applyAvailableExtentToStarRowsCols(availableHeight, this.__totalRows, this.__rowHeights, rowDefs.toArray());
		this.__rowHeights = $ret5.p2;
		var $ret6 = this.ensureConstraintExtentUsedExactly(this.constraint().width(), this.__totalCols, this.__colWidths);
		this.__colWidths = $ret6.p2;
		var $ret7 = this.ensureConstraintExtentUsedExactly(this.constraint().height(), this.__totalRows, this.__rowHeights);
		this.__rowHeights = $ret7.p2;
		this.applyMinMaxRowColWidthHeight(rowDefs, colDefs, this.__rowHeights, this.__colWidths);
		this.__cellOrigins = this.getCellOrigins(this.__rowHeights, this.__colWidths);
		var en1 = this.layoutItems().getEnumerator();
		while (en1.moveNext()) {
			var layoutItem1 = en1.current();
			var itemRow1 = layoutItem1.gridRowNormalized();
			var itemCol1 = layoutItem1.gridColumnNormalized();
			var cellWidth = this.getSpanExtent(itemCol1, layoutItem1.gridColumnSpanNormalized(), false, this.__rowHeights, this.__colWidths);
			var cellHeight = this.getSpanExtent(itemRow1, layoutItem1.gridRowSpanNormalized(), true, this.__rowHeights, this.__colWidths);
			var itemWidth = cellWidth;
			var itemHeight = cellHeight;
			var cellOrigin = this.__cellOrigins[itemRow1][itemCol1];
			var itemOriginX = cellOrigin.__x;
			var itemOriginY = cellOrigin.__y;
			var margin = layoutItem1.margin();
			var itemRect = $.ig.Rect.prototype.empty();
			if (!$.ig.GridLayoutUtilities.prototype.thicknessIsZero(margin)) {
				if (!$.ig.GridLayoutUtilities.prototype.thicknessLeftIsZero(margin)) {
					itemOriginX = itemOriginX + margin.left();
					itemWidth = Math.max(0, itemWidth - margin.left());
				}
				if (!$.ig.GridLayoutUtilities.prototype.thicknessTopIsZero(margin)) {
					itemOriginY = itemOriginY + margin.top();
					itemHeight = Math.max(0, itemHeight - margin.top());
				}
				if (!$.ig.GridLayoutUtilities.prototype.thicknessRightIsZero(margin)) {
					itemWidth = Math.max(0, itemWidth - margin.right());
				}
				if (!$.ig.GridLayoutUtilities.prototype.thicknessBottomIsZero(margin)) {
					itemHeight = Math.max(0, itemHeight - margin.bottom());
				}
			}
			if (layoutItem1.hasDesiredWidth(itemWidth)) {
				var availableItemWidth = itemWidth;
				itemWidth = Math.min(itemWidth, layoutItem1.getDesiredWidthResolved(itemWidth));
				var hAlign = layoutItem1.horizontalAlignment() == $.ig.HorizontalAlignment.prototype.stretch ? $.ig.HorizontalAlignment.prototype.center : layoutItem1.horizontalAlignment();
				switch (hAlign) {
					case $.ig.HorizontalAlignment.prototype.left: break;
					case $.ig.HorizontalAlignment.prototype.right:
						itemOriginX += (availableItemWidth - itemWidth);
						break;
					case $.ig.HorizontalAlignment.prototype.center:
						itemOriginX += (availableItemWidth - itemWidth) / 2;
						break;
				}
			}
			if (layoutItem1.hasDesiredHeight(itemHeight)) {
				var availableItemHeight = itemHeight;
				itemHeight = Math.min(itemHeight, layoutItem1.getDesiredHeightResolved(itemHeight));
				var vAlign = layoutItem1.verticalAlignment() == $.ig.VerticalAlignment.prototype.stretch ? $.ig.VerticalAlignment.prototype.center : layoutItem1.verticalAlignment();
				switch (vAlign) {
					case $.ig.VerticalAlignment.prototype.top: break;
					case $.ig.VerticalAlignment.prototype.bottom:
						itemOriginY += (availableItemHeight - itemHeight);
						break;
					case $.ig.VerticalAlignment.prototype.center:
						itemOriginY += (availableItemHeight - itemHeight) / 2;
						break;
				}
			}
			itemRect = new $.ig.Rect(0, itemOriginX, itemOriginY, itemWidth, itemHeight);
			layoutItem1.layoutRect(itemRect);
		}
		this.dirtyCalculations(false);
		this.__inCalculateItemRects = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::CalculateItemRects()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::DirtyCalculations(System.Boolean)" />*/
	dirtyCalculations: function (dirty) {
		this.__calculationsDirty = dirty;
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::DirtyCalculations(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::EnsureConstraintExtentUsedExactly(System.Double, System.Double, )" />*/
	ensureConstraintExtentUsedExactly: function (constraintExtent, totalRowsOrCols, extents) {
		var totalExtentUsed = 0;
		for (var i = 0; i < totalRowsOrCols; i++) {
			totalExtentUsed += extents[i];
		}
		if (false == $.ig.GridLayoutUtilities.prototype.doublesAreClose(totalExtentUsed, constraintExtent)) {
		}
		return {
			p2: extents
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::EnsureConstraintExtentUsedExactly(System.Double, System.Double, )" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Layout.GridLayout::GetSpanExtent(System.Int32, System.Int32, System.Boolean, , )" />*/
	getSpanExtent: function (rowCol, rowColSpan, isRow, rowHeights, colWidths) {
		var extents = isRow ? rowHeights : colWidths;
		if (rowColSpan == 1) {
			return extents[rowCol];
		}
		var extent = 0;
		for (var i = rowCol; i < (rowCol + rowColSpan); i++) {
			extent += extents[i];
		}
		return extent;
	}
	/*<EndMethod Name="System.Double Infragistics.Layout.GridLayout::GetSpanExtent(System.Int32, System.Int32, System.Boolean, , )" />*/
	,
	/*<BeginMethod Name=" Infragistics.Layout.GridLayout::GetCellOrigins(, )" />*/
	getCellOrigins: function (rowHeights, colWidths) {
		var x = 0;
		var y = 0;
		var cellOrigins = (function () {
			var $ret = new Array($firstRank = rowHeights.length);
			var $currRet = $ret;
			for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {
				$currRet[$rankInit] = new Array(colWidths.length);
			}
			return $ret;
		}());
		for (var row = 0; row < rowHeights.length; row++) {
			x = 0;
			for (var col = 0; col < colWidths.length; col++) {
				cellOrigins[row][col] = { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				x += colWidths[col];
			}
			y += rowHeights[row];
		}
		return cellOrigins;
	}
	/*<EndMethod Name=" Infragistics.Layout.GridLayout::GetCellOrigins(, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::NormalizeLayoutItemValues(System.Int32, System.Int32)" />*/
	normalizeLayoutItemValues: function (totalRows, totalColumns) {
		var en = this.layoutItems().getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			layoutItem.normalize(totalRows, totalColumns);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::NormalizeLayoutItemValues(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::OnRowColDefinitionsChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	onRowColDefinitionsChanged: function (sender, e) {
		this.dirtyCalculations(true);
		if (e.action() == $.ig.NotifyCollectionChangedAction.prototype.add) {
			var en = e.newItems().getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				if ($.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, item) !== null) {
					var $t = (item);
					$t.propertyChanged = $.ig.Delegate.prototype.combine($t.propertyChanged, this.onRowColDefinitionPropertyChanged.runOn(this));
				}
			}
		} else if (e.action() == $.ig.NotifyCollectionChangedAction.prototype.remove || e.action() == $.ig.NotifyCollectionChangedAction.prototype.replace) {
			var en1 = e.oldItems().getEnumerator();
			while (en1.moveNext()) {
				var item1 = en1.current();
				if ($.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, item1) !== null) {
					var $t1 = (item1);
					$t1.propertyChanged = $.ig.Delegate.prototype.remove($t1.propertyChanged, this.onRowColDefinitionPropertyChanged.runOn(this));
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::OnRowColDefinitionsChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::OnLayoutItemsChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	onLayoutItemsChanged: function (sender, e) {
		this.dirtyCalculations(true);
		if (e.action() == $.ig.NotifyCollectionChangedAction.prototype.add) {
			var en = e.newItems().getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				var layoutItem = $.ig.util.cast($.ig.GridLayoutItem.prototype.$type, item);
				if (layoutItem == null) {
					$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Item type is '{0}'; expected a GridLayoutItem here.", item.getType().typeName()));
				} else {
					layoutItem.setGridLayout(this);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::OnLayoutItemsChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::OnRowColDefinitionPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	onRowColDefinitionPropertyChanged: function (sender, e) {
		this.dirtyCalculations(true);
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::OnRowColDefinitionPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout::ProcessRowColForAuto(System.Int32, System.Double, , System.Double)" />*/
	processRowColForAuto: function (rowCol, desiredExtent, extents, availableExtent) {
		var currentExtent = extents[rowCol];
		var extentUsedThisItem = 0;
		if ($.ig.util.isNaN(currentExtent)) {
			extents[rowCol] = extentUsedThisItem = desiredExtent;
		} else {
			var widthDiff = desiredExtent - currentExtent;
			if (widthDiff > 0) {
				extents[rowCol] += widthDiff;
				extentUsedThisItem = widthDiff;
			}
		}
		availableExtent = Math.max(0, availableExtent - extentUsedThisItem);
		return {
			p2: extents,
			p3: availableExtent
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout::ProcessRowColForAuto(System.Int32, System.Double, , System.Double)" />*/
	,
	$type: new $.ig.Type('GridLayout', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Layout.GridLayout" />*/

/*<BeginType Name="Infragistics.Layout.PropertyChangeNotifier" />*/

$.ig.util.defType('PropertyChangeNotifier', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Layout.PropertyChangeNotifier::OnPropertyChanged(System.String)" />*/
	_onPropertyChanged: function (propertyName) {
		var handler = this.propertyChanged;
		if (handler != null) {
			handler(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.PropertyChangeNotifier::OnPropertyChanged(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.PropertyChangeNotifier::SetField`1(Infragistics.Layout.PropertyChangeNotifier.T, Infragistics.Layout.PropertyChangeNotifier.T, System.String)" />*/
	_setField$1: function ($t, field, value, propertyName) {
		if ($.ig.EqualityComparer$1.prototype.defaultEqualityComparerValue($t).equalsC(field, value)) {
			return {
				ret: false,
				p0: field
			};
		}
		field = value;
		this._onPropertyChanged(propertyName);
		return {
			ret: true,
			p0: field
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.PropertyChangeNotifier::SetField`1(Infragistics.Layout.PropertyChangeNotifier.T, Infragistics.Layout.PropertyChangeNotifier.T, System.String)" />*/
	,
	$type: new $.ig.Type('PropertyChangeNotifier', $.ig.Object.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.PropertyChangeNotifier" />*/

/*<BeginType Name="Infragistics.Layout.IGridLayoutDefinition" />*/

$.ig.util.defType('IGridLayoutDefinition', 'Object', {
	$type: new $.ig.Type('IGridLayoutDefinition', null)
}, true);

/*<EndType Name="Infragistics.Layout.IGridLayoutDefinition" />*/

/*<BeginType Name="Infragistics.Layout.GridLayoutColumnDefinition" />*/

$.ig.util.defType('GridLayoutColumnDefinition', 'PropertyChangeNotifier', {
	___width: null,
	___maxWidth: 0,
	___minWidth: 0,
	init: function (initNumber, width) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GridLayoutColumnDefinition.prototype.init1.call(this, 1, width, NaN, NaN);
	},
	init1: function (initNumber, width, maxWidth, minWidth) {
		this.___width = new $.ig.GridLength();
		$.ig.PropertyChangeNotifier.prototype.init.call(this);
		this.___width = width;
		this.___maxWidth = maxWidth;
		if (this._hasMaxWidth()) {
			this.___maxWidth = Math.max(1, maxWidth);
		}
		this.___minWidth = minWidth;
		if (this._hasMinWidth()) {
			this.___minWidth = Math.max(1, minWidth);
		}
	},
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutColumnDefinition::Width()" />*/
	_width: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1($.ig.GridLength.prototype.$type, this.___width, value, "Width");
			this.___width = $ret.p0;
			return value;
		} else {
			return this.___width;
		}
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutColumnDefinition::Width()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MaxWidth()" />*/
	_maxWidth: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1(Number, this.___maxWidth, value, "MaxWidth");
			this.___maxWidth = $ret.p0;
			return value;
		} else {
			return this.___maxWidth;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MaxWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MinWidth()" />*/
	_minWidth: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1(Number, this.___minWidth, value, "MinWidth");
			this.___minWidth = $ret.p0;
			return value;
		} else {
			return this.___minWidth;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MinWidth()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMinWidth()" />*/
	_hasMinWidth: function () {
		return !$.ig.util.isNaN(this._minWidth());
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMinWidth()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMaxWidth()" />*/
	_hasMaxWidth: function () {
		return !$.ig.util.isNaN(this._maxWidth());
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMaxWidth()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLayoutColumnDefinition Infragistics.Layout.GridLayoutColumnDefinition::Auto()" />*/
	_auto: function () {
		return new $.ig.GridLayoutColumnDefinition(1, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.auto), NaN, NaN);
	}
	/*<EndProperty Name="Infragistics.Layout.GridLayoutColumnDefinition Infragistics.Layout.GridLayoutColumnDefinition::Auto()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLayoutColumnDefinition Infragistics.Layout.GridLayoutColumnDefinition::Star()" />*/
	_star: function () {
		return new $.ig.GridLayoutColumnDefinition(1, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.star), NaN, NaN);
	}
	/*<EndProperty Name="Infragistics.Layout.GridLayoutColumnDefinition Infragistics.Layout.GridLayoutColumnDefinition::Star()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutColumnDefinition::Length()" />*/
	length: function () {
		return this._width();
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutColumnDefinition::Length()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MinExtent()" />*/
	minExtent: function () {
		return this._minWidth();
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MinExtent()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MaxExtent()" />*/
	maxExtent: function () {
		return this._maxWidth();
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutColumnDefinition::MaxExtent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMinExtent()" />*/
	hasMinExtent: function () {
		return this._hasMinWidth();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMinExtent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMaxExtent()" />*/
	hasMaxExtent: function () {
		return this._hasMaxWidth();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutColumnDefinition::HasMaxExtent()" />*/
	,
	$type: new $.ig.Type('GridLayoutColumnDefinition', $.ig.PropertyChangeNotifier.prototype.$type, [$.ig.IGridLayoutDefinition.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.GridLayoutColumnDefinition" />*/

/*<BeginType Name="Infragistics.Layout.GridLayoutItem" />*/

$.ig.util.defType('GridLayoutItem', 'Object', {
	__gridLayout: null,
	__item: null,
	__gridRow: 0,
	__gridRowSpan: 0,
	__gridColumn: 0,
	__gridColumnSpan: 0,
	__margin: null,
	__horizontalAlignment: 0,
	__verticalAlignment: 0,
	__height: 0,
	__width: 0,
	__desiredWidthHandler: null,
	__desiredHeightHandler: null,
	init: function (initNumber, item, gridRow, gridColumn, rowSpan, columnSpan) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GridLayoutItem.prototype.init1.call(this, 1, item, gridRow, gridColumn, rowSpan, columnSpan, NaN, NaN, null, null, 3, 3);
	},
	init1: function (initNumber, item, gridRow, gridColumn, rowSpan, columnSpan, width, height, desiredWidthHandler, desiredHeightHandler, horizontalAlignment, verticalAlignment) {
		$.ig.Object.prototype.init.call(this);
		this.item(item);
		this.gridRow(gridRow);
		this.gridColumn(gridColumn);
		this.gridRowSpan(rowSpan);
		this.gridColumnSpan(columnSpan);
		this.margin($.ig.GridLayoutUtilities.prototype.emptyThickness());
		this.width(width);
		this.height(height);
		this.desiredWidthHandler(desiredWidthHandler);
		this.desiredHeightHandler(desiredHeightHandler);
		this.horizontalAlignment(horizontalAlignment);
		this.verticalAlignment(verticalAlignment);
	},
	/*<BeginProperty Name="System.Func Infragistics.Layout.GridLayoutItem::DesiredHeightHandler()" />*/
	desiredHeightHandler: function (value) {
		if (arguments.length === 1) {
			this.__desiredHeightHandler = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__desiredHeightHandler;
		}
	}
	/*<EndProperty Name="System.Func Infragistics.Layout.GridLayoutItem::DesiredHeightHandler()" />*/
	,
	/*<BeginProperty Name="System.Func Infragistics.Layout.GridLayoutItem::DesiredWidthHandler()" />*/
	desiredWidthHandler: function (value) {
		if (arguments.length === 1) {
			this.__desiredWidthHandler = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__desiredWidthHandler;
		}
	}
	/*<EndProperty Name="System.Func Infragistics.Layout.GridLayoutItem::DesiredWidthHandler()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRow()" />*/
	gridRow: function (value) {
		if (arguments.length === 1) {
			this.__gridRow = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__gridRow;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRow()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowSpan()" />*/
	gridRowSpan: function (value) {
		if (arguments.length === 1) {
			this.__gridRowSpan = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__gridRowSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowSpan()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumn()" />*/
	gridColumn: function (value) {
		if (arguments.length === 1) {
			this.__gridColumn = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__gridColumn;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumn()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnSpan()" />*/
	gridColumnSpan: function (value) {
		if (arguments.length === 1) {
			this.__gridColumnSpan = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__gridColumnSpan;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnSpan()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutItem::Height()" />*/
	height: function (value) {
		if (arguments.length === 1) {
			this.__height = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__height;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutItem::Height()" />*/
	,
	/*<BeginProperty Name="System.Windows.HorizontalAlignment Infragistics.Layout.GridLayoutItem::HorizontalAlignment()" />*/
	horizontalAlignment: function (value) {
		if (arguments.length === 1) {
			this.__horizontalAlignment = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, false);
			return value;
		} else {
			return this.__horizontalAlignment;
		}
	}
	/*<EndProperty Name="System.Windows.HorizontalAlignment Infragistics.Layout.GridLayoutItem::HorizontalAlignment()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Layout.GridLayoutItem::Item()" />*/
	item: function (value) {
		if (arguments.length === 1) {
			this.__item = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, false);
			return value;
		} else {
			return this.__item;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Layout.GridLayoutItem::Item()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Layout.GridLayoutItem::Margin()" />*/
	margin: function (value) {
		if (arguments.length === 1) {
			this.__margin = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__margin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Layout.GridLayoutItem::Margin()" />*/
	,
	/*<BeginProperty Name="System.Windows.VerticalAlignment Infragistics.Layout.GridLayoutItem::VerticalAlignment()" />*/
	verticalAlignment: function (value) {
		if (arguments.length === 1) {
			this.__verticalAlignment = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__verticalAlignment;
		}
	}
	/*<EndProperty Name="System.Windows.VerticalAlignment Infragistics.Layout.GridLayoutItem::VerticalAlignment()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutItem::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this.__width = value;
			$.ig.GridLayout.prototype.recalculateGridLayoutItemRectsIfNecessary(this.__gridLayout, true);
			return value;
		} else {
			return this.__width;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutItem::Width()" />*/
	,
	_gridRowNormalized: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowNormalized()" />*/
	gridRowNormalized: function (value) {
		if (arguments.length === 1) {
			this._gridRowNormalized = value;
			return value;
		} else {
			return this._gridRowNormalized;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowNormalized()" />*/
	,
	_gridRowSpanNormalized: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowSpanNormalized()" />*/
	gridRowSpanNormalized: function (value) {
		if (arguments.length === 1) {
			this._gridRowSpanNormalized = value;
			return value;
		} else {
			return this._gridRowSpanNormalized;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridRowSpanNormalized()" />*/
	,
	_gridColumnNormalized: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnNormalized()" />*/
	gridColumnNormalized: function (value) {
		if (arguments.length === 1) {
			this._gridColumnNormalized = value;
			return value;
		} else {
			return this._gridColumnNormalized;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnNormalized()" />*/
	,
	_gridColumnSpanNormalized: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnSpanNormalized()" />*/
	gridColumnSpanNormalized: function (value) {
		if (arguments.length === 1) {
			this._gridColumnSpanNormalized = value;
			return value;
		} else {
			return this._gridColumnSpanNormalized;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Layout.GridLayoutItem::GridColumnSpanNormalized()" />*/
	,
	_layoutRect: null,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Layout.GridLayoutItem::LayoutRect()" />*/
	layoutRect: function (value) {
		if (arguments.length === 1) {
			this._layoutRect = value;
			return value;
		} else {
			return this._layoutRect;
		}
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Layout.GridLayoutItem::LayoutRect()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayoutItem::GridLayout()" />*/
	gridLayout: function () {
		return this.__gridLayout;
	}
	/*<EndProperty Name="Infragistics.Layout.GridLayout Infragistics.Layout.GridLayoutItem::GridLayout()" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Layout.GridLayoutItem::GetDesiredHeightResolved(System.Double)" />*/
	getDesiredHeightResolved: function (availableHeight) {
		if (null != this.desiredHeightHandler()) {
			var desiredHeight = this.desiredWidthHandler()(this, availableHeight);
			if (false == $.ig.util.isNaN(desiredHeight)) {
				return desiredHeight;
			}
		}
		return $.ig.util.isNaN(this.height()) ? availableHeight : this.height();
	}
	/*<EndMethod Name="System.Double Infragistics.Layout.GridLayoutItem::GetDesiredHeightResolved(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Layout.GridLayoutItem::GetDesiredWidthResolved(System.Double)" />*/
	getDesiredWidthResolved: function (availableWidth) {
		if (null != this.desiredWidthHandler()) {
			var desiredWidth = this.desiredWidthHandler()(this, availableWidth);
			if (false == $.ig.util.isNaN(desiredWidth)) {
				return desiredWidth;
			}
		}
		return $.ig.util.isNaN(this.width()) ? availableWidth : this.width();
	}
	/*<EndMethod Name="System.Double Infragistics.Layout.GridLayoutItem::GetDesiredWidthResolved(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutItem::HasDesiredHeight(System.Double)" />*/
	hasDesiredHeight: function (availableHeight) {
		if (null != this.desiredHeightHandler() && false == $.ig.util.isNaN(this.desiredHeightHandler()(this, availableHeight))) {
			return true;
		}
		return false == $.ig.util.isNaN(this.height());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutItem::HasDesiredHeight(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutItem::HasDesiredWidth(System.Double)" />*/
	hasDesiredWidth: function (availableWidth) {
		if (null != this.desiredWidthHandler() && false == $.ig.util.isNaN(this.desiredWidthHandler()(this, availableWidth))) {
			return true;
		}
		return false == $.ig.util.isNaN(this.width());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutItem::HasDesiredWidth(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::InGridLocation(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	inGridLocation: function (gridRow, gridColumn, gridRowSpan, gridColumnSpan) {
		this.gridRow(gridRow);
		this.gridColumn(gridColumn);
		this.gridRowSpan(gridRowSpan);
		this.gridColumnSpan(gridColumnSpan);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::InGridLocation(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::CreateForItem(System.Object)" />*/
	createForItem: function (item) {
		return new $.ig.GridLayoutItem(0, item, 0, 0, 1, 1);
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::CreateForItem(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithLeftMargin(System.Double)" />*/
	withLeftMargin: function (leftMargin) {
		var oldMargin = this.margin();
		this.margin(new $.ig.Thickness(1, leftMargin, oldMargin.top(), oldMargin.right(), oldMargin.bottom()));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithLeftMargin(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithTopMargin(System.Double)" />*/
	withTopMargin: function (topMargin) {
		var oldMargin = this.margin();
		this.margin(new $.ig.Thickness(1, oldMargin.left(), topMargin, oldMargin.right(), oldMargin.bottom()));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithTopMargin(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithRightMargin(System.Double)" />*/
	withRightMargin: function (rightMargin) {
		var oldMargin = this.margin();
		this.margin(new $.ig.Thickness(1, oldMargin.left(), oldMargin.top(), rightMargin, oldMargin.bottom()));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithRightMargin(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithBottomMargin(System.Double)" />*/
	withBottomMargin: function (bottomMargin) {
		var oldMargin = this.margin();
		this.margin(new $.ig.Thickness(1, oldMargin.left(), oldMargin.top(), oldMargin.right(), bottomMargin));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithBottomMargin(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double)" />*/
	withMargins: function (uniformMargin) {
		this.margin(new $.ig.Thickness(0, uniformMargin));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double, System.Double)" />*/
	withMargins1: function (margin1, margin2) {
		this.margin(new $.ig.Thickness(1, margin1, margin2, margin1, margin2));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double, System.Double, System.Double, System.Double)" />*/
	withMargins2: function (leftMargin, topMargin, rightMargin, bottomMargin) {
		this.margin(new $.ig.Thickness(1, leftMargin, topMargin, rightMargin, bottomMargin));
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Windows.Thickness)" />*/
	withMargins3: function (margin) {
		this.margin(margin);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithMargins(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithHeight(System.Double)" />*/
	withHeight: function (height) {
		this.height(height);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithHeight(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithWidth(System.Double)" />*/
	withWidth: function (width) {
		this.width(width);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithWidth(System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithSize(System.Double, System.Double)" />*/
	withSize: function (width, height) {
		this.width(width);
		this.height(height);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithSize(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithVerticalAlignment(System.Windows.VerticalAlignment)" />*/
	withVerticalAlignment: function (verticalAlignment) {
		this.verticalAlignment(verticalAlignment);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithVerticalAlignment(System.Windows.VerticalAlignment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithHorizontalAlignment(System.Windows.HorizontalAlignment)" />*/
	withHorizontalAlignment: function (horizontalAlignment) {
		this.horizontalAlignment(horizontalAlignment);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithHorizontalAlignment(System.Windows.HorizontalAlignment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithAlignment(System.Windows.HorizontalAlignment, System.Windows.VerticalAlignment)" />*/
	withAlignment: function (horizontalAlignment, verticalAlignment) {
		this.horizontalAlignment(horizontalAlignment);
		this.verticalAlignment(verticalAlignment);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithAlignment(System.Windows.HorizontalAlignment, System.Windows.VerticalAlignment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredWidthHandler(System.Func)" />*/
	withDesiredWidthHandler: function (desiredWidthHandler) {
		this.desiredWidthHandler(desiredWidthHandler);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredWidthHandler(System.Func)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredHeightHandler(System.Func)" />*/
	withDesiredHeightHandler: function (desiredHeightHandler) {
		this.desiredHeightHandler(desiredHeightHandler);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredHeightHandler(System.Func)" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredSizeHandlers(System.Func, System.Func)" />*/
	withDesiredSizeHandlers: function (desiredWidthHandler, desiredHeightHandler) {
		this.desiredWidthHandler(desiredWidthHandler);
		this.desiredHeightHandler(desiredHeightHandler);
		return this;
	}
	/*<EndMethod Name="Infragistics.Layout.GridLayoutItem Infragistics.Layout.GridLayoutItem::WithDesiredSizeHandlers(System.Func, System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayoutItem::Normalize(System.Int32, System.Int32)" />*/
	normalize: function (totalRows, totalColumns) {
		this.gridRowNormalized(Math.min(Math.max(0, this.gridRow()), totalRows - 1));
		;
		this.gridColumnNormalized(Math.min(Math.max(0, this.gridColumn()), totalColumns - 1));
		this.gridRowSpanNormalized(Math.min(Math.max(1, this.gridRowSpan()), totalRows - this.gridRowNormalized()));
		this.gridColumnSpanNormalized(Math.min(Math.max(1, this.gridColumnSpan()), totalColumns - this.gridColumnNormalized()));
		if (false == $.ig.util.isNaN(this.height())) {
			this.height(Math.max(1, this.height()));
		}
		if (false == $.ig.util.isNaN(this.width())) {
			this.width(Math.max(1, this.width()));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayoutItem::Normalize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayoutItem::SetGridLayout(Infragistics.Layout.GridLayout)" />*/
	setGridLayout: function (gridLayout) {
		this.__gridLayout = gridLayout;
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayoutItem::SetGridLayout(Infragistics.Layout.GridLayout)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayoutItem::SetLayoutRect(System.Windows.Rect)" />*/
	setLayoutRect: function (layoutRect) {
		this.layoutRect(layoutRect);
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayoutItem::SetLayoutRect(System.Windows.Rect)" />*/
	,
	$type: new $.ig.Type('GridLayoutItem', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Layout.GridLayoutItem" />*/

/*<BeginType Name="Infragistics.Layout.GridLayoutRowDefinition" />*/

$.ig.util.defType('GridLayoutRowDefinition', 'PropertyChangeNotifier', {
	___height: null,
	___maxHeight: 0,
	___minHeight: 0,
	init: function (initNumber, height) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.GridLayoutRowDefinition.prototype.init1.call(this, 1, height, NaN, NaN);
	},
	init1: function (initNumber, height, maxHeight, minHeight) {
		this.___height = new $.ig.GridLength();
		$.ig.PropertyChangeNotifier.prototype.init.call(this);
		this.___height = height;
		this.___maxHeight = maxHeight;
		if (this._hasMaxHeight()) {
			this.___maxHeight = Math.max(1, maxHeight);
		}
		this.___minHeight = minHeight;
		if (this._hasMinHeight()) {
			this.___minHeight = Math.max(1, minHeight);
		}
	},
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutRowDefinition::Height()" />*/
	_height: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1($.ig.GridLength.prototype.$type, this.___height, value, "Height");
			this.___height = $ret.p0;
			return value;
		} else {
			return this.___height;
		}
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutRowDefinition::Height()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MaxHeight()" />*/
	_maxHeight: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1(Number, this.___maxHeight, value, "MaxHeight");
			this.___maxHeight = $ret.p0;
			return value;
		} else {
			return this.___maxHeight;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MaxHeight()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MinHeight()" />*/
	_minHeight: function (value) {
		if (arguments.length === 1) {
			var $ret = this._setField$1(Number, this.___minHeight, value, "MinHeight");
			this.___minHeight = $ret.p0;
			return value;
		} else {
			return this.___minHeight;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MinHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMinHeight()" />*/
	_hasMinHeight: function () {
		return !$.ig.util.isNaN(this._minHeight());
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMinHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMaxHeight()" />*/
	_hasMaxHeight: function () {
		return !$.ig.util.isNaN(this._maxHeight());
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMaxHeight()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLayoutRowDefinition Infragistics.Layout.GridLayoutRowDefinition::Auto()" />*/
	_auto: function () {
		return new $.ig.GridLayoutRowDefinition(1, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.auto), NaN, NaN);
	}
	/*<EndProperty Name="Infragistics.Layout.GridLayoutRowDefinition Infragistics.Layout.GridLayoutRowDefinition::Auto()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLayoutRowDefinition Infragistics.Layout.GridLayoutRowDefinition::Star()" />*/
	_star: function () {
		return new $.ig.GridLayoutRowDefinition(1, new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.star), NaN, NaN);
	}
	/*<EndProperty Name="Infragistics.Layout.GridLayoutRowDefinition Infragistics.Layout.GridLayoutRowDefinition::Star()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutRowDefinition::Length()" />*/
	length: function () {
		return this._height();
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLayoutRowDefinition::Length()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MinExtent()" />*/
	minExtent: function () {
		return this._minHeight();
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MinExtent()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MaxExtent()" />*/
	maxExtent: function () {
		return this._maxHeight();
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLayoutRowDefinition::MaxExtent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMinExtent()" />*/
	hasMinExtent: function () {
		return this._hasMinHeight();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMinExtent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMaxExtent()" />*/
	hasMaxExtent: function () {
		return this._hasMaxHeight();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLayoutRowDefinition::HasMaxExtent()" />*/
	,
	$type: new $.ig.Type('GridLayoutRowDefinition', $.ig.PropertyChangeNotifier.prototype.$type, [$.ig.IGridLayoutDefinition.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.GridLayoutRowDefinition" />*/

/*<BeginType Name="Infragistics.Layout.GridLength" />*/

$.ig.util.defType('GridLength', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	___unitValue: 0,
	___unitType: 0,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLength::IsAbsolute()" />*/
	_isAbsolute: function () {
		return this.___unitType == $.ig.GridUnitType.prototype.pixel;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLength::IsAbsolute()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLength::IsAuto()" />*/
	_isAuto: function () {
		return this.___unitType == $.ig.GridUnitType.prototype.auto;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLength::IsAuto()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Layout.GridLength::IsStar()" />*/
	_isStar: function () {
		return this.___unitType == $.ig.GridUnitType.prototype.star;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Layout.GridLength::IsStar()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Layout.GridLength::Value()" />*/
	_value: function () {
		if (this.___unitType != $.ig.GridUnitType.prototype.auto) {
			return this.___unitValue;
		}
		return 1;
	}
	/*<EndProperty Name="System.Double Infragistics.Layout.GridLength::Value()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridUnitType Infragistics.Layout.GridLength::GridUnitType()" />*/
	_gridUnitType: function () {
		return this.___unitType;
	}
	/*<EndProperty Name="Infragistics.Layout.GridUnitType Infragistics.Layout.GridLength::GridUnitType()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::Auto()" />*/
	_auto: function () {
		return $.ig.GridLength.prototype.__s_auto;
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::Auto()" />*/
	,
	/*<BeginProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::Star()" />*/
	_star: function () {
		return $.ig.GridLength.prototype.__s_star;
	}
	/*<EndProperty Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::Star()" />*/
	,
	init1: function (initNumber, pixels) {
		$.ig.GridLength.prototype.init2.call(this, 2, pixels, $.ig.GridUnitType.prototype.pixel);
	},
	init2: function (initNumber, value, type) {
		$.ig.ValueType.prototype.init.call(this);
		if ($.ig.util.isNaN(value)) {
			throw new $.ig.ArgumentException(1, "InvalidCtorParameterNoNaN");
		}
		if (Number.isInfinity(value)) {
			throw new $.ig.ArgumentException(1, "InvalidCtorParameterNoInfinity");
		}
		if (type != $.ig.GridUnitType.prototype.auto && type != $.ig.GridUnitType.prototype.pixel && type != $.ig.GridUnitType.prototype.star) {
			throw new $.ig.ArgumentException(1, "InvalidCtorParameterUnknownGridUnitType");
		}
		this.___unitValue = ((type == $.ig.GridUnitType.prototype.auto) ? 0 : value);
		this.___unitType = type;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::Equals(System.Object)" />*/
	equals1: function (oCompare) {
		if ($.ig.util.cast($.ig.GridLength.prototype.$type, oCompare) !== null) {
			var gl = oCompare;
			return $.ig.GridLength.prototype._l_op_Equality(this, gl);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::Equals(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::Equals(Infragistics.Layout.GridLength)" />*/
	equals: function (gridLength) {
		return $.ig.GridLength.prototype._l_op_Equality(this, gridLength);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::Equals(Infragistics.Layout.GridLength)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Layout.GridLength::GetHashCode()" />*/
	getHashCode: function () {
		return ($.ig.truncate(this.___unitValue) + this.___unitType);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Layout.GridLength::GetHashCode()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Layout.GridLength::ToString()" />*/
	toString: function () {
		var ci = $.ig.CultureInfo.prototype.invariantCulture();
		var gridUnitType = this._gridUnitType();
		if (gridUnitType == $.ig.GridUnitType.prototype.auto) {
			return "Auto";
		}
		if (gridUnitType != $.ig.GridUnitType.prototype.star) {
			return this._value().toString();
		}
		if (!(Math.abs(this._value() - 1) < 2.2204460492503131E-15)) {
			return this._value().toString() + "*";
		}
		return "*";
	}
	/*<EndMethod Name="System.String Infragistics.Layout.GridLength::ToString()" />*/
	,
	/*<BeginMethod Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::FromString(System.String)" />*/
	_fromString: function (s) {
		if (String.isNullOrEmpty(s) || "*" == s) {
			return $.ig.GridLength.prototype._star();
		}
		if ("auto" == s.toLowerCase()) {
			return $.ig.GridLength.prototype._auto();
		}
		var result;
		if ((function () { var $ret = $.ig.util.tryParseNumber(s, result); result = $ret.p1; return $ret.ret; }())) {
			return new $.ig.GridLength(1, result);
		}
		var index = s.indexOf("*");
		if (index > -1) {
			var ss = s.remove(index, 1);
			if ((function () { var $ret = $.ig.util.tryParseNumber(ss, result); result = $ret.p1; return $ret.ret; }())) {
				return new $.ig.GridLength(2, result, $.ig.GridUnitType.prototype.star);
			}
		}
		return $.ig.GridLength.prototype._star();
	}
	/*<EndMethod Name="Infragistics.Layout.GridLength Infragistics.Layout.GridLength::FromString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Equality(Infragistics.Layout.GridLength, Infragistics.Layout.GridLength)" />*/
	_l_op_Equality: function (gl1, gl2) {
		return gl1._gridUnitType() == gl2._gridUnitType() && gl1._value() == gl2._value();
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Equality(Infragistics.Layout.GridLength, Infragistics.Layout.GridLength)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Equality_Lifted(System.Nullable, System.Nullable)" />*/
	_l_op_Equality_Lifted: function (gl1, gl2) {
		if (!gl1.hasValue()) {
			return !gl2.hasValue();
		} else if (!gl2.hasValue()) {
			return false;
		}
		return $.ig.GridLength.prototype._l_op_Equality(gl1.value(), gl2.value());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Equality_Lifted(System.Nullable, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Inequality(Infragistics.Layout.GridLength, Infragistics.Layout.GridLength)" />*/
	_l_op_Inequality: function (gl1, gl2) {
		return gl1._gridUnitType() != gl2._gridUnitType() || gl1._value() != gl2._value();
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Inequality(Infragistics.Layout.GridLength, Infragistics.Layout.GridLength)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Inequality_Lifted(System.Nullable, System.Nullable)" />*/
	_l_op_Inequality_Lifted: function (gl1, gl2) {
		if (!gl1.hasValue()) {
			return gl2.hasValue();
		} else if (!gl2.hasValue()) {
			return true;
		}
		return $.ig.GridLength.prototype._l_op_Inequality(gl1.value(), gl2.value());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLength::L_op_Inequality_Lifted(System.Nullable, System.Nullable)" />*/
	,
	$type: new $.ig.Type('GridLength', $.ig.ValueType.prototype.$type, [$.ig.IEquatable$1.prototype.$type.specialize(-1)])
}, true);

$.ig.GridLength.prototype.$type.initSelfReferences();

/*<EndType Name="Infragistics.Layout.GridLength" />*/

/*<BeginType Name="Infragistics.Layout.GridLayoutUtilities" />*/

$.ig.util.defType('GridLayoutUtilities', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayoutUtilities::ApplyLayoutRectToFrameworkElement(System.Windows.FrameworkElement, System.Windows.Rect)" />*/
	applyLayoutRectToFrameworkElement: function (element, layoutRect) {
		if ($.ig.util.cast($.ig.Line.prototype.$type, element) !== null) {
			var line = $.ig.util.cast($.ig.Line.prototype.$type, element);
			line.x1(layoutRect.left());
			line.x2(layoutRect.right());
			line.y1(layoutRect.top());
			line.y2(layoutRect.bottom());
		} else {
			element.canvasLeft(layoutRect.left());
			element.canvasTop(layoutRect.top());
			element.width(layoutRect.width());
			element.height(layoutRect.height());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayoutUtilities::ApplyLayoutRectToFrameworkElement(System.Windows.FrameworkElement, System.Windows.Rect)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::DoublesAreClose(System.Double, System.Double)" />*/
	doublesAreClose: function (value1, value2) {
		if (value1 == value2) {
			return true;
		}
		var num = (Math.abs(value1) + Math.abs(value2) + 10) * 2.2204460492503131E-16;
		var num2 = value1 - value2;
		return -num < num2 && num > num2;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::DoublesAreClose(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Layout.GridLayoutUtilities::DoubleFromString(System.String, System.Double)" />*/
	doubleFromString: function (s, defaultValue) {
		if (false == String.isNullOrEmpty(s)) {
			var result;
			if ((function () { var $ret = $.ig.util.tryParseNumber(s, result); result = $ret.p1; return $ret.ret; }())) {
				return result;
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.Double Infragistics.Layout.GridLayoutUtilities::DoubleFromString(System.String, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::DoubleIsZero(System.Double)" />*/
	doubleIsZero: function (value) {
		return Math.abs(value) < 2.2204460492503131E-15;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::DoubleIsZero(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::CreateEmptyThickness()" />*/
	createEmptyThickness: function () {
		return new $.ig.Thickness(0, 0);
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::CreateEmptyThickness()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::EmptyThickness()" />*/
	emptyThickness: function () {
		return $.ig.GridLayoutUtilities.prototype._s_emptyThickness;
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::EmptyThickness()" />*/
	,
	/*<BeginMethod Name="System.Windows.HorizontalAlignment Infragistics.Layout.GridLayoutUtilities::HorizontalAlignmentFromString(System.String, System.Windows.HorizontalAlignment)" />*/
	horizontalAlignmentFromString: function (s, defaultValue) {
		if (false == String.isNullOrEmpty(s)) {
			switch (s) {
				case "Left": return $.ig.HorizontalAlignment.prototype.left;
				case "Center": return $.ig.HorizontalAlignment.prototype.center;
				case "Right": return $.ig.HorizontalAlignment.prototype.right;
				case "Stretch": return $.ig.HorizontalAlignment.prototype.stretch;
				default: return defaultValue;
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.Windows.HorizontalAlignment Infragistics.Layout.GridLayoutUtilities::HorizontalAlignmentFromString(System.String, System.Windows.HorizontalAlignment)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Layout.GridLayoutUtilities::IntFromString(System.String, System.Int32)" />*/
	intFromString: function (s, defaultValue) {
		if (false == String.isNullOrEmpty(s)) {
			var result;
			if ((function () { var $ret = $.ig.util.tryParseInt32_1(s, result); result = $ret.p1; return $ret.ret; }())) {
				return result;
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Layout.GridLayoutUtilities::IntFromString(System.String, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayoutUtilities::RenderLayoutItems(Infragistics.RenderingContext, System.Collections.Generic.IEnumerable)" />*/
	renderLayoutItems: function (renderingContext, layoutItems) {
		var en = layoutItems.getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			if ($.ig.util.cast($.ig.TextBlock.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderTextBlock($.ig.util.cast($.ig.TextBlock.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Line.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderLine($.ig.util.cast($.ig.Line.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Path.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderPath($.ig.util.cast($.ig.Path.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Polygon.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderPolygon($.ig.util.cast($.ig.Polygon.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Polyline.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderPolyline($.ig.util.cast($.ig.Polyline.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Rectangle.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderRectangle($.ig.util.cast($.ig.Rectangle.prototype.$type, layoutItem.item()));
			} else if ($.ig.util.cast($.ig.Geometry.prototype.$type, layoutItem.item()) !== null) {
				renderingContext.renderGeometry($.ig.util.cast($.ig.Geometry.prototype.$type, layoutItem.item()));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayoutUtilities::RenderLayoutItems(Infragistics.RenderingContext, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::ThicknessFromString(System.String)" />*/
	thicknessFromString: function (s) {
		if (String.isNullOrEmpty(s)) {
			return $.ig.GridLayoutUtilities.prototype.emptyThickness();
		}
		var segments = s.split(',');
		if (segments.length == 1 || segments.length == 2 || segments.length == 4) {
			var segmentValues = new Array(segments.length);
			for (var i = 0; i < segments.length; i++) {
				var segment = segments[i];
				if (String.isNullOrEmpty(segment)) {
					segmentValues[i] = 0;
				} else {
					var result;
					if ((function () { var $ret = $.ig.util.tryParseNumber(segment, result); result = $ret.p1; return $ret.ret; }())) {
						segmentValues[i] = result;
					} else {
						return $.ig.GridLayoutUtilities.prototype.emptyThickness();
					}
				}
			}
			if (segments.length == 1) {
				return new $.ig.Thickness(0, segmentValues[0]);
			}
			if (segments.length == 2) {
				return new $.ig.Thickness(1, segmentValues[0], segmentValues[1], segmentValues[0], segmentValues[1]);
			}
			return new $.ig.Thickness(1, segmentValues[0], segmentValues[1], segmentValues[2], segmentValues[3]);
		}
		return $.ig.GridLayoutUtilities.prototype.emptyThickness();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Layout.GridLayoutUtilities::ThicknessFromString(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessIsZero(System.Windows.Thickness)" />*/
	thicknessIsZero: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.left()) && $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.top()) && $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.right()) && $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.bottom());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessIsZero(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessLeftIsZero(System.Windows.Thickness)" />*/
	thicknessLeftIsZero: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.left());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessLeftIsZero(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessTopIsZero(System.Windows.Thickness)" />*/
	thicknessTopIsZero: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.top());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessTopIsZero(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessRightIsZero(System.Windows.Thickness)" />*/
	thicknessRightIsZero: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.right());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessRightIsZero(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessBottomIsZero(System.Windows.Thickness)" />*/
	thicknessBottomIsZero: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doubleIsZero(thickness.bottom());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessBottomIsZero(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessIsUniform(System.Windows.Thickness)" />*/
	thicknessIsUniform: function (thickness) {
		return $.ig.GridLayoutUtilities.prototype.doublesAreClose(thickness.left(), thickness.top()) && $.ig.GridLayoutUtilities.prototype.doublesAreClose(thickness.left(), thickness.right()) && $.ig.GridLayoutUtilities.prototype.doublesAreClose(thickness.left(), thickness.bottom());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayoutUtilities::ThicknessIsUniform(System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="System.Windows.VerticalAlignment Infragistics.Layout.GridLayoutUtilities::VerticalAlignmentFromString(System.String, System.Windows.VerticalAlignment)" />*/
	verticalAlignmentFromString: function (s, defaultValue) {
		if (false == String.isNullOrEmpty(s)) {
			switch (s) {
				case "Top": return $.ig.VerticalAlignment.prototype.top;
				case "Center": return $.ig.VerticalAlignment.prototype.center;
				case "Bottom": return $.ig.VerticalAlignment.prototype.bottom;
				case "Stretch": return $.ig.VerticalAlignment.prototype.stretch;
				default: return defaultValue;
			}
		}
		return defaultValue;
	}
	/*<EndMethod Name="System.Windows.VerticalAlignment Infragistics.Layout.GridLayoutUtilities::VerticalAlignmentFromString(System.String, System.Windows.VerticalAlignment)" />*/
	,
	$type: new $.ig.Type('GridLayoutUtilities', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Layout.GridLayoutUtilities" />*/

/*<BeginType Name="Infragistics.Scheduler.DateRecurrence" />*/

$.ig.scheduler.DateRecurrence = $.ig.util.defType('scheduler.DateRecurrence', 'Object', {
	___frequency: 0,
	___interval: 0,
	___count: 0,
	___until: $.ig.util.toNullable($.ig.Date.prototype.$type, null),
	___weekStart: 0,
	___rules: null,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		this.___frequency = $.ig.scheduler.DateRecurrenceFrequency.yearly;
		this.___interval = 1;
		this.___count = 0;
		this.___until = $.ig.util.toNullable($.ig.Date.prototype.$type, null);
		this.___weekStart = $.ig.DayOfWeek.prototype.monday;
		$.ig.Object.prototype.init.call(this);
	},
	_init1: function (frequency) {
		this.___frequency = $.ig.scheduler.DateRecurrenceFrequency.yearly;
		this.___interval = 1;
		this.___count = 0;
		this.___until = $.ig.util.toNullable($.ig.Date.prototype.$type, null);
		this.___weekStart = $.ig.DayOfWeek.prototype.monday;
		$.ig.Object.prototype.init.call(this);
		this.___frequency = frequency;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.DateRecurrence::Equals(System.Object)" />*/
	equals: function (obj) {
		var r = $.ig.util.cast($.ig.scheduler.DateRecurrence.prototype.$type, obj);
		return null != r && r.___count == this.___count && r.___frequency == this.___frequency && r.___interval == this.___interval && $.ig.util.nullableEquals(r.___until, this.___until) && r.___weekStart == this.___weekStart && $.ig.scheduler.RulesCollection.prototype._hasSameItems(r.___rules, this.___rules);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.DateRecurrence::Equals(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrence::GetHashCode()" />*/
	getHashCode: function () {
		return (this.___count) ^ this.___frequency.getHashCode() ^ (this.___interval) ^ this.___until.getHashCode() ^ this.___weekStart.getHashCode() ^ $.ig.RecurrenceUtils.prototype.combineHashCodes$1($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, this.___rules, null);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrence::GetHashCode()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToString()" />*/
	toString: function () {
		return $.ig.DateRecurrenceParser.prototype.toDisplayStringHelper(this, $.ig.util.toNullable($.ig.Date.prototype.$type, null), $.ig.util.toNullable($.ig.Date.prototype.$type, null), $.ig.util.toNullable($.ig.Date.prototype.$type, null));
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToString()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrence::Count()" />*/
	count: function (value) {
		if (arguments.length === 1) {
			if (this.___count != value) {
				this.___count = value;
				this.raisePropertyChangedEvent("Count");
			}
			return value;
		} else {
			return this.___count;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrence::Count()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DateRecurrence::Frequency()" />*/
	frequency: function (value) {
		if (arguments.length === 1) {
			if (this.___frequency != value) {
				this.___frequency = value;
				this.raisePropertyChangedEvent("Frequency");
			}
			return value;
		} else {
			return this.___frequency;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DateRecurrence::Frequency()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrence::Interval()" />*/
	interval: function (value) {
		if (arguments.length === 1) {
			if (this.___interval != value) {
				this.___interval = value;
				this.raisePropertyChangedEvent("Interval");
			}
			return value;
		} else {
			return this.___interval;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrence::Interval()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.RulesCollection Infragistics.Scheduler.DateRecurrence::Rules()" />*/
	rules: function () {
		if (arguments.length !== 0) {
			var $t = this.rules();
			return $_1($t.item.apply($t, arguments));
		}
		if (this.___rules == null) {
			this.___rules = new $.ig.scheduler.RulesCollection();
		}
		return this.___rules;
	}
	/*<EndProperty Name="Infragistics.Scheduler.RulesCollection Infragistics.Scheduler.DateRecurrence::Rules()" />*/
	,
	until: function (value) {
		if (arguments.length === 1) {
			arguments[0] = $.ig.util.wrapNullable($.ig.Date.prototype.$type, arguments[0]);
			this._until$i.apply(this, arguments);
			return value;
		} else {
			return $.ig.util.unwrapNullable(this._until$i.apply(this, arguments));
		}
	},
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.DateRecurrence::Until()" />*/
	_until$i: function (value) {
		if (arguments.length === 1) {
			if ($.ig.util.nullableNotEquals(this.___until, value)) {
				this.___until = value;
				this.raisePropertyChangedEvent("Until");
			}
			return value;
		} else {
			return this.___until;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.DateRecurrence::Until()" />*/
	,
	/*<BeginProperty Name="System.DayOfWeek Infragistics.Scheduler.DateRecurrence::WeekStart()" />*/
	weekStart: function (value) {
		if (arguments.length === 1) {
			if (this.___weekStart != value) {
				this.___weekStart = value;
				this.raisePropertyChangedEvent("WeekStart");
			}
			return value;
		} else {
			return this.___weekStart;
		}
	}
	/*<EndProperty Name="System.DayOfWeek Infragistics.Scheduler.DateRecurrence::WeekStart()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.DateRecurrence::HasRules()" />*/
	_hasRules: function () {
		return null != this.___rules && this.___rules.count() > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.DateRecurrence::HasRules()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::FromICalendarString(System.String)" />*/
	fromICalendarString: function (recurrence) {
		var error = null;
		var r = (function () { var $ret = $.ig.scheduler.DateRecurrence.prototype._fromICalendarString1(recurrence, error); error = $ret.p1; return $ret.ret; }());
		if (error != null) {
			throw error.exception();
		}
		return r;
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::FromICalendarString(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::FromICalendarString(System.String, Infragistics.Scheduler.Data.DateRecurrenceParseError)" />*/
	_fromICalendarString1: function (recurrence, error) {
		return {
			ret: (function () { var $ret = $.ig.DateRecurrenceParser.prototype.parse(recurrence, error); error = $ret.p1; return $ret.ret; }()),
			p1: error
		};
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::FromICalendarString(System.String, Infragistics.Scheduler.Data.DateRecurrenceParseError)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToStringWithStartDate(System.DateTime)" />*/
	toStringWithStartDate: function (startDate) {
		return $.ig.DateRecurrenceParser.prototype.toDisplayStringHelper(this, $.ig.util.toNullable($.ig.Date.prototype.$type, startDate), $.ig.util.toNullable($.ig.Date.prototype.$type, null), $.ig.util.toNullable($.ig.Date.prototype.$type, null));
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToStringWithStartDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToStringWithStartDateAndTimes(System.Nullable, System.Nullable, System.Nullable)" />*/
	toStringWithStartDateAndTimes: function (startDate, startTime, endTime) {
		startDate = $.ig.util.wrapNullable($.ig.Date.prototype.$type, startDate);
		startTime = $.ig.util.wrapNullable($.ig.Date.prototype.$type, startTime);
		endTime = $.ig.util.wrapNullable($.ig.Date.prototype.$type, endTime);
		return $.ig.DateRecurrenceParser.prototype.toDisplayStringHelper(this, startDate, startTime, endTime);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToStringWithStartDateAndTimes(System.Nullable, System.Nullable, System.Nullable)" />*/
	,
	toICalendarString: function () {
		return $_2(this._toICalendarString1.apply(this, arguments));
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToICalendarString(Infragistics.Scheduler.DateRecurrence)" />*/
	_toICalendarString1: function (recurrence) {
		var error;
		var r = (function () { var $ret = $.ig.DateRecurrenceParser.prototype.serializeToString(recurrence, error); error = $ret.p1; return $ret.ret; }());
		if (error != null) {
			throw error.exception();
		}
		return r;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToICalendarString(Infragistics.Scheduler.DateRecurrence)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToICalendarString()" />*/
	toICalendarString: function () {
		return $.ig.scheduler.DateRecurrence.prototype._toICalendarString1(this);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.DateRecurrence::ToICalendarString()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::Clone()" />*/
	_clone: function () {
		var clone = new $.ig.scheduler.DateRecurrence();
		clone.___frequency = this.___frequency;
		clone.___interval = this.___interval;
		clone.___count = this.___count;
		clone.___until = this.___until;
		clone.___weekStart = this.___weekStart;
		if (this._hasRules()) {
			var en = this.___rules.getEnumerator();
			while (en.moveNext()) {
				var rule = en.current();
				clone.rules().add(rule._clone());
			}
		}
		return clone;
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.DateRecurrence::Clone()" />*/
	,
	_propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DateRecurrence::RaisePropertyChangedEvent(System.String)" />*/
	raisePropertyChangedEvent: function (propertyName) {
		if (this._propertyChanged != null) {
			this._propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DateRecurrence::RaisePropertyChangedEvent(System.String)" />*/
	,
	$type: new $.ig.Type('scheduler.DateRecurrence', $.ig.Object.prototype.$type)
}, true);

$.ig.scheduler.DateRecurrence.fromICalendarString = $.ig.scheduler.DateRecurrence.prototype.fromICalendarString.runOn($.ig.scheduler.DateRecurrence.prototype);

$.ig.scheduler.DateRecurrence.toICalendarString = $.ig.scheduler.DateRecurrence.prototype.toICalendarString.runOn($.ig.scheduler.DateRecurrence.prototype);

/*<EndType Name="Infragistics.Scheduler.DateRecurrence" />*/

/*<BeginType Name="Infragistics.Scheduler.DateRecurrenceRuleBase" />*/

$.ig.scheduler.DateRecurrenceRuleBase = $.ig.util.defType('scheduler.DateRecurrenceRuleBase', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DateRecurrenceRuleBase::Unit()" />*/
	_unit: function () {
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DateRecurrenceRuleBase::Unit()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.DateRecurrenceRuleBase::Equals(System.Object)" />*/
	equals: function (obj) {
		var r = $.ig.util.cast($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, obj);
		if (null != r) {
			if (this._compareValue() == r._compareValue()) {
				return r.getType() == this.getType();
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.DateRecurrenceRuleBase::Equals(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::GetHashCode()" />*/
	getHashCode: function () {
		return (this._compareValue());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::GetHashCode()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DateRecurrenceRuleBase::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DateRecurrenceRuleBase::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrenceRuleBase Infragistics.Scheduler.DateRecurrenceRuleBase::Clone()" />*/
	_clone: function () {
		return this.memberwiseClone();
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrenceRuleBase Infragistics.Scheduler.DateRecurrenceRuleBase::Clone()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::CompareValue()" />*/
	_compareValue: function () {
		return -1;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::CompareValue()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DateRecurrenceRuleBase::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	_propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DateRecurrenceRuleBase::RaisePropertyChangedEvent(System.String)" />*/
	raisePropertyChangedEvent: function (propertyName) {
		if (this._propertyChanged != null) {
			this._propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DateRecurrenceRuleBase::RaisePropertyChangedEvent(System.String)" />*/
	,
	$type: new $.ig.Type('scheduler.DateRecurrenceRuleBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.DateRecurrenceRuleBase" />*/

/*<BeginType Name="Infragistics.Scheduler.RulesCollection" />*/

$.ig.scheduler.RulesCollection = $.ig.util.defType('scheduler.RulesCollection', 'ObservableCollection$1', {
	init: function () {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, 0);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.RulesCollection::InsertItem(System.Int32, Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	insertItem: function (index, item) {
		if (item == null) {
			throw new $.ig.ArgumentNullException(0, "item");
		}
		$.ig.ObservableCollection$1.prototype.insertItem.call(this, index, item);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.RulesCollection::InsertItem(System.Int32, Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.RulesCollection::SetItem(System.Int32, Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	setItem: function (index, item) {
		if (item == null) {
			throw new $.ig.ArgumentNullException(0, "item");
		}
		$.ig.ObservableCollection$1.prototype.setItem.call(this, index, item);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.RulesCollection::SetItem(System.Int32, Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.RulesCollection::HasSameItems(Infragistics.Scheduler.RulesCollection, Infragistics.Scheduler.RulesCollection)" />*/
	_hasSameItems: function (x, y) {
		if (x == null && y == null) {
			return true;
		}
		if ((x == null && y != null) || (x != null && y == null)) {
			return false;
		}
		var xCount = null != x ? x.count() : 0;
		var yCount = null != y ? y.count() : 0;
		if (xCount != yCount) {
			return false;
		}
		if (xCount == 0) {
			return true;
		}
		var hsX = new $.ig.HashSet$1($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, 1, x);
		var hsY = new $.ig.HashSet$1($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, 1, y);
		return hsX.setEquals(hsY);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.RulesCollection::HasSameItems(Infragistics.Scheduler.RulesCollection, Infragistics.Scheduler.RulesCollection)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.RulesCollection::ToArray()" />*/
	_toArray: function () {
		var array = new Array(this.count());
		this.copyTo(array, 0);
		return array;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.RulesCollection::ToArray()" />*/
	,
	/*<BeginProperty Name=" Infragistics.Scheduler.RulesCollection::SubsetRules()" />*/
	_subsetRules: function () {
		var list = null;
		var unused = null;
		var $ret = this._getRulesHelper(list, unused);
		list = $ret.p0;
		unused = $ret.p1;
		return list == null ? new Array(0) : list.toArray();
	}
	/*<EndProperty Name=" Infragistics.Scheduler.RulesCollection::SubsetRules()" />*/
	,
	/*<BeginProperty Name=" Infragistics.Scheduler.RulesCollection::NonSubsetRules()" />*/
	_nonSubsetRules: function () {
		var unused = null;
		var list = null;
		var $ret = this._getRulesHelper(unused, list);
		unused = $ret.p0;
		list = $ret.p1;
		return list == null ? new Array(0) : list.toArray();
	}
	/*<EndProperty Name=" Infragistics.Scheduler.RulesCollection::NonSubsetRules()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.RulesCollection::GetRulesHelper(System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	_getRulesHelper: function (subsetList, nonSubsetList) {
		subsetList = null;
		nonSubsetList = null;
		var en = this.getEnumerator();
		while (en.moveNext()) {
			var rule = en.current();
			var subset = $.ig.util.cast($.ig.scheduler.SubsetRecurrenceRule.prototype.$type, rule);
			if (subset != null) {
				if (subsetList == null) {
					subsetList = new $.ig.List$1($.ig.scheduler.SubsetRecurrenceRule.prototype.$type, 0);
				}
				subsetList.add(subset);
			} else {
				if (nonSubsetList == null) {
					nonSubsetList = new $.ig.List$1($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, 0);
				}
				nonSubsetList.add(rule);
			}
		}
		return {
			p0: subsetList,
			p1: nonSubsetList
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.RulesCollection::GetRulesHelper(System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	,
	$type: new $.ig.Type('scheduler.RulesCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.RulesCollection" />*/

/*<BeginType Name="Infragistics.Scheduler.MonthOfYearRecurrenceRule" />*/

$.ig.scheduler.MonthOfYearRecurrenceRule = $.ig.util.defType('scheduler.MonthOfYearRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___month: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.MonthOfYearRecurrenceRule.prototype._init1.call(this, 1);
	},
	_init1: function (month) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.MonthOfYearRecurrenceRule.prototype._validate(month);
		this.___month = month;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___month;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			if (value != this.___month) {
				$.ig.scheduler.MonthOfYearRecurrenceRule.prototype._validate(value);
				this.___month = value;
				this.raisePropertyChangedEvent("Month");
			}
			return value;
		} else {
			return this.___month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::Month()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.MonthOfYearRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.monthly;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.MonthOfYearRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (1 << 24) + this.___month;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.MonthOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.MonthOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		state.intersectMonth(this.___month);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.MonthOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.MonthOfYearRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (month) {
		if (month < 1 || month > 12) {
			throw new $.ig.ArgumentOutOfRangeException(1, "month");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.MonthOfYearRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.MonthOfYearRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.MonthOfYearRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.WeekOfYearRecurrenceRule" />*/

$.ig.scheduler.WeekOfYearRecurrenceRule = $.ig.util.defType('scheduler.WeekOfYearRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___weekNumber: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.WeekOfYearRecurrenceRule.prototype._init1.call(this, 1);
	},
	_init1: function (weekNumber) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.WeekOfYearRecurrenceRule.prototype._validate(weekNumber);
		this.___weekNumber = weekNumber;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___weekNumber;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::WeekNumber()" />*/
	weekNumber: function (value) {
		if (arguments.length === 1) {
			if (this.___weekNumber != value) {
				$.ig.scheduler.WeekOfYearRecurrenceRule.prototype._validate(value);
				this.___weekNumber = value;
				this.raisePropertyChangedEvent("WeekNumber");
			}
			return value;
		} else {
			return this.___weekNumber;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::WeekNumber()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.WeekOfYearRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.weekly;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.WeekOfYearRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (2 << 24) + this.___weekNumber;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.WeekOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.WeekOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		state.intersectWeek(this.___weekNumber);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.WeekOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.WeekOfYearRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (weekOfYear) {
		var abs = Math.abs(weekOfYear);
		if (abs < 1 || abs > 53) {
			throw new $.ig.ArgumentOutOfRangeException(1, "weekOfYear");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.WeekOfYearRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.WeekOfYearRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.WeekOfYearRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.DayOfYearRecurrenceRule" />*/

$.ig.scheduler.DayOfYearRecurrenceRule = $.ig.util.defType('scheduler.DayOfYearRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___dayOfYear: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.DayOfYearRecurrenceRule.prototype._init1.call(this, 1);
	},
	_init1: function (dayOfYear) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.DayOfYearRecurrenceRule.prototype._validate(dayOfYear);
		this.___dayOfYear = dayOfYear;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___dayOfYear;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (3 << 24) + this.___dayOfYear;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::DayOfYear()" />*/
	dayOfYear: function (value) {
		if (arguments.length === 1) {
			if (this.___dayOfYear != value) {
				$.ig.scheduler.DayOfYearRecurrenceRule.prototype._validate(value);
				this.___dayOfYear = value;
				this.raisePropertyChangedEvent("DayOfYear");
			}
			return value;
		} else {
			return this.___dayOfYear;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfYearRecurrenceRule::DayOfYear()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfYearRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.daily;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfYearRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		state.intersectDayOfYear(this.___dayOfYear);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfYearRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfYearRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (dayOfYear) {
		var abs = Math.abs(dayOfYear);
		if (abs < 1 || abs > 366) {
			throw new $.ig.ArgumentOutOfRangeException(1, "dayOfYear");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfYearRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.DayOfYearRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.DayOfYearRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.DayOfMonthRecurrenceRule" />*/

$.ig.scheduler.DayOfMonthRecurrenceRule = $.ig.util.defType('scheduler.DayOfMonthRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___dayOfMonth: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.DayOfMonthRecurrenceRule.prototype._init1.call(this, 1);
	},
	_init1: function (dayOfMonth) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.DayOfMonthRecurrenceRule.prototype._validate(dayOfMonth);
		this.___dayOfMonth = dayOfMonth;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___dayOfMonth;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::DayOfMonth()" />*/
	dayOfMonth: function (value) {
		if (arguments.length === 1) {
			if (this.___dayOfMonth != value) {
				$.ig.scheduler.DayOfMonthRecurrenceRule.prototype._validate(value);
				this.___dayOfMonth = value;
				this.raisePropertyChangedEvent("DayOfMonth");
			}
			return value;
		} else {
			return this.___dayOfMonth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::DayOfMonth()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfMonthRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.daily;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfMonthRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (4 << 24) + this.___dayOfMonth;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DayOfMonthRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfMonthRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		state.intersectDayOfMonth(this.___dayOfMonth);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfMonthRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfMonthRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (dayOfMonth) {
		var abs = Math.abs(dayOfMonth);
		if (abs < 1 || abs > 31) {
			throw new $.ig.ArgumentOutOfRangeException(1, "dayOfMonth");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfMonthRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.DayOfMonthRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.DayOfMonthRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.DayOfWeekRecurrenceRule" />*/

$.ig.scheduler.DayOfWeekRecurrenceRule = $.ig.util.defType('scheduler.DayOfWeekRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___day: 0,
	___relativePosition: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		} else if (arguments.length === 2) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.DayOfWeekRecurrenceRule.prototype._init1.call(this, $.ig.DayOfWeek.prototype.monday, 0);
	},
	_init1: function (day, relativePosition) {
		relativePosition = (relativePosition !== void 0 ? relativePosition : 0);
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.DayOfWeekRecurrenceRule.prototype._validate(relativePosition);
		this.___day = day;
		this.___relativePosition = relativePosition;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return (this.___relativePosition << 16) ^ this.___day;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.DayOfWeek Infragistics.Scheduler.DayOfWeekRecurrenceRule::Day()" />*/
	day: function (value) {
		if (arguments.length === 1) {
			if (this.___day != value) {
				this.___day = value;
				this.raisePropertyChangedEvent("Day");
			}
			return value;
		} else {
			return this.___day;
		}
	}
	/*<EndProperty Name="System.DayOfWeek Infragistics.Scheduler.DayOfWeekRecurrenceRule::Day()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::RelativePosition()" />*/
	relativePosition: function (value) {
		if (arguments.length === 1) {
			if (this.___relativePosition != value) {
				$.ig.scheduler.DayOfWeekRecurrenceRule.prototype._validate(value);
				this.___relativePosition = value;
				this.raisePropertyChangedEvent("RelativePosition");
			}
			return value;
		} else {
			return this.___relativePosition;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::RelativePosition()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfWeekRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.daily;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.DayOfWeekRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		var weekStart = null != cache ? cache.__recurrence.weekStart() : $.ig.DayOfWeek.prototype.monday;
		var day = this.___day;
		if (day < weekStart) {
			day += 7;
		}
		return (5 << 24) + day;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.DayOfWeekRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfWeekRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		state.intersectDayOfWeek(this.___day, this.___relativePosition);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfWeekRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DayOfWeekRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (relativePosition) {
		var abs = Math.abs(relativePosition);
		if (abs > 53) {
			throw new $.ig.ArgumentOutOfRangeException(1, "relativePosition");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DayOfWeekRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.DayOfWeekRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.DayOfWeekRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.HourRecurrenceRule" />*/

$.ig.util.defType('HourRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___hour: 0,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.HourRecurrenceRule.prototype.init1.call(this, 1, 0);
	},
	init1: function (initNumber, hour) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.HourRecurrenceRule.prototype._validate(hour);
		this.___hour = hour;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___hour;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::Hour()" />*/
	_hour: function (value) {
		if (arguments.length === 1) {
			if (this.___hour != value) {
				$.ig.HourRecurrenceRule.prototype._validate(value);
				this.___hour = value;
				this.raisePropertyChangedEvent("Hour");
			}
			return value;
		} else {
			return this.___hour;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::Hour()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.HourRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.hourly;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.HourRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (6 << 24) + this.___hour;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.HourRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.HourRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		if (state.__hour >= 0 && state.__hour != this.___hour) {
			state.__days.makeEmpty();
		} else {
			state.__hour = this.___hour;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.HourRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.HourRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (hour) {
		if (hour < 0 || hour > 23) {
			throw new $.ig.ArgumentOutOfRangeException(1, "hour");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.HourRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('HourRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.HourRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.MinuteRecurrenceRule" />*/

$.ig.scheduler.MinuteRecurrenceRule = $.ig.util.defType('scheduler.MinuteRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___minute: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.MinuteRecurrenceRule.prototype._init1.call(this, 0);
	},
	_init1: function (minute) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.MinuteRecurrenceRule.prototype._validate(minute);
		this.___minute = minute;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___minute;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::Minute()" />*/
	minute: function (value) {
		if (arguments.length === 1) {
			if (this.___minute != value) {
				$.ig.scheduler.MinuteRecurrenceRule.prototype._validate(value);
				this.___minute = value;
				this.raisePropertyChangedEvent("Minute");
			}
			return value;
		} else {
			return this.___minute;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::Minute()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.MinuteRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.minutely;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.MinuteRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (7 << 24) + this.___minute;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.MinuteRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.MinuteRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		if (state.__minute >= 0 && state.__minute != this.___minute) {
			state.__days.makeEmpty();
		} else {
			state.__minute = this.___minute;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.MinuteRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.MinuteRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (minute) {
		if (minute < 0 || minute > 59) {
			throw new $.ig.ArgumentOutOfRangeException(1, "minute");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.MinuteRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.MinuteRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.MinuteRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.SecondRecurrenceRule" />*/

$.ig.scheduler.SecondRecurrenceRule = $.ig.util.defType('scheduler.SecondRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___second: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.SecondRecurrenceRule.prototype._init1.call(this, 0);
	},
	_init1: function (second) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.SecondRecurrenceRule.prototype._validate(second);
		this.___second = second;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___second;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::Second()" />*/
	second: function (value) {
		if (arguments.length === 1) {
			if (this.___second != value) {
				$.ig.scheduler.SecondRecurrenceRule.prototype._validate(value);
				this.___second = value;
				this.raisePropertyChangedEvent("Second");
			}
			return value;
		} else {
			return this.___second;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::Second()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.SecondRecurrenceRule::Unit()" />*/
	_unit: function () {
		return $.ig.scheduler.DateRecurrenceFrequency.secondly;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.SecondRecurrenceRule::Unit()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (8 << 24) + this.___second;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.SecondRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.SecondRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
		if (state.__second >= 0 && state.__second != this.___second) {
			state.__days.makeEmpty();
		} else {
			state.__second = this.___second;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.SecondRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.SecondRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (second) {
		if (second < 0 || second > 59) {
			throw new $.ig.ArgumentOutOfRangeException(1, "second");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.SecondRecurrenceRule::Validate(System.Int32)" />*/
	,
	$type: new $.ig.Type('scheduler.SecondRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.SecondRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.SubsetRecurrenceRule" />*/

$.ig.scheduler.SubsetRecurrenceRule = $.ig.util.defType('scheduler.SubsetRecurrenceRule', 'scheduler.DateRecurrenceRuleBase', {
	___occurrenceInstance: 0,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.SubsetRecurrenceRule.prototype._init1.call(this, 1);
	},
	_init1: function (occurrenceInstance) {
		$.ig.scheduler.DateRecurrenceRuleBase.prototype.init.call(this);
		$.ig.scheduler.SubsetRecurrenceRule.prototype._validate(occurrenceInstance);
		this.___occurrenceInstance = occurrenceInstance;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::CompareValue()" />*/
	_compareValue: function () {
		return this.___occurrenceInstance;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::CompareValue()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::OccurrenceInstance()" />*/
	occurrenceInstance: function (value) {
		if (arguments.length === 1) {
			if (this.___occurrenceInstance != value) {
				$.ig.scheduler.SubsetRecurrenceRule.prototype._validate(value);
				this.___occurrenceInstance = value;
				this.raisePropertyChangedEvent("OccurrenceInstance");
			}
			return value;
		} else {
			return this.___occurrenceInstance;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::OccurrenceInstance()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	_getSortValue: function (cache) {
		return (9 << 24) + this.___occurrenceInstance;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.SubsetRecurrenceRule::GetSortValue(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.SubsetRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	_apply: function (state) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.SubsetRecurrenceRule::Apply(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.SubsetRecurrenceRule::Validate(System.Int32)" />*/
	_validate: function (instance) {
		var abs = Math.abs(instance);
		if (abs < 1 || abs > 366) {
			throw new $.ig.ArgumentOutOfRangeException(1, "OccurrenceInstance");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.SubsetRecurrenceRule::Validate(System.Int32)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.SubsetRecurrenceRule::Unit()" />*/
	_unit: function () {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.SubsetRecurrenceRule::Unit()" />*/
	,
	$type: new $.ig.Type('scheduler.SubsetRecurrenceRule', $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.SubsetRecurrenceRule" />*/

/*<BeginType Name="Infragistics.Scheduler.ObservableObject" />*/

$.ig.scheduler.ObservableObject = $.ig.util.defType('scheduler.ObservableObject', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ObservableObject::OnPropertyChanged(System.String)" />*/
	onPropertyChanged: function (propertyName) {
		if (this._propertyChanged != null) {
			this._propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ObservableObject::OnPropertyChanged(System.String)" />*/
	,
	_propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ObservableObject::Destroy()" />*/
	destroy: function () {
		$.ig.Debug.prototype.assert1(false, "The base class implementation of OnDestroy should never be called.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ObservableObject::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.ObservableObject', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.ObservableObject" />*/

/*<BeginType Name="Infragistics.Scheduler.DataBindableItemBase" />*/

$.ig.scheduler.DataBindableItemBase = $.ig.util.defType('scheduler.DataBindableItemBase', 'scheduler.ObservableObject', {
	init: function () {
		$.ig.scheduler.ObservableObject.prototype.init.call(this);
	},
	___dataObject: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.DataBindableItemBase::DataObject()" />*/
	dataObject: function () {
		return this.___dataObject;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.DataBindableItemBase::DataObject()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DataBindableItemBase::SetDataObject(System.Object, System.Boolean)" />*/
	_setDataObject: function (dataObject, notify) {
		this.___dataObject = dataObject;
		if (notify) {
			this.onPropertyChanged("DataObject");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DataBindableItemBase::SetDataObject(System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DataBindableItemBase Infragistics.Scheduler.DataBindableItemBase::InitializeFrom(Infragistics.Scheduler.DataBindableItemBase)" />*/
	_initializeFrom: function (source) {
		var newInstance = new $.ig.scheduler.DataBindableItemBase();
		newInstance._setDataObject(source.___dataObject, false);
		return newInstance;
	}
	/*<EndMethod Name="Infragistics.Scheduler.DataBindableItemBase Infragistics.Scheduler.DataBindableItemBase::InitializeFrom(Infragistics.Scheduler.DataBindableItemBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.DataBindableItemBase::Destroy()" />*/
	destroy: function () {
		$.ig.scheduler.ObservableObject.prototype.destroy.call(this);
		this._setDataObject(null, false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.DataBindableItemBase::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.DataBindableItemBase', $.ig.scheduler.ObservableObject.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.DataBindableItemBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.IActivityDataObject" />*/

$.ig.util.defType('IActivityDataObject', 'Object', {
	$type: new $.ig.Type('IActivityDataObject', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.IActivityDataObject" />*/

/*<BeginType Name="Infragistics.Scheduler.ActivityBase" />*/

$.ig.scheduler.ActivityBase = $.ig.util.defType('scheduler.ActivityBase', 'scheduler.DataBindableItemBase', {
	___dataSource: null,
	___id: null,
	___resourceId: null,
	___subject: null,
	___start: new Date(),
	___end: new Date(),
	___recurrence: null,
	___recurrenceRoot: null,
	___resource: null,
	___recurrenceId: null,
	___originalStart: new Date(),
	___isRemoved: false,
	___internalRecurrence: null,
	___description: null,
	___resourceVersion: 0,
	init: function () {
		this.___resourceVersion = -1;
		$.ig.scheduler.DataBindableItemBase.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			if (value != this.___id) {
				var oldValue = this.___id;
				this.___id = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__idPropertyName, oldValue, this.___id);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__idPropertyName);
			}
			return value;
		} else {
			return this.___id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::Id()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::ResourceId()" />*/
	resourceId: function (value) {
		if (arguments.length === 1) {
			if (value != this.___resourceId) {
				var oldValue = this.___resourceId;
				this.___resourceId = value;
				this.___resource = null;
				this._internalNotifyResourceChanged(oldValue, this.___resourceId);
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName, oldValue, this.___resourceId);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName);
			}
			return value;
		} else {
			if (this.___resourceId == null && this._isOccurrence()) {
				return this.recurrenceRoot().___resourceId;
			}
			return this.___resourceId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::ResourceId()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ActivityBase::Resource()" />*/
	resource: function (value) {
		if (arguments.length === 1) {
			if (value != this.___resource) {
				if (value != null) {
					if (value._dataSource() == null || value._dataSource() != this._dataSource()) {
						var message = $.ig.schedulerCore.locale.getString("LE_ActivityBase_DisassociatedResource");
						throw new $.ig.Error(1, message);
					}
				}
				var oldValue = this.___resource;
				var oldResourceId = oldValue == null ? null : oldValue.id();
				this.___resource = value;
				this.___resourceId = this.___resource.id();
				this._internalNotifyResourceChanged(oldResourceId, this.___resourceId);
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__resourcePropertyName, oldValue, this.___resource);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__resourcePropertyName);
			}
			return value;
		} else {
			if (this.___dataSource == null) {
				return null;
			}
			if (this.___resourceVersion != this.___dataSource._resourcesVersion()) {
				this.___resourceVersion = this.___dataSource._resourcesVersion();
				this.___resource = null;
			}
			if (this.___resource == null && this._isOccurrence()) {
				return this.___recurrenceRoot.resource();
			}
			if (String.isNullOrEmpty(this.___resourceId)) {
				return null;
			}
			if (this.___resource == null) {
				if (this.___dataSource != null && String.isNullOrEmpty(this.___resourceId) == false) {
					this.___resource = this.___dataSource._getResource(this.___resourceId);
				}
			}
			return this.___resource;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ActivityBase::Resource()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::Subject()" />*/
	subject: function (value) {
		if (arguments.length === 1) {
			if (value != this.___subject) {
				var oldValue = this.___subject;
				this.___subject = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__subjectPropertyName, oldValue, this.___subject);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__subjectPropertyName);
			}
			return value;
		} else {
			if (this.___subject == null && this._isOccurrence()) {
				return this.recurrenceRoot().___subject;
			}
			return this.___subject;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::Subject()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::Description()" />*/
	description: function (value) {
		if (arguments.length === 1) {
			if (value != this.___description) {
				var oldValue = this.___description;
				this.___description = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName, oldValue, this.___description);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName);
			}
			return value;
		} else {
			if (this.___description == null && this._isOccurrence()) {
				return this.recurrenceRoot().___description;
			}
			return this.___description;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::Description()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this._setStart(value, this.___end);
			return value;
		} else {
			return this.___start;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::Start()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetStart(System.DateTime, System.DateTime)" />*/
	_setStart: function (value, oldEnd) {
		if (+value != +(this.___start)) {
			if (this._onTimePropertyChangeForOccurrence(value, $.ig.scheduler.ActivityBase.prototype.__startPropertyName)) {
				return;
			}
			var oldStart = this.___start;
			this.___start = value;
			var endAdjusted = false;
			if (value > this.___end) {
				endAdjusted = true;
				this._setEnd(this.___start, oldStart);
			}
			if (endAdjusted == false) {
				this._internalNotifyTimesChanged(oldStart, oldEnd, this.___start, this.___end);
			}
			this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__startPropertyName, oldStart, this.___start);
			this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__startPropertyName);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetStart(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this._setEnd(value, this.___start);
			return value;
		} else {
			return this.___end;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::End()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetEnd(System.DateTime, System.DateTime)" />*/
	_setEnd: function (value, oldStart) {
		if (+value != +(this.___end)) {
			if (this._onTimePropertyChangeForOccurrence(value, $.ig.scheduler.ActivityBase.prototype.__endPropertyName)) {
				return;
			}
			var oldEnd = this.___end;
			this.___end = value;
			var startAdjusted = false;
			if (value < this.___start) {
				startAdjusted = true;
				this._setStart(this.___end, oldEnd);
			}
			if (startAdjusted == false) {
				this._internalNotifyTimesChanged(oldStart, oldEnd, this.___start, this.___end);
			}
			this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__endPropertyName, oldEnd, this.___end);
			this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__endPropertyName);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetEnd(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginProperty Name="System.TimeSpan Infragistics.Scheduler.ActivityBase::Duration()" />*/
	_duration: function () {
		return this.end() - this.start();
	}
	/*<EndProperty Name="System.TimeSpan Infragistics.Scheduler.ActivityBase::Duration()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::OriginalStart()" />*/
	originalStart: function (value) {
		if (arguments.length === 1) {
			if (+value != +(this.___originalStart)) {
				var oldValue = this.___originalStart;
				this.___originalStart = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName, oldValue, this.___recurrence);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName);
			}
			return value;
		} else {
			return this.___originalStart;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.ActivityBase::OriginalStart()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::Recurrence()" />*/
	recurrence: function (value) {
		if (arguments.length === 1) {
			if (value != this.___recurrence) {
				this.___internalRecurrence = null;
				this._setRecurrenceHelper(value, true);
			}
			return value;
		} else {
			return this.___recurrence;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::Recurrence()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetRecurrenceHelper(System.String, System.Boolean)" />*/
	_setRecurrenceHelper: function (value, validate) {
		if (validate) {
			var error = null;
			var $ret = $.ig.scheduler.DateRecurrence.prototype._fromICalendarString1(value, error);
			error = $ret.p1;
			if (error != null) {
				throw error.exception();
			}
		}
		var oldValue = this.___recurrence;
		this.___recurrence = value;
		this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName, oldValue, this.___recurrence);
		this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::SetRecurrenceHelper(System.String, System.Boolean)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.ActivityBase::InternalRecurrence()" />*/
	_internalRecurrence: function () {
		var $self = this;
		if (this.___internalRecurrence == null) {
			if (String.isNullOrEmpty(this.___recurrence)) {
				return null;
			}
			var unused = null;
			this.___internalRecurrence = (function () { var $ret = $.ig.scheduler.DateRecurrence.prototype._fromICalendarString1($self.___recurrence, unused); unused = $ret.p1; return $ret.ret; }());
		}
		return this.___internalRecurrence;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.ActivityBase::InternalRecurrence()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.ActivityBase::RecurrenceRoot()" />*/
	recurrenceRoot: function (value) {
		if (arguments.length === 1) {
			if (value != this.___recurrenceRoot) {
				this.___recurrenceId = null;
				var oldValue = this.___recurrenceRoot;
				this.___recurrenceRoot = value;
				if (this.___recurrenceRoot != null) {
					this.___recurrenceId = this.___recurrenceRoot.id();
				}
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrenceRootPropertyName, oldValue, this.___recurrenceRoot);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrenceRootPropertyName);
			}
			return value;
		} else {
			if (this.___recurrenceRoot == null) {
				if (this.___dataSource == null || String.isNullOrEmpty(this.___recurrenceId)) {
					return null;
				}
				this.___recurrenceRoot = this.___dataSource._getRecurrenceRoot(this.___recurrenceId);
			}
			return this.___recurrenceRoot;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.ActivityBase::RecurrenceRoot()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ActivityBase::RecurrenceId()" />*/
	recurrenceId: function (value) {
		if (arguments.length === 1) {
			if (value != this.___recurrenceId) {
				var oldValue = this.___recurrenceId;
				this.___recurrenceId = value;
				this.___recurrence = null;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName, oldValue, this.___recurrenceId);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName);
			}
			return value;
		} else {
			return this.___recurrenceId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ActivityBase::RecurrenceId()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsRecurrenceRoot()" />*/
	isRecurrenceRoot: function () {
		return String.isNullOrEmpty(this.recurrence()) == false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsRecurrenceRoot()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsNonModifiedOccurrence()" />*/
	_isNonModifiedOccurrence: function () {
		if (this._isVarianceCreationPending()) {
			return false;
		}
		if (this.___dataSource == null) {
			return false;
		}
		if (this.___recurrenceRoot == null) {
			return false;
		}
		return this.dataObject() == null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsNonModifiedOccurrence()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsOccurrence()" />*/
	_isOccurrence: function () {
		return this.___dataSource != null && this.___recurrenceRoot != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsOccurrence()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsVariance()" />*/
	_isVariance: function () {
		if (this._isVarianceCreationPending()) {
			return true;
		}
		if (this.___dataSource == null) {
			return false;
		}
		if (this.___recurrenceRoot == null) {
			return false;
		}
		return this.dataObject() != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsVariance()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsRemoved()" />*/
	isRemoved: function (value) {
		if (arguments.length === 1) {
			if (value != this.___isRemoved) {
				var oldValue = this.___isRemoved;
				this.___isRemoved = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName, oldValue, this.___isRemoved);
				this.onPropertyChanged($.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName);
			}
			return value;
		} else {
			if (this._isNonModifiedOccurrence()) {
				return false;
			}
			return this.___isRemoved;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsRemoved()" />*/
	,
	__isVarianceCreationPending: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsVarianceCreationPending()" />*/
	_isVarianceCreationPending: function (value) {
		if (arguments.length === 1) {
			this.__isVarianceCreationPending = value;
			return value;
		} else {
			return this.__isVarianceCreationPending;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.ActivityBase::IsVarianceCreationPending()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.ActivityBase::DataSource()" />*/
	_dataSource: function () {
		return this.___dataSource;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.ActivityBase::DataSource()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.ActivityBase::BackgroundBrush()" />*/
	_backgroundBrush: function () {
		if (this.___dataSource == null) {
			return null;
		}
		return this.___dataSource._colorSchemeManager().getBackgroundBrush1(this.resource());
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.ActivityBase::BackgroundBrush()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.ActivityBase::TextBrush()" />*/
	_textBrush: function () {
		if (this.___dataSource == null) {
			return null;
		}
		return this.___dataSource._colorSchemeManager().getTextBrush(this.resource());
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.ActivityBase::TextBrush()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.ActivityBase::OnTimePropertyChangeForOccurrence(System.DateTime, System.String)" />*/
	_onTimePropertyChangeForOccurrence: function (value, propertyName) {
		if (this._isNonModifiedOccurrence() == false) {
			return false;
		}
		var oldValue = value;
		switch (propertyName) {
			case $.ig.scheduler.ActivityBase.prototype.__startPropertyName:
				oldValue = this.___start;
				this.___start = value;
				if (this.___end < value) {
					this.___end = value;
				}
				break;
			case $.ig.scheduler.ActivityBase.prototype.__endPropertyName:
				oldValue = this.___end;
				this.___end = value;
				if (this.___start > value) {
					this.___start = value;
				}
				break;
		}
		this._internalNotifyPropertyChanged(propertyName, oldValue, value);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.ActivityBase::OnTimePropertyChangeForOccurrence(System.DateTime, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyTimesChanged(System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	_internalNotifyTimesChanged: function (oldStart, oldEnd, newStart, newEnd) {
		if (this._dataSource() != null) {
			this._dataSource()._onActivityTimesChanged(this, oldStart, oldEnd, newStart, newEnd);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyTimesChanged(System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyResourceChanged(System.String, System.String)" />*/
	_internalNotifyResourceChanged: function (oldResourceId, newResourceId) {
		if (this._dataSource() != null) {
			this._dataSource()._onActivityResourceChanged(this, oldResourceId, newResourceId);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyResourceChanged(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyPropertyChanged(System.String, System.Object, System.Object)" />*/
	_internalNotifyPropertyChanged: function (propertyName, oldValue, newValue) {
		$.ig.Debug.prototype.assert1(false, "Base class implementation does nothing.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InternalNotifyPropertyChanged(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::OnPropertyChanged(System.String)" />*/
	onPropertyChanged: function (propertyName) {
		$.ig.scheduler.DataBindableItemBase.prototype.onPropertyChanged.call(this, propertyName);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::OnPropertyChanged(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitDataSource(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	_initDataSource: function (value) {
		this.___dataSource = value;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitDataSource(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.ActivityBase::GetPropertyValue(Infragistics.Scheduler.ActivityBase, System.String)" />*/
	_getPropertyValue: function (activity, propertyName) {
		var val = null;
		switch (propertyName) {
			case $.ig.scheduler.ActivityBase.prototype.__idPropertyName:
				val = activity.___id;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__startPropertyName:
				val = activity.___start;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__endPropertyName:
				val = activity.___end;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__subjectPropertyName:
				val = activity.___subject;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName:
				val = activity.___description;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName:
				val = activity.___recurrence;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__recurrenceRootPropertyName:
				val = activity.___recurrenceRoot;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName:
				val = activity.___resourceId;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__resourcePropertyName:
				val = activity.___resource;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName:
				val = activity.___recurrenceId;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName:
				val = activity.___originalStart;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName:
				val = activity.___isRemoved;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat1("Unrecognized ActivityBase property '{0}'.", []));
				break;
		}
		return val;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.ActivityBase::GetPropertyValue(Infragistics.Scheduler.ActivityBase, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.Boolean)" />*/
	_initializePropertyValue: function (propName, value) {
		switch (propName) {
			case $.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName:
				this.___isRemoved = value;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("The specified property '{0}' is expected to return a bool.", propName));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.DateTime)" />*/
	_initializePropertyValue1: function (propName, value) {
		switch (propName) {
			case $.ig.scheduler.ActivityBase.prototype.__startPropertyName:
				this.___start = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__endPropertyName:
				this.___end = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName:
				this.___originalStart = value;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("The specified property '{0}' is expected to return a Date.", propName));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.String)" />*/
	_initializePropertyValue2: function (propName, value) {
		switch (propName) {
			case $.ig.scheduler.ActivityBase.prototype.__idPropertyName:
				this.___id = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName:
				this.___resourceId = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName:
				this.___recurrenceId = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__subjectPropertyName:
				this.___subject = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName:
				this.___description = value;
				break;
			case $.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName:
				this.___recurrence = value;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("The specified property '{0}' is expected to return a string.", propName));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializePropertyValue(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializeFrom(Infragistics.Scheduler.ActivityBase)" />*/
	_initializeFrom1: function (activity) {
		$.ig.scheduler.DataBindableItemBase.prototype._initializeFrom.call(this, activity);
		this.id(activity.___id);
		this.resourceId(activity.___resourceId);
		this.start(activity.___start);
		this.end(activity.___end);
		this.subject(activity.___subject);
		this.___recurrence = activity.___recurrence;
		this.___recurrenceRoot = activity.___recurrenceRoot;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::InitializeFrom(Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.ActivityBase::Clone()" />*/
	_clone: function () {
		var newInstance = new $.ig.scheduler.ActivityBase();
		newInstance._initializeFrom1(this);
		return newInstance;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.ActivityBase::Clone()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.ActivityBase::GetIntersectingDates()" />*/
	_getIntersectingDates: function () {
		var list = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		var start = $.ig.Date.prototype.getDate(this.start());
		var end = $.ig.DateUtils.prototype.adjustEndForRangeComparison1(start, this.end());
		var date = start;
		list.add(date);
		date = $.ig.Date.prototype.addDays(date, 1);
		while (date <= end) {
			list.add(date);
			date = $.ig.Date.prototype.addDays(date, 1);
			if (date > end) {
				break;
			}
		}
		return list;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.ActivityBase::GetIntersectingDates()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ActivityBase::Destroy()" />*/
	destroy: function () {
		$.ig.scheduler.DataBindableItemBase.prototype.destroy.call(this);
		this._initDataSource(null);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ActivityBase::Destroy()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.ActivityBase::Infragistics.Scheduler.Data.IActivityDataObject.DataObject()" />*/
	dataObjectInternal: function () {
		return this;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.ActivityBase::Infragistics.Scheduler.Data.IActivityDataObject.DataObject()" />*/
	,
	$type: new $.ig.Type('scheduler.ActivityBase', $.ig.scheduler.DataBindableItemBase.prototype.$type, [$.ig.IActivityDataObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.ActivityBase" />*/

/*<BeginType Name="Infragistics.Scheduler.ActivitySortComparer" />*/

$.ig.util.defType('ActivitySortComparer', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Func Infragistics.Scheduler.ActivitySortComparer::GetComparer()" />*/
	_getComparer: function () {
		var comparer = new $.ig.ActivitySortComparer();
		return comparer._compare.runOn(comparer);
	}
	/*<EndMethod Name="System.Func Infragistics.Scheduler.ActivitySortComparer::GetComparer()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.ActivitySortComparer::Compare(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase)" />*/
	_compare: function (x, y) {
		if (x == null || y == null) {
			return 0;
		}
		var startX = x.start();
		var startY = y.start();
		if (startX < startY) {
			return -1;
		} else if (startX > startY) {
			return 1;
		}
		var durationX = x.end() - startX;
		var durationY = y.end() - startY;
		if (durationX > durationY) {
			return -1;
		} else if (durationX < durationY) {
			return 1;
		}
		return $.ig.util.compare(x.subject(), y.subject());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.ActivitySortComparer::Compare(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.ActivitySortComparer::System.Collections.Generic.IComparer<Infragistics.Scheduler.ActivityBase>.Compare(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase)" />*/
	compare: function (x, y) {
		return this._compare(x, y);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.ActivitySortComparer::System.Collections.Generic.IComparer<Infragistics.Scheduler.ActivityBase>.Compare(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase)" />*/
	,
	$type: new $.ig.Type('ActivitySortComparer', $.ig.Object.prototype.$type, [$.ig.IComparer$1.prototype.$type.specialize($.ig.scheduler.ActivityBase.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.ActivitySortComparer" />*/

/*<BeginType Name="Infragistics.Scheduler.Appointment" />*/

$.ig.scheduler.Appointment = $.ig.util.defType('scheduler.Appointment', 'scheduler.ActivityBase', {
	___location: null,
	init: function () {
		$.ig.scheduler.ActivityBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Appointment::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat1("Start: {0}, End: {1}, Subject: {2}, Location: {3}", [ this.start(), this.end(), this.subject(), this.location() ]);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Appointment::ToString()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Appointment::Location()" />*/
	location: function (value) {
		if (arguments.length === 1) {
			if (value != this.___location) {
				var oldValue = this.___location;
				this.___location = value;
				this._internalNotifyPropertyChanged1($.ig.scheduler.AppointmentProperty.location, oldValue, this.___location);
				this.onPropertyChanged($.ig.scheduler.AppointmentProperty.prototype.$getName($.ig.scheduler.AppointmentProperty.location));
			}
			return value;
		} else {
			if (this.___location == null && this._isOccurrence()) {
				return this._recurrenceRootAsAppointment().___location;
			}
			return this.___location;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Appointment::Location()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Appointment::RecurrenceRootAsAppointment()" />*/
	_recurrenceRootAsAppointment: function () {
		var root = this.recurrenceRoot();
		return root == null ? null : $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, root);
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Appointment::RecurrenceRootAsAppointment()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::InternalNotifyPropertyChanged(System.String, System.Object, System.Object)" />*/
	_internalNotifyPropertyChanged: function (propertyName, oldValue, newValue) {
		var propId = $.ig.Utils.prototype.parseAppointmentProperty(propertyName);
		this._internalNotifyPropertyChanged1(propId, oldValue, newValue);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::InternalNotifyPropertyChanged(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::InternalNotifyPropertyChanged(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	_internalNotifyPropertyChanged1: function (propId, oldValue, newValue) {
		if (this._causesVarianceCreation(propId)) {
			this._createVariance();
		}
		if (this._dataSource() != null) {
			this._dataSource().onAppointmentPropertyChanged(this, propId, oldValue, newValue);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::InternalNotifyPropertyChanged(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Appointment::CausesVarianceCreation(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_causesVarianceCreation: function (property) {
		if (this.isRecurrenceRoot()) {
			return false;
		}
		return property != $.ig.scheduler.AppointmentProperty.isRemoved;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Appointment::CausesVarianceCreation(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::CreateVariance()" />*/
	_createVariance: function () {
		var $self = this;
		if (this._isNonModifiedOccurrence() == false) {
			return;
		}
		this._isVarianceCreationPending(true);
		this._dataSource().beginEdit(this, null);
		var result = this._dataSource().endEdit(this, false);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			this._onVarianceTransitionComplete(result.error());
		} else {
			var onCompleted = function (sender, e) {
				$self._onVarianceTransitionComplete(result.error());
			};
			result._completed = $.ig.Delegate.prototype.combine(result._completed, onCompleted);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::CreateVariance()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::OnVarianceTransitionComplete(Infragistics.Scheduler.Data.DataError)" />*/
	_onVarianceTransitionComplete: function (error) {
		this._isVarianceCreationPending(false);
		if (error != null) {
			throw error.exception();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::OnVarianceTransitionComplete(Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Appointment::IsSameAs(Infragistics.Scheduler.Appointment)" />*/
	isSameAs: function (appointment) {
		if (appointment == null) {
			return false;
		}
		if (appointment._isNonModifiedOccurrence() && this._isNonModifiedOccurrence() && appointment.recurrenceRoot() == this.recurrenceRoot() && +(appointment.originalStart()) == +(this.originalStart())) {
			return true;
		}
		return this == appointment;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Appointment::IsSameAs(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::OnPropertyChanged(System.String)" />*/
	onPropertyChanged: function (propertyName) {
		$.ig.scheduler.ActivityBase.prototype.onPropertyChanged.call(this, propertyName);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::OnPropertyChanged(System.String)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Appointment::GetPropertyValue(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_getPropertyValue2: function (propId) {
		return $.ig.scheduler.Appointment.prototype._getPropertyValue1(this, propId);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Appointment::GetPropertyValue(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Appointment::GetPropertyValue(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_getPropertyValue1: function (appointment, propId) {
		var val = null;
		switch (propId) {
			case $.ig.scheduler.AppointmentProperty.id:
			case $.ig.scheduler.AppointmentProperty.start:
			case $.ig.scheduler.AppointmentProperty.end:
			case $.ig.scheduler.AppointmentProperty.subject:
			case $.ig.scheduler.AppointmentProperty.description:
			case $.ig.scheduler.AppointmentProperty.recurrence:
			case $.ig.scheduler.AppointmentProperty.recurrenceRoot:
			case $.ig.scheduler.AppointmentProperty.resource:
			case $.ig.scheduler.AppointmentProperty.resourceId:
			case $.ig.scheduler.AppointmentProperty.recurrenceId:
			case $.ig.scheduler.AppointmentProperty.originalStart:
			case $.ig.scheduler.AppointmentProperty.isRemoved:
				var propName = $.ig.scheduler.AppointmentProperty.prototype.$getName(propId);
				val = $.ig.scheduler.ActivityBase.prototype._getPropertyValue(appointment, propName);
				break;
			case $.ig.scheduler.AppointmentProperty.location:
				val = appointment.___location;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat1("Unrecognized Appointment property '{0}'.", []));
				break;
		}
		return val;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Appointment::GetPropertyValue(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Appointment::SetPropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Exception)" />*/
	_setPropertyValue1: function (propId, value, exception) {
		var $self = this;
		return {
			ret: (function () { var $ret = $.ig.scheduler.Appointment.prototype._setPropertyValue($self, propId, value, exception); exception = $ret.p3; return $ret.ret; }()),
			p2: exception
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Appointment::SetPropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Appointment::SetPropertyValue(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Exception)" />*/
	_setPropertyValue: function (appointment, propId, value, exception) {
		exception = null;
		try {
			switch (propId) {
				case $.ig.scheduler.AppointmentProperty.id:
					appointment.id(value);
					break;
				case $.ig.scheduler.AppointmentProperty.start:
					appointment.start(value);
					break;
				case $.ig.scheduler.AppointmentProperty.end:
					appointment.end(value);
					break;
				case $.ig.scheduler.AppointmentProperty.subject:
					appointment.subject(value);
					break;
				case $.ig.scheduler.AppointmentProperty.location:
					appointment.location(value);
					break;
				case $.ig.scheduler.AppointmentProperty.description:
					appointment.description(value);
					break;
				case $.ig.scheduler.AppointmentProperty.recurrence:
					appointment.recurrence(value);
					break;
				case $.ig.scheduler.AppointmentProperty.recurrenceRoot:
					appointment.recurrenceRoot(value);
					break;
				case $.ig.scheduler.AppointmentProperty.resourceId:
					appointment.resourceId(value);
					break;
				default:
					$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized Appointment property '{0}'.", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
					break;
			}
		}
		catch (ex) {
			exception = ex;
		}
		return {
			ret: exception == null,
			p3: exception
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Appointment::SetPropertyValue(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializePropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.DateTime)" />*/
	_initializePropertyValue3: function (propId, value) {
		switch (propId) {
			case $.ig.scheduler.AppointmentProperty.start:
			case $.ig.scheduler.AppointmentProperty.end:
			case $.ig.scheduler.AppointmentProperty.originalStart:
				var propName = $.ig.scheduler.AppointmentProperty.prototype.$getName(propId);
				$.ig.scheduler.ActivityBase.prototype._initializePropertyValue1.call(this, propName, value);
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("The specified property '{0}' is expected to return a Date.", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializePropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializePropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.String)" />*/
	_initializePropertyValue4: function (propId, value) {
		switch (propId) {
			case $.ig.scheduler.AppointmentProperty.id:
			case $.ig.scheduler.AppointmentProperty.resourceId:
			case $.ig.scheduler.AppointmentProperty.recurrence:
			case $.ig.scheduler.AppointmentProperty.recurrenceId:
			case $.ig.scheduler.AppointmentProperty.subject:
			case $.ig.scheduler.AppointmentProperty.description:
				var propName = $.ig.scheduler.AppointmentProperty.prototype.$getName(propId);
				$.ig.scheduler.ActivityBase.prototype._initializePropertyValue2.call(this, propName, value);
				break;
			case $.ig.scheduler.AppointmentProperty.location:
				this.___location = value;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("The specified property '{0}' is expected to return a string.", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializePropertyValue(Infragistics.Scheduler.Data.AppointmentProperty, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializeFrom(Infragistics.Scheduler.Appointment)" />*/
	_initializeFrom2: function (source) {
		$.ig.scheduler.ActivityBase.prototype._initializeFrom1.call(this, source);
		this.location(source.___location);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::InitializeFrom(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Appointment::Clone()" />*/
	_clone: function () {
		var newInstance = new $.ig.scheduler.Appointment();
		newInstance._initializeFrom2(this);
		return newInstance;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Appointment::Clone()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Appointment::CreateOccurrence(Infragistics.Scheduler.Appointment, System.DateTime)" />*/
	_createOccurrence: function (recurrenceRoot, originalStart) {
		var dataSource = recurrenceRoot != null ? recurrenceRoot._dataSource() : null;
		return dataSource == null ? null : dataSource._getAppointmentOccurrence(recurrenceRoot, originalStart);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Appointment::CreateOccurrence(Infragistics.Scheduler.Appointment, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Appointment::Destroy()" />*/
	destroy: function () {
		$.ig.scheduler.ActivityBase.prototype.destroy.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Appointment::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.Appointment', $.ig.scheduler.ActivityBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Appointment" />*/

/*<BeginType Name="Infragistics.Scheduler.ScheduleResource" />*/

$.ig.scheduler.ScheduleResource = $.ig.util.defType('scheduler.ScheduleResource', 'scheduler.DataBindableItemBase', {
	___id: null,
	___displayName: null,
	___colorScheme: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
	___dataSource: null,
	init: function () {
		var initNumber;
		if (arguments.length === 0) {
			initNumber = 0;
		} else if (arguments.length === 1) {
			initNumber = 1;
		} else if (arguments.length === 2) {
			initNumber = 1;
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this._init1.apply(this, arguments);
					break;
				default: throw new Error('Invalid arguments');
			}
			return;
		}
		$.ig.scheduler.ScheduleResource.prototype._init1.call(this, $.ig.Guid.prototype.newGuid().toString(), null);
	},
	_init1: function (id, displayName) {
		displayName = (displayName !== void 0 ? displayName : null);
		$.ig.scheduler.DataBindableItemBase.prototype.init.call(this);
		if (String.isNullOrEmpty(id)) {
			throw new $.ig.ArgumentNullException(0, "id");
		}
		this.___id = id;
		this.___displayName = displayName;
	},
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.ScheduleResource::BaseColor()" />*/
	_baseColor: function () {
		var colorSchemeManager = this.___dataSource == null ? null : this.___dataSource._colorSchemeManager();
		if (colorSchemeManager == null) {
			return $.ig.util.toNullable($.ig.Color.prototype.$type, null);
		}
		var brush = colorSchemeManager.getBackgroundBrush1(this);
		if (brush != null) {
			return $.ig.util.toNullable($.ig.Color.prototype.$type, brush.color());
		}
		return $.ig.util.toNullable($.ig.Color.prototype.$type, null);
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.ScheduleResource::BaseColor()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.ScheduleResource::DataSource()" />*/
	_dataSource: function () {
		return this.___dataSource;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.ScheduleResource::DataSource()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ScheduleResource::Id()" />*/
	id: function (value) {
		if (arguments.length === 1) {
			if (value != this.___id) {
				this.___id = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ScheduleResourceProperty.id, $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, null));
				this.onPropertyChanged($.ig.scheduler.ScheduleResource.prototype._idProperty);
			}
			return value;
		} else {
			return this.___id;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ScheduleResource::Id()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.ScheduleResource::DisplayName()" />*/
	displayName: function (value) {
		if (arguments.length === 1) {
			if (value != this.___displayName) {
				this.___displayName = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ScheduleResourceProperty.displayName, $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, null));
				this.onPropertyChanged($.ig.scheduler.ScheduleResource.prototype._displayNameProperty);
			}
			return value;
		} else {
			return String.isNullOrEmpty(this.___displayName) ? this.id() : this.___displayName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.ScheduleResource::DisplayName()" />*/
	,
	colorScheme: function (value) {
		if (arguments.length === 1) {
			arguments[0] = $.ig.util.wrapNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, arguments[0]);
			this._colorScheme$i.apply(this, arguments);
			return value;
		} else {
			return $_0($.ig.util.unwrapNullable(this._colorScheme$i.apply(this, arguments)));
		}
	},
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.ScheduleResource::ColorScheme()" />*/
	_colorScheme$i: function (value) {
		if (arguments.length === 1) {
			if ($.ig.util.nullableNotEquals(value, this.___colorScheme)) {
				this.___colorScheme = value;
				this._internalNotifyPropertyChanged($.ig.scheduler.ScheduleResourceProperty.colorScheme, $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, null));
				this.onPropertyChanged($.ig.scheduler.ScheduleResource.prototype._colorSchemeProperty);
			}
			return value;
		} else {
			return this.___colorScheme;
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.ScheduleResource::ColorScheme()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InitDataSource(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	_initDataSource: function (dataSource) {
		this.___dataSource = dataSource;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InitDataSource(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InternalNotifyPropertyChanged(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	_internalNotifyPropertyChanged: function (property, dayOfWeek) {
		if (this.___dataSource != null) {
			this.___dataSource._internalOnResourcePropertyChanged(this, property, dayOfWeek);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InternalNotifyPropertyChanged(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.ScheduleResource::GetPropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	_getPropertyValue: function (propId) {
		return $.ig.scheduler.ScheduleResource.prototype._getPropertyValue1(this, propId);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.ScheduleResource::GetPropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.ScheduleResource::GetPropertyValue(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	_getPropertyValue1: function (resource, propId) {
		var val = null;
		switch (propId) {
			case $.ig.scheduler.ScheduleResourceProperty.id:
				val = resource.___id;
				break;
			case $.ig.scheduler.ScheduleResourceProperty.displayName:
				val = resource.___displayName;
				break;
			case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
				val = $.ig.util.unwrapNullable(resource.___colorScheme);
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat1("Unrecognized ScheduleResource property '{0}'.", []));
				break;
		}
		return val;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.ScheduleResource::GetPropertyValue(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::SetPropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Exception)" />*/
	_setPropertyValue: function (propId, value, exception) {
		var $self = this;
		return {
			ret: (function () { var $ret = $.ig.scheduler.ScheduleResource.prototype._setPropertyValue1($self, propId, value, exception); exception = $ret.p3; return $ret.ret; }()),
			p2: exception
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::SetPropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::SetPropertyValue(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Exception)" />*/
	_setPropertyValue1: function (resource, propId, value, exception) {
		exception = null;
		try {
			switch (propId) {
				case $.ig.scheduler.ScheduleResourceProperty.id:
					resource.id(value);
					break;
				case $.ig.scheduler.ScheduleResourceProperty.displayName:
					resource.displayName(value);
					break;
				case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
					resource._colorScheme$i((function () { var $ret = $.ig.Utils.prototype.convertToColorScheme(value, exception); exception = $ret.p1; return $ret.ret; }()));
					break;
				default:
					$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized ScheduleResource property '{0}'.", $.ig.scheduler.ScheduleResourceProperty.prototype.getBox(propId)));
					break;
			}
		}
		catch (ex) {
			exception = ex;
		}
		return {
			ret: exception == null,
			p3: exception
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::SetPropertyValue(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InitializePropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.String)" />*/
	_initializePropertyValue: function (propId, value) {
		switch (propId) {
			case $.ig.scheduler.ScheduleResourceProperty.id:
				this.___id = value;
				break;
			case $.ig.scheduler.ScheduleResourceProperty.displayName:
				this.___displayName = value;
				break;
			case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
				$.ig.Debug.prototype.assert1(false, "Use InitializeColorSchemePropertyValue.");
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized ScheduleResource property '{0}'.", $.ig.scheduler.ScheduleResourceProperty.prototype.getBox(propId)));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::InitializePropertyValue(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::InitializeColorSchemePropertyValue(System.Object, System.Exception)" />*/
	_initializeColorSchemePropertyValue: function (value, exception) {
		this.___colorScheme = (function () { var $ret = $.ig.Utils.prototype.convertToColorScheme(value, exception); exception = $ret.p1; return $ret.ret; }());
		return {
			ret: exception == null,
			p1: exception
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.ScheduleResource::InitializeColorSchemePropertyValue(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.ScheduleResource::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0} (ID={1})", this.displayName(), this.id());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.ScheduleResource::ToString()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::Destroy()" />*/
	destroy: function () {
		$.ig.scheduler.DataBindableItemBase.prototype.destroy.call(this);
		this.___dataSource = null;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.ScheduleResource::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.ScheduleResource', $.ig.scheduler.DataBindableItemBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.ScheduleResource" />*/

/*<BeginType Name="Infragistics.Scheduler.ScheduleResourceStorage" />*/

$.ig.util.defType('ScheduleResourceStorage', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Create(System.Collections.Generic.IList)" />*/
	_create: function (source) {
		return source == null || source.count() <= $.ig.ScheduleResourceStorage.prototype._tHRESHOLD ? $.ig.util.cast($.ig.ScheduleResourceStorage.prototype.$type, new $.ig.ScheduleResourceStorageList(source)) : $.ig.util.cast($.ig.ScheduleResourceStorage.prototype.$type, new $.ig.ScheduleResourceStorageTable(source));
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Create(System.Collections.Generic.IList)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorage::Item(System.Object)" />*/
	_item: function (dataObject) {
		return this._resourceFromDataObject(dataObject);
	}
	/*<EndProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorage::Item(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorage::ResourceFromDataObject(System.Object)" />*/
	_resourceFromDataObject: function (dataObject) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorage::ResourceFromDataObject(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	_add: function (resource) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	_remove: function (resource) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorage::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorage::Count()" />*/
	_count: function () {
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorage::Count()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::GetEnumerator()" />*/
	_getEnumerator: function () {
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.ScheduleResource>.GetEnumerator()" />*/
	getEnumerator: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.ScheduleResource>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::System.Collections.IEnumerable.GetEnumerator()" />*/
	getEnumerator1: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.ScheduleResourceStorage::System.Collections.IEnumerable.GetEnumerator()" />*/
	,
	$type: new $.ig.Type('ScheduleResourceStorage', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.scheduler.ScheduleResource.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.ScheduleResourceStorage" />*/

/*<BeginType Name="Infragistics.Scheduler.ScheduleResourceStorageList" />*/

$.ig.util.defType('ScheduleResourceStorageList', 'ScheduleResourceStorage', {
	___list: null,
	init: function (list) {
		$.ig.ScheduleResourceStorage.prototype.init.call(this);
		if (list != null) {
			this.___list = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 1, list);
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageList::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	_add: function (resource) {
		if (this.___list != null && this.___list.contains(resource)) {
			return this;
		}
		var threshold = $.ig.ScheduleResourceStorage.prototype._tHRESHOLD;
		if (this.___list == null) {
			this.___list = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 2, threshold);
		}
		this.___list.add(resource);
		if (this.___list.count() >= threshold) {
			var table = new $.ig.ScheduleResourceStorageTable(this.___list);
			return table;
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageList::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageList::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	_remove: function (resource) {
		if (this.___list == null) {
			return this;
		}
		if (this.___list.contains(resource)) {
			this.___list.remove(resource);
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageList::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorageList::ResourceFromDataObject(System.Object)" />*/
	_resourceFromDataObject: function (dataObject) {
		if (this.___list == null) {
			return null;
		}
		var en = this.___list.getEnumerator();
		while (en.moveNext()) {
			var resource = en.current();
			if ($.ig.Object.prototype.referenceEquals(resource.dataObject(), dataObject)) {
				return resource;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorageList::ResourceFromDataObject(System.Object)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorageList::Count()" />*/
	_count: function () {
		return this.___list == null ? 0 : this.___list.count();
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorageList::Count()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorageList::GetEnumerator()" />*/
	_getEnumerator: function () {
		if (this.___list == null) {
			this.___list = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 2, 0);
		}
		return this.___list.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorageList::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('ScheduleResourceStorageList', $.ig.ScheduleResourceStorage.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.ScheduleResourceStorageList" />*/

/*<BeginType Name="Infragistics.Scheduler.ScheduleResourceStorageTable" />*/

$.ig.util.defType('ScheduleResourceStorageTable', 'ScheduleResourceStorage', {
	___table: null,
	init: function (list) {
		$.ig.ScheduleResourceStorage.prototype.init.call(this);
		this.___table = new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.scheduler.ScheduleResource.prototype.$type, 1, $.ig.ScheduleResourceStorage.prototype._tHRESHOLD * 2);
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var resource = en.current();
			var dataObject = resource.dataObject();
			if (this.___table.containsKey(dataObject)) {
				continue;
			}
			this.___table.add(dataObject, resource);
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageTable::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	_add: function (resource) {
		if (this.___table != null && this.___table.containsKey(resource.id())) {
			return this;
		}
		this.___table.add(resource.id(), resource);
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageTable::Add(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorageTable::Count()" />*/
	_count: function () {
		return this.___table == null ? 0 : this.___table.count();
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.ScheduleResourceStorageTable::Count()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageTable::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	_remove: function (resource) {
		if (this.___table == null) {
			return this;
		}
		if (this.___table.containsKey(resource.id())) {
			this.___table.remove(resource.id());
		}
		if (this.___table.count() <= $.ig.ScheduleResourceStorage.prototype._tHRESHOLD) {
			return new $.ig.ScheduleResourceStorageList(this.___table.values());
		} else {
			return this;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.ScheduleResourceStorageTable::Remove(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorageTable::ResourceFromDataObject(System.Object)" />*/
	_resourceFromDataObject: function (dataObject) {
		var resource = null;
		if (this.___table != null) {
			var $ret = this.___table.tryGetValue(dataObject, resource);
			resource = $ret.p1;
		}
		return resource;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.ScheduleResourceStorageTable::ResourceFromDataObject(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorageTable::GetEnumerator()" />*/
	_getEnumerator: function () {
		if (this.___table == null) {
			this.___table = new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.scheduler.ScheduleResource.prototype.$type, 0);
		}
		return this.___table.values().getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.ScheduleResourceStorageTable::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('ScheduleResourceStorageTable', $.ig.ScheduleResourceStorage.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.ScheduleResourceStorageTable" />*/

/*<BeginType Name="Infragistics.Scheduler.LocalizationUtils" />*/

$.ig.util.defType('LocalizationUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('LocalizationUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.LocalizationUtils" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache" />*/

$.ig.util.defType('DateRecurrenceCache', 'Object', {
	__recurrence: null,
	__maxMatchCount: 0,
	__until: new Date(),
	__startDate: new Date(),
	__sortedRules: null,
	__ruleSets: null,
	__frequencyRuleBoundary: 0,
	__calendar: null,
	__hasMonthlyRule: false,
	__hasYearlyRule: false,
	__invalidRecurrenceRuleError: null,
	__leafRuleUnit: 0,
	__fixedMatchCountPerInterval: 0,
	__subsetRules: null,
	__occurrenceDuration: null,
	init: function (info) {
		this.__occurrenceDuration = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		if (info == null) {
			throw new $.ig.ArgumentNullException(0, "info");
		}
		this.__recurrence = info.recurrence();
		this.__occurrenceDuration = info.occurrenceDuration();
		this.__startDate = $.ig.RecurrenceUtils.prototype.truncateToSecond(info.startDateTime());
		this.__until = (function ($t) { return !$.ig.util.nullableIsNull($t) ? $t.value() : $.ig.Date.prototype.maxValue(); }(this.__recurrence._until$i()));
		this.__maxMatchCount = this.__recurrence.count();
		this.__calendar = new $.ig.RecurrenceCalendarHelper();
		this.__calendar.__firstDayOfWeek = this.__recurrence.weekStart();
		this.__sortedRules = this.__recurrence._hasRules() ? this.__recurrence.rules()._nonSubsetRules() : new Array(0);
		$.ig.DateRecurrenceCache.prototype.sortRules(this.__sortedRules, this);
		this.calculateRuleSets();
		this.__frequencyRuleBoundary = this.getFrequencyRuleEvaluationPoint();
		this.calculateSubsetInstances();
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::SortRules(, Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	sortRules: function (rules, cache) {
		var list = new $.ig.List$1($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, 1, rules);
		var comparer = function (x, y) {
			if (x == null || y == null) {
				return 0;
			}
			return $.ig.util.compareSimple(x._getSortValue(cache), y._getSortValue(cache));
		};
		list.sort2(comparer);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::SortRules(, Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache)" />*/
	,
	/*<BeginMethod Name="Infragistics.DateTimeRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDateRange(System.DateTime, Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange)" />*/
	getDateRange: function (start, range) {
		var dt1 = this.addDays(start, range.start());
		var dt2 = this.addDays(start, range.end());
		return new $.ig.scheduler.DateTimeRange(dt1, dt2);
	}
	/*<EndMethod Name="Infragistics.DateTimeRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDateRange(System.DateTime, Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateRuleSets()" />*/
	calculateRuleSets: function () {
		var sortedRules = this.__sortedRules;
		var ruleSets = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		var lastType = null;
		for (var i = 0; i < sortedRules.length; i++) {
			var ii = sortedRules[i];
			var iiType = ii.getType();
			if ($.ig.util.cast($.ig.scheduler.MonthOfYearRecurrenceRule.prototype.$type, ii) !== null) {
				this.__hasMonthlyRule = true;
			}
			if (lastType != iiType) {
				ruleSets.add(i);
				lastType = iiType;
			}
		}
		this.__fixedMatchCountPerInterval = 0;
		if (0 == sortedRules.length) {
			this.__fixedMatchCountPerInterval = 1;
		}
		var frequency = this.__recurrence.frequency();
		if ($.ig.scheduler.DateRecurrenceFrequency.monthly == frequency) {
			this.__hasMonthlyRule = true;
		} else if ($.ig.scheduler.DateRecurrenceFrequency.yearly == frequency) {
			this.__hasYearlyRule = true;
		}
		this.__leafRuleUnit = this.__recurrence.frequency();
		if (this.__sortedRules.length > 0) {
			var tmp = this.__sortedRules[this.__sortedRules.length - 1]._unit();
			if (tmp > this.__leafRuleUnit) {
				this.__leafRuleUnit = tmp;
			}
		}
		this.__ruleSets = ruleSets.toArray();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateRuleSets()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateSubsetInstances()" />*/
	calculateSubsetInstances: function () {
		var rules = this.__recurrence._hasRules() ? this.__recurrence.rules() : null;
		this.__subsetRules = rules != null ? rules._subsetRules() : null;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateSubsetInstances()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::Generate(Infragistics.DateTimeRange, System.Int32)" />*/
	generate: function (dateRange, max) {
		return new $.ig.DateRecurrenceEnumerable(this, dateRange, max);
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::Generate(Infragistics.DateTimeRange, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetFirstOccurrenceDate(Infragistics.DateTimeRange)" />*/
	getFirstOccurrenceDate: function (dateRange) {
		var MAX_DAYS = 367;
		var end = dateRange.end();
		try {
			end = $.ig.Date.prototype.addDays(dateRange.start(), MAX_DAYS);
		}
		catch (e) {
			end = $.ig.Date.prototype.maxValue();
		}
		dateRange = new $.ig.scheduler.DateTimeRange(dateRange.start(), end);
		var list = this.generate(dateRange, 1);
		var count = 0;
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var date = en.current();
			count += 1;
		}
		$.ig.Debug.prototype.assert1(count <= 1, "Should be only one date in this list since we specified 1 for maxOccurrencesToGenerate.");
		var en1 = list.getEnumerator();
		while (en1.moveNext()) {
			var date1 = en1.current();
			return date1;
		}
		return $.ig.Date.prototype.minValue();
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetFirstOccurrenceDate(Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetFrequencyRuleEvaluationPoint()" />*/
	getFrequencyRuleEvaluationPoint: function () {
		var rules = this.__sortedRules;
		for (var i = 0; i < rules.length; i++) {
			if (rules[i]._unit() > this.__recurrence.frequency()) {
				return i;
			}
		}
		return rules.length;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetFrequencyRuleEvaluationPoint()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateOutOfOrderDateGenerationBoundary()" />*/
	calculateOutOfOrderDateGenerationBoundary: function () {
		var sets = this.__ruleSets;
		var rules = this.__sortedRules;
		for (var i = 0; i < sets.length; i++) {
			var setStart = i > 1 ? sets[i - 1] : 0;
			var setEnd = sets[i];
			var ruleCount = 1 + setEnd - setStart;
			var relativeRuleCount = 0;
			for (var r = setStart; r <= setEnd; r++) {
				var rule = rules[r];
				var dm = $.ig.util.cast($.ig.scheduler.DayOfMonthRecurrenceRule.prototype.$type, rule);
				if (null != dm && dm.dayOfMonth() < 0) {
					relativeRuleCount++;
				}
				var dw = $.ig.util.cast($.ig.scheduler.DayOfWeekRecurrenceRule.prototype.$type, rule);
				if (null != dw && dw.relativePosition() < 0) {
					relativeRuleCount++;
				}
				var dy = $.ig.util.cast($.ig.scheduler.DayOfYearRecurrenceRule.prototype.$type, rule);
				if (null != dy && dy.dayOfYear() < 0) {
					relativeRuleCount++;
				}
				var wy = $.ig.util.cast($.ig.scheduler.WeekOfYearRecurrenceRule.prototype.$type, rule);
				if (null != wy && wy.weekNumber() < 0) {
					relativeRuleCount++;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::CalculateOutOfOrderDateGenerationBoundary()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddToDate(System.DateTime, Infragistics.Scheduler.DateRecurrenceFrequency, System.Int32)" />*/
	addToDate: function (date, unit, n) {
		try {
			switch (unit) {
				default:
				case $.ig.scheduler.DateRecurrenceFrequency.yearly:
					$.ig.Debug.prototype.assert1($.ig.scheduler.DateRecurrenceFrequency.yearly == unit, "Unknown frequency value.");
					return this.addYears(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.monthly: return this.addMonths(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.weekly: return this.addWeeks(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.daily: return this.addDays(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.hourly: return this.addHours(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.minutely: return this.addMinutes(date, n);
				case $.ig.scheduler.DateRecurrenceFrequency.secondly: return this.addSeconds(date, n);
			}
		}
		catch (e) {
			return $.ig.Date.prototype.maxValue();
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddToDate(System.DateTime, Infragistics.Scheduler.DateRecurrenceFrequency, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddYears(System.DateTime, System.Int32)" />*/
	addYears: function (date, years) {
		return this.__calendar.addYears(date, years);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddYears(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddMonths(System.DateTime, System.Int32)" />*/
	addMonths: function (date, months) {
		return this.__calendar.addMonths(date, months);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddMonths(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddDays(System.DateTime, System.Int32)" />*/
	addDays: function (date, days) {
		return this.__calendar.addDays(date, days);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddDays(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddWeeks(System.DateTime, System.Int32)" />*/
	addWeeks: function (date, weeks) {
		return this.__calendar.addWeeks(date, weeks);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddWeeks(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddHours(System.DateTime, System.Int32)" />*/
	addHours: function (date, hours) {
		return this.__calendar.addHours(date, hours);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddHours(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddMinutes(System.DateTime, System.Int32)" />*/
	addMinutes: function (date, minutes) {
		return this.__calendar.addMinutes(date, minutes);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddMinutes(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddSeconds(System.DateTime, System.Int32)" />*/
	addSeconds: function (date, seconds) {
		return this.__calendar.addSeconds(date, seconds);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::AddSeconds(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfYear(System.DateTime)" />*/
	getDayOfYear: function (date) {
		return this.__calendar.getDayOfYear(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfYear(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfMonth(System.DateTime)" />*/
	getDayOfMonth: function (date) {
		return this.__calendar.getDayOfMonth(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonth(System.DateTime)" />*/
	getMonth: function (date) {
		return this.__calendar.getMonthNumber(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonth(System.Int32, System.Int32)" />*/
	getMonth1: function (year, dayOfYear) {
		var dt = this.getDate(year, dayOfYear);
		return this.getYear(dt) == year ? this.getMonth(dt) : -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonthRange(System.Int32, System.Int32)" />*/
	getMonthRange: function (year, month) {
		var daysInMonth = this.getDaysInMonth(year, month);
		var monthStart = this.getDayOfYear($.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0));
		return new $.ig.DateRecurrenceRange(1, monthStart, monthStart + daysInMonth - 1);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetMonthRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetLastWeekOfYearDate(System.Int32)" />*/
	getLastWeekOfYearDate: function (year) {
		var $self = this;
		var dt = $.ig.Date.prototype.fromValues(year, 12, 31, 0, 0, 0, 0);
		var weekYear;
		var n = (function () { var $ret = $self.__calendar.getWeekNumberForDate2(dt, weekYear); weekYear = $ret.p1; return $ret.ret; }());
		if (year != weekYear) {
			dt = this.addDays(dt, -7);
			n = (function () { var $ret = $self.__calendar.getWeekNumberForDate2(dt, weekYear); weekYear = $ret.p1; return $ret.ret; }());
			$.ig.Debug.prototype.assert(year == weekYear);
		}
		var weekStart = this.__calendar.getFirstWeekOfYearDate1(year);
		weekStart = this.addWeeks(weekStart, n - 1);
		return weekStart;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetLastWeekOfYearDate(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetWeekRange(System.Int32, System.Int32)" />*/
	getWeekRange: function (year, week) {
		var date = this.__calendar.getFirstWeekOfYearDate1(year);
		var weekStart;
		if (week > 0) {
			weekStart = this.addWeeks(date, week - 1);
		} else if (week < 0) {
			weekStart = this.getLastWeekOfYearDate(year);
			this.addWeeks(weekStart, week + 1);
		} else {
			$.ig.Debug.prototype.assert1(false, "Invalid week.");
			return $.ig.DateRecurrenceRange.prototype.empty();
		}
		var d = this.getDayOfYear(weekStart);
		return new $.ig.DateRecurrenceRange(1, d, d + 6);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetWeekRange(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfWeekNumber(System.DateTime)" />*/
	getDayOfWeekNumber: function (date) {
		return this.__calendar.getDayOfWeekNumber2(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfWeekNumber(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfWeek(System.DateTime)" />*/
	getDayOfWeek: function (date) {
		return this.__calendar.getDayOfWeek(date);
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDayOfWeek(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDate(System.Int32, System.Int32)" />*/
	getDate: function (year, dayOfYear) {
		var dt = $.ig.Date.prototype.fromValues(year, 1, 1, 0, 0, 0, 0);
		return this.addDays(dt, dayOfYear - 1);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDate(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDaysInYear(System.Int32)" />*/
	getDaysInYear: function (year) {
		return this.__calendar.getDaysInYear($.ig.Date.prototype.fromValues(year, 1, 1, 0, 0, 0, 0));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDaysInYear(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDaysInMonth(System.Int32, System.Int32)" />*/
	getDaysInMonth: function (year, month) {
		return this.__calendar.getDaysInMonth($.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetDaysInMonth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetYear(System.DateTime)" />*/
	getYear: function (date) {
		return this.__calendar.getYear(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache::GetYear(System.DateTime)" />*/
	,
	$type: new $.ig.Type('DateRecurrenceCache', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser" />*/

$.ig.util.defType('DateRecurrenceParser', 'Object', {
	__table: null,
	__error: null,
	__parsing: false,
	__parseString: null,
	__recurrence: null,
	__sb: null,
	init: function (recurrence) {
		this.__sb = new $.ig.StringBuilder(0);
		$.ig.Object.prototype.init.call(this);
		this.__recurrence = recurrence;
		this.__table = [ $.ig.scheduler.MonthOfYearRecurrenceRule.prototype.$type, "BYMONTH", (function (ii) { return (ii).month(); }), (function (ii) { return new $.ig.scheduler.MonthOfYearRecurrenceRule(ii); }), $.ig.scheduler.WeekOfYearRecurrenceRule.prototype.$type, "BYWEEKNO", (function (ii) { return (ii).weekNumber(); }), (function (ii) { return new $.ig.scheduler.WeekOfYearRecurrenceRule(ii); }), $.ig.scheduler.DayOfYearRecurrenceRule.prototype.$type, "BYYEARDAY", (function (ii) { return (ii).dayOfYear(); }), (function (ii) { return new $.ig.scheduler.DayOfYearRecurrenceRule(ii); }), $.ig.scheduler.DayOfMonthRecurrenceRule.prototype.$type, "BYMONTHDAY", (function (ii) { return (ii).dayOfMonth(); }), (function (ii) { return new $.ig.scheduler.DayOfMonthRecurrenceRule(ii); }), $.ig.scheduler.DayOfWeekRecurrenceRule.prototype.$type, "BYDAY", (function (ii) {
			var rr = ii;
			return (0 != rr.relativePosition() ? $.ig.DateRecurrenceParser.prototype.toString2(rr.relativePosition()) : String.empty()) + $.ig.DateRecurrenceParser.prototype.getDayName(rr.day());
		}), (this.parseDayOfWeekRule.runOn(this)), $.ig.HourRecurrenceRule.prototype.$type, "BYHOUR", (function (ii) { return (ii)._hour(); }), (function (ii) { return new $.ig.HourRecurrenceRule(1, ii); }), $.ig.scheduler.MinuteRecurrenceRule.prototype.$type, "BYMINUTE", (function (ii) { return (ii).minute(); }), (function (ii) { return new $.ig.scheduler.MinuteRecurrenceRule(ii); }), $.ig.scheduler.SecondRecurrenceRule.prototype.$type, "BYSECOND", (function (ii) { return (ii).second(); }), (function (ii) { return new $.ig.scheduler.SecondRecurrenceRule(ii); }), $.ig.scheduler.SubsetRecurrenceRule.prototype.$type, "BYSETPOS", (function (ii) { return (ii).occurrenceInstance(); }), (function (ii) { return new $.ig.scheduler.SubsetRecurrenceRule(ii); }) ];
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::Append(System.String, System.String, System.Boolean)" />*/
	append: function (name, value, prependSemicolon) {
		if (prependSemicolon) {
			this.__sb.append1($.ig.DateRecurrenceParser.prototype._sEMICOLON);
		}
		this.__sb.append5(name).append1($.ig.DateRecurrenceParser.prototype._eQUAL).append5(value);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::Append(System.String, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetDayName(System.DayOfWeek)" />*/
	getDayName: function (day) {
		return $.ig.DateRecurrenceParser.prototype._aBBREVIATED_DAYS[day];
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetDayName(System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetRuleName(Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	getRuleName: function (rule) {
		var ruleType = rule.getType();
		var table = this.__table;
		for (var i = 0; i < table.length; i += $.ig.DateRecurrenceParser.prototype._sTEP) {
			if (ruleType == table[i]) {
				return table[1 + i];
			}
		}
		$.ig.Debug.prototype.assert(false);
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetRuleName(Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetRuleValue(Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	getRuleValue: function (rule) {
		var ruleType = rule.getType();
		var table = this.__table;
		for (var i = 0; i < table.length; i += $.ig.DateRecurrenceParser.prototype._sTEP) {
			if (ruleType == table[i]) {
				var converter = table[2 + i];
				var toIntConverter = $.ig.util.cast($.ig.Func$2.prototype.$type.specialize($.ig.scheduler.DateRecurrenceRuleBase.prototype.$type, $.ig.Number.prototype.$type), converter);
				if (null != toIntConverter) {
					var value = toIntConverter(rule);
					return $.ig.DateRecurrenceParser.prototype.toString2(value);
				} else {
					var toStrConveter = converter;
					return toStrConveter(rule);
				}
			}
		}
		this.onError("Unknown type of rule", rule.getType().typeName());
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::GetRuleValue(Infragistics.Scheduler.DateRecurrenceRuleBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::OnError(System.String, System.String)" />*/
	onError: function (message, context) {
		var resId;
		if (this.__parsing) {
			resId = "LE_RecurrenceParsing";
		} else {
			resId = "LE_RecurrenceSerializing";
		}
		var exception = $.ig.Utils.prototype.createException1(resId, [ context ]);
		this.__error = new $.ig.scheduler.DateRecurrenceParseError(exception, context);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::OnError(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseDayOfWeek(System.String)" />*/
	parseDayOfWeek: function (s) {
		var dayIndex = $.ig.util.arrayIndexOf1(String, $.ig.DateRecurrenceParser.prototype._aBBREVIATED_DAYS, s);
		if (dayIndex >= 0) {
			return dayIndex;
		}
		this.onError("Invalid day of week.", s);
		return 0;
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseDayOfWeek(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrenceRuleBase Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseDayOfWeekRule(System.String)" />*/
	parseDayOfWeekRule: function (s) {
		if (s.length >= 2) {
			var day = s.substr(s.length - 2, 2);
			var numberStr = s.substr(0, s.length - 2);
			var number = 0;
			var error = false;
			if (numberStr.length > 0) {
				if (!(function () { var $ret = $.ig.util.tryParseInt32_1(numberStr, number); number = $ret.p1; return $ret.ret; }())) {
					error = true;
				}
			}
			if (!error) {
				return new $.ig.scheduler.DayOfWeekRecurrenceRule(this.parseDayOfWeek(day), number);
			}
		}
		throw new $.ig.ArgumentOutOfRangeException(1, $.ig.schedulerCore.locale.getString("LE_BadDayOfWeekRule", [ s ]));
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrenceRuleBase Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseDayOfWeekRule(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseFrequency(System.String)" />*/
	parseFrequency: function (s) {
		var table = $.ig.DateRecurrenceParser.prototype.__frequencyTable;
		s = s.toUpperCase();
		for (var i = 0; i < table.length; i += 2) {
			if (s == table[1 + i]) {
				return $.ig.util.getEnumValue(table[i]);
			}
		}
		this.onError("Invalid frequency.", s);
		return 0;
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrenceFrequency Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseFrequency(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseHelper(System.String)" />*/
	parseHelper: function (s) {
		var recurrence = this.__recurrence;
		var rules = s.split($.ig.DateRecurrenceParser.prototype._sEMICOLON);
		for (var i = 0; i < rules.length; i++) {
			var iiStr = rules[i];
			var pair = iiStr.split($.ig.DateRecurrenceParser.prototype._eQUAL);
			if (2 == pair.length) {
				var name = pair[0].toUpperCase();
				var value = pair[1];
				switch (name) {
					case $.ig.DateRecurrenceParser.prototype._fREQ:
						recurrence.frequency(this.parseFrequency(value));
						break;
					case $.ig.DateRecurrenceParser.prototype._iNTERVAL:
						recurrence.interval(this.toInt(value));
						break;
					case $.ig.DateRecurrenceParser.prototype._cOUNT:
						recurrence.count(this.toInt(value));
						break;
					case $.ig.DateRecurrenceParser.prototype._uNTIL:
						recurrence._until$i($.ig.util.toNullable($.ig.Date.prototype.$type, this.parseICalendarDate(value)));
						break;
					case $.ig.DateRecurrenceParser.prototype._wKST:
						recurrence.weekStart(this.parseDayOfWeek(value));
						break;
					default:
						this.parseRule(name, value, recurrence.rules());
						break;
				}
			} else {
				this.onError("Invalid recurrence rule", iiStr);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseHelper(System.String)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseICalendarDate(System.String)" />*/
	parseICalendarDate: function (s) {
		var dt;
		var format = s.length > 8 ? $.ig.DateRecurrenceParser.prototype._iCAL_DATETIME_FORMAT : $.ig.DateRecurrenceParser.prototype._iCAL_DATE_FORMAT;
		var lastCharIndex = s.length - 1;
		if ('Z' == s.charAt(lastCharIndex)) {
			s = s.substr(0, lastCharIndex);
		}
		if ((function () { var $ret = $.ig.DateUtils.prototype.tryParseExact(s, $.ig.DateRecurrenceParser.prototype._iCAL_DATETIME_FORMAT, $.ig.RecurrenceUtils.prototype.parseCulture(), dt); dt = $ret.p3; return $ret.ret; }()) == false) {
			this.onError("Invalid date value", s);
		}
		return dt;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseICalendarDate(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseRule(System.String, System.String, System.Collections.Generic.IList)" />*/
	parseRule: function (name, valueStr, rules) {
		var table = this.__table;
		for (var i = 0; i < table.length; i += $.ig.DateRecurrenceParser.prototype._sTEP) {
			if (name == table[1 + i]) {
				var values = valueStr.split($.ig.DateRecurrenceParser.prototype._cOMMA);
				if (null != values) {
					for (var j = 0; j < values.length; j++) {
						var iiValue = values[j];
						var rule;
						var converter = table[3 + i];
						var intToRuleConverter = $.ig.util.cast($.ig.Func$2.prototype.$type.specialize($.ig.Number.prototype.$type, $.ig.scheduler.DateRecurrenceRuleBase.prototype.$type), converter);
						if (null != intToRuleConverter) {
							rule = intToRuleConverter(this.toInt(iiValue));
						} else {
							var strToRuleConverter = converter;
							rule = strToRuleConverter(iiValue);
						}
						if (null != rule) {
							rules.add(rule);
						} else {
							this.onError($.ig.util.stringFormat("Incorrect value of {1} for rule {0}.", name, valueStr), null);
						}
					}
					return;
				}
			}
		}
		this.onError("Unknown rule", name);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ParseRule(System.String, System.String, System.Collections.Generic.IList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SerializeToString()" />*/
	serializeToString1: function () {
		var sb = this.__sb;
		var recurrence = this.__recurrence;
		this.append($.ig.DateRecurrenceParser.prototype._fREQ, this.toString1(recurrence.frequency()), false);
		this.append($.ig.DateRecurrenceParser.prototype._iNTERVAL, $.ig.DateRecurrenceParser.prototype.toString2(recurrence.interval()), true);
		var count = recurrence.count();
		if (count > 0) {
			this.append($.ig.DateRecurrenceParser.prototype._cOUNT, $.ig.DateRecurrenceParser.prototype.toString2(count), true);
		}
		var until = recurrence._until$i();
		if (until.hasValue()) {
			this.append($.ig.DateRecurrenceParser.prototype._uNTIL, $.ig.DateRecurrenceParser.prototype.toICalendarString(until.value(), true, false), true);
		}
		this.append($.ig.DateRecurrenceParser.prototype._wKST, $.ig.DateRecurrenceParser.prototype.getDayName(recurrence.weekStart()), true);
		if (this.__recurrence._hasRules()) {
			var rules = this.__recurrence.rules()._toArray();
			$.ig.DateRecurrenceCache.prototype.sortRules(rules, null);
			var lastType = null;
			for (var i = 0; i < rules.length; i++) {
				var rule = rules[i];
				var ruleType = rule.getType();
				if (ruleType != lastType) {
					lastType = ruleType;
					sb.append1($.ig.DateRecurrenceParser.prototype._sEMICOLON).append5(this.getRuleName(rule)).append1($.ig.DateRecurrenceParser.prototype._eQUAL);
				} else {
					sb.append1($.ig.DateRecurrenceParser.prototype._cOMMA);
				}
				sb.append5(this.getRuleValue(rule));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SerializeToString()" />*/
	,
	/*<BeginMethod Name="System.Text.StringBuilder Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SpaceHelper(System.Text.StringBuilder)" />*/
	spaceHelper: function (sb) {
		var len = sb.length();
		if (len == 0 || (len > 0 && !/\s/i.test(sb.item(len - 1)))) {
			sb.append5(" ");
		}
		return sb;
	}
	/*<EndMethod Name="System.Text.StringBuilder Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SpaceHelper(System.Text.StringBuilder)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToInt(System.String)" />*/
	toInt: function (s) {
		var r;
		if (!(function () { var $ret = $.ig.util.tryParseInt32_1(s, r); r = $ret.p1; return $ret.ret; }())) {
			this.onError("Invalid integer value" + s, null);
		}
		return r;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToInt(System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToString(Infragistics.Scheduler.DateRecurrenceFrequency)" />*/
	toString1: function (frequency) {
		var table = $.ig.DateRecurrenceParser.prototype.__frequencyTable;
		for (var i = 0; i < table.length; i += 2) {
			if (frequency == $.ig.util.getEnumValue(table[i])) {
				return table[1 + i];
			}
		}
		this.onError("Invalid frequency.", $.ig.scheduler.DateRecurrenceFrequency.prototype.$getName(frequency));
		return String.empty();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToString(Infragistics.Scheduler.DateRecurrenceFrequency)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToString(System.Int32)" />*/
	toString2: function (i) {
		return $.ig.util.numberToString(i, $.ig.RecurrenceUtils.prototype.parseCulture());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToString(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::Parse(System.String, Infragistics.Scheduler.Data.DateRecurrenceParseError)" />*/
	parse: function (s, error) {
		error = null;
		if (String.isNullOrEmpty(s)) {
			return {
				ret: null,
				p1: error
			};
		}
		var parser = new $.ig.DateRecurrenceParser(new $.ig.scheduler.DateRecurrence());
		parser.__parsing = true;
		parser.__parseString = s;
		parser.parseHelper(s);
		error = parser.__error;
		return {
			ret: null == error ? parser.__recurrence : null,
			p1: error
		};
	}
	/*<EndMethod Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::Parse(System.String, Infragistics.Scheduler.Data.DateRecurrenceParseError)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SerializeToString(Infragistics.Scheduler.DateRecurrence, Infragistics.Scheduler.Data.DataError)" />*/
	serializeToString: function (recurrence, error) {
		var parser = new $.ig.DateRecurrenceParser(recurrence);
		parser.__sb = new $.ig.StringBuilder(0);
		parser.serializeToString1();
		error = parser.__error;
		return {
			ret: null == error ? parser.__sb.toString() : null,
			p1: error
		};
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::SerializeToString(Infragistics.Scheduler.DateRecurrence, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToDisplayStringHelper(Infragistics.Scheduler.DateRecurrence, System.Nullable, System.Nullable, System.Nullable)" />*/
	toDisplayStringHelper: function (recurrence, startDate, startTime, endTime) {
		return recurrence != null ? recurrence.getType().fullName() : String.empty();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToDisplayStringHelper(Infragistics.Scheduler.DateRecurrence, System.Nullable, System.Nullable, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToICalendarString(System.DateTime, System.Boolean, System.Boolean)" />*/
	toICalendarString: function (dt, appendZ, skipTimeIf12AM) {
		var format = skipTimeIf12AM && $.ig.util.timeSpanTotalSeconds($.ig.Date.prototype.getTimeOfDay(dt)) < 1 ? $.ig.DateRecurrenceParser.prototype._iCAL_DATE_FORMAT : $.ig.DateRecurrenceParser.prototype._iCAL_DATETIME_FORMAT;
		var ret = $.ig.Date.prototype.toStringFormat(dt, format, $.ig.RecurrenceUtils.prototype.parseCulture());
		if (appendZ) {
			ret = ret + "Z";
		}
		return ret;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser::ToICalendarString(System.DateTime, System.Boolean, System.Boolean)" />*/
	,
	$type: new $.ig.Type('DateRecurrenceParser', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange" />*/

$.ig.util.defType('DateRecurrenceRange', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	__start: 0,
	__end: 0,
	init1: function (initNumber, start, end) {
		$.ig.ValueType.prototype.init.call(this);
		this.__start = start;
		this.__end = end;
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this.__start = value;
			return value;
		} else {
			return this.__start;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Start()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this.__end = value;
			return value;
		} else {
			return this.__end;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::End()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Intersect(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange)" />*/
	intersect: function (range) {
		this.__start = Math.max(this.__start, range.__start);
		this.__end = Math.min(this.__end, range.__end);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Intersect(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Intersect(System.Int32)" />*/
	intersect1: function (value) {
		this.__start = Math.max(this.__start, value);
		this.__end = Math.min(this.__end, value);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Intersect(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::MoveForwardStart(System.Int32)" />*/
	moveForwardStart: function (newStart) {
		if (newStart > this.__start) {
			this.__start = newStart;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::MoveForwardStart(System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::IsEmpty()" />*/
	isEmpty: function () {
		return this.__end < this.__start;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::IsEmpty()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Empty()" />*/
	empty: function () {
		return new $.ig.DateRecurrenceRange(1, -1, 0);
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Empty()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Offset(System.Int32)" />*/
	offset: function (offset) {
		this.__start += offset;
		this.__end += offset;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Offset(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Expand(System.Int32)" />*/
	expand: function (amount) {
		this.__end += amount;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Expand(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Contains(System.Int32)" />*/
	contains: function (val) {
		return val >= this.__start && val <= this.__end;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Contains(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::MakeEmpty()" />*/
	makeEmpty: function () {
		this.__end = this.__start - 1;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::MakeEmpty()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Length()" />*/
	length: function () {
		return 1 + this.__end - this.__start;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange::Length()" />*/
	,
	$type: new $.ig.Type('DateRecurrenceRange', $.ig.ValueType.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerable" />*/

$.ig.util.defType('DateRecurrenceEnumerable', 'Object', {
	___cache: null,
	___dateRange: null,
	___maxOccurrencesToGenerate: 0,
	init: function (cache, dateRange, maxOccurrencesToGenerate) {
		$.ig.Object.prototype.init.call(this);
		this.___cache = cache;
		this.___dateRange = dateRange;
		this.___maxOccurrencesToGenerate = maxOccurrencesToGenerate;
	},
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerable::GetEnumerator()" />*/
	getEnumerator: function () {
		return new $.ig.DateRecurrenceEnumerator(this);
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerable::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('DateRecurrenceEnumerable', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Date.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerable" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator" />*/

$.ig.util.defType('DateRecurrenceEnumerator', 'Object', {
	___owner: null,
	___state: null,
	___dateRange: null,
	___maxOccurrencesToGenerate: 0,
	___count: 0,
	___done: false,
	___current: new Date(),
	___occurrenceDuration: null,
	init: function (owner) {
		this.___occurrenceDuration = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		this.___owner = owner;
		this.___maxOccurrencesToGenerate = this.___owner.___maxOccurrencesToGenerate;
		this.___occurrenceDuration = owner.___cache != null ? owner.___cache.__occurrenceDuration : (0);
		this.___dateRange = new $.ig.scheduler.DateTimeRange(this.___owner.___dateRange.start(), $.ig.RecurrenceUtils.prototype.min(this.___owner.___dateRange.end(), this.___owner.___cache.__until));
		this.reset();
	},
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Current()" />*/
	current: function () {
		return this.___current;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Current()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::MoveNext()" />*/
	moveNext: function () {
		while (!this.___done) {
			this.___state.run();
			this.___done = this.___state.isDone(this.___dateRange.end());
			if (this.___state.isMatch()) {
				this.___current = this.___state.__date;
				var end = $.ig.util.dateAdd(this.___current, this.___occurrenceDuration);
				var isCurrentValid = this.___dateRange._intersectsWith1(this.___current, end, true);
				if (isCurrentValid) {
					this.___count++;
				}
				if (!this.___done) {
					this.___done = $.ig.RecurrenceUtils.prototype.maxReached(this.___maxOccurrencesToGenerate, this.___count);
				}
				if (isCurrentValid) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Reset()" />*/
	reset: function () {
		this.___state = new $.ig.DateRecurrenceState(this.___owner.___cache);
		this.___state.initializeRun(this.___dateRange.start());
		this.___count = 0;
		this.___done = this.___state.isDone(this.___dateRange.end());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator::Reset()" />*/
	,
	$type: new $.ig.Type('DateRecurrenceEnumerator', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize($.ig.Date.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceEnumerator" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRunningState" />*/

$.ig.util.defType('DateRecurrenceRunningState', 'ValueType', {
	init: function () {
		this.__days = new $.ig.DateRecurrenceRange();
		$.ig.ValueType.prototype.init.call(this);
	},
	__days: null,
	__year: 0,
	__hour: 0,
	__minute: 0,
	__second: 0,
	$type: new $.ig.Type('DateRecurrenceRunningState', $.ig.ValueType.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRunningState" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState" />*/

$.ig.util.defType('DateRecurrenceState', 'Object', {
	__cache: null,
	__previousMatchCount: 0,
	__lastFrequencyDate: new Date(),
	__runningStates: null,
	__cSet: 0,
	__cRuleIndex: null,
	__isMatch: false,
	__isDone: false,
	__rrHasNextMatch: false,
	__rrHasNextMatchStart: null,
	__rrRuleHasNextMatch: null,
	__rrSetHasNextMatch: null,
	__rrSetPass: null,
	__subsetInfo: null,
	__days: null,
	__year: 0,
	__hour: 0,
	__minute: 0,
	__second: 0,
	__date: new Date(),
	init: function (cache) {
		this.__days = new $.ig.DateRecurrenceRange();
		$.ig.Object.prototype.init.call(this);
		this.__cache = cache;
		this.__runningStates = new $.ig.Stack$1($.ig.DateRecurrenceRunningState.prototype.$type);
		this.__days = $.ig.DateRecurrenceRange.prototype.empty();
		this.__year = -1;
		this.__hour = -1;
		this.__minute = -1;
		this.__second = -1;
		this.__subsetInfo = this.__cache.__sortedRules.length > 0 ? new $.ig.DateRecurrenceSubsetInfo(this.__cache.__subsetRules) : null;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::Clone()" />*/
	clone: function () {
		var clone = this.memberwiseClone();
		clone.__runningStates = null;
		if (clone.__runningStates != null) {
			var temp = new $.ig.Stack$1($.ig.DateRecurrenceRunningState.prototype.$type);
			while (clone.__runningStates.count() > 0) {
				var state = clone.__runningStates.pop();
				temp.push(state);
			}
			clone.__runningStates = temp;
		}
		clone.__cRuleIndex = $.ig.util.shallowClone(this.__cRuleIndex);
		return clone;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::Clone()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::InitializeRun(System.DateTime)" />*/
	initializeRun: function (generateStartingFromDate) {
		generateStartingFromDate = $.ig.util.dateSubtract(generateStartingFromDate, this.__cache.__occurrenceDuration);
		this.__cSet = 0;
		this.__cRuleIndex = new Array(this.__cache.__ruleSets.length);
		var ruleSets = this.__cache.__ruleSets;
		for (var i = 0; i < ruleSets.length; i++) {
			this.__cRuleIndex[i] = ruleSets[i];
		}
		this.__lastFrequencyDate = this.calcInitialDate(generateStartingFromDate);
		this.incrementByFrequencyHelper(true);
		this.__rrHasNextMatch = false;
		var ruleCount = this.__cache.__sortedRules.length;
		var setCount = this.__cache.__ruleSets.length;
		this.__rrHasNextMatchStart = new Array(ruleCount);
		this.__rrRuleHasNextMatch = new Array(ruleCount);
		this.__rrSetHasNextMatch = new Array(setCount);
		this.__rrSetPass = new Array(setCount);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::InitializeRun(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::Run()" />*/
	run: function () {
		this.__isMatch = false;
		if (null != this.__subsetInfo && this.__subsetInfo.__isEnumerating && this.__subsetInfo.moveNext()) {
			this.processMatch();
			return;
		}
		var sortedRules = this.__cache.__sortedRules;
		if (sortedRules.length > 0) {
			var ruleSets = this.__cache.__ruleSets;
			var nextSet = 1 + this.__cSet;
			var isLeafSet = nextSet == ruleSets.length;
			var ruleEnd = !isLeafSet ? ruleSets[nextSet] - 1 : sortedRules.length - 1;
			var ruleIndex = this.__cRuleIndex[this.__cSet];
			if (this.__rrSetPass[this.__cSet] > 0) {
				while (ruleIndex <= ruleEnd && !this.__rrRuleHasNextMatch[ruleIndex]) {
					ruleIndex++;
				}
			}
			if (ruleIndex > ruleEnd) {
				this.__cRuleIndex[this.__cSet] = ruleSets[this.__cSet];
				if (this.__rrSetHasNextMatch[this.__cSet]) {
					this.__rrSetHasNextMatch[this.__cSet] = false;
					this.__rrSetPass[this.__cSet]++;
				} else {
					this.__rrSetPass[this.__cSet] = 0;
					this.__cSet--;
					if (-1 == this.__cSet) {
						this.__cSet = 0;
						if (null != this.__subsetInfo && this.__subsetInfo.startEnumerating()) {
							this.__cRuleIndex[this.__cSet] = 0x7FFFFFFF;
						} else {
							this.incrementByFrequencyHelper(false);
						}
					} else {
						this.restoreRunningState();
					}
				}
			} else {
				this.saveRunningState();
				var iiRule = sortedRules[ruleIndex];
				this.__rrHasNextMatch = false;
				var tmpStart = this.__rrHasNextMatchStart[ruleIndex];
				if (tmpStart > 0) {
					this.__days.moveForwardStart(tmpStart);
				}
				iiRule._apply(this);
				this.__cRuleIndex[this.__cSet] = 1 + ruleIndex;
				if (this.__rrHasNextMatch) {
					this.__rrSetHasNextMatch[this.__cSet] = true;
				}
				this.__rrRuleHasNextMatch[ruleIndex] = this.__rrHasNextMatch;
				this.__rrHasNextMatchStart[ruleIndex] = this.__rrHasNextMatch ? 1 + this.__days.start() : 0;
				if (this.__days.isEmpty()) {
					this.restoreRunningState();
				} else if (isLeafSet) {
					this.processMatch();
					this.restoreRunningState();
				} else {
					this.__cSet++;
				}
			}
		} else {
			this.processMatch();
			this.incrementByFrequencyHelper(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::Run()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::ProcessMatch()" />*/
	processMatch: function () {
		if (!this.__isDone) {
			if (null != this.__subsetInfo && this.__subsetInfo.__isEnumerating) {
				this.__date = this.__subsetInfo.__currentMatchDate;
			} else if (!this.__days.isEmpty()) {
				this.initMatchingDate();
				if (null != this.__subsetInfo && this.__subsetInfo.accumulateMatch(this.__date)) {
					return;
				}
			} else {
				return;
			}
			if (this.__date >= this.__cache.__startDate && this.__date <= this.__cache.__until) {
				this.__isMatch = true;
				this.__previousMatchCount++;
			}
			if ($.ig.RecurrenceUtils.prototype.maxReached(this.__cache.__maxMatchCount, this.__previousMatchCount)) {
				this.__isDone = true;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::ProcessMatch()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IsMatch()" />*/
	isMatch: function () {
		return this.__isMatch;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IsMatch()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IsDone(System.DateTime)" />*/
	isDone: function (maxDate) {
		return this.__isDone || this.__lastFrequencyDate > maxDate;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IsDone(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::SaveRunningState()" />*/
	saveRunningState: function () {
		var ds = new $.ig.DateRecurrenceRunningState();
		ds.__days = this.__days;
		ds.__year = this.__year;
		ds.__hour = this.__hour;
		ds.__minute = this.__minute;
		ds.__second = this.__second;
		this.__runningStates.push(ds);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::SaveRunningState()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::RestoreRunningState()" />*/
	restoreRunningState: function () {
		var ds = this.__runningStates.pop();
		this.__days = ds.__days;
		this.__year = ds.__year;
		this.__hour = ds.__hour;
		this.__minute = ds.__minute;
		this.__second = ds.__second;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::RestoreRunningState()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::CalcInitialDate(System.DateTime)" />*/
	calcInitialDate: function (generateStartingFromDate) {
		var date = this.__cache.__startDate;
		switch (this.__cache.__recurrence.frequency()) {
			case $.ig.scheduler.DateRecurrenceFrequency.yearly:
				date = $.ig.Date.prototype.fromValues(date.getFullYear(), 1, 1, 0, 0, 0, 0);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.monthly:
				date = $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), 1, 0, 0, 0, 0);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.weekly:
				date = this.__cache.__calendar.getFirstDayOfWeekForDate2(date);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.daily:
				date = $.ig.Date.prototype.getDate(date);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.hourly:
				date = $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate(), date.getHours(), 0, 0, 0);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.minutely:
				date = $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate(), date.getHours(), date.getMinutes(), 0, 0);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.secondly:
				date = $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
				break;
			default:
				$.ig.Debug.prototype.assert(false);
				break;
		}
		date = this.reachFrequencyDate(date, generateStartingFromDate);
		return date;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::CalcInitialDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::ReachFrequencyDate(System.DateTime, System.DateTime)" />*/
	reachFrequencyDate: function (date, target) {
		var frequency = this.__cache.__recurrence.frequency();
		var interval = this.__cache.__recurrence.interval();
		if (this.__cache.__maxMatchCount > 0) {
			if (0 == this.__cache.__fixedMatchCountPerInterval) {
				return date;
			}
		}
		var totalAppliedInterval = 0;
		var newDate = date;
		while (newDate < target) {
			var iiInterval = interval;
			var ii = newDate;
			var iiAppliedInterval = 0;
			while (true) {
				ii = this.__cache.addToDate(ii, frequency, iiInterval);
				if (ii < target) {
					newDate = ii;
					iiAppliedInterval += iiInterval;
					iiInterval *= 2;
				} else {
					break;
				}
			}
			totalAppliedInterval += iiAppliedInterval;
			if (0 == iiAppliedInterval) {
				break;
			}
		}
		if (this.__cache.__fixedMatchCountPerInterval > 0) {
			this.__previousMatchCount = ($.ig.intDivide(totalAppliedInterval, interval)) * this.__cache.__fixedMatchCountPerInterval;
			if ($.ig.RecurrenceUtils.prototype.maxReached(this.__cache.__maxMatchCount, this.__previousMatchCount)) {
				this.__isDone = true;
			}
		}
		return newDate;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::ReachFrequencyDate(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IncrementByFrequencyHelper(System.Boolean)" />*/
	incrementByFrequencyHelper: function (initial) {
		if (!initial) {
			this.__lastFrequencyDate = this.__cache.addToDate(this.__lastFrequencyDate, this.__cache.__recurrence.frequency(), this.__cache.__recurrence.interval());
		}
		if (this.__lastFrequencyDate >= this.__cache.__until) {
			this.__isDone = true;
			return;
		}
		var date = this.__lastFrequencyDate;
		this.__year = date.getFullYear();
		this.__hour = -1;
		this.__minute = -1;
		this.__second = -1;
		var dayOffset = this.__cache.getDayOfYear(date);
		this.__days = new $.ig.DateRecurrenceRange(1, dayOffset, dayOffset);
		switch (this.__cache.__recurrence.frequency()) {
			case $.ig.scheduler.DateRecurrenceFrequency.yearly:
				this.__days.expand(this.__cache.getDaysInYear(this.__year) - 1);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.monthly:
				this.__days.expand(this.__cache.getDaysInMonth(this.__year, $.ig.Date.prototype.getMonth(date)) - 1);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.weekly:
				this.__days.expand(6);
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.daily: break;
			case $.ig.scheduler.DateRecurrenceFrequency.hourly:
				this.__hour = date.getHours();
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.minutely:
				this.__hour = date.getHours();
				this.__minute = date.getMinutes();
				break;
			case $.ig.scheduler.DateRecurrenceFrequency.secondly:
				this.__hour = date.getHours();
				this.__minute = date.getMinutes();
				this.__second = date.getSeconds();
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IncrementByFrequencyHelper(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectMonth(System.Int32)" />*/
	intersectMonth: function (month) {
		var daysInMonth = this.__cache.getDaysInMonth(this.__year, month);
		var monthStart = this.__cache.getDayOfYear($.ig.Date.prototype.fromValues(this.__year, month, 1, 0, 0, 0, 0));
		var monthRange = new $.ig.DateRecurrenceRange(1, monthStart, monthStart + daysInMonth - 1);
		this.__days.intersect(monthRange);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectMonth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectWeek(System.Int32)" />*/
	intersectWeek: function (week) {
		var daysInWeek = this.__cache.getWeekRange(this.__year, week);
		this.__days.intersect(daysInWeek);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectWeek(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfYear(System.Int32)" />*/
	intersectDayOfYear: function (dayOfYear) {
		if (dayOfYear > 0) {
			this.__days.intersect(new $.ig.DateRecurrenceRange(1, dayOfYear, dayOfYear));
		} else if (dayOfYear < 0) {
			var totalDays = this.__cache.getDaysInYear(this.__year);
			var t = totalDays + dayOfYear + 1;
			this.__days.intersect(new $.ig.DateRecurrenceRange(1, t, t));
		} else {
			$.ig.Debug.prototype.assert(false);
			this.__days.intersect($.ig.DateRecurrenceRange.prototype.empty());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfYear(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfMonth(System.Int32)" />*/
	intersectDayOfMonth: function (dayOfMonth) {
		var month = this.__cache.getMonth1(this.__year, this.__days.start());
		var range = month > 0 ? this.__cache.getMonthRange(this.__year, month) : $.ig.DateRecurrenceRange.prototype.empty();
		var dayOfYear = dayOfMonth > 0 ? Math.min(range.start() + dayOfMonth - 1, this.__days.end()) : Math.max(range.end() + dayOfMonth + 1, this.__days.start());
		var nextMonthStart = 1 + range.end();
		if (dayOfMonth > 0) {
			this.__rrHasNextMatch = nextMonthStart + dayOfMonth - 1 <= this.__days.end();
		} else {
			try {
				var date = this.__cache.addMonths(this.__cache.getDate(this.__year, dayOfYear), 1);
				var daysOfNextMonth = this.__cache.getDaysInMonth(this.__cache.getYear(date), this.__cache.getMonth(date));
				this.__rrHasNextMatch = nextMonthStart + Math.max(daysOfNextMonth + dayOfMonth, 0) + 1 <= this.__days.end();
			}
			catch (e) {
				this.__rrHasNextMatch = false;
			}
		}
		this.__days.intersect1(dayOfYear);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfMonth(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfWeek(System.DayOfWeek, System.Int32)" />*/
	intersectDayOfWeek: function (dayOfWeek, relativePosition) {
		var dt = this.__cache.getDate(this.__year, this.__days.start());
		if (0 == relativePosition) {
			var val = this.getRelativeDayOfWeek(this.__days, dayOfWeek, 0);
			this.__rrHasNextMatch = 7 + val <= this.__days.end();
			this.__days.intersect1(val);
		} else {
			if (this.__cache.__hasMonthlyRule) {
				var month = this.__cache.getMonth(dt);
				if (month < 0) {
					this.__days.intersect1(-1);
					return;
				}
				var monthRange = this.__cache.getMonthRange(this.__year, month);
				var val1 = this.getRelativeDayOfWeek(monthRange, dayOfWeek, relativePosition);
				this.__days.intersect1(val1);
			} else if (this.__cache.__hasYearlyRule) {
				var yearRange = new $.ig.DateRecurrenceRange(1, 1, this.__cache.getDaysInYear(this.__year));
				var val2 = this.getRelativeDayOfWeek(yearRange, dayOfWeek, relativePosition);
				this.__days.intersect1(val2);
			} else {
				this.__days.intersect1(-1);
				var exception = $.ig.Utils.prototype.createException("LE_InvalidDayOfWeekRule");
				this.__cache.__invalidRecurrenceRuleError = new $.ig.scheduler.DataError(exception);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::IntersectDayOfWeek(System.DayOfWeek, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::GetRelativeDayOfWeek(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange, System.DayOfWeek, System.Int32)" />*/
	getRelativeDayOfWeek: function (range, dayOfWeek, relativePos) {
		var dt = this.__cache.getDate(this.__year, range.start());
		var ii = this.__cache.getDayOfWeek(dt);
		var d = dayOfWeek - ii;
		if (d < 0) {
			d += 7;
		}
		var start = range.start() + d;
		if (relativePos > 0) {
			start += 7 * (relativePos - 1);
		} else if (relativePos < 0) {
			relativePos = -relativePos;
			var end = range.end();
			var weekCount = 1 + $.ig.intDivide((end - start), 7);
			start += 7 * (weekCount - relativePos);
		}
		return start;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::GetRelativeDayOfWeek(Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceRange, System.DayOfWeek, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::InitMatchingDate()" />*/
	initMatchingDate: function () {
		var fillDate = this.__cache.__startDate;
		var date = $.ig.Date.prototype.fromValues(this.__year, 1, 1, this.__hour >= 0 ? this.__hour : fillDate.getHours(), this.__minute >= 0 ? this.__minute : fillDate.getMinutes(), this.__second >= 0 ? this.__second : fillDate.getSeconds(), 0);
		var delta = this.__days.start() - 1;
		if (this.__days.length() > 1) {
			switch (this.__cache.__leafRuleUnit) {
				case $.ig.scheduler.DateRecurrenceFrequency.yearly:
					{
						var month = this.__cache.getMonth(fillDate);
						var monthDay = this.__cache.getDayOfMonth(fillDate);
						var maxDays = this.__cache.getDaysInMonth(this.__year, month);
						var dayOfYear = this.__cache.getDayOfYear($.ig.Date.prototype.fromValues(this.__year, month, Math.min(monthDay, maxDays), 0, 0, 0, 0));
						if (this.__days.contains(dayOfYear)) {
							delta = dayOfYear - 1;
						} else {
							$.ig.Debug.prototype.assert(false);
						}
					}
					break;
				case $.ig.scheduler.DateRecurrenceFrequency.monthly:
					{
						var month1 = this.__cache.getMonth($.ig.Date.prototype.addDays(date, delta));
						var monthDay1 = this.__cache.getDayOfMonth(fillDate);
						var maxDays1 = this.__cache.getDaysInMonth(this.__year, month1);
						var dayOfYear1 = this.__cache.getDayOfYear($.ig.Date.prototype.fromValues(this.__year, month1, Math.min(monthDay1, maxDays1), 0, 0, 0, 0));
						if (dayOfYear1 >= this.__days.start()) {
							delta = dayOfYear1 - 1;
						} else {
							$.ig.Debug.prototype.assert(false);
						}
					}
					break;
				case $.ig.scheduler.DateRecurrenceFrequency.weekly:
					{
						var dayOfWeek = this.__cache.getDayOfWeekNumber(fillDate);
						var weekStart = this.__cache.__calendar.getFirstDayOfWeekForDate2($.ig.Date.prototype.addDays(date, delta));
						var tmp = this.__cache.addDays(weekStart, dayOfWeek);
						var dayOfYear2 = this.__cache.getDayOfYear(tmp);
						if (this.__days.contains(dayOfYear2)) {
							delta = dayOfYear2 - 1;
						} else if (1 + this.__year == tmp.getFullYear() && dayOfYear2 < this.__days.start() && this.__cache.getDateRange(date, this.__days).contains(tmp)) {
							date = tmp;
							delta = 0;
						} else {
							$.ig.Debug.prototype.assert(false);
						}
					}
					break;
			}
		}
		this.__date = this.__cache.addDays(date, delta);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState::InitMatchingDate()" />*/
	,
	$type: new $.ig.Type('DateRecurrenceState', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceState" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.CalendarHelper" />*/

$.ig.util.defType('CalendarHelper', 'Object', {
	__calendar: null,
	__dateTimeFormat: null,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CalendarHelper.prototype.init1.call(this, 1, $.ig.CultureInfo.prototype.currentCulture());
	},
	init1: function (initNumber, culture) {
		$.ig.CalendarHelper.prototype.init2.call(this, 2, culture.calendar(), culture.dateTimeFormat());
	},
	init2: function (initNumber, calendar, formatInfo) {
		$.ig.Object.prototype.init.call(this);
		this.initialize(calendar, formatInfo);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::VerifyCanChange()" />*/
	verifyCanChange: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::VerifyCanChange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::Initialize(System.Globalization.Calendar, System.Globalization.DateTimeFormatInfo)" />*/
	initialize: function (calendar, formatInfo) {
		if (this.__calendar != null) {
			this.verifyCanChange();
		}
		if (calendar == null) {
			throw new $.ig.ArgumentNullException(0, "calendar");
		}
		if (formatInfo == null) {
			throw new $.ig.ArgumentNullException(0, "formatInfo");
		}
		this.__calendar = calendar;
		this.__dateTimeFormat = formatInfo;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::Initialize(System.Globalization.Calendar, System.Globalization.DateTimeFormatInfo)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddDays(System.DateTime, System.Int32)" />*/
	addDays: function (date, days) {
		return $.ig.CalendarHelper.prototype.addDays1(date, days, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddDays(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddDays(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addDays1: function (date, days, calendar) {
		try {
			return $.ig.CalendarExtensions.prototype.addDays(calendar, date, days);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, days < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddDays(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddHours(System.DateTime, System.Int32)" />*/
	addHours: function (date, hours) {
		return $.ig.CalendarHelper.prototype.addHours1(date, hours, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddHours(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddHours(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addHours1: function (date, hours, calendar) {
		try {
			return $.ig.CalendarExtensions.prototype.addHours(calendar, date, hours);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, hours < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddHours(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMinutes(System.DateTime, System.Int32)" />*/
	addMinutes: function (date, minutes) {
		return $.ig.CalendarHelper.prototype.addMinutes1(date, minutes, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMinutes(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMinutes(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addMinutes1: function (date, minutes, calendar) {
		try {
			return $.ig.CalendarExtensions.prototype.addMinutes(calendar, date, minutes);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, minutes < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMinutes(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMonths(System.DateTime, System.Int32)" />*/
	addMonths: function (date, months) {
		return $.ig.CalendarHelper.prototype.addMonths1(date, months, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMonths(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMonths(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addMonths1: function (date, months, calendar) {
		try {
			return calendar.addMonths(date, months);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, months < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddMonths(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddSeconds(System.DateTime, System.Int32)" />*/
	addSeconds: function (date, seconds) {
		return $.ig.CalendarHelper.prototype.addSeconds1(date, seconds, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddSeconds(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddSeconds(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addSeconds1: function (date, seconds, calendar) {
		try {
			return $.ig.CalendarExtensions.prototype.addSeconds(calendar, date, seconds);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, seconds < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddSeconds(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddWeeks(System.DateTime, System.Int32)" />*/
	addWeeks: function (date, weeks) {
		return $.ig.CalendarHelper.prototype.addWeeks1(date, weeks, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddWeeks(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddWeeks(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addWeeks1: function (date, weeks, calendar) {
		try {
			return $.ig.CalendarExtensions.prototype.addWeeks(calendar, date, weeks);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, weeks < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddWeeks(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddYears(System.DateTime, System.Int32)" />*/
	addYears: function (date, years) {
		return $.ig.CalendarHelper.prototype.addYears1(date, years, this.__calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddYears(System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddYears(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	addYears1: function (date, years, calendar) {
		try {
			return calendar.addYears(date, years);
		}
		catch (e) {
			return $.ig.CalendarHelper.prototype.getMinMax(calendar, years < 0);
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::AddYears(System.DateTime, System.Int32, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstDayOfWeekForDate(System.DateTime, System.Nullable, System.Int32)" />*/
	getFirstDayOfWeekForDate1: function (date, firstDayOfWeek, additionalOffset) {
		var $self = this;
		return {
			ret: (function () { var $ret = $.ig.CalendarHelper.prototype.getFirstDayOfWeekForDate(date, !$.ig.util.nullableIsNull(firstDayOfWeek) ? firstDayOfWeek.value() : $self.__dateTimeFormat.firstDayOfWeek(), $self.__calendar, additionalOffset); additionalOffset = $ret.p3; return $ret.ret; }()),
			p2: additionalOffset
		};
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstDayOfWeekForDate(System.DateTime, System.Nullable, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstDayOfWeekForDate(System.DateTime, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	getFirstDayOfWeekForDate: function (date, firstDayOfWeek, calendar, additionalOffset) {
		var offset = $.ig.CalendarHelper.prototype.getDayOfWeekNumber(date, $.ig.DayOfWeekFlags.prototype.none, firstDayOfWeek, calendar);
		try {
			date = $.ig.CalendarExtensions.prototype.addDays(calendar, date, -offset);
			additionalOffset = 0;
		}
		catch (e) {
			var min = $.ig.CalendarHelper.prototype.getMinSupportedDateTime(calendar);
			var delta = date - min;
			additionalOffset = offset - $.ig.util.timeSpanDays(delta);
			date = $.ig.CalendarHelper.prototype.getMinSupportedDateTime(calendar);
		}
		return {
			ret: date,
			p3: additionalOffset
		};
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstDayOfWeekForDate(System.DateTime, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInMonth(System.DateTime)" />*/
	getDaysInMonth: function (date) {
		return $.ig.CalendarHelper.prototype.getDaysInMonth1(date, this.__calendar);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInMonth(System.DateTime, System.Globalization.Calendar)" />*/
	getDaysInMonth1: function (date, calendar) {
		var month = calendar.getMonth(date);
		var year = calendar.getYear(date);
		var era = calendar.getEra(date);
		return calendar.getDaysInMonth(year, month, era);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInMonth(System.DateTime, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInYear(System.DateTime)" />*/
	getDaysInYear: function (date) {
		return $.ig.CalendarHelper.prototype.getDaysInYear1(date, this.__calendar);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInYear(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInYear(System.DateTime, System.Globalization.Calendar)" />*/
	getDaysInYear1: function (date, calendar) {
		var year = calendar.getYear(date);
		var era = calendar.getEra(date);
		return calendar.getDaysInYear(year, era);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDaysInYear(System.DateTime, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfMonth(System.DateTime)" />*/
	getDayOfMonth: function (date) {
		return this.__calendar.getDayOfMonth(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeek(System.DateTime)" />*/
	getDayOfWeek: function (date) {
		return $.ig.CalendarExtensions.prototype.getDayOfWeek(this.__calendar, date);
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeek(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeekNumber(System.DateTime, Infragistics.Scheduler.DayOfWeekFlags, System.Nullable)" />*/
	getDayOfWeekNumber1: function (date, hiddenDays, firstDayOfWeek) {
		return $.ig.CalendarHelper.prototype.getDayOfWeekNumber(date, hiddenDays, !$.ig.util.nullableIsNull(firstDayOfWeek) ? firstDayOfWeek.value() : this.__dateTimeFormat.firstDayOfWeek(), this.__calendar);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeekNumber(System.DateTime, Infragistics.Scheduler.DayOfWeekFlags, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeekNumber(System.DateTime, Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek, System.Globalization.Calendar)" />*/
	getDayOfWeekNumber: function (date, hiddenDays, firstDayOfWeek, calendar) {
		if (hiddenDays != $.ig.DayOfWeekFlags.prototype.none) {
			return $.ig.CalendarHelper.prototype.getVisibleDayCount(hiddenDays, firstDayOfWeek, $.ig.CalendarExtensions.prototype.getDayOfWeek(calendar, date));
		}
		var dow = $.ig.CalendarExtensions.prototype.getDayOfWeek(calendar, date);
		return (dow - firstDayOfWeek + 7) % 7;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfWeekNumber(System.DateTime, Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek, System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetVisibleDayCount(Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek, System.DayOfWeek)" />*/
	getVisibleDayCount: function (hiddenDays, firstDayOfWeek, dayOfWeek) {
		$.ig.Debug.prototype.assert1(false == $.ig.CalendarHelper.prototype.isSet(hiddenDays, dayOfWeek), "The date being evaluated is hidden!");
		var firstDow = firstDayOfWeek;
		var dow = dayOfWeek;
		var count = 0;
		if (firstDow > dow) {
			dow += 7;
		}
		while (dow >= firstDow) {
			if (false == $.ig.CalendarHelper.prototype.isSet(hiddenDays, dow)) {
				count++;
			}
			dow--;
		}
		return count - 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetVisibleDayCount(Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek, System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::IsSet(Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek)" />*/
	isSet: function (days, day) {
		return 0 != ((1 << day) & days);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::IsSet(Infragistics.Scheduler.DayOfWeekFlags, System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfYear(System.DateTime)" />*/
	getDayOfYear: function (date) {
		return $.ig.CalendarExtensions.prototype.getDayOfYear(this.__calendar, date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetDayOfYear(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstWeekOfYearDate(System.Int32, System.Nullable, System.Globalization.CalendarWeekRule, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	getFirstWeekOfYearDate: function (year, era, weekRule, firstDayOfWeek, calendar, additionalOffset) {
		$.ig.Debug.prototype.assert1(year > 0, "Invalid year");
		var date = $.ig.util.nullableEquals(era, null) ? $.ig.CalendarExtensions.prototype.toDateTime(calendar, year, 1, 1, 0, 0, 0, 0, 0) : calendar.toDateTime(year, 1, 1, 0, 0, 0, 0, era.value());
		var dayOfWeek = $.ig.CalendarExtensions.prototype.getDayOfWeek(calendar, date);
		var daysFromWeekStart = dayOfWeek - firstDayOfWeek;
		var offset = 0;
		switch (weekRule) {
			case $.ig.CalendarWeekRule.prototype.firstFourDayWeek:
				{
					if (daysFromWeekStart > 3) {
						offset = 7 - daysFromWeekStart;
					} else if (daysFromWeekStart < -3) {
						offset = -(7 + daysFromWeekStart);
					} else {
						offset = -daysFromWeekStart;
					}
					break;
				}
			case $.ig.CalendarWeekRule.prototype.firstFullWeek:
				{
					if (daysFromWeekStart > 0) {
						offset = 7 - daysFromWeekStart;
					} else if (daysFromWeekStart < 0) {
						offset = -daysFromWeekStart;
					}
					break;
				}
			default:
			case $.ig.CalendarWeekRule.prototype.firstDay:
				{
					if (daysFromWeekStart < 0) {
						offset = -(7 + daysFromWeekStart);
					} else {
						offset = -daysFromWeekStart;
					}
					break;
				}
		}
		try {
			date = $.ig.Date.prototype.addDays(date, offset);
			additionalOffset = 0;
		}
		catch (e) {
			var min = $.ig.CalendarHelper.prototype.getMinSupportedDateTime(calendar);
			var delta = date - min;
			additionalOffset = offset - $.ig.util.timeSpanDays(delta);
			date = $.ig.CalendarHelper.prototype.getMinSupportedDateTime(calendar);
		}
		return {
			ret: date,
			p5: additionalOffset
		};
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetFirstWeekOfYearDate(System.Int32, System.Nullable, System.Globalization.CalendarWeekRule, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMonthNumber(System.DateTime)" />*/
	getMonthNumber: function (date) {
		return this.__calendar.getMonth(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMonthNumber(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetWeekNumberForDate(System.DateTime, System.Nullable, System.Nullable, System.Int32)" />*/
	getWeekNumberForDate1: function (date, weekRule, firstDayOfWeek, yearContainingWeek) {
		var $self = this;
		return {
			ret: (function () { var $ret = $.ig.CalendarHelper.prototype.getWeekNumberForDate(date, !$.ig.util.nullableIsNull(weekRule) ? weekRule.value() : $self.__dateTimeFormat.calendarWeekRule(), !$.ig.util.nullableIsNull(firstDayOfWeek) ? firstDayOfWeek.value() : $self.__dateTimeFormat.firstDayOfWeek(), $self.__calendar, yearContainingWeek); yearContainingWeek = $ret.p4; return $ret.ret; }()),
			p3: yearContainingWeek
		};
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetWeekNumberForDate(System.DateTime, System.Nullable, System.Nullable, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetWeekNumberForDate(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	getWeekNumberForDate: function (date, weekRule, firstDayOfWeek, calendar, yearContainingWeek) {
		var year = calendar.getYear(date);
		if (year < calendar.getYear($.ig.CalendarHelper.prototype.getMaxSupportedDateTime(calendar))) {
			year++;
		}
		var era = calendar.getEra(date);
		var additionalOffset;
		var firstWeekDate = (function () { var $ret = $.ig.CalendarHelper.prototype.getFirstWeekOfYearDate(year, $.ig.util.toNullable($.ig.Number.prototype.$type, era), weekRule, firstDayOfWeek, calendar, additionalOffset); additionalOffset = $ret.p5; return $ret.ret; }());
		while (firstWeekDate > date) {
			if (year == 1) {
				yearContainingWeek = 0;
				return {
					ret: 0,
					p4: yearContainingWeek
				};
			}
			firstWeekDate = (function () { var $ret = $.ig.CalendarHelper.prototype.getFirstWeekOfYearDate(--year, $.ig.util.toNullable($.ig.Number.prototype.$type, era), weekRule, firstDayOfWeek, calendar, additionalOffset); additionalOffset = $ret.p5; return $ret.ret; }());
		}
		yearContainingWeek = year;
		var timeDiff = date - firstWeekDate;
		return {
			ret: ($.ig.intDivide(($.ig.util.timeSpanDays(timeDiff) - additionalOffset), 7)) + 1,
			p4: yearContainingWeek
		};
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetWeekNumberForDate(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek, System.Globalization.Calendar, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetYear(System.DateTime)" />*/
	getYear: function (date) {
		return this.__calendar.getYear(date);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetYear(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMinMax(System.Globalization.Calendar, System.Boolean)" />*/
	getMinMax: function (calendar, min) {
		return min ? $.ig.CalendarHelper.prototype.getMinSupportedDateTime(calendar) : $.ig.CalendarHelper.prototype.getMaxSupportedDateTime(calendar);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMinMax(System.Globalization.Calendar, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMinSupportedDateTime(System.Globalization.Calendar)" />*/
	getMinSupportedDateTime: function (calendar) {
		return $.ig.Date.prototype.minValue();
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMinSupportedDateTime(System.Globalization.Calendar)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMaxSupportedDateTime(System.Globalization.Calendar)" />*/
	getMaxSupportedDateTime: function (calendar) {
		return $.ig.Date.prototype.maxValue();
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarHelper::GetMaxSupportedDateTime(System.Globalization.Calendar)" />*/
	,
	$type: new $.ig.Type('CalendarHelper', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.CalendarHelper" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper" />*/

$.ig.util.defType('RecurrenceCalendarHelper', 'CalendarHelper', {
	__firstDayOfWeek: 0,
	init: function () {
		$.ig.CalendarHelper.prototype.init1.call(this, 1, $.ig.CultureInfo.prototype.invariantCulture());
	},
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetDayOfWeekNumber(System.DateTime)" />*/
	getDayOfWeekNumber2: function (date) {
		return this.getDayOfWeekNumber1(date, $.ig.DayOfWeekFlags.prototype.none, $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, this.__firstDayOfWeek));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetDayOfWeekNumber(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetFirstDayOfWeekForDate(System.DateTime)" />*/
	getFirstDayOfWeekForDate2: function (date) {
		var $self = this;
		var additionalOffset;
		return (function () { var $ret = $self.getFirstDayOfWeekForDate1(date, $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, $self.__firstDayOfWeek), additionalOffset); additionalOffset = $ret.p2; return $ret.ret; }());
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetFirstDayOfWeekForDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetFirstWeekOfYearDate(System.Int32)" />*/
	getFirstWeekOfYearDate1: function (year) {
		var $self = this;
		var additionalOffset;
		return (function () { var $ret = $.ig.CalendarHelper.prototype.getFirstWeekOfYearDate(year, $.ig.util.toNullable($.ig.Number.prototype.$type, null), $.ig.RecurrenceCalendarHelper.prototype._weekRule, $self.__firstDayOfWeek, $self.__calendar, additionalOffset); additionalOffset = $ret.p5; return $ret.ret; }());
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetFirstWeekOfYearDate(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetWeekNumberForDate(System.DateTime, System.Int32)" />*/
	getWeekNumberForDate2: function (date, weekYear) {
		var $self = this;
		return {
			ret: (function () { var $ret = $self.getWeekNumberForDate1(date, $.ig.util.toNullable($.ig.CalendarWeekRule.prototype.$type, $.ig.RecurrenceCalendarHelper.prototype._weekRule), $.ig.util.toNullable($.ig.DayOfWeek.prototype.$type, $self.__firstDayOfWeek), weekYear); weekYear = $ret.p3; return $ret.ret; }()),
			p1: weekYear
		};
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper::GetWeekNumberForDate(System.DateTime, System.Int32)" />*/
	,
	$type: new $.ig.Type('RecurrenceCalendarHelper', $.ig.CalendarHelper.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions" />*/

$.ig.util.defType('CalendarExtensions', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::MinSupportedDateTime()" />*/
	minSupportedDateTime: function () {
		return $.ig.Date.prototype.minValue();
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::MinSupportedDateTime()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::MaxSupportedDateTime()" />*/
	maxSupportedDateTime: function () {
		return $.ig.Date.prototype.maxValue();
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::MaxSupportedDateTime()" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::GetDayOfWeek(System.Globalization.Calendar, System.DateTime)" />*/
	getDayOfWeek: function (calendar, date) {
		return date.getDay();
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::GetDayOfWeek(System.Globalization.Calendar, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::GetDayOfYear(System.Globalization.Calendar, System.DateTime)" />*/
	getDayOfYear: function (calendar, date) {
		var firstOfYear = $.ig.Date.prototype.fromValues(date.getFullYear(), 1, 1, 0, 0, 0, 0);
		var span = date - firstOfYear;
		return $.ig.truncate($.ig.util.timeSpanTotalDays(span));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::GetDayOfYear(System.Globalization.Calendar, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::ToDateTime(System.Globalization.Calendar, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	toDateTime: function (calendar, year, month, day, hour, minute, second, millisecond, era) {
		return $.ig.Date.prototype.fromValues(year, month, day, hour, minute, second, millisecond);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::ToDateTime(System.Globalization.Calendar, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddSeconds(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addSeconds: function (calendar, date, value) {
		return $.ig.Date.prototype.addSeconds(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddSeconds(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddMinutes(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addMinutes: function (calendar, date, value) {
		return $.ig.Date.prototype.addMinutes(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddMinutes(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddHours(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addHours: function (calendar, date, value) {
		return $.ig.Date.prototype.addHours(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddHours(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddDays(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addDays: function (calendar, date, value) {
		return $.ig.Date.prototype.addDays(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddDays(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddWeeks(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addWeeks: function (calendar, date, value) {
		return $.ig.Date.prototype.addDays(date, value * $.ig.DateUtils.prototype.daysInWeek);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddWeeks(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddMonths(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addMonths: function (calendar, date, value) {
		return $.ig.Date.prototype.addMonths(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddMonths(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddYears(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	addYears: function (calendar, date, value) {
		return $.ig.Date.prototype.addYears(date, value);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions::AddYears(System.Globalization.Calendar, System.DateTime, System.Int32)" />*/
	,
	$type: new $.ig.Type('CalendarExtensions', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.CalendarExtensions" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo" />*/

$.ig.util.defType('RecurrenceInfo', 'Object', {
	__recurrence: null,
	__startDateTime: new Date(),
	__occurrenceDuration: null,
	__context: null,
	init: function (recurrence, startDateTime, occurrenceDuration, context) {
		this.__occurrenceDuration = new $.ig.Number();
		$.ig.Object.prototype.init.call(this);
		if (recurrence == null) {
			throw new $.ig.ArgumentNullException(0, "recurrence");
		}
		this.__recurrence = recurrence;
		this.__startDateTime = startDateTime;
		this.__occurrenceDuration = occurrenceDuration;
		this.__context = context;
	},
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Context()" />*/
	context: function () {
		return this.__context;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Context()" />*/
	,
	/*<BeginProperty Name="System.TimeSpan Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::OccurrenceDuration()" />*/
	occurrenceDuration: function () {
		return this.__occurrenceDuration;
	}
	/*<EndProperty Name="System.TimeSpan Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::OccurrenceDuration()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Recurrence()" />*/
	recurrence: function () {
		return this.__recurrence;
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Recurrence()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::StartDateTime()" />*/
	startDateTime: function () {
		return this.__startDateTime;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::StartDateTime()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Clone()" />*/
	clone: function () {
		var clone = this.memberwiseClone();
		clone.__recurrence = this.__recurrence._clone();
		return clone;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo::Clone()" />*/
	,
	$type: new $.ig.Type('RecurrenceInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils" />*/

$.ig.util.defType('RecurrenceUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::Min(System.DateTime, System.DateTime)" />*/
	min: function (x, y) {
		return y < x ? y : x;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::Min(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::MaxReached(System.Int32, System.Int32)" />*/
	maxReached: function (max, value) {
		return max > 0 && value >= max;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::MaxReached(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::CombineHashCodes`1(System.Collections.Generic.IEnumerable, System.Collections.Generic.IEqualityComparer)" />*/
	combineHashCodes$1: function ($t, items, comparer) {
		var h = 0;
		if (null != items) {
			if (null == comparer) {
				comparer = $.ig.EqualityComparer$1.prototype.defaultEqualityComparerValue($t);
			}
			var en = items.getEnumerator();
			while (en.moveNext()) {
				var ii = en.current();
				h ^= comparer.getHashCodeC(ii);
			}
		}
		return h;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::CombineHashCodes`1(System.Collections.Generic.IEnumerable, System.Collections.Generic.IEqualityComparer)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::TruncateToSecond(System.DateTime)" />*/
	truncateToSecond: function (date) {
		return $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::TruncateToSecond(System.DateTime)" />*/
	,
	/*<BeginProperty Name="System.Globalization.CultureInfo Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::ParseCulture()" />*/
	parseCulture: function () {
		return $.ig.CultureInfo.prototype.invariantCulture();
	}
	/*<EndProperty Name="System.Globalization.CultureInfo Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils::ParseCulture()" />*/
	,
	$type: new $.ig.Type('RecurrenceUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceUtils" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo" />*/

$.ig.util.defType('DateRecurrenceSubsetInfo', 'Object', {
	__matches: null,
	__subsetIndeces: null,
	__isEnumerating: false,
	__currentMatchDate: new Date(),
	__matchesOutOfOrder: false,
	__matchesOutOfOrder_lastDate: new Date(),
	init: function (subsetRules) {
		this.__matches = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		$.ig.Object.prototype.init.call(this);
		var indexes = null;
		if (subsetRules != null) {
			indexes = new Array(subsetRules.length);
			for (var i = 0; i < subsetRules.length; i++) {
				indexes[i] = subsetRules[i].occurrenceInstance();
			}
		} else {
			indexes = new Array(0);
		}
		this.__subsetIndeces = indexes;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::AccumulateMatch(System.DateTime)" />*/
	accumulateMatch: function (date) {
		$.ig.Debug.prototype.assert(!this.__isEnumerating);
		this.__matches.add(date);
		if (!this.__matchesOutOfOrder) {
			this.__matchesOutOfOrder = this.__matchesOutOfOrder_lastDate > date;
			this.__matchesOutOfOrder_lastDate = date;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::AccumulateMatch(System.DateTime)" />*/
	,
	__iterator: 0,
	__resultList: null,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::StartEnumerating()" />*/
	startEnumerating: function () {
		this.__isEnumerating = false;
		if (this.__matches.count() > 0) {
			if (this.__matchesOutOfOrder) {
				this.__matches.sort();
				this.__matchesOutOfOrder = false;
			}
			var arr = this.__subsetIndeces;
			var matches = this.__matches;
			if (null == arr || 0 == arr.length) {
				this.__resultList = matches;
			} else {
				this.__resultList = new $.ig.List$1($.ig.Date.prototype.$type, 0);
				for (var i = 0; i < arr.length; i++) {
					var index = arr[i];
					if (index > 0) {
						if (index <= matches.count()) {
							this.__resultList.add(matches.__inner[index - 1]);
						}
					} else if (index < 0) {
						index = matches.count() + index;
						if (index >= 0) {
							this.__resultList.add(matches.__inner[index]);
						}
					}
				}
			}
			this.__iterator = -1;
			this.__isEnumerating = this.__resultList.count() > 0;
		}
		return this.__isEnumerating;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::StartEnumerating()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::MoveNext()" />*/
	moveNext: function () {
		if (++this.__iterator < this.__resultList.count()) {
			this.__currentMatchDate = this.__resultList.__inner[this.__iterator];
			return true;
		}
		this.__isEnumerating = false;
		this.__matches.clear();
		this.__matchesOutOfOrder = false;
		this.__matchesOutOfOrder_lastDate = $.ig.Date.prototype.minValue();
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo::MoveNext()" />*/
	,
	$type: new $.ig.Type('DateRecurrenceSubsetInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceSubsetInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager" />*/

$.ig.util.defType('RecurrenceManager', 'Object', {
	__storage: null,
	__activityRecurrenceTable: null,
	init: function (dataSource) {
		$.ig.Object.prototype.init.call(this);
		this.dataSource(dataSource);
		this.__storage = new $.ig.RecurrenceStorageManager$1($.ig.scheduler.ActivityBase.prototype.$type);
	},
	_dataSource: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::DataSource()" />*/
	dataSource: function (value) {
		if (arguments.length === 1) {
			this._dataSource = value;
			return value;
		} else {
			return this._dataSource;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::DataSource()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Initialize(System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	initialize: function (list, varianceTable) {
		this.__storage._initialize(list);
		if (varianceTable != null) {
			var en = varianceTable.getEnumerator();
			while (en.moveNext()) {
				var pair = en.current();
				var recurrenceId = pair.key();
				var root = this.__storage._item(recurrenceId);
				var recurrence = root != null ? this.getActivityRecurrence(root) : null;
				if (recurrence != null) {
					var en1 = pair.value().getEnumerator();
					while (en1.moveNext()) {
						var variance = en1.current();
						recurrence.registerVariance(variance);
					}
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Initialize(System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Add(Infragistics.Scheduler.ActivityBase)" />*/
	add: function (root) {
		this.__storage._add(root);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Add(Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Remove(Infragistics.Scheduler.ActivityBase)" />*/
	remove: function (root) {
		this.__storage._remove(root);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::Remove(Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetRecurrenceRoot(System.String)" />*/
	getRecurrenceRoot1: function (id) {
		return this.__storage == null ? null : this.__storage._item(id);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetRecurrenceRoot(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivitiesInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	getActivitiesInRange: function (range, resources) {
		var activities = new $.ig.List$1($.ig.scheduler.ActivityBase.prototype.$type, 0);
		var hasActivity = false;
		var $ret = this.getActivitiesInRangeHelper(range, resources, null, activities, false, hasActivity);
		hasActivity = $ret.p5;
		return activities;
	}
	/*<EndMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivitiesInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Collections.Generic.IList, System.Collections.Generic.IList, System.Boolean, System.Boolean)" />*/
	getActivitiesInRangeHelper: function (range, resources, datesWithActivity, activities, findFirst, hasActivity) {
		hasActivity = false;
		if (this.__storage == null) {
			return {
				p5: hasActivity
			};
		}
		var hs = new $.ig.HashSet$1($.ig.Number.prototype.$type, 0);
		var en = this.__storage.getEnumerator();
		while (en.moveNext()) {
			var activity = en.current();
			if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource1(activity, resources) == false) {
				continue;
			}
			var recurrence = this.getActivityRecurrence(activity);
			if (recurrence == null) {
				continue;
			}
			var recurrenceStart = recurrence.info().startDateTime();
			if (range.end() <= recurrenceStart) {
				continue;
			}
			if (recurrence.recurrence()._until$i().hasValue() && recurrence.recurrence()._until$i().value() < range.start()) {
				continue;
			}
			var max = recurrence.recurrence().count();
			var dates = recurrence.cache().generate(range, max);
			var variancesAlreadyProcessed = new $.ig.HashSet$1($.ig.scheduler.ActivityBase.prototype.$type, 0);
			var en1 = dates.getEnumerator();
			while (en1.moveNext()) {
				var date = en1.current();
				var variance = this.getVariance(recurrence, date);
				var dateHasActivity = false;
				if (variance != null) {
					variancesAlreadyProcessed.add(variance);
					if (variance.isRemoved()) {
						continue;
					} else {
						dateHasActivity = true;
						if (activities != null) {
							activities.add(variance);
						}
					}
				} else {
					dateHasActivity = true;
					var occurrence = this.createOccurrence(activity, date);
					if (activities != null) {
						activities.add(occurrence);
					}
				}
				if (dateHasActivity && datesWithActivity != null) {
					var ticks = $.ig.Date.prototype.getDate(date).getTime();
					hs.add(ticks);
				}
				if (dateHasActivity) {
					hasActivity = true;
				}
				if (findFirst) {
					break;
				}
			}
			var additionalVariances = recurrence.getAllVariances(range);
			var en2 = additionalVariances.getEnumerator();
			while (en2.moveNext()) {
				var variance1 = en2.current();
				if (variance1.isRemoved()) {
					continue;
				}
				if (variancesAlreadyProcessed.add(variance1)) {
					if (datesWithActivity != null) {
						var intersection = variance1._getIntersectingDates();
						var en3 = intersection.getEnumerator();
						while (en3.moveNext()) {
							var d = en3.current();
							hs.add(d.getTime());
						}
					}
					activities.add(variance1);
				}
			}
		}
		if (datesWithActivity != null && hs.count() > 0) {
			var en4 = hs.getEnumerator();
			while (en4.moveNext()) {
				var ticks1 = en4.current();
				var date1 = $.ig.Date.prototype.fromTicks(ticks1);
				datesWithActivity.add(date1);
			}
		}
		return {
			p5: hasActivity
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Collections.Generic.IList, System.Collections.Generic.IList, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivityCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, Infragistics.Scheduler.Data.ActivityCountQueryResult)" />*/
	getActivityCounts: function (range, resources, result) {
		var activities = this.getActivitiesInRange(range, resources);
		if (activities.count() == 0) {
			return;
		}
		var table = new $.ig.Dictionary$2(String, $.ig.Number.prototype.$type, 0);
		var en = result.dates().getEnumerator();
		while (en.moveNext()) {
			var date = en.current();
			var key = $.ig.Utilities.prototype.dictionaryKeyFromDate(date);
			var count = result._item(date);
			if (count.hasValue()) {
				table.add(key, count.value());
			}
		}
		var en1 = activities.getEnumerator();
		while (en1.moveNext()) {
			var activity = en1.current();
			var activityDates = activity._getIntersectingDates();
			var en2 = activityDates.getEnumerator();
			while (en2.moveNext()) {
				var date1 = en2.current();
				var key1 = $.ig.Utilities.prototype.dictionaryKeyFromDate(date1);
				var count1 = 0;
				if ((function () { var $ret = table.tryGetValue(key1, count1); count1 = $ret.p1; return $ret.ret; }()) == false) {
					table.add(key1, 1);
				} else {
					table.item(key1, count1 + 1);
				}
			}
		}
		var dateList = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		var countList = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		var en3 = table.getEnumerator();
		while (en3.moveNext()) {
			var pair = en3.current();
			var date2 = $.ig.Utilities.prototype.dateFromDictionaryKey(pair.key());
			dateList.add(date2);
			countList.add(pair.value());
		}
		result.hasActivity(result.hasActivity() || dateList.count() > 0);
		result._initialize(dateList.toArray(), countList.toArray());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivityCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, Infragistics.Scheduler.Data.ActivityCountQueryResult)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::HasActivityInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean, System.Collections.Generic.List)" />*/
	hasActivityInRange: function (range, resources, findFirst, dates) {
		var hasActivity = false;
		var datesWithActivity = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		var $ret = this.getActivitiesInRangeHelper(range, resources, datesWithActivity, null, findFirst, hasActivity);
		hasActivity = $ret.p5;
		return hasActivity;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::HasActivityInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean, System.Collections.Generic.List)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::CreateOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	createOccurrence: function (recurrenceRoot, originalStart) {
		var occurrence = this.createActivity();
		$.ig.RecurrenceManager.prototype.initializeOccurrence(this.dataSource(), recurrenceRoot, occurrence, originalStart);
		return occurrence;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::CreateOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::InitializeOccurrence(Infragistics.Scheduler.Data.ScheduleDataSource, Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	initializeOccurrence: function (dataSource, recurrenceRoot, occurrence, originalStart) {
		occurrence.recurrenceRoot(recurrenceRoot);
		occurrence.start(originalStart);
		occurrence.end($.ig.util.dateAdd(originalStart, recurrenceRoot._duration()));
		occurrence.originalStart(originalStart);
		dataSource._initDataSource(occurrence, dataSource);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::InitializeOccurrence(Infragistics.Scheduler.Data.ScheduleDataSource, Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::CreateActivity()" />*/
	createActivity: function () {
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::CreateActivity()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivityRecurrence(Infragistics.Scheduler.ActivityBase)" />*/
	getActivityRecurrence: function (root) {
		var $self = this;
		var dr = root._internalRecurrence();
		if (dr == null) {
			$.ig.Debug.prototype.assert1(false, "This activity has no recurrence.");
			return null;
		}
		if (this.__activityRecurrenceTable == null) {
			this.__activityRecurrenceTable = new $.ig.Dictionary$2($.ig.scheduler.ActivityBase.prototype.$type, $.ig.ActivityRecurrence.prototype.$type, 0);
		}
		var recurrence = null;
		if ((function () { var $ret = $self.__activityRecurrenceTable.tryGetValue(root, recurrence); recurrence = $ret.p1; return $ret.ret; }()) == false) {
			recurrence = new $.ig.ActivityRecurrence(root, dr);
			this.__activityRecurrenceTable.add(root, recurrence);
		}
		return recurrence;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetActivityRecurrence(Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::RemoveActivityRecurrence(Infragistics.Scheduler.ActivityBase, System.Boolean, System.Boolean)" />*/
	removeActivityRecurrence: function (root, verifyIsRoot, removeDataObject) {
		if (verifyIsRoot) {
			if (root == null || root.isRecurrenceRoot() == false) {
				return;
			}
		}
		var recurrence = this.getActivityRecurrence(root);
		var variances = recurrence.getAllVariances(null);
		var index = -1;
		var dataObject = null;
		var listManager = this.dataSource()._appointmentListModificationManager();
		if (removeDataObject && variances != null) {
			var en = variances.getEnumerator();
			while (en.moveNext()) {
				var variance = en.current();
				dataObject = variance.dataObject();
				$.ig.Debug.prototype.assert1(dataObject != null, "DataObject is null");
				index = dataObject != null ? listManager.indexOf(dataObject) : -1;
				if (index >= 0) {
					listManager.removeFromItemSource(index, dataObject);
				}
				this.unregisterActivity(variance, dataObject, false);
			}
		}
		if (removeDataObject) {
			dataObject = root.dataObject();
			index = listManager.indexOf(dataObject);
			if (index >= 0) {
				listManager.removeFromItemSource(index, dataObject);
			}
		}
		if (this.__activityRecurrenceTable != null && this.__activityRecurrenceTable.containsKey(root)) {
			this.__activityRecurrenceTable.remove(root);
		}
		this.__storage._remove(root);
		this.unregisterActivity(root, dataObject, false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::RemoveActivityRecurrence(Infragistics.Scheduler.ActivityBase, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::RegisterVariance(System.String, Infragistics.Scheduler.ActivityBase)" />*/
	registerVariance: function (recurrenceId, variance) {
		var root = this.getRecurrenceRoot1(recurrenceId);
		var recurrence = root == null ? null : this.getActivityRecurrence(root);
		if (recurrence == null) {
			$.ig.Debug.prototype.assert1(false, "Could not find an ActivityRecurrence");
			return;
		}
		recurrence.registerVariance(variance);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::RegisterVariance(System.String, Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetVariance(Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence, System.DateTime)" />*/
	getVariance: function (recurrence, originalStart) {
		return recurrence.getVariance(originalStart);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetVariance(Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::UnregisterActivity(Infragistics.Scheduler.ActivityBase, System.Object, System.Boolean)" />*/
	unregisterActivity: function (activity, dataObject, removeFromTable) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::UnregisterActivity(Infragistics.Scheduler.ActivityBase, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::TransitionRecurrence(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	transitionRecurrence: function (root, oldValue, newValue) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::TransitionRecurrence(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetRecurrenceRoot(System.Object)" />*/
	getRecurrenceRoot: function (dataObject) {
		if (this.__activityRecurrenceTable == null) {
			return null;
		}
		var en = this.__activityRecurrenceTable.keys().getEnumerator();
		while (en.moveNext()) {
			var activity = en.current();
			if (activity.dataObject() == dataObject) {
				return activity;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager::GetRecurrenceRoot(System.Object)" />*/
	,
	$type: new $.ig.Type('RecurrenceManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager" />*/

$.ig.util.defType('AppointmentRecurrenceManager', 'RecurrenceManager', {
	init: function (dataSource) {
		$.ig.RecurrenceManager.prototype.init.call(this, dataSource);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::CreateActivity()" />*/
	createActivity: function () {
		return this.dataSource()._createNewAppointment(true);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::CreateActivity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Collections.Generic.IList)" />*/
	getAppointmentsInRange: function (range, resources, list) {
		var occurrences = $.ig.RecurrenceManager.prototype.getActivitiesInRange.call(this, range, resources);
		if (occurrences == null) {
			return;
		}
		var en = occurrences.getEnumerator();
		while (en.moveNext()) {
			var occurrence = en.current();
			var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, occurrence);
			list.add(appointment);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Collections.Generic.IList)" />*/
	,
	/*<BeginMethod Name="Infragistics.DateTimeRange Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::Delete(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentOperationResult)" />*/
	del: function (appointment, result) {
		var affectedRange = null;
		if (appointment == null) {
			throw new $.ig.ArgumentNullException(0, "appointment");
		}
		var exception = null;
		if (appointment.isRecurrenceRoot()) {
			try {
				this.removeActivityRecurrence(appointment, true, true);
			}
			catch (ex) {
				exception = ex;
			}
		} else if (appointment._isOccurrence()) {
			var wasVariance = appointment.dataObject() != null;
			if (appointment.dataObject() == null) {
				var listManager = this.dataSource()._appointmentListModificationManager();
				var dataObject = (function () { var $ret = listManager.createAppointmentDataObjectInstance(appointment, exception); exception = $ret.p1; return $ret.ret; }());
				if (exception == null) {
					var error = null;
					var $ret = this.dataSource()._initializeFromAppointment(appointment, dataObject, error);
					error = $ret.p2;
					if (error != null) {
						exception = error.exception();
					}
					if (exception == null) {
						this.dataSource()._registerNewAppointment(appointment, dataObject, false);
					}
				}
			}
			appointment.isRemoved(true);
			if (wasVariance == false) {
				var root = appointment.recurrenceRoot();
				var recurrence = this.getActivityRecurrence(root);
				recurrence.registerVariance(appointment);
			}
			affectedRange = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		}
		if (exception != null) {
			result._fail(new $.ig.scheduler.DataError(exception));
		} else {
			result._complete();
		}
		return affectedRange;
	}
	/*<EndMethod Name="Infragistics.DateTimeRange Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::Delete(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentOperationResult)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::UnregisterActivity(Infragistics.Scheduler.ActivityBase, System.Object, System.Boolean)" />*/
	unregisterActivity: function (activity, dataObject, removeFromTable) {
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, activity);
		if (appointment == null) {
			$.ig.Debug.prototype.assert1(false, "Expecting an appointment here.");
			return;
		}
		this.dataSource()._unregisterAppointment(appointment, dataObject, removeFromTable);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::UnregisterActivity(Infragistics.Scheduler.ActivityBase, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::TransitionRecurrence(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	transitionRecurrence: function (recurrenceRoot, oldValue, newValue) {
		var root = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, recurrenceRoot);
		var dataObject = root.dataObject();
		var wasRecurrence = String.isNullOrEmpty(oldValue) == false;
		var willBeRecurrence = String.isNullOrEmpty(newValue) == false;
		if (wasRecurrence) {
			this.removeActivityRecurrence(root, false, true);
		}
		if (wasRecurrence == false) {
			this.dataSource()._dataObjectTree().onAppointmentRemoved(root);
		}
		this.unregisterActivity(root, dataObject, wasRecurrence == false);
		if (willBeRecurrence) {
			this.getActivityRecurrence(root);
		} else {
			this.dataSource()._registerNewAppointment(root, dataObject, true);
			this.dataSource()._dataObjectTree().onAppointmentAdded(root);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::TransitionRecurrence(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::OnItemsSourceItemAdded(System.Object, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	onItemsSourceItemAdded: function (dataObject, recurrence, recurrenceId, error) {
		error = null;
		var dataError = null;
		var isRoot = String.isNullOrEmpty(recurrence) == false;
		var isRegular = false;
		var errorCallback = function (err) {
			dataError = err;
		};
		var dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		var appointment = dataObjectAsAppointment != null ? dataObjectAsAppointment : this.dataSource().createAppointment(errorCallback);
		if (dataError == null && dataObjectAsAppointment == null) {
			var $ret = this.dataSource()._initializeFromDataObject(dataObject, appointment, dataError);
			dataError = $ret.p2;
		}
		if (dataError != null) {
			error = dataError;
			return {
				ret: null,
				p3: error
			};
		}
		if (isRoot) {
			this.getActivityRecurrence(appointment);
			this.add(appointment);
		} else {
			var root = this.getRecurrenceRoot1(recurrenceId);
			if (root != null) {
				var activityRecurrence = this.getActivityRecurrence(root);
				if (activityRecurrence != null) {
					activityRecurrence.registerVariance(appointment);
				} else {
					isRegular = true;
				}
			}
		}
		if (isRegular) {
			this.dataSource()._dataObjectTree().onAppointmentAdded(appointment);
		}
		this.dataSource()._registerNewAppointment(appointment, dataObject, isRegular);
		return {
			ret: appointment,
			p3: error
		};
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::OnItemsSourceItemAdded(System.Object, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::OnItemsSourceItemRemoved(System.Object)" />*/
	onItemsSourceItemRemoved: function (dataObject) {
		var $self = this;
		if (dataObject == null) {
			return false;
		}
		var error = null;
		var id, recurrenceId, recurrence;
		if ((function () { var $ret = $.ig.ActivityTree.prototype.isRecurrenceOrVariance($self.dataSource(), dataObject, id, recurrence, recurrenceId, error); id = $ret.p2; recurrence = $ret.p3; recurrenceId = $ret.p4; error = $ret.p5; return $ret.ret; }()) == false) {
			return false;
		}
		var isRoot = String.isNullOrEmpty(recurrence) == false;
		var isVariance = String.isNullOrEmpty(recurrenceId) == false;
		var root = null;
		if (isRoot) {
			root = this.getRecurrenceRoot1(id);
			if (root == null) {
				return false;
			}
			this.removeActivityRecurrence(root, false, false);
			return true;
		} else if (isVariance) {
			root = this.getRecurrenceRoot1(recurrenceId);
			if (root == null) {
				return false;
			}
			var ar = this.getActivityRecurrence(root);
			return ar.removeVariance(dataObject);
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager::OnItemsSourceItemRemoved(System.Object)" />*/
	,
	$type: new $.ig.Type('AppointmentRecurrenceManager', $.ig.RecurrenceManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence" />*/

$.ig.util.defType('ActivityRecurrence', 'Object', {
	__variances: null,
	init: function (activity, recurrence) {
		$.ig.Object.prototype.init.call(this);
		this.activity(activity);
		this.recurrence(recurrence);
		var start = activity.start();
		var duration = activity._duration();
		this.info(new $.ig.RecurrenceInfo(this.recurrence(), start, duration, activity));
		this.cache(new $.ig.DateRecurrenceCache(this.info()));
	},
	_activity: null,
	/*<BeginProperty Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Activity()" />*/
	activity: function (value) {
		if (arguments.length === 1) {
			this._activity = value;
			return value;
		} else {
			return this._activity;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Activity()" />*/
	,
	_recurrence: null,
	/*<BeginProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Recurrence()" />*/
	recurrence: function (value) {
		if (arguments.length === 1) {
			this._recurrence = value;
			return value;
		} else {
			return this._recurrence;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.DateRecurrence Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Recurrence()" />*/
	,
	_info: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Info()" />*/
	info: function (value) {
		if (arguments.length === 1) {
			this._info = value;
			return value;
		} else {
			return this._info;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceInfo Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Info()" />*/
	,
	_cache: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Cache()" />*/
	cache: function (value) {
		if (arguments.length === 1) {
			this._cache = value;
			return value;
		} else {
			return this._cache;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceCache Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::Cache()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::RemoveVariance(System.Object)" />*/
	removeVariance: function (dataObject) {
		if (this.__variances == null) {
			return false;
		}
		var activity = null;
		var en = this.__variances.getEnumerator();
		while (en.moveNext()) {
			var variance = en.current();
			if (variance.dataObject() == dataObject) {
				activity = variance;
				break;
			}
		}
		if (activity != null) {
			return this.__variances.remove(activity);
		} else {
			return false;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::RemoveVariance(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::RegisterVariance(Infragistics.Scheduler.ActivityBase)" />*/
	registerVariance: function (variance) {
		if (this.__variances == null) {
			this.__variances = new $.ig.HashSet$1($.ig.scheduler.ActivityBase.prototype.$type, 0);
		}
		this.__variances.add(variance);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::RegisterVariance(Infragistics.Scheduler.ActivityBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::GetVariance(System.DateTime)" />*/
	getVariance: function (originalStart) {
		if (this.__variances == null) {
			return null;
		}
		var en = this.__variances.getEnumerator();
		while (en.moveNext()) {
			var variance = en.current();
			if (+(variance.originalStart()) == +originalStart) {
				return variance;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::GetVariance(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::GetAllVariances(Infragistics.DateTimeRange)" />*/
	getAllVariances: function (range) {
		if (range == null) {
			return this.__variances;
		}
		var list = new $.ig.List$1($.ig.scheduler.ActivityBase.prototype.$type, 0);
		if (this.__variances != null) {
			var en = this.__variances.getEnumerator();
			while (en.moveNext()) {
				var variance = en.current();
				if (range._intersectsWith1(variance.start(), variance.end(), true)) {
					list.add(variance);
				}
			}
		}
		return list;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence::GetAllVariances(Infragistics.DateTimeRange)" />*/
	,
	$type: new $.ig.Type('ActivityRecurrence', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.ActivityRecurrence" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1" />*/

$.ig.util.defType('RecurrenceStorageManager$1', 'Object', {
	$t: null,
	___storage: null,
	___emptyList: null,
	init: function ($t) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		this.___emptyList = new $.ig.List$1(this.$t, 2, 0);
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Initialize(System.Collections.Generic.IList)" />*/
	_initialize: function (list) {
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var root = en.current();
			this._validate(root);
		}
		if (list.count() > $.ig.Utils.prototype.maxListSize) {
			this.___storage = new $.ig.RecurrenceStorageTable$1(this.$t, list);
		} else {
			this.___storage = new $.ig.RecurrenceStorageList$1(this.$t, 1, list);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Initialize(System.Collections.Generic.IList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	_add: function (root) {
		this._validate(root);
		if (this.___storage == null) {
			this.___storage = new $.ig.RecurrenceStorageList$1(this.$t, 0, root);
		} else {
			this.___storage = this.___storage._add(root);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	_remove: function (root) {
		this._validate(root);
		if (this.___storage == null) {
			return;
		}
		this.___storage = this.___storage._remove(root);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Item(System.String)" />*/
	_item: function (id) {
		if (this.___storage == null) {
			return null;
		}
		return this.___storage._item(id);
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Item(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Validate(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	_validate: function (root) {
		$.ig.Debug.prototype.assert1(String.isNullOrEmpty(root.id()) == false, "ActivityBase.Id is not set - this should never happen.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::Validate(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager.T)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::System.Collections.Generic.IEnumerable<T>.GetEnumerator()" />*/
	getEnumerator: function () {
		if (this.___storage == null) {
			return this.___emptyList.getEnumerator();
		}
		var storage = $.ig.util.cast($.ig.IEnumerable$1.prototype.$type.specialize(this.$t), this.___storage);
		return storage.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::System.Collections.Generic.IEnumerable<T>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::System.Collections.IEnumerable.GetEnumerator()" />*/
	getEnumerator1: function () {
		var impl = $.ig.util.cast($.ig.IEnumerable$1.prototype.$type.specialize(this.$t), this);
		return impl.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1::System.Collections.IEnumerable.GetEnumerator()" />*/
	,
	$type: new $.ig.Type('RecurrenceStorageManager$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageManager`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1" />*/

$.ig.util.defType('RecurrenceStorage$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T)" />*/
	_add: function (root) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T)" />*/
	_remove: function (root) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::GetItem(System.String)" />*/
	_getItem: function (id) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::GetItem(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::GetEnumerator()" />*/
	_getEnumerator: function () {
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::System.Collections.Generic.IEnumerable<T>.GetEnumerator()" />*/
	getEnumerator: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::System.Collections.Generic.IEnumerable<T>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::System.Collections.IEnumerable.GetEnumerator()" />*/
	getEnumerator1: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::System.Collections.IEnumerable.GetEnumerator()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Item(System.String)" />*/
	_item: function (id) {
		return this._getItem(id);
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1::Item(System.String)" />*/
	,
	$type: new $.ig.Type('RecurrenceStorage$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1" />*/

$.ig.util.defType('RecurrenceStorageList$1', 'RecurrenceStorage$1', {
	$t: null,
	___list: null,
	init: function ($t, initNumber, root) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.RecurrenceStorage$1.prototype.init.call(this, this.$t);
		this.___list = new $.ig.List$1(this.$t, 2, $.ig.Utils.prototype.maxListSize);
		this.___list.add(root);
	},
	init1: function ($t, initNumber, list) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.RecurrenceStorage$1.prototype.init.call(this, this.$t);
		this.___list = new $.ig.List$1(this.$t, 2, $.ig.Utils.prototype.maxListSize);
		this.___list.addRange(list);
	},
	init2: function ($t, initNumber, table) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.RecurrenceStorage$1.prototype.init.call(this, this.$t);
		this.___list = new $.ig.List$1(this.$t, 2, $.ig.Utils.prototype.maxListSize);
		var en = table.values().getEnumerator();
		while (en.moveNext()) {
			var root = en.current();
			this.___list.add(root);
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T)" />*/
	_add: function (root) {
		if (this.___list.count() >= $.ig.Utils.prototype.maxListSize) {
			this.___list.add(root);
			return new $.ig.RecurrenceStorageTable$1(this.$t, this.___list);
		} else {
			this.___list.add(root);
			return this;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T)" />*/
	_remove: function (root) {
		this.___list.remove(root);
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::GetItem(System.String)" />*/
	_getItem: function (id) {
		if (this.___list == null) {
			return $.ig.util.getDefaultValue(this.$t);
		}
		var en = this.___list.getEnumerator();
		while (en.moveNext()) {
			var root = en.current();
			if ($.ig.Utils.prototype.stringEquals(root.id(), id, true)) {
				return root;
			}
		}
		return $.ig.util.getDefaultValue(this.$t);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::GetItem(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::GetEnumerator()" />*/
	_getEnumerator: function () {
		return this.___list.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('RecurrenceStorageList$1', $.ig.RecurrenceStorage$1.prototype.$type.specialize(0))
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageList`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1" />*/

$.ig.util.defType('RecurrenceStorageTable$1', 'RecurrenceStorage$1', {
	$t: null,
	___table: null,
	init: function ($t, list) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.RecurrenceStorage$1.prototype.init.call(this, this.$t);
		this.___table = new $.ig.Dictionary$2(String, this.$t, 1, $.ig.Utils.prototype.maxListSize * 2);
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var root = en.current();
			this.___table.add(root.id(), root);
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T)" />*/
	_add: function (root) {
		this.___table.add(root.id(), root);
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::Add(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T)" />*/
	_remove: function (root) {
		this.___table.remove(root.id());
		if (this.___table.count() <= $.ig.Utils.prototype.maxListSize) {
			return new $.ig.RecurrenceStorageList$1(this.$t, 2, this.___table);
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorage Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::Remove(Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::GetItem(System.String)" />*/
	_getItem: function (id) {
		if (this.___table == null) {
			return $.ig.util.getDefaultValue(this.$t);
		}
		var root = $.ig.util.getDefaultValue(this.$t);
		var $ret = this.___table.tryGetValue(id, root);
		root = $ret.p1;
		return root;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable.T Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::GetItem(System.String)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::GetEnumerator()" />*/
	_getEnumerator: function () {
		return this.___table.values().getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('RecurrenceStorageTable$1', $.ig.RecurrenceStorage$1.prototype.$type.specialize(0))
}, true);

/*<EndType Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceStorageTable`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ColorSchemeManager" />*/

$.ig.util.defType('ColorSchemeManager', 'Object', {
	__dataSource: null,
	__resourcesVersion: 0,
	__assigned: null,
	__autoAssigned: null,
	__lastAutoAssignedValue: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
	init: function (dataSource) {
		this.__resourcesVersion = -1;
		this.__lastAutoAssignedValue = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null);
		$.ig.Object.prototype.init.call(this);
		if (dataSource == null) {
			throw new $.ig.ArgumentNullException(0, "dataSource");
		}
		this.__dataSource = dataSource;
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ColorSchemeManager::Verify()" />*/
	verify: function () {
		if (this.__resourcesVersion == this.__dataSource._resourcesVersion()) {
			return;
		}
		this.__resourcesVersion = this.__dataSource._resourcesVersion();
		this.__assigned = new $.ig.Dictionary$2($.ig.scheduler.ScheduleResource.prototype.$type, $.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, 0);
		if (this.__autoAssigned == null) {
			this.__autoAssigned = new $.ig.Dictionary$2($.ig.scheduler.ScheduleResource.prototype.$type, $.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, 0);
		} else {
			var remove = null;
			var en = this.__autoAssigned.keys().getEnumerator();
			while (en.moveNext()) {
				var resource = en.current();
				if (resource._dataSource() == null) {
					if (remove == null) {
						remove = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 0);
					}
					remove.add(resource);
				}
			}
			if (remove != null) {
				var en1 = remove.getEnumerator();
				while (en1.moveNext()) {
					var resource1 = en1.current();
					this.__autoAssigned.remove(resource1);
				}
			}
		}
		var resources = this.__dataSource.getResources();
		var en2 = resources.getEnumerator();
		while (en2.moveNext()) {
			var resource2 = en2.current();
			var value = resource2._colorScheme$i();
			if (value.hasValue()) {
				this.__assigned.add(resource2, value.value());
			}
		}
		var en3 = this.__assigned.keys().getEnumerator();
		while (en3.moveNext()) {
			var resource3 = en3.current();
			if (this.__autoAssigned.containsKey(resource3)) {
				this.__autoAssigned.remove(resource3);
			}
		}
		var en4 = resources.getEnumerator();
		while (en4.moveNext()) {
			var resource4 = en4.current();
			var value1 = resource4._colorScheme$i();
			if (value1.hasValue()) {
				continue;
			}
			if (this.__autoAssigned.containsKey(resource4)) {
				continue;
			}
			var nextAvailable = this.getNextAvailableColorScheme();
			this.__autoAssigned.add(resource4, nextAvailable);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ColorSchemeManager::Verify()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme Infragistics.Scheduler.Data.ColorSchemeManager::GetNextAvailableColorScheme()" />*/
	getNextAvailableColorScheme: function () {
		var list = new $.ig.List$1($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, 0);
		var enumValues = $.ig.Enum.prototype.getValues($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type);
		var en = enumValues.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			var colorScheme = $.ig.util.getEnumValue(o);
			var isAssigned = false;
			var en1 = this.__assigned.values().getEnumerator();
			while (en1.moveNext()) {
				var assignedValue = en1.current();
				if (colorScheme == assignedValue) {
					isAssigned = true;
					break;
				}
			}
			if (isAssigned) {
				continue;
			}
			var en2 = this.__autoAssigned.values().getEnumerator();
			while (en2.moveNext()) {
				var autoAssignedValue = en2.current();
				if (colorScheme == autoAssignedValue) {
					isAssigned = true;
					break;
				}
			}
			if (isAssigned) {
				continue;
			}
			list.add(colorScheme);
		}
		var en3 = list.getEnumerator();
		while (en3.moveNext()) {
			var colorScheme1 = en3.current();
			if (this.__lastAutoAssignedValue.hasValue() && this.__lastAutoAssignedValue.value() == colorScheme1) {
				continue;
			}
			this.__lastAutoAssignedValue = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, colorScheme1);
			return colorScheme1;
		}
		if (this.__lastAutoAssignedValue.hasValue()) {
			var intVal = this.__lastAutoAssignedValue.value();
			intVal += 1;
			if (intVal >= enumValues.length) {
				intVal = 0;
			}
			this.__lastAutoAssignedValue = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, intVal);
		}
		if (this.__lastAutoAssignedValue.hasValue() == false) {
			this.__lastAutoAssignedValue = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, 0);
		}
		return this.__lastAutoAssignedValue.value();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme Infragistics.Scheduler.Data.ColorSchemeManager::GetNextAvailableColorScheme()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme Infragistics.Scheduler.Data.ColorSchemeManager::GetColorScheme(Infragistics.Scheduler.ScheduleResource)" />*/
	getColorScheme: function (resource) {
		var $self = this;
		this.verify();
		var colorScheme = resource._colorScheme$i();
		if (colorScheme.hasValue() == false) {
			if (this.__autoAssigned != null) {
				var value;
				if ((function () { var $ret = $self.__autoAssigned.tryGetValue(resource, value); value = $ret.p1; return $ret.ret; }())) {
					colorScheme = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, value);
				}
			} else {
				colorScheme = $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, this.getNextAvailableColorScheme());
			}
		}
		return colorScheme.value();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ScheduleResourceColorScheme Infragistics.Scheduler.Data.ColorSchemeManager::GetColorScheme(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetBackgroundBrush(Infragistics.Scheduler.ScheduleResource)" />*/
	getBackgroundBrush1: function (resource) {
		if (resource == null) {
			return $.ig.ColorSchemeManager.prototype._unassignedBackgroundBrush;
		}
		var colorScheme = this.getColorScheme(resource);
		return this.getBackgroundBrush(colorScheme);
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetBackgroundBrush(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetBackgroundBrush(Infragistics.Scheduler.Data.ScheduleResourceColorScheme)" />*/
	getBackgroundBrush: function (colorScheme) {
		var brush = null;
		switch (colorScheme) {
			case $.ig.scheduler.ScheduleResourceColorScheme.chocolate:
				brush = $.ig.ColorSchemeManager.prototype._chocolateBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.fuchsia:
				brush = $.ig.ColorSchemeManager.prototype._fuchsiaBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.grape:
				brush = $.ig.ColorSchemeManager.prototype._grapeBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.indigo:
				brush = $.ig.ColorSchemeManager.prototype._indigoBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.leafy:
				brush = $.ig.ColorSchemeManager.prototype._leafyBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.lime:
				brush = $.ig.ColorSchemeManager.prototype._limeBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.pumpkin:
				brush = $.ig.ColorSchemeManager.prototype._pumpkinBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.skye:
				brush = $.ig.ColorSchemeManager.prototype._skyeBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.strawberry:
				brush = $.ig.ColorSchemeManager.prototype._strawberryBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.sunflower:
				brush = $.ig.ColorSchemeManager.prototype._sunflowerBackgroundBrush;
				break;
			case $.ig.scheduler.ScheduleResourceColorScheme.teal:
				brush = $.ig.ColorSchemeManager.prototype._tealBackgroundBrush;
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized color scheme constant: {0}", $.ig.scheduler.ScheduleResourceColorScheme.prototype.getBox(colorScheme)));
				break;
		}
		return brush;
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetBackgroundBrush(Infragistics.Scheduler.Data.ScheduleResourceColorScheme)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetTextBrush(Infragistics.Scheduler.ScheduleResource)" />*/
	getTextBrush: function (resource) {
		return $.ig.ColorSchemeManager.prototype._textBrushWhite;
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Data.ColorSchemeManager::GetTextBrush(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	$type: new $.ig.Type('ColorSchemeManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ColorSchemeManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityTree" />*/

$.ig.util.defType('ActivityTree', 'Object', {
	__years: null,
	__dataSource: null,
	__isInitialized: false,
	init: function (dataSource) {
		$.ig.Object.prototype.init.call(this);
		this.__dataSource = dataSource;
		this.__isInitialized = false;
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Data.ActivityTree::DateTimeFormatProvider()" />*/
	dateTimeFormatProvider: function () {
		return this.__dataSource._dateTimeFormatProvider();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Data.ActivityTree::DateTimeFormatProvider()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Clear()" />*/
	clear: function () {
		this.__years = null;
		this.__isInitialized = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Clear()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentTimesChanged(Infragistics.Scheduler.Appointment, System.DateTime, System.DateTime)" />*/
	onAppointmentTimesChanged: function (appointment, oldStart, oldEnd) {
		var range = new $.ig.scheduler.DateTimeRange(oldStart, oldEnd);
		this.add(appointment, range);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentTimesChanged(Infragistics.Scheduler.Appointment, System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentResourceChanged(Infragistics.Scheduler.Appointment, System.String, System.String)" />*/
	onAppointmentResourceChanged: function (appointment, oldResourceId, newResourceId) {
		var range = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		this.add(appointment, range);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentResourceChanged(Infragistics.Scheduler.Appointment, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentAdded(Infragistics.Scheduler.Appointment)" />*/
	onAppointmentAdded: function (appointment) {
		this.add(appointment, null);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentAdded(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentRemoved(Infragistics.Scheduler.Appointment)" />*/
	onAppointmentRemoved: function (appointment) {
		var range = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		var wrapper = this.createWrapper(appointment, range);
		this.internalRemove(wrapper, range);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnAppointmentRemoved(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnItemsSourceItemsAdded(System.Collections.IList, System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange)" />*/
	onItemsSourceItemsAdded: function (itemsSource, action, affectedRange) {
		var $self = this;
		affectedRange = null;
		var min = $.ig.Date.prototype.maxValue();
		var max = $.ig.Date.prototype.minValue();
		var dataSource = this.__dataSource;
		var recurrenceManager = dataSource._recurrenceManager();
		var variances = null;
		var error = null;
		var hasRecurrenceRoot = false;
		var en = itemsSource.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			var id, recurrenceId, recurrence;
			if ((function () { var $ret = $self.isRecurrenceOrVariance1(o, id, recurrence, recurrenceId, error); id = $ret.p1; recurrence = $ret.p2; recurrenceId = $ret.p3; error = $ret.p4; return $ret.ret; }())) {
				if (error != null) {
					dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
				} else if (String.isNullOrEmpty(recurrence) == false) {
					var root = (function () { var $ret = recurrenceManager.onItemsSourceItemAdded(o, recurrence, recurrenceId, error); error = $ret.p3; return $ret.ret; }());
					if (error != null) {
						dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
					} else if (root != null) {
						hasRecurrenceRoot = true;
					}
				} else if (String.isNullOrEmpty(recurrenceId) == false) {
					if (variances == null) {
						variances = new $.ig.List$1($.ig.Tuple$3.prototype.$type.specialize($.ig.Object.prototype.$type, String, String), 0);
					}
					variances.add(new $.ig.Tuple$3($.ig.Object.prototype.$type, String, String, o, recurrence, recurrenceId));
				}
				continue;
			}
			var wrapper = (function () { var $ret = $self.createWrapper1(dataSource, o, null, error); error = $ret.p3; return $ret.ret; }());
			if (wrapper == null) {
				dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
				continue;
			} else {
				if (wrapper.start() < min) {
					min = wrapper.start();
				}
				if (wrapper.end() > max) {
					max = wrapper.end();
				}
				this.internalAdd(wrapper);
			}
		}
		if (variances != null) {
			var en1 = variances.getEnumerator();
			while (en1.moveNext()) {
				var variance = en1.current();
				var app = (function () { var $ret = recurrenceManager.onItemsSourceItemAdded(variance.item1(), variance.item2(), variance.item3(), error); error = $ret.p3; return $ret.ret; }());
				if (error != null) {
					dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
				} else if (app != null) {
					if (app.start() < min) {
						min = app.start();
					}
					if (app.end() > max) {
						max = app.end();
					}
				}
			}
		}
		if (hasRecurrenceRoot) {
			affectedRange = null;
		} else if (+min != +($.ig.Date.prototype.maxValue()) && +max != +($.ig.Date.prototype.minValue())) {
			affectedRange = new $.ig.scheduler.DateTimeRange(min, max);
		}
		return {
			p2: affectedRange
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::OnItemsSourceItemsAdded(System.Collections.IList, System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Initialize(System.Collections.Generic.IList, System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	initialize: function (errors, recurrences, variances) {
		var $self = this;
		recurrences = null;
		errors = null;
		variances = null;
		var dataSource = this.__dataSource;
		var itemsSource = dataSource._internalAppointmentItemsSource();
		if (dataSource == null) {
			return {
				p0: errors,
				p1: recurrences,
				p2: variances
			};
		}
		if (this.__isInitialized) {
			return {
				p0: errors,
				p1: recurrences,
				p2: variances
			};
		}
		recurrences = new $.ig.List$1($.ig.Object.prototype.$type, 2, 0);
		errors = new $.ig.List$1($.ig.scheduler.DataError.prototype.$type, 2, 0);
		try {
			var provider = this.dateTimeFormatProvider();
			var itemSourceAsList = $.ig.scheduler.ScheduleListDataSource.prototype._getModifiableList(itemsSource);
			var capacity = itemSourceAsList != null ? itemSourceAsList.count() : 100;
			var idTableForRecurrences = new $.ig.HashSet$1(String, 0);
			var wrapperList = new $.ig.List$1($.ig.IActivityDataObject.prototype.$type, 2, capacity);
			var years = new $.ig.HashSet$1($.ig.Number.prototype.$type, 0);
			var en = itemsSource.getEnumerator();
			while (en.moveNext()) {
				var o = en.current();
				var error = null;
				var recurrenceParseError = null;
				var id = null;
				var recurrence = null;
				var recurrenceId = null;
				if ((function () { var $ret = $self.isRecurrenceOrVariance1(o, id, recurrence, recurrenceId, recurrenceParseError); id = $ret.p1; recurrence = $ret.p2; recurrenceId = $ret.p3; recurrenceParseError = $ret.p4; return $ret.ret; }())) {
					if (recurrenceParseError != null) {
						dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, recurrenceParseError, false);
						errors.add(error);
					} else {
						if (String.isNullOrEmpty(recurrence) == false) {
							recurrences.add(o);
							idTableForRecurrences.add(id);
						} else if (String.isNullOrEmpty(recurrenceId) == false) {
							if (variances == null) {
								variances = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.Object.prototype.$type), 0);
							}
							var varianceList = null;
							if ((function () { var $ret = variances.tryGetValue(recurrenceId, varianceList); varianceList = $ret.p1; return $ret.ret; }()) == false) {
								varianceList = new $.ig.List$1($.ig.Object.prototype.$type, 0);
								variances.add(recurrenceId, varianceList);
							}
							varianceList.add1(o);
						}
					}
					continue;
				}
				this.addWrapperHelper(o, dataSource, wrapperList, years, errors);
			}
			if (variances != null) {
				var orphans = null;
				var en1 = variances.getEnumerator();
				while (en1.moveNext()) {
					var pair = en1.current();
					var recurrenceId1 = pair.key();
					for (var i = pair.value().count() - 1; i >= 0; i -= 1) {
						var v = pair.value().__inner[i];
						if (idTableForRecurrences.contains(recurrenceId1) == false) {
							if (orphans == null) {
								orphans = new $.ig.List$1($.ig.Object.prototype.$type, 0);
							}
							orphans.add1(v);
							pair.value().removeAt(i);
						}
					}
				}
				if (orphans != null) {
					var en2 = orphans.getEnumerator();
					while (en2.moveNext()) {
						var orphan = en2.current();
						this.addWrapperHelper(orphan, dataSource, wrapperList, years, errors);
					}
				}
			}
			this.__years = new $.ig.Dictionary$2($.ig.Number.prototype.$type, $.ig.YearNode.prototype.$type, 1, years.count() + 2);
			var en3 = years.getEnumerator();
			while (en3.moveNext()) {
				var year = en3.current();
				var monthCount = provider.getMonthsInYear(year, 0);
				var node = new $.ig.YearNode(year, monthCount);
				this.__years.add(year, node);
			}
			for (var i1 = 0, count = wrapperList.count(); i1 < count; i1++) {
				var wrapper = wrapperList.__inner[i1];
				this.internalAdd(wrapper);
			}
		}
		finally {
			this.__isInitialized = true;
		}
		return {
			p0: errors,
			p1: recurrences,
			p2: variances
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Initialize(System.Collections.Generic.IList, System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::AddWrapperHelper(System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource, System.Collections.Generic.List, System.Collections.Generic.HashSet, System.Collections.Generic.IList)" />*/
	addWrapperHelper: function (dataObject, dataSource, wrapperList, years, errors) {
		var $self = this;
		var error = null;
		var wrapper = (function () { var $ret = $self.createWrapper1(dataSource, dataObject, null, error); error = $ret.p3; return $ret.ret; }());
		if (wrapper == null) {
			dataSource._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
			errors.add(error);
			return;
		} else {
			var start = wrapper.start();
			var end = wrapper.end();
			wrapperList.add(wrapper);
			var yearsSpanned = $.ig.DataObjectWrapper.prototype.getYearsSpanned(start, end);
			for (var i = 0; i < yearsSpanned.length; i++) {
				years.add(yearsSpanned[i]);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::AddWrapperHelper(System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource, System.Collections.Generic.List, System.Collections.Generic.HashSet, System.Collections.Generic.IList)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.IActivityDataObject Infragistics.Scheduler.Data.ActivityTree::CreateWrapper(Infragistics.Scheduler.Appointment, Infragistics.DateTimeRange)" />*/
	createWrapper: function (appointment, lastRange) {
		var dataObject = appointment.dataObject();
		var dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		return dataObjectAsAppointment != null ? dataObjectAsAppointment : $.ig.util.cast($.ig.IActivityDataObject.prototype.$type, $.ig.DataObjectWrapper.prototype.create1(this.__dataSource, dataObject, lastRange));
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.IActivityDataObject Infragistics.Scheduler.Data.ActivityTree::CreateWrapper(Infragistics.Scheduler.Appointment, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Add(Infragistics.Scheduler.Appointment, Infragistics.DateTimeRange)" />*/
	add: function (appointment, lastRange) {
		var wrapper = null;
		if (lastRange != null) {
			wrapper = this.createWrapper(appointment, lastRange);
			this.internalRemove(wrapper, lastRange);
		}
		wrapper = this.createWrapper(appointment, null);
		this.internalAdd(wrapper);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Add(Infragistics.Scheduler.Appointment, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::InternalAdd(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	internalAdd: function (wrapper) {
		var $self = this;
		var provider = this.dateTimeFormatProvider();
		var start = wrapper.start();
		var end = wrapper.end();
		var yearsSpanned = $.ig.DataObjectWrapper.prototype.getYearsSpanned(start, end);
		if (this.__years == null) {
			this.__years = new $.ig.Dictionary$2($.ig.Number.prototype.$type, $.ig.YearNode.prototype.$type, 1, 10);
		}
		for (var i = 0; i < yearsSpanned.length; i++) {
			var year = yearsSpanned[i];
			var yearNode = null;
			if ((function () { var $ret = $self.__years.tryGetValue(year, yearNode); yearNode = $ret.p1; return $ret.ret; }()) == false) {
				var monthCount = provider.getMonthsInYear(year, 0);
				yearNode = new $.ig.YearNode(year, monthCount);
				this.__years.add(year, yearNode);
			}
			yearNode.add(wrapper, this, provider);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::InternalAdd(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::InternalRemove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange)" />*/
	internalRemove: function (wrapper, previousRange) {
		var $self = this;
		if (previousRange == null) {
			this.removeBruteForce(wrapper);
			return;
		}
		var yearsSpanned = $.ig.DataObjectWrapper.prototype.getYearsSpanned(previousRange.start(), previousRange.end());
		for (var i = 0; i < yearsSpanned.length; i++) {
			var year = yearsSpanned[i];
			var yearNode = null;
			if (this.__years == null || (function () { var $ret = $self.__years.tryGetValue(year, yearNode); yearNode = $ret.p1; return $ret.ret; }()) == false) {
				$.ig.Debug.prototype.assert1(false, "Could not get a YearNode here, which should never happen.");
				return;
			}
			yearNode.remove(wrapper, previousRange, this.dateTimeFormatProvider());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::InternalRemove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::RemoveBruteForce(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	removeBruteForce: function (wrapper) {
		if (this.__years == null) {
			return;
		}
		var en = this.__years.values().getEnumerator();
		while (en.moveNext()) {
			var year = en.current();
			year.remove(wrapper, null, this.dateTimeFormatProvider());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::RemoveBruteForce(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::BulkRemove(System.Collections.IList)" />*/
	bulkRemove: function (items) {
		if (this.__years == null) {
			return;
		}
		var hs = new $.ig.HashSet$1($.ig.Object.prototype.$type, 0);
		var en = items.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			hs.add(o);
		}
		var en1 = this.__years.values().getEnumerator();
		while (en1.moveNext()) {
			var year = en1.current();
			year.bulkRemove(hs);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::BulkRemove(System.Collections.IList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::VerifyIsInitialized()" />*/
	verifyIsInitialized: function () {
		if (this.__isInitialized == false) {
			$.ig.Debug.prototype.assert1(false, "Must call Initialize before doing this.");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::VerifyIsInitialized()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::HasActivityInRange(Infragistics.DateTimeRange, , System.Boolean, System.Collections.Generic.List)" />*/
	hasActivityInRange: function (range, resourceIds, findFirst, dates) {
		dates = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		if (this.__years == null || this.__years.count() == 0) {
			return {
				ret: false,
				p3: dates
			};
		}
		var found = new $.ig.HashSet$1($.ig.Date.prototype.$type, 0);
		var callback = function (date, activity) {
			found.add(date);
			if (findFirst) {
				return false;
			}
			return true;
		};
		var en = this.__years.values().getEnumerator();
		while (en.moveNext()) {
			var year = en.current();
			year.getActivitiesInRangeHelper(range, resourceIds, callback);
		}
		if (findFirst == false && found.count() > 0) {
			dates = new $.ig.List$1($.ig.Date.prototype.$type, 1, found);
		}
		return {
			ret: found.count() > 0,
			p3: dates
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::HasActivityInRange(Infragistics.DateTimeRange, , System.Boolean, System.Collections.Generic.List)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ActivityTree::GetActivityCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	getActivityCounts: function (range, resources) {
		var table = new $.ig.Dictionary$2($.ig.Number.prototype.$type, $.ig.Number.prototype.$type, 0);
		var resourceIds = $.ig.scheduler.ScheduleListDataSource.prototype._getResourceIds(resources);
		var callback = function (date, activity) {
			var ticks = date.getTime();
			var count = 0;
			if ((function () { var $ret = table.tryGetValue(ticks, count); count = $ret.p1; return $ret.ret; }()) == false) {
				table.add(ticks, 0);
			}
			count += 1;
			table.item(ticks, count);
			return true;
		};
		var en = this.__years.values().getEnumerator();
		while (en.moveNext()) {
			var year = en.current();
			year.getActivitiesInRangeHelper(range, resourceIds, callback);
		}
		var counts = new Array(table.count());
		var dates = new Array(table.count());
		var index = 0;
		var en1 = table.getEnumerator();
		while (en1.moveNext()) {
			var pair = en1.current();
			dates[index] = $.ig.Date.prototype.fromTicks(pair.key());
			counts[index] = pair.value();
			index += 1;
		}
		var result = new $.ig.ActivityCountQueryResult(range, resources);
		result._initialize(dates, counts);
		result.hasActivity(dates.length > 0);
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ActivityTree::GetActivityCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	getActivitiesInRangeHelper: function (range, resourceIds, callback) {
		this.verifyIsInitialized();
		if (this.__years == null || this.__years.count() == 0) {
			return;
		}
		var en = this.__years.values().getEnumerator();
		while (en.moveNext()) {
			var year = en.current();
			year.getActivitiesInRangeHelper(range, resourceIds, callback);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ActivityTree::GetItemsInRange(Infragistics.DateTimeRange, )" />*/
	getItemsInRange: function (range, resourceIds) {
		var hs = new $.ig.HashSet$1($.ig.Object.prototype.$type, 0);
		var callback = function (date, activity) {
			hs.add(activity.dataObjectInternal());
			return true;
		};
		this.getActivitiesInRangeHelper(range, resourceIds, callback);
		return $.ig.Utils.prototype.listFromIEnumerable(hs, hs.count());
	}
	/*<EndMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ActivityTree::GetItemsInRange(Infragistics.DateTimeRange, )" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::FullySpans(Infragistics.DateTimeRange, System.DateTime, System.DateTime)" />*/
	fullySpans: function (range, start, end) {
		return start >= range.end() ? false : start <= range.start() && end >= range.end();
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::FullySpans(Infragistics.DateTimeRange, System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::IsRecurrenceOrVariance(System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	isRecurrenceOrVariance1: function (dataObject, id, recurrence, recurrenceId, error) {
		var $self = this;
		return {
			ret: (function () { var $ret = $.ig.ActivityTree.prototype.isRecurrenceOrVariance($self.__dataSource, dataObject, id, recurrence, recurrenceId, error); id = $ret.p2; recurrence = $ret.p3; recurrenceId = $ret.p4; error = $ret.p5; return $ret.ret; }()),
			p1: id,
			p2: recurrence,
			p3: recurrenceId,
			p4: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::IsRecurrenceOrVariance(System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::IsRecurrenceOrVariance(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	isRecurrenceOrVariance: function (dataSource, dataObject, id, recurrence, recurrenceId, error) {
		return {
			ret: (function () { var $ret = $.ig.ActivityTree.prototype.getRecurrenceInfo(dataSource, dataObject, id, recurrence, recurrenceId, error); id = $ret.p2; recurrence = $ret.p3; recurrenceId = $ret.p4; error = $ret.p5; return $ret.ret; }()),
			p2: id,
			p3: recurrence,
			p4: recurrenceId,
			p5: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::IsRecurrenceOrVariance(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::GetRecurrenceInfo(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	getRecurrenceInfo: function (dataSource, dataObject, id, recurrence, recurrenceId, error) {
		id = null;
		recurrence = null;
		recurrenceId = null;
		error = null;
		var dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (dataObjectAsAppointment != null) {
			id = dataObjectAsAppointment.id();
			recurrence = dataObjectAsAppointment.recurrence();
			recurrenceId = dataObjectAsAppointment.recurrenceId();
			return {
				ret: String.isNullOrEmpty(recurrence) == false || String.isNullOrEmpty(recurrenceId) == false,
				p2: id,
				p3: recurrence,
				p4: recurrenceId,
				p5: error
			};
		}
		var propAccessError = null;
		var o = null;
		var hasRecurrenceMapping = dataSource.appointmentPropertyMappings()._item1($.ig.scheduler.AppointmentProperty.recurrence) != null;
		var hasRecurrenceIdMapping = dataSource.appointmentPropertyMappings()._item1($.ig.scheduler.AppointmentProperty.recurrenceId) != null;
		if (hasRecurrenceMapping) {
			var $ret = dataSource._tryGetAppointmentPropertyValue(dataObject, $.ig.scheduler.AppointmentProperty.id, o, propAccessError);
			o = $ret.p2;
			propAccessError = $ret.p3;
			if (propAccessError != null) {
				error = propAccessError;
				return {
					ret: false,
					p2: id,
					p3: recurrence,
					p4: recurrenceId,
					p5: error
				};
			}
			id = $.ig.util.cast(String, o);
			var $ret1 = dataSource._tryGetAppointmentPropertyValue(dataObject, $.ig.scheduler.AppointmentProperty.recurrence, o, propAccessError);
			o = $ret1.p2;
			propAccessError = $ret1.p3;
			if (propAccessError != null) {
				error = propAccessError;
				return {
					ret: false,
					p2: id,
					p3: recurrence,
					p4: recurrenceId,
					p5: error
				};
			}
		}
		recurrence = $.ig.util.cast(String, o);
		if (hasRecurrenceIdMapping) {
			var $ret2 = dataSource._tryGetAppointmentPropertyValue(dataObject, $.ig.scheduler.AppointmentProperty.recurrenceId, o, propAccessError);
			o = $ret2.p2;
			propAccessError = $ret2.p3;
			if (propAccessError != null) {
				error = propAccessError;
				return {
					ret: false,
					p2: id,
					p3: recurrence,
					p4: recurrenceId,
					p5: error
				};
			}
		}
		recurrenceId = $.ig.util.cast(String, o);
		var parseError = null;
		var $ret3 = $.ig.scheduler.DateRecurrence.prototype._fromICalendarString1(recurrence, parseError);
		parseError = $ret3.p1;
		if (parseError != null) {
			error = parseError;
		}
		return {
			ret: String.isNullOrEmpty(recurrence) == false || String.isNullOrEmpty(recurrenceId) == false,
			p2: id,
			p3: recurrence,
			p4: recurrenceId,
			p5: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::GetRecurrenceInfo(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.String, System.String, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.IActivityDataObject Infragistics.Scheduler.Data.ActivityTree::CreateWrapper(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange, Infragistics.Scheduler.Data.DataError)" />*/
	createWrapper1: function (dataSource, dataObject, startAndEnd, error) {
		error = null;
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (appointment != null) {
			return {
				ret: appointment,
				p3: error
			};
		}
		return {
			ret: (function () { var $ret = $.ig.DataObjectWrapper.prototype.create2(dataSource, dataObject, startAndEnd, error); error = $ret.p3; return $ret.ret; }()),
			p3: error
		};
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.IActivityDataObject Infragistics.Scheduler.Data.ActivityTree::CreateWrapper(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::HasActivity(System.Collections.Generic.IEnumerable, )" />*/
	hasActivity: function (activities, resourceIds) {
		if (activities == null) {
			return false;
		}
		var en = activities.getEnumerator();
		while (en.moveNext()) {
			var activity = en.current();
			if (resourceIds == null || resourceIds.length == 0) {
				return true;
			}
			for (var i = 0; i < resourceIds.length; i++) {
				var resourceId = resourceIds[i];
				if ($.ig.Utils.prototype.stringEquals(activity.resourceId(), resourceId, true)) {
					return true;
				}
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityTree::HasActivity(System.Collections.Generic.IEnumerable, )" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Destroy()" />*/
	destroy: function () {
		this.__years = null;
		this.__dataSource = null;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityTree::Destroy()" />*/
	,
	$type: new $.ig.Type('ActivityTree', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityTree" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DayNode" />*/

$.ig.util.defType('DayNode', 'Object', {
	__activities: null,
	init: function (month, day) {
		$.ig.Object.prototype.init.call(this);
		this.year(month.year());
		this.month(month.month());
		this.day(day);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Year()" />*/
	,
	_month: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			this._month = value;
			return value;
		} else {
			return this._month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Month()" />*/
	,
	_day: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Day()" />*/
	day: function (value) {
		if (arguments.length === 1) {
			this._day = value;
			return value;
		} else {
			return this._day;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.DayNode::Day()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.DayNode::Activities()" />*/
	activities: function () {
		return this.__activities;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.DayNode::Activities()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	add: function (wrapper) {
		if (this.__activities == null) {
			this.__activities = new $.ig.ActivityStorageList(0, wrapper);
			return;
		} else {
			this.__activities = this.__activities._add(wrapper);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	remove: function (wrapper) {
		if (this.__activities == null) {
			return;
		}
		if (this.__activities._contains(wrapper)) {
			this.__activities = this.__activities._remove(wrapper);
			return;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	bulkRemove: function (items) {
		if (this.__activities == null) {
			return;
		}
		this.__activities = this.__activities._bulkRemove(items);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DayNode::HasActivity()" />*/
	hasActivity: function (resourceIds) {
		if (this.__activities == null || this.__activities._isEmpty()) {
			return false;
		}
		return $.ig.ActivityTree.prototype.hasActivity(this.__activities, resourceIds);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DayNode::HasActivity()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	getActivitiesInRangeHelper: function (range, resourceIds, callback) {
		var date = $.ig.Date.prototype.fromValues(this.year(), this.month(), this.day(), 0, 0, 0, 0);
		var start = date;
		var end = $.ig.Date.prototype.addDays(start, 1);
		if ($.ig.scheduler.DateTimeRange.prototype._doRangesIntersect(range.start(), range.end(), start, end, true) == false) {
			return;
		}
		var activities = this.activities();
		var en = activities.getEnumerator();
		while (en.moveNext()) {
			var activity = en.current();
			if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(activity, resourceIds) == false) {
				continue;
			}
			start = activity.start();
			end = activity.end();
			if ($.ig.scheduler.DateTimeRange.prototype._doRangesIntersect(range.start(), range.end(), start, end, true)) {
				if (callback(date, activity) == false) {
					return;
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DayNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DayNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	getItemsInRange: function (tree, range, resourceIds, listToPopulate, isHasActivityQuery) {
		if (this.hasActivity(resourceIds) == false) {
			return false;
		}
		var start = $.ig.Date.prototype.fromValues(this.year(), this.month(), this.day(), 0, 0, 0, 0);
		var end = $.ig.Date.prototype.addDays(start, 1);
		if ($.ig.scheduler.DateTimeRange.prototype._doRangesIntersect(range.start(), range.end(), start, end, true) == false) {
			return false;
		}
		var countBefore = listToPopulate.count();
		var activities = this.activities();
		var en = activities.getEnumerator();
		while (en.moveNext()) {
			var activity = en.current();
			if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(activity, resourceIds) == false) {
				continue;
			}
			start = activity.start();
			end = activity.end();
			if ($.ig.scheduler.DateTimeRange.prototype._doRangesIntersect(range.start(), range.end(), start, end, true)) {
				if (isHasActivityQuery) {
					return true;
				}
				listToPopulate.add(activity.dataObjectInternal());
			}
		}
		return listToPopulate.count() > countBefore;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DayNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.DayNode::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0}/{1}/{2}", this.month(), this.day(), this.year());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.DayNode::ToString()" />*/
	,
	$type: new $.ig.Type('DayNode', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DayNode" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.MonthNode" />*/

$.ig.util.defType('MonthNode', 'Object', {
	__days: null,
	__fullySpanning: null,
	__range: null,
	init: function (year, month, dayCount) {
		$.ig.Object.prototype.init.call(this);
		this.year(year.year());
		this.month(month);
		this.__days = new Array(dayCount);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.MonthNode::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.MonthNode::Year()" />*/
	,
	_month: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.MonthNode::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			this._month = value;
			return value;
		} else {
			return this._month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.MonthNode::Month()" />*/
	,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.MonthNode::Range()" />*/
	range: function () {
		if (this.__range == null) {
			var firstOfThisMonth = $.ig.Date.prototype.fromValues(this.year(), this.month(), 1, 0, 0, 0, 0);
			var firstOfNextMonth = $.ig.Date.prototype.addDays(firstOfThisMonth, this.__days.length);
			this.__range = new $.ig.scheduler.DateTimeRange(firstOfThisMonth, firstOfNextMonth);
		}
		return this.__range;
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.MonthNode::Range()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	bulkRemove: function (items) {
		if (this.__fullySpanning != null) {
			this.__fullySpanning = this.__fullySpanning._bulkRemove(items);
		}
		for (var i = 0; i < this.__days.length; i++) {
			var day = this.__days[i];
			if (day == null) {
				continue;
			}
			day.bulkRemove(items);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	getActivitiesInRangeHelper: function (range, resourceIds, callback) {
		if (this.range()._intersectsWith(range, true) == false) {
			return;
		}
		var startDay = range.start().getFullYear() == this.year() && $.ig.Date.prototype.getMonth(range.start()) == this.month() ? range.start().getDate() : 1;
		if (this.__fullySpanning != null && this.__fullySpanning._isEmpty() == false) {
			if ($.ig.ActivityTree.prototype.hasActivity(this.__fullySpanning, resourceIds)) {
				var date = $.ig.Date.prototype.fromValues(this.year(), this.month(), startDay, 0, 0, 0, 0);
				while (date.getFullYear() == this.year() && $.ig.Date.prototype.getMonth(date) == this.month()) {
					if (date >= range.start()) {
						var en = this.__fullySpanning.getEnumerator();
						while (en.moveNext()) {
							var activity = en.current();
							if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(activity, resourceIds)) {
								if (callback(date, activity) == false) {
									return;
								}
							}
						}
					}
					date = $.ig.Date.prototype.addDays(date, 1);
					if (date > range.end()) {
						break;
					}
				}
			}
		}
		if (this.__days != null) {
			for (var i = startDay; i <= this.__days.length; i++) {
				var index = i - 1;
				if (this.__days[index] == null) {
					continue;
				}
				var date1 = $.ig.Date.prototype.fromValues(this.year(), this.month(), i, 0, 0, 0, 0);
				if (date1 > range.end()) {
					break;
				}
				this.__days[index].getActivitiesInRangeHelper(range, resourceIds, callback);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::Add(Infragistics.Scheduler.Data.IActivityDataObject, System.DateTime, System.DateTime, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	add: function (wrapper, start, end, provider) {
		var range = this.range();
		if ($.ig.ActivityTree.prototype.fullySpans(range, start, end)) {
			if (this.__fullySpanning == null) {
				this.__fullySpanning = new $.ig.ActivityStorageList(0, wrapper);
			} else {
				this.__fullySpanning = this.__fullySpanning._add(wrapper);
			}
			return;
		}
		var days = $.ig.DataObjectWrapper.prototype.getDaysSpanned(start, end, this.year(), this.month(), provider);
		for (var i = 0; i < days.length; i++) {
			var dayNumber = days[i];
			var dayIndex = dayNumber - 1;
			if (this.__days[dayIndex] == null) {
				this.__days[dayIndex] = new $.ig.DayNode(this, dayNumber);
			}
			var day = this.__days[dayIndex];
			day.add(wrapper);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::Add(Infragistics.Scheduler.Data.IActivityDataObject, System.DateTime, System.DateTime, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	remove: function (wrapper, previousRange, provider) {
		if (previousRange != null && this.range()._intersectsWith(previousRange, true) == false) {
			return;
		}
		if (this.__fullySpanning != null) {
			var contains = this.__fullySpanning._contains(wrapper);
			if (contains) {
				this.__fullySpanning = this.__fullySpanning._remove(wrapper);
				return;
			}
		}
		var startDay = 1;
		var endDay = this.__days.length;
		if (previousRange != null) {
			var monthsInYear = provider.getMonthsInYear(this.year(), 0);
			var daysSpanned = $.ig.DataObjectWrapper.prototype.getDaysSpanned1(previousRange.start(), previousRange.end(), this.year(), this.month(), this.__days.length, monthsInYear);
			if (daysSpanned != null) {
				startDay = daysSpanned[0];
				endDay = daysSpanned[daysSpanned.length - 1];
			}
		}
		for (var i = startDay; i <= endDay; i++) {
			var index = i - 1;
			var day = this.__days[index];
			if (day == null) {
				continue;
			}
			day.remove(wrapper);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.MonthNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.MonthNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	getItemsInRange: function (tree, range, resourceIds, listToPopulate, isHasActivityQuery) {
		var thisRange = this.range();
		var combinedRange = $.ig.scheduler.DateTimeRange.prototype._intersect(range, thisRange);
		if (combinedRange == null) {
			return false;
		}
		if (this.__fullySpanning != null) {
			var en = this.__fullySpanning.getEnumerator();
			while (en.moveNext()) {
				var wrapper = en.current();
				if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(wrapper, resourceIds) == false) {
					continue;
				}
				listToPopulate.add(wrapper.dataObjectInternal());
			}
		}
		for (var i = 0; i < this.__days.length; i++) {
			var day = this.__days[i];
			if (day == null) {
				continue;
			}
			if (day.getItemsInRange(tree, combinedRange, resourceIds, listToPopulate, isHasActivityQuery) && isHasActivityQuery) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.MonthNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.MonthNode::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0}/{1}", this.month(), this.year());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.MonthNode::ToString()" />*/
	,
	$type: new $.ig.Type('MonthNode', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.MonthNode" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.YearNode" />*/

$.ig.util.defType('YearNode', 'Object', {
	__months: null,
	__fullySpanning: null,
	__range: null,
	init: function (year, monthCount) {
		$.ig.Object.prototype.init.call(this);
		this.year(year);
		this.__months = new Array(monthCount);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.YearNode::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.YearNode::Year()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.YearNode::MonthCount()" />*/
	monthCount: function () {
		return this.__months.length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.YearNode::MonthCount()" />*/
	,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.YearNode::Range()" />*/
	range: function () {
		if (this.__range == null) {
			this.__range = new $.ig.scheduler.DateTimeRange($.ig.Date.prototype.fromValues(this.year(), 1, 1, 0, 0, 0, 0), $.ig.Date.prototype.fromValues(this.year() + 1, 1, 1, 0, 0, 0, 0));
		}
		return this.__range;
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.YearNode::Range()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	bulkRemove: function (items) {
		if (this.__fullySpanning != null) {
			this.__fullySpanning = this.__fullySpanning._bulkRemove(items);
		}
		for (var i = 0; i < this.__months.length; i++) {
			var month = this.__months[i];
			if (month == null) {
				continue;
			}
			month.bulkRemove(items);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	getActivitiesInRangeHelper: function (range, resourceIds, callback) {
		if (this.range()._intersectsWith(range, true) == false) {
			return;
		}
		var startMonth = range.start().getFullYear() == this.year() ? $.ig.Date.prototype.getMonth(range.start()) : 1;
		if (this.__fullySpanning != null && this.__fullySpanning._isEmpty() == false) {
			var date = $.ig.Date.prototype.fromValues(this.year(), startMonth, 1, 0, 0, 0, 0);
			while (date.getFullYear() == this.year()) {
				if (date >= range.start()) {
					var en = this.__fullySpanning.getEnumerator();
					while (en.moveNext()) {
						var activity = en.current();
						if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(activity, resourceIds)) {
							if (callback(date, activity) == false) {
								return;
							}
						}
					}
				}
				date = $.ig.Date.prototype.addDays(date, 1);
				if (date > range.end()) {
					break;
				}
			}
		}
		if (this.__months != null) {
			for (var i = startMonth; i <= this.__months.length; i++) {
				var index = i - 1;
				if (this.__months[index] == null) {
					continue;
				}
				this.__months[index].getActivitiesInRangeHelper(range, resourceIds, callback);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::GetActivitiesInRangeHelper(Infragistics.DateTimeRange, , System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	remove: function (wrapper, previousRange, provider) {
		if (previousRange != null && this.range()._intersectsWith(previousRange, true) == false) {
			return;
		}
		if (this.__fullySpanning != null) {
			var contains = this.__fullySpanning._contains(wrapper);
			if (contains) {
				this.__fullySpanning = this.__fullySpanning._remove(wrapper);
				return;
			}
		}
		var startMonth = 1;
		var endMonth = this.__months.length - 1;
		if (previousRange != null) {
			var monthsSpanned = $.ig.DataObjectWrapper.prototype.getMonthsSpanned1(previousRange.start(), previousRange.end(), this.year(), this.__months.length);
			if (monthsSpanned != null) {
				startMonth = monthsSpanned[0];
				endMonth = monthsSpanned[monthsSpanned.length - 1];
			}
		}
		for (var i = startMonth; i <= endMonth; i++) {
			var index = i - 1;
			var month = this.__months[index];
			if (month == null) {
				continue;
			}
			month.remove(wrapper, previousRange, provider);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::Remove(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.DateTimeRange, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::Add(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.Scheduler.Data.ActivityTree, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	add: function (wrapper, tree, provider) {
		var start = wrapper.start();
		var end = wrapper.end();
		var range = this.range();
		if ($.ig.ActivityTree.prototype.fullySpans(range, start, end)) {
			if (this.__fullySpanning == null) {
				this.__fullySpanning = new $.ig.ActivityStorageList(0, wrapper);
			} else {
				this.__fullySpanning = this.__fullySpanning._add(wrapper);
			}
			return;
		}
		var monthsSpanned = $.ig.DataObjectWrapper.prototype.getMonthsSpanned(start, end, this.year(), provider);
		for (var i = 0; i < monthsSpanned.length; i++) {
			var month = monthsSpanned[i];
			var monthIndex = month - 1;
			if (this.__months[monthIndex] == null) {
				var dayCount = provider.getDaysInMonth(this.year(), month, 0);
				this.__months[monthIndex] = new $.ig.MonthNode(this, month, dayCount);
			}
			var monthNode = this.__months[monthIndex];
			monthNode.add(wrapper, start, end, provider);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.YearNode::Add(Infragistics.Scheduler.Data.IActivityDataObject, Infragistics.Scheduler.Data.ActivityTree, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.YearNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	getItemsInRange: function (tree, range, resourceIds, listToPopulate, isHasActivityQuery) {
		var thisRange = this.range();
		var combinedRange = $.ig.scheduler.DateTimeRange.prototype._intersect(range, thisRange);
		if (combinedRange == null) {
			return false;
		}
		if (this.__fullySpanning != null) {
			var en = this.__fullySpanning.getEnumerator();
			while (en.moveNext()) {
				var wrapper = en.current();
				if ($.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(wrapper, resourceIds) == false) {
					continue;
				}
				listToPopulate.add(wrapper.dataObjectInternal());
			}
		}
		for (var i = 0; i < this.__months.length; i++) {
			var month = this.__months[i];
			if (month == null) {
				continue;
			}
			var monthRange = month.range();
			if (combinedRange._intersectsWith1(monthRange.start(), monthRange.end(), true) == false) {
				continue;
			}
			if (month.getItemsInRange(tree, combinedRange, resourceIds, listToPopulate, isHasActivityQuery) && isHasActivityQuery) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.YearNode::GetItemsInRange(Infragistics.Scheduler.Data.ActivityTree, Infragistics.DateTimeRange, , System.Collections.Generic.HashSet, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.YearNode::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0}", this.year());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.YearNode::ToString()" />*/
	,
	$type: new $.ig.Type('YearNode', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.YearNode" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataObjectWrapper" />*/

$.ig.util.defType('DataObjectWrapper', 'Object', {
	init: function (item) {
		$.ig.Object.prototype.init.call(this);
		this.item(item);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object)" />*/
	create: function (dataSource, item) {
		var error = null;
		return (function () { var $ret = $.ig.DataObjectWrapper.prototype.create2(dataSource, item, null, error); error = $ret.p3; return $ret.ret; }());
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange)" />*/
	create1: function (dataSource, item, startAndEnd) {
		var error = null;
		return (function () { var $ret = $.ig.DataObjectWrapper.prototype.create2(dataSource, item, startAndEnd, error); error = $ret.p3; return $ret.ret; }());
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange, Infragistics.Scheduler.Data.DataError)" />*/
	create2: function (dataSource, item, startAndEnd, error) {
		error = null;
		var dataObject = new $.ig.DataObjectWrapper(item);
		var resourceId = null;
		if ((function () { var $ret = dataObject.getResourceId(dataSource, resourceId, error); resourceId = $ret.p1; error = $ret.p2; return $ret.ret; }())) {
			dataObject.resourceId(resourceId);
		}
		if (startAndEnd != null) {
			dataObject.start(startAndEnd.start());
			dataObject.end(startAndEnd.end());
			return {
				ret: dataObject,
				p3: error
			};
		} else {
			var start, end;
			if ((function () { var $ret = dataObject.getStartAndEndTime(dataSource, start, end, error); start = $ret.p1; end = $ret.p2; error = $ret.p3; return $ret.ret; }())) {
				if (end < start) {
					end = start;
				}
				dataObject.start(start);
				dataObject.end(end);
				return {
					ret: dataObject,
					p3: error
				};
			} else {
				return {
					ret: null,
					p3: error
				};
			}
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataObjectWrapper Infragistics.Scheduler.Data.DataObjectWrapper::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, Infragistics.DateTimeRange, Infragistics.Scheduler.Data.DataError)" />*/
	,
	_item: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectWrapper::Item()" />*/
	item: function (value) {
		if (arguments.length === 1) {
			this._item = value;
			return value;
		} else {
			return this._item;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectWrapper::Item()" />*/
	,
	_start: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Data.DataObjectWrapper::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this._start = value;
			return value;
		} else {
			return this._start;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Data.DataObjectWrapper::Start()" />*/
	,
	_end: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Data.DataObjectWrapper::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this._end = value;
			return value;
		} else {
			return this._end;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Data.DataObjectWrapper::End()" />*/
	,
	_resourceId: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Data.DataObjectWrapper::ResourceId()" />*/
	resourceId: function (value) {
		if (arguments.length === 1) {
			this._resourceId = value;
			return value;
		} else {
			return this._resourceId;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Data.DataObjectWrapper::ResourceId()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectWrapper::Infragistics.Scheduler.Data.IActivityDataObject.DataObject()" />*/
	dataObjectInternal: function () {
		return this.item();
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectWrapper::Infragistics.Scheduler.Data.IActivityDataObject.DataObject()" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetYearsSpanned(System.DateTime, System.DateTime)" />*/
	getYearsSpanned: function (start, end) {
		end = $.ig.DateUtils.prototype.adjustEndForRangeComparison1(start, end);
		var startYear = start.getFullYear();
		var endYear = end.getFullYear();
		var yearsSpanned = new Array(endYear - startYear + 1);
		for (var year = startYear; year <= endYear; year++) {
			var index = year - startYear;
			yearsSpanned[index] = year;
		}
		return yearsSpanned;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetYearsSpanned(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetMonthsSpanned(System.DateTime, System.DateTime, System.Int32, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	getMonthsSpanned: function (start, end, year, provider) {
		var monthCount = provider.getMonthsInYear(year, 0);
		return $.ig.DataObjectWrapper.prototype.getMonthsSpanned1(start, end, year, monthCount);
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetMonthsSpanned(System.DateTime, System.DateTime, System.Int32, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetMonthsSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32)" />*/
	getMonthsSpanned1: function (start, end, year, monthCount) {
		if (start.getFullYear() == end.getFullYear() && $.ig.Date.prototype.getMonth(start) == $.ig.Date.prototype.getMonth(end)) {
			return [ $.ig.Date.prototype.getMonth(start) ];
		}
		end = $.ig.DateUtils.prototype.adjustEndForRangeComparison1(start, end);
		var startMonth = start.getFullYear() < year ? 1 : $.ig.Date.prototype.getMonth(start);
		var endMonth = end.getFullYear() > year ? monthCount : $.ig.Date.prototype.getMonth(end);
		var months = new Array(endMonth - startMonth + 1);
		for (var i = 0; i < months.length; i++) {
			months[i] = startMonth + i;
		}
		return months;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetMonthsSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetDaysSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	getDaysSpanned: function (start, end, year, month, provider) {
		var daysInMonth = provider.getDaysInMonth(year, month, 0);
		var monthsInYear = provider.getMonthsInYear(year, 0);
		return $.ig.DataObjectWrapper.prototype.getDaysSpanned1(start, end, year, month, daysInMonth, monthsInYear);
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetDaysSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetDaysSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	getDaysSpanned1: function (start, end, year, month, daysInMonth, monthsInYear) {
		if (start.getFullYear() == end.getFullYear() && start.getFullYear() == year && $.ig.Date.prototype.getMonth(start) == $.ig.Date.prototype.getMonth(end) && $.ig.Date.prototype.getMonth(end) == month && start.getDate() == end.getDate()) {
			return [ start.getDate() ];
		}
		end = $.ig.DateUtils.prototype.adjustEndForRangeComparison1(start, end);
		if (end.getFullYear() < year || start.getFullYear() > year) {
			return new Array(0);
		}
		var startMonth = start.getFullYear() < year ? 1 : $.ig.Date.prototype.getMonth(start);
		var endMonth = end.getFullYear() > year ? monthsInYear : $.ig.Date.prototype.getMonth(end);
		if (endMonth < month || startMonth > month) {
			return new Array(0);
		}
		var thisStart = $.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0);
		var thisEnd = $.ig.Date.prototype.fromValues(year, month, daysInMonth, 0, 0, 0, 0);
		if (start > thisStart) {
			thisStart = start;
		}
		if (end < thisEnd) {
			thisEnd = end;
		}
		var startDay = thisStart.getDate();
		var endDay = thisEnd.getDate();
		var days = new Array(endDay - startDay + 1);
		for (var day = startDay; day <= endDay; day++) {
			var dayIndex = day - startDay;
			days[dayIndex] = day;
		}
		return days;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.DataObjectWrapper::GetDaysSpanned(System.DateTime, System.DateTime, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::GetStartAndEndTime(Infragistics.Scheduler.Data.ScheduleListDataSource, System.DateTime, System.DateTime, Infragistics.Scheduler.Data.DataError)" />*/
	getStartAndEndTime: function (dataSource, start, end, error) {
		error = null;
		start = $.ig.Date.prototype.minValue();
		end = $.ig.Date.prototype.minValue();
		var propAccessError = null;
		var startRaw, endRaw = null;
		var $ret = dataSource._tryGetAppointmentPropertyValue(this.item(), $.ig.scheduler.AppointmentProperty.start, startRaw, propAccessError);
		startRaw = $ret.p2;
		propAccessError = $ret.p3;
		if (propAccessError != null) {
			error = propAccessError;
			return {
				ret: false,
				p1: start,
				p2: end,
				p3: error
			};
		}
		var $ret1 = dataSource._tryGetAppointmentPropertyValue(this.item(), $.ig.scheduler.AppointmentProperty.end, endRaw, propAccessError);
		endRaw = $ret1.p2;
		propAccessError = $ret1.p3;
		if (propAccessError != null) {
			error = propAccessError;
			return {
				ret: false,
				p1: start,
				p2: end,
				p3: error
			};
		}
		start = startRaw;
		end = endRaw;
		return {
			ret: true,
			p1: start,
			p2: end,
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::GetStartAndEndTime(Infragistics.Scheduler.Data.ScheduleListDataSource, System.DateTime, System.DateTime, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::GetResourceId(Infragistics.Scheduler.Data.ScheduleListDataSource, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	getResourceId: function (dataSource, id, error) {
		error = null;
		id = null;
		var propAccessError = null;
		var o = null;
		var $ret = dataSource._tryGetAppointmentPropertyValue(this.item(), $.ig.scheduler.AppointmentProperty.resourceId, o, propAccessError);
		o = $ret.p2;
		propAccessError = $ret.p3;
		if (propAccessError != null) {
			error = propAccessError;
			return {
				ret: false,
				p1: id,
				p2: error
			};
		}
		id = o;
		return {
			ret: true,
			p1: id,
			p2: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::GetResourceId(Infragistics.Scheduler.Data.ScheduleListDataSource, System.String, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::Equals(System.Object)" />*/
	equals: function (obj) {
		var that = $.ig.util.cast($.ig.DataObjectWrapper.prototype.$type, obj);
		if ($.ig.DataObjectWrapper.prototype.l_op_Inequality(that, null)) {
			return $.ig.Object.prototype.referenceEquals(this.item(), that.item());
		} else {
			return $.ig.Object.prototype.equals.call(this, obj);
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::Equals(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.DataObjectWrapper::GetHashCode()" />*/
	getHashCode: function () {
		return this.item().getHashCode();
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.DataObjectWrapper::GetHashCode()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.DataObjectWrapper::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat("{0} - {1}", this.start(), this.end());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.DataObjectWrapper::ToString()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::L_op_Equality(Infragistics.Scheduler.Data.DataObjectWrapper, Infragistics.Scheduler.Data.DataObjectWrapper)" />*/
	l_op_Equality: function (x, y) {
		if ($.ig.Object.prototype.referenceEquals(x, null) || $.ig.Object.prototype.referenceEquals(y, null)) {
			return false;
		}
		return x.equals(y);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::L_op_Equality(Infragistics.Scheduler.Data.DataObjectWrapper, Infragistics.Scheduler.Data.DataObjectWrapper)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::L_op_Inequality(Infragistics.Scheduler.Data.DataObjectWrapper, Infragistics.Scheduler.Data.DataObjectWrapper)" />*/
	l_op_Inequality: function (x, y) {
		if ($.ig.Object.prototype.referenceEquals(x, null) || $.ig.Object.prototype.referenceEquals(y, null)) {
			return true;
		}
		return x.equals(y) == false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.DataObjectWrapper::L_op_Inequality(Infragistics.Scheduler.Data.DataObjectWrapper, Infragistics.Scheduler.Data.DataObjectWrapper)" />*/
	,
	$type: new $.ig.Type('DataObjectWrapper', $.ig.Object.prototype.$type, [$.ig.IActivityDataObject.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DataObjectWrapper" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityStorage" />*/

$.ig.util.defType('ActivityStorage', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_add: function (item) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_remove: function (item) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_contains: function (item) {
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::GetEnumerator()" />*/
	_getEnumerator: function () {
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::GetEnumerator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::IsEmpty()" />*/
	_isEmpty: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::IsEmpty()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::BulkRemove(System.Collections.Generic.HashSet)" />*/
	_bulkRemove: function (items) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorage::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::System.Collections.IEnumerable.GetEnumerator()" />*/
	getEnumerator1: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::System.Collections.IEnumerable.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Data.IActivityDataObject>.GetEnumerator()" />*/
	getEnumerator: function () {
		return this._getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorage::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Data.IActivityDataObject>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::HashSetContains(System.Collections.Generic.HashSet, System.Object)" />*/
	_hashSetContains: function (hashSet, dataObject) {
		var en = hashSet.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			if (o == dataObject) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorage::HashSetContains(System.Collections.Generic.HashSet, System.Object)" />*/
	,
	$type: new $.ig.Type('ActivityStorage', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.IActivityDataObject.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityStorage" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityStorageList" />*/

$.ig.util.defType('ActivityStorageList', 'ActivityStorage', {
	___items: null,
	init: function (initNumber, firstItem) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ActivityStorage.prototype.init.call(this);
		this.___items = new $.ig.List$1($.ig.IActivityDataObject.prototype.$type, 2, $.ig.Utils.prototype.maxListSize);
		this.___items.add(firstItem);
	},
	init1: function (initNumber, items) {
		$.ig.ActivityStorage.prototype.init.call(this);
		this.___items = new $.ig.List$1($.ig.IActivityDataObject.prototype.$type, 1, items);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_add: function (item) {
		if (this._contains(item)) {
			return this;
		}
		this.___items.add(item);
		var retVal = this;
		if (this.___items.count() > $.ig.Utils.prototype.maxListSize) {
			retVal = new $.ig.ActivityStorageHashSet(this.___items);
		}
		return retVal;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_remove: function (item) {
		for (var i = this.___items.count() - 1; i >= 0; i -= 1) {
			if (this.___items.__inner[i].dataObjectInternal() == item.dataObjectInternal()) {
				this.___items.removeAt(i);
			}
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::BulkRemove(System.Collections.Generic.HashSet)" />*/
	_bulkRemove: function (items) {
		if (this.___items == null || this.___items.count() == 0) {
			return this;
		}
		for (var i = this.___items.count() - 1; i >= 0; i -= 1) {
			if ($.ig.ActivityStorage.prototype._hashSetContains(items, this.___items.__inner[i].dataObjectInternal())) {
				this.___items.removeAt(i);
			}
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageList::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageList::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_contains: function (item) {
		var en = this.___items.getEnumerator();
		while (en.moveNext()) {
			var i = en.current();
			if (i.equals(item)) {
				return true;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageList::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorageList::GetEnumerator()" />*/
	_getEnumerator: function () {
		return this.___items.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorageList::GetEnumerator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageList::IsEmpty()" />*/
	_isEmpty: function () {
		return this.___items == null || this.___items.count() == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageList::IsEmpty()" />*/
	,
	$type: new $.ig.Type('ActivityStorageList', $.ig.ActivityStorage.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityStorageList" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityStorageHashSet" />*/

$.ig.util.defType('ActivityStorageHashSet', 'ActivityStorage', {
	___items: null,
	init: function (list) {
		$.ig.ActivityStorage.prototype.init.call(this);
		this.___items = new $.ig.HashSet$1($.ig.IActivityDataObject.prototype.$type, 0);
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			this.___items.add(item);
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_add: function (item) {
		this.___items.add(item);
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::Add(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_remove: function (item) {
		this.___items.remove(item);
		if (this.___items.count() <= $.ig.Utils.prototype.maxListSize) {
			var list = new $.ig.ActivityStorageList(1, this.___items);
			return list;
		}
		return this;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::Remove(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::BulkRemove(System.Collections.Generic.HashSet)" />*/
	_bulkRemove: function (items) {
		if (this.___items == null || this.___items.count() == 0) {
			return this;
		}
		var remove = new $.ig.List$1($.ig.IActivityDataObject.prototype.$type, 0);
		var en = this.___items.getEnumerator();
		while (en.moveNext()) {
			var wrapper = en.current();
			if ($.ig.ActivityStorage.prototype._hashSetContains(items, wrapper.dataObjectInternal())) {
				remove.add(wrapper);
			}
		}
		var en1 = remove.getEnumerator();
		while (en1.moveNext()) {
			var wrapper1 = en1.current();
			this.___items.remove(wrapper1);
		}
		if (this.___items.count() < $.ig.Utils.prototype.maxListSize) {
			return new $.ig.ActivityStorageList(1, this.___items);
		} else {
			return this;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityStorage Infragistics.Scheduler.Data.ActivityStorageHashSet::BulkRemove(System.Collections.Generic.HashSet)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageHashSet::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	_contains: function (item) {
		return this.___items.contains(item);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageHashSet::Contains(Infragistics.Scheduler.Data.IActivityDataObject)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorageHashSet::GetEnumerator()" />*/
	_getEnumerator: function () {
		return this.___items.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Data.ActivityStorageHashSet::GetEnumerator()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageHashSet::IsEmpty()" />*/
	_isEmpty: function () {
		return this.___items == null || this.___items.count() == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ActivityStorageHashSet::IsEmpty()" />*/
	,
	$type: new $.ig.Type('ActivityStorageHashSet', $.ig.ActivityStorage.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityStorageHashSet" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataErrorEventArgs" />*/

$.ig.scheduler.DataErrorEventArgs = $.ig.util.defType('scheduler.DataErrorEventArgs', 'EventArgs', {
	init: function (operation, error) {
		$.ig.EventArgs.prototype.init.call(this);
		this.error(error);
		this.operation(operation);
	},
	_error: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.DataErrorEventArgs::Error()" />*/
	error: function (value) {
		if (arguments.length === 1) {
			this._error = value;
			return value;
		} else {
			return this._error;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.DataErrorEventArgs::Error()" />*/
	,
	_operation: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.DataSourceOperation Infragistics.Scheduler.Data.DataErrorEventArgs::Operation()" />*/
	operation: function (value) {
		if (arguments.length === 1) {
			this._operation = value;
			return value;
		} else {
			return this._operation;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.DataSourceOperation Infragistics.Scheduler.Data.DataErrorEventArgs::Operation()" />*/
	,
	$type: new $.ig.Type('scheduler.DataErrorEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DataErrorEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentsChangedEventArgs" />*/

$.ig.util.defType('AppointmentsChangedEventArgs', 'EventArgs', {
	___action: 0,
	___affectedRange: null,
	init: function (action, affectedRange, isExternal) {
		$.ig.EventArgs.prototype.init.call(this);
		this.___affectedRange = affectedRange;
		this.___action = action;
	},
	/*<BeginProperty Name="System.Collections.Specialized.NotifyCollectionChangedAction Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::Action()" />*/
	action: function () {
		return this.___action;
	}
	/*<EndProperty Name="System.Collections.Specialized.NotifyCollectionChangedAction Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::Action()" />*/
	,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::AffectedRange()" />*/
	affectedRange: function () {
		return this.___affectedRange;
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::AffectedRange()" />*/
	,
	_isExternal: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::IsExternal()" />*/
	isExternal: function (value) {
		if (arguments.length === 1) {
			this._isExternal = value;
			return value;
		} else {
			return this._isExternal;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.AppointmentsChangedEventArgs::IsExternal()" />*/
	,
	$type: new $.ig.Type('AppointmentsChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentsChangedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ResourcesChangedEventArgs" />*/

$.ig.util.defType('ResourcesChangedEventArgs', 'EventArgs', {
	___affectedResources: null,
	___action: 0,
	init: function (affectedResources, action) {
		$.ig.EventArgs.prototype.init.call(this);
		this.___affectedResources = affectedResources;
		this.___action = action;
	},
	_affectedResources: null,
	/*<BeginProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ResourcesChangedEventArgs::AffectedResources()" />*/
	affectedResources: function (value) {
		if (arguments.length === 1) {
			this._affectedResources = value;
			return value;
		} else {
			return this._affectedResources;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ResourcesChangedEventArgs::AffectedResources()" />*/
	,
	_action: 0,
	/*<BeginProperty Name="System.Collections.Specialized.NotifyCollectionChangedAction Infragistics.Scheduler.Data.ResourcesChangedEventArgs::Action()" />*/
	action: function (value) {
		if (arguments.length === 1) {
			this._action = value;
			return value;
		} else {
			return this._action;
		}
	}
	/*<EndProperty Name="System.Collections.Specialized.NotifyCollectionChangedAction Infragistics.Scheduler.Data.ResourcesChangedEventArgs::Action()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ResourcesChangedEventArgs::IsExternal()" />*/
	isExternal: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ResourcesChangedEventArgs::IsExternal()" />*/
	,
	$type: new $.ig.Type('ResourcesChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ResourcesChangedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs`2" />*/

$.ig.util.defType('ActivityChangedEventArgs$2', 'EventArgs', {
	$t: null,
	$u: null,
	init: function ($t, $u, activity, property, oldValue, newValue) {
		this.$t = $t;
		this.$u = $u;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t, this.$u);
		}
		$.ig.EventArgs.prototype.init.call(this);
		this.activity(activity);
		this.property(property);
		this.oldValue(oldValue);
		this.newValue(newValue);
	},
	_activity: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs.T Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::Activity()" />*/
	activity: function (value) {
		if (arguments.length === 1) {
			this._activity = value;
			return value;
		} else {
			return this._activity;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs.T Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::Activity()" />*/
	,
	_property: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs.U Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::Property()" />*/
	property: function (value) {
		if (arguments.length === 1) {
			this._property = value;
			return value;
		} else {
			return this._property;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs.U Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::Property()" />*/
	,
	_oldValue: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::OldValue()" />*/
	oldValue: function (value) {
		if (arguments.length === 1) {
			this._oldValue = value;
			return value;
		} else {
			return this._oldValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::OldValue()" />*/
	,
	_newValue: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::NewValue()" />*/
	newValue: function (value) {
		if (arguments.length === 1) {
			this._newValue = value;
			return value;
		} else {
			return this._newValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.ActivityChangedEventArgs`2::NewValue()" />*/
	,
	$type: new $.ig.Type('ActivityChangedEventArgs$2', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityChangedEventArgs`2" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs" />*/

$.ig.util.defType('AppointmentPropertyChangedEventArgs', 'ActivityChangedEventArgs$2', {
	init: function (appointment, property, oldValue, newValue) {
		$.ig.ActivityChangedEventArgs$2.prototype.init.call(this, $.ig.scheduler.Appointment.prototype.$type, $.ig.scheduler.AppointmentProperty.prototype.$type, appointment, property, oldValue, newValue);
	},
	$type: new $.ig.Type('AppointmentPropertyChangedEventArgs', $.ig.ActivityChangedEventArgs$2.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type, $.ig.scheduler.AppointmentProperty.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs" />*/

$.ig.util.defType('ResourcePropertyChangedEventArgs', 'EventArgs', {
	init: function (resource, property, dayOfWeek) {
		$.ig.EventArgs.prototype.init.call(this);
		this.resource(resource);
		this.property(property);
	},
	_resource: null,
	/*<BeginProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs::Resource()" />*/
	resource: function (value) {
		if (arguments.length === 1) {
			this._resource = value;
			return value;
		} else {
			return this._resource;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs::Resource()" />*/
	,
	_property: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleResourceProperty Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs::Property()" />*/
	property: function (value) {
		if (arguments.length === 1) {
			this._property = value;
			return value;
		} else {
			return this._property;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleResourceProperty Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs::Property()" />*/
	,
	$type: new $.ig.Type('ResourcePropertyChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ResourcePropertyChangedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataError" />*/

$.ig.scheduler.DataError = $.ig.util.defType('scheduler.DataError', 'Object', {
	init: function (exception) {
		$.ig.Object.prototype.init.call(this);
		this.exception(exception);
	},
	_exception: null,
	/*<BeginProperty Name="System.Exception Infragistics.Scheduler.Data.DataError::Exception()" />*/
	exception: function (value) {
		if (arguments.length === 1) {
			this._exception = value;
			return value;
		} else {
			return this._exception;
		}
	}
	/*<EndProperty Name="System.Exception Infragistics.Scheduler.Data.DataError::Exception()" />*/
	,
	$type: new $.ig.Type('scheduler.DataError', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DataError" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.IncompletePropertyMappingsError`1" />*/

$.ig.scheduler.IncompletePropertyMappingsError$1 = $.ig.util.defType('scheduler.IncompletePropertyMappingsError$1', 'scheduler.DataError', {
	$t: null,
	___missing: null,
	init: function ($t, missingMappings, exception) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.DataError.prototype.init.call(this, exception);
		this.___missing = new $.ig.List$1(this.$t, 1, missingMappings);
	},
	/*<BeginProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.IncompletePropertyMappingsError`1::MissingMappings()" />*/
	missingMappings: function () {
		return this.___missing;
	}
	/*<EndProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.IncompletePropertyMappingsError`1::MissingMappings()" />*/
	,
	$type: new $.ig.Type('scheduler.IncompletePropertyMappingsError$1', $.ig.scheduler.DataError.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.IncompletePropertyMappingsError`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.InvalidPropertyMappingError`1" />*/

$.ig.scheduler.InvalidPropertyMappingError$1 = $.ig.util.defType('scheduler.InvalidPropertyMappingError$1', 'scheduler.DataError', {
	$t: null,
	___property: null,
	init: function ($t, property, invalidPropertyName, exception) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.DataError.prototype.init.call(this, exception);
		this.___property = property;
		this.invalidPropertyName(invalidPropertyName);
	},
	property: function () {
		return this._property$i.apply(this, arguments);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Data.InvalidPropertyMappingError.T Infragistics.Scheduler.Data.InvalidPropertyMappingError`1::Property()" />*/
	_property$i: function () {
		return this.___property;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.InvalidPropertyMappingError.T Infragistics.Scheduler.Data.InvalidPropertyMappingError`1::Property()" />*/
	,
	_invalidPropertyName: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Data.InvalidPropertyMappingError`1::InvalidPropertyName()" />*/
	invalidPropertyName: function (value) {
		if (arguments.length === 1) {
			this._invalidPropertyName = value;
			return value;
		} else {
			return this._invalidPropertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Data.InvalidPropertyMappingError`1::InvalidPropertyName()" />*/
	,
	$type: new $.ig.Type('scheduler.InvalidPropertyMappingError$1', $.ig.scheduler.DataError.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.InvalidPropertyMappingError`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataObjectModificationError`1" />*/

$.ig.scheduler.DataObjectModificationError$1 = $.ig.util.defType('scheduler.DataObjectModificationError$1', 'scheduler.DataError', {
	$t: null,
	init: function ($t, activity, dataObject, exception) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.DataError.prototype.init.call(this, exception);
		this.dataObject(dataObject);
	},
	activity: function (value) {
		if (arguments.length === 1) {
			this._activity$i.apply(this, arguments);
			return value;
		} else {
			return this._activity$i.apply(this, arguments);
		}
	},
	__activity$i: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.DataObjectModificationError.T Infragistics.Scheduler.Data.DataObjectModificationError`1::Activity()" />*/
	_activity$i: function (value) {
		if (arguments.length === 1) {
			this.__activity$i = value;
			return value;
		} else {
			return this.__activity$i;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.DataObjectModificationError.T Infragistics.Scheduler.Data.DataObjectModificationError`1::Activity()" />*/
	,
	_dataObject: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectModificationError`1::DataObject()" />*/
	dataObject: function (value) {
		if (arguments.length === 1) {
			this._dataObject = value;
			return value;
		} else {
			return this._dataObject;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectModificationError`1::DataObject()" />*/
	,
	$type: new $.ig.Type('scheduler.DataObjectModificationError$1', $.ig.scheduler.DataError.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DataObjectModificationError`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1" />*/

$.ig.scheduler.DataObjectPropertyAccessError$1 = $.ig.util.defType('scheduler.DataObjectPropertyAccessError$1', 'scheduler.DataError', {
	$t: null,
	init: function ($t, dataObject, property, operation, invalidValue, exception) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.DataError.prototype.init.call(this, exception);
		this.dataObject(dataObject);
		this._property$i(property);
		this.invalidValue(invalidValue);
	},
	_dataObject: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::DataObject()" />*/
	dataObject: function (value) {
		if (arguments.length === 1) {
			this._dataObject = value;
			return value;
		} else {
			return this._dataObject;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::DataObject()" />*/
	,
	property: function (value) {
		if (arguments.length === 1) {
			this._property$i.apply(this, arguments);
			return value;
		} else {
			return this._property$i.apply(this, arguments);
		}
	},
	__property$i: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.DataObjectPropertyAccessError.T Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::Property()" />*/
	_property$i: function (value) {
		if (arguments.length === 1) {
			this.__property$i = value;
			return value;
		} else {
			return this.__property$i;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.DataObjectPropertyAccessError.T Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::Property()" />*/
	,
	_invalidValue: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::InvalidValue()" />*/
	invalidValue: function (value) {
		if (arguments.length === 1) {
			this._invalidValue = value;
			return value;
		} else {
			return this._invalidValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1::InvalidValue()" />*/
	,
	$type: new $.ig.Type('scheduler.DataObjectPropertyAccessError$1', $.ig.scheduler.DataError.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DataObjectPropertyAccessError`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateRecurrenceParseError" />*/

$.ig.scheduler.DateRecurrenceParseError = $.ig.util.defType('scheduler.DateRecurrenceParseError', 'scheduler.DataError', {
	init: function (ex, context) {
		$.ig.scheduler.DataError.prototype.init.call(this, ex);
		this.context(context == null ? String.empty() : context);
	},
	_context: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Data.DateRecurrenceParseError::Context()" />*/
	context: function (value) {
		if (arguments.length === 1) {
			this._context = value;
			return value;
		} else {
			return this._context;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Data.DateRecurrenceParseError::Context()" />*/
	,
	$type: new $.ig.Type('scheduler.DateRecurrenceParseError', $.ig.scheduler.DataError.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateRecurrenceParseError" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ListModificationManager" />*/

$.ig.util.defType('ListModificationManager', 'Object', {
	init: function (dataSource) {
		$.ig.Object.prototype.init.call(this);
		this.dataSource(dataSource);
	},
	_dataSource: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.Data.ListModificationManager::DataSource()" />*/
	dataSource: function (value) {
		if (arguments.length === 1) {
			this._dataSource = value;
			return value;
		} else {
			return this._dataSource;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.Data.ListModificationManager::DataSource()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ListModificationManager::SupportsDataObjectCreation()" />*/
	supportsDataObjectCreation: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ListModificationManager::SupportsDataObjectCreation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ListModificationManager::SupportsListModification()" />*/
	supportsListModification: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ListModificationManager::SupportsListModification()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.ListModificationManager::IndexOf(System.Object)" />*/
	indexOf: function (dataObject) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.ListModificationManager::IndexOf(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	addToItemSource: function (id, dataObject) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	removeFromItemSource: function (index, dataObject) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.Data.ListModificationManager::ListCount()" />*/
	listCount: function () {
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.Data.ListModificationManager::ListCount()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	createAppointmentDataObjectInstance: function (appointment, exception) {
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ListModificationManager::Destroy()" />*/
	destroy: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ListModificationManager::Destroy()" />*/
	,
	$type: new $.ig.Type('ListModificationManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ListModificationManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.PropertyAccessor" />*/

$.ig.util.defType('PropertyAccessor', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.PropertyAccessor Infragistics.Scheduler.Data.PropertyAccessor::Create(System.Object, System.String)" />*/
	create: function (instance_, propertyName) {
		var exists = propertyName in instance_;
		if (exists) {
			return new $.ig.JSPropertyAccessor(propertyName);
		} else {
			return null;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.PropertyAccessor Infragistics.Scheduler.Data.PropertyAccessor::Create(System.Object, System.String)" />*/
	,
	/*<BeginProperty Name="System.Type Infragistics.Scheduler.Data.PropertyAccessor::PropertyType()" />*/
	propertyType: function () {
	}
	/*<EndProperty Name="System.Type Infragistics.Scheduler.Data.PropertyAccessor::PropertyType()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.PropertyAccessor::GetValue(System.Object)" />*/
	getValue: function (instance) {
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.PropertyAccessor::GetValue(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.PropertyAccessor::SetValue(System.Object, System.Object)" />*/
	setValue: function (instance, value) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.PropertyAccessor::SetValue(System.Object, System.Object)" />*/
	,
	$type: new $.ig.Type('PropertyAccessor', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.PropertyAccessor" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.JSPropertyAccessor" />*/

$.ig.util.defType('JSPropertyAccessor', 'PropertyAccessor', {
	init: function (propertyName) {
		$.ig.PropertyAccessor.prototype.init.call(this);
		this.propertyName(propertyName);
	},
	_propertyName: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Data.JSPropertyAccessor::PropertyName()" />*/
	propertyName: function (value) {
		if (arguments.length === 1) {
			this._propertyName = value;
			return value;
		} else {
			return this._propertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Data.JSPropertyAccessor::PropertyName()" />*/
	,
	/*<BeginProperty Name="System.Type Infragistics.Scheduler.Data.JSPropertyAccessor::PropertyType()" />*/
	propertyType: function () {
		return null;
	}
	/*<EndProperty Name="System.Type Infragistics.Scheduler.Data.JSPropertyAccessor::PropertyType()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.JSPropertyAccessor::GetValue(System.Object)" />*/
	getValue: function (instance_) {
		if (typeof instance_[this.propertyName()] == 'function') return instance_[this.propertyName()]();
		return instance_[this.propertyName()];
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.JSPropertyAccessor::GetValue(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.JSPropertyAccessor::SetValue(System.Object, System.Object)" />*/
	setValue: function (instance_, value_) {
		if (typeof instance_[this.propertyName()] == 'function'){ instance_[this.propertyName()](value_); } else { instance_[this.propertyName()] = value_; } return;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.JSPropertyAccessor::SetValue(System.Object, System.Object)" />*/
	,
	$type: new $.ig.Type('JSPropertyAccessor', $.ig.PropertyAccessor.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.JSPropertyAccessor" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.OperationResultBase" />*/

$.ig.scheduler.OperationResultBase = $.ig.util.defType('scheduler.OperationResultBase', 'Object', {
	___completedCallback: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.status($.ig.scheduler.OperationStatus.pending);
	},
	_status: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.OperationStatus Infragistics.Scheduler.Data.OperationResultBase::Status()" />*/
	status: function (value) {
		if (arguments.length === 1) {
			this._status = value;
			return value;
		} else {
			return this._status;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.OperationStatus Infragistics.Scheduler.Data.OperationResultBase::Status()" />*/
	,
	_completed: null,
	/*<BeginProperty Name="System.Action Infragistics.Scheduler.Data.OperationResultBase::CompletedCallback()" />*/
	completedCallback: function (value) {
		if (arguments.length === 1) {
			if (value != this.___completedCallback) {
				this.___completedCallback = value;
			}
			return value;
		} else {
			return this.___completedCallback;
		}
	}
	/*<EndProperty Name="System.Action Infragistics.Scheduler.Data.OperationResultBase::CompletedCallback()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::RaiseCompleted()" />*/
	_raiseCompleted: function () {
		if (this._completed != null) {
			this._completed(this, $.ig.EventArgs.prototype.empty);
		}
		if (this.completedCallback() != null) {
			this.completedCallback()(this);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::RaiseCompleted()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::Complete()" />*/
	_complete: function () {
		this.status($.ig.scheduler.OperationStatus.completed);
		this._raiseCompleted();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::Complete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::Cancel()" />*/
	_cancel: function () {
		this.status($.ig.scheduler.OperationStatus.canceled);
		this._raiseCompleted();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.OperationResultBase::Cancel()" />*/
	,
	$type: new $.ig.Type('scheduler.OperationResultBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.OperationResultBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateRangeQueryResultBase" />*/

$.ig.scheduler.DateRangeQueryResultBase = $.ig.util.defType('scheduler.DateRangeQueryResultBase', 'scheduler.OperationResultBase', {
	___range: null,
	___resources: null,
	___errors: null,
	init: function (range, resources) {
		$.ig.scheduler.OperationResultBase.prototype.init.call(this);
		this.___range = range;
		if (resources == null) {
			resources = new Array(0);
		}
		this.___resources = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 1, resources);
		this.___errors = new $.ig.List$1($.ig.scheduler.DataError.prototype.$type, 0);
	},
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.DateRangeQueryResultBase::Range()" />*/
	range: function () {
		return this.___range;
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Data.DateRangeQueryResultBase::Range()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.DateRangeQueryResultBase::Resources()" />*/
	resources: function () {
		return this.___resources;
	}
	/*<EndProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.DateRangeQueryResultBase::Resources()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.DateRangeQueryResultBase::Errors()" />*/
	errors: function () {
		return this.___errors == null ? new $.ig.List$1($.ig.scheduler.DataError.prototype.$type, 2, 0) : this.___errors;
	}
	/*<EndProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.DateRangeQueryResultBase::Errors()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DateRangeQueryResultBase::LogError(Infragistics.Scheduler.Data.DataError)" />*/
	_logError: function (error) {
		if (this.___errors == null) {
			this.___errors = new $.ig.List$1($.ig.scheduler.DataError.prototype.$type, 0);
		}
		this.___errors.add(error);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DateRangeQueryResultBase::LogError(Infragistics.Scheduler.Data.DataError)" />*/
	,
	$type: new $.ig.Type('scheduler.DateRangeQueryResultBase', $.ig.scheduler.OperationResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateRangeQueryResultBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityOperationResult`1" />*/

$.ig.scheduler.ActivityOperationResult$1 = $.ig.util.defType('scheduler.ActivityOperationResult$1', 'scheduler.OperationResultBase', {
	$t: null,
	init: function ($t, activity, operation, error) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.OperationResultBase.prototype.init.call(this);
		this._activity$i(activity);
		this.operation(operation);
		this.error(error);
	},
	activity: function (value) {
		if (arguments.length === 1) {
			this._activity$i.apply(this, arguments);
			return value;
		} else {
			return this._activity$i.apply(this, arguments);
		}
	},
	__activity$i: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityOperationResult.T Infragistics.Scheduler.Data.ActivityOperationResult`1::Activity()" />*/
	_activity$i: function (value) {
		if (arguments.length === 1) {
			this.__activity$i = value;
			return value;
		} else {
			return this.__activity$i;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityOperationResult.T Infragistics.Scheduler.Data.ActivityOperationResult`1::Activity()" />*/
	,
	_operation: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityOperation Infragistics.Scheduler.Data.ActivityOperationResult`1::Operation()" />*/
	operation: function (value) {
		if (arguments.length === 1) {
			this._operation = value;
			return value;
		} else {
			return this._operation;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityOperation Infragistics.Scheduler.Data.ActivityOperationResult`1::Operation()" />*/
	,
	_error: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ActivityOperationResult`1::Error()" />*/
	error: function (value) {
		if (arguments.length === 1) {
			this._error = value;
			return value;
		} else {
			return this._error;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ActivityOperationResult`1::Error()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityOperationResult`1::Fail(Infragistics.Scheduler.Data.DataError)" />*/
	_fail: function (error) {
		this.error(error);
		this._complete();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityOperationResult`1::Fail(Infragistics.Scheduler.Data.DataError)" />*/
	,
	$type: new $.ig.Type('scheduler.ActivityOperationResult$1', $.ig.scheduler.OperationResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityOperationResult`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentOperationResult" />*/

$.ig.scheduler.AppointmentOperationResult = $.ig.util.defType('scheduler.AppointmentOperationResult', 'scheduler.ActivityOperationResult$1', {
	init: function (appointment, operation, error) {
		error = (error !== void 0 ? error : null);
		$.ig.scheduler.ActivityOperationResult$1.prototype.init.call(this, $.ig.scheduler.Appointment.prototype.$type, appointment, operation, error);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.AppointmentOperationResult::Appointment()" />*/
	appointment: function () {
		return $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, this._activity$i());
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.AppointmentOperationResult::Appointment()" />*/
	,
	$type: new $.ig.Type('scheduler.AppointmentOperationResult', $.ig.scheduler.ActivityOperationResult$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentOperationResult" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityQueryResult`1" />*/

$.ig.scheduler.ActivityQueryResult$1 = $.ig.util.defType('scheduler.ActivityQueryResult$1', 'scheduler.DateRangeQueryResultBase', {
	$t: null,
	init: function ($t, range, resources) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.scheduler.DateRangeQueryResultBase.prototype.init.call(this, range, resources);
	},
	_activities: null,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Data.ActivityQueryResult`1::Activities()" />*/
	activities: function (value) {
		if (arguments.length === 1) {
			this._activities = value;
			return value;
		} else {
			return this._activities;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Data.ActivityQueryResult`1::Activities()" />*/
	,
	__dataObjectList: null,
	/*<BeginProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ActivityQueryResult`1::DataObjectList()" />*/
	_dataObjectList: function (value) {
		if (arguments.length === 1) {
			this.__dataObjectList = value;
			return value;
		} else {
			return this.__dataObjectList;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ActivityQueryResult`1::DataObjectList()" />*/
	,
	$type: new $.ig.Type('scheduler.ActivityQueryResult$1', $.ig.scheduler.DateRangeQueryResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityQueryResult`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentQueryResult" />*/

$.ig.scheduler.AppointmentQueryResult = $.ig.util.defType('scheduler.AppointmentQueryResult', 'scheduler.ActivityQueryResult$1', {
	init: function (range, resources) {
		$.ig.scheduler.ActivityQueryResult$1.prototype.init.call(this, $.ig.scheduler.Appointment.prototype.$type, range, resources);
	},
	/*<BeginProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.AppointmentQueryResult::Appointments()" />*/
	appointments: function (value) {
		if (arguments.length === 1) {
			$.ig.scheduler.ActivityQueryResult$1.prototype.activities.call(this, new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 1, value));
			return value;
		} else {
			return $.ig.scheduler.ActivityQueryResult$1.prototype.activities.call(this);
		}
	}
	/*<EndProperty Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.AppointmentQueryResult::Appointments()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.AppointmentQueryResult::Dump()" />*/
	_dump: function () {
		var appointments = this.appointments();
		var sb = new $.ig.StringBuilder(0);
		for (var i = 0, count = appointments.count(); i < count; i++) {
			var appointment = appointments.item(i);
			sb.append5($.ig.util.stringFormat("{0}: ", i));
			sb.appendLine1(appointment.toString());
		}
		return sb.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.AppointmentQueryResult::Dump()" />*/
	,
	$type: new $.ig.Type('scheduler.AppointmentQueryResult', $.ig.scheduler.ActivityQueryResult$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentQueryResult" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateQueryResultBase" />*/

$.ig.scheduler.DateQueryResultBase = $.ig.util.defType('scheduler.DateQueryResultBase', 'scheduler.DateRangeQueryResultBase', {
	init: function (range, resources) {
		$.ig.scheduler.DateRangeQueryResultBase.prototype.init.call(this, range, resources);
	},
	_dates: null,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Data.DateQueryResultBase::Dates()" />*/
	dates: function (value) {
		if (arguments.length === 1) {
			this._dates = value;
			return value;
		} else {
			return this._dates;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Data.DateQueryResultBase::Dates()" />*/
	,
	_hasActivity: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.DateQueryResultBase::HasActivity()" />*/
	hasActivity: function (value) {
		if (arguments.length === 1) {
			this._hasActivity = value;
			return value;
		} else {
			return this._hasActivity;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.DateQueryResultBase::HasActivity()" />*/
	,
	$type: new $.ig.Type('scheduler.DateQueryResultBase', $.ig.scheduler.DateRangeQueryResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateQueryResultBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateQueryResult" />*/

$.ig.scheduler.DateQueryResult = $.ig.util.defType('scheduler.DateQueryResult', 'scheduler.DateQueryResultBase', {
	init: function (range, resources, findFirst) {
		$.ig.scheduler.DateQueryResultBase.prototype.init.call(this, range, resources);
		this.findFirst(findFirst);
	},
	_findFirst: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.DateQueryResult::FindFirst()" />*/
	findFirst: function (value) {
		if (arguments.length === 1) {
			this._findFirst = value;
			return value;
		} else {
			return this._findFirst;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.DateQueryResult::FindFirst()" />*/
	,
	$type: new $.ig.Type('scheduler.DateQueryResult', $.ig.scheduler.DateQueryResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateQueryResult" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ActivityCountQueryResult" />*/

$.ig.util.defType('ActivityCountQueryResult', 'scheduler.DateQueryResultBase', {
	___table: null,
	___counts: null,
	init: function (range, resources) {
		$.ig.scheduler.DateQueryResultBase.prototype.init.call(this, range, resources);
		this.dates(new $.ig.List$1($.ig.Date.prototype.$type, 2, 0));
		this.___counts = new Array(0);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ActivityCountQueryResult::Initialize(, )" />*/
	_initialize: function (dates, counts) {
		var list = new $.ig.List$1($.ig.DateWithCount.prototype.$type, 2, dates.length);
		for (var i = 0; i < dates.length; i++) {
			list.add(new $.ig.DateWithCount(dates[i], counts[i]));
		}
		list.sort1(new $.ig.DateWithCountSortComparer());
		var dateList = new $.ig.List$1($.ig.Date.prototype.$type, 2, list.count());
		var countList = new $.ig.List$1($.ig.Number.prototype.$type, 2, list.count());
		$.ig.DateWithCount.prototype.split(list, dateList, countList);
		this.dates(dateList);
		this.___counts = countList.toArray();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ActivityCountQueryResult::Initialize(, )" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.Data.ActivityCountQueryResult::Item(System.DateTime)" />*/
	_item: function (date) {
		var $self = this;
		if (this.range().contains(date) == false) {
			return $.ig.util.toNullable($.ig.Number.prototype.$type, null);
		}
		var dates = this.dates();
		var key = null;
		if (dates.count() > $.ig.Utils.prototype.maxListSize) {
			if (this.___table == null) {
				this.___table = new $.ig.Dictionary$2(String, $.ig.Number.prototype.$type, 1, dates.count());
				for (var i = 0, count = dates.count(); i < count; i++) {
					key = $.ig.Utilities.prototype.dictionaryKeyFromDate(dates.__inner[i]);
					this.___table.add(key, this.___counts[i]);
				}
			}
		}
		if (this.___table != null) {
			key = $.ig.Utilities.prototype.dictionaryKeyFromDate($.ig.Date.prototype.getDate(date));
			var count1 = 0;
			if ((function () { var $ret = $self.___table.tryGetValue(key, count1); count1 = $ret.p1; return $ret.ret; }())) {
				return $.ig.util.toNullable($.ig.Number.prototype.$type, count1);
			} else {
				return $.ig.util.toNullable($.ig.Number.prototype.$type, null);
			}
		} else {
			for (var i1 = 0, count2 = dates.count(); i1 < count2; i1++) {
				if (+($.ig.Date.prototype.getDate(dates.__inner[i1])) == +date) {
					return $.ig.util.toNullable($.ig.Number.prototype.$type, this.___counts[i1]);
				}
			}
			return $.ig.util.toNullable($.ig.Number.prototype.$type, null);
		}
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.Data.ActivityCountQueryResult::Item(System.DateTime)" />*/
	,
	$type: new $.ig.Type('ActivityCountQueryResult', $.ig.scheduler.DateQueryResultBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ActivityCountQueryResult" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateWithCount" />*/

$.ig.util.defType('DateWithCount', 'Object', {
	init: function (date, count) {
		$.ig.Object.prototype.init.call(this);
		this.date(date);
		this.count(count);
	},
	_date: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Data.DateWithCount::Date()" />*/
	date: function (value) {
		if (arguments.length === 1) {
			this._date = value;
			return value;
		} else {
			return this._date;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Data.DateWithCount::Date()" />*/
	,
	_count: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.DateWithCount::Count()" />*/
	count: function (value) {
		if (arguments.length === 1) {
			this._count = value;
			return value;
		} else {
			return this._count;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.DateWithCount::Count()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.DateWithCount::Split(System.Collections.Generic.List, System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	split: function (list, dates, counts) {
		var en = list.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			dates.add(item.date());
			counts.add(item.count());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.DateWithCount::Split(System.Collections.Generic.List, System.Collections.Generic.List, System.Collections.Generic.List)" />*/
	,
	$type: new $.ig.Type('DateWithCount', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateWithCount" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.DateWithCountSortComparer" />*/

$.ig.util.defType('DateWithCountSortComparer', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.DateWithCountSortComparer::System.Collections.Generic.IComparer<Infragistics.Scheduler.Data.DateWithCount>.Compare(Infragistics.Scheduler.Data.DateWithCount, Infragistics.Scheduler.Data.DateWithCount)" />*/
	compare: function (x, y) {
		if (x == null || y == null) {
			return 0;
		}
		var xTicks = x.date().getTime();
		var yTicks = y.date().getTime();
		return xTicks < yTicks ? -1 : xTicks > yTicks ? 1 : 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.DateWithCountSortComparer::System.Collections.Generic.IComparer<Infragistics.Scheduler.Data.DateWithCount>.Compare(Infragistics.Scheduler.Data.DateWithCount, Infragistics.Scheduler.Data.DateWithCount)" />*/
	,
	$type: new $.ig.Type('DateWithCountSortComparer', $.ig.Object.prototype.$type, [$.ig.IComparer$1.prototype.$type.specialize($.ig.DateWithCount.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.DateWithCountSortComparer" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ScheduleDataSource" />*/

$.ig.scheduler.ScheduleDataSource = $.ig.util.defType('scheduler.ScheduleDataSource', 'Object', {
	___resourceTable: null,
	___resourcesVersion: 0,
	___colorSchemeManager: null,
	___dateTimeFormatProvider: null,
	___dataErrorCallback: null,
	init: function () {
		this.___resourcesVersion = 0;
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Action Infragistics.Scheduler.Data.ScheduleDataSource::DataErrorCallback()" />*/
	dataErrorCallback: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___dataErrorCallback;
			this.___dataErrorCallback = value;
			this.onPropertyChanged("DataErrorCallback");
			return value;
		} else {
			return this.___dataErrorCallback;
		}
	}
	/*<EndProperty Name="System.Action Infragistics.Scheduler.Data.ScheduleDataSource::DataErrorCallback()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::RaiseDataError(Infragistics.Scheduler.Data.DataSourceOperation, Infragistics.Scheduler.Data.DataError, System.Boolean)" />*/
	_raiseDataError: function (operation, error, throwException) {
		if (throwException) {
			throw error.exception();
		}
		if (this.dataErrorCallback() != null) {
			this.dataErrorCallback()(operation, error);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::RaiseDataError(Infragistics.Scheduler.Data.DataSourceOperation, Infragistics.Scheduler.Data.DataError, System.Boolean)" />*/
	,
	_appointmentsChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsChanged(System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange, System.Boolean)" />*/
	_onAppointmentsChanged: function (action, affectedRange, isExternal) {
		if (this._appointmentsChanged != null) {
			var args = new $.ig.AppointmentsChangedEventArgs(action, affectedRange, isExternal);
			this._appointmentsChanged(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsChanged(System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange, System.Boolean)" />*/
	,
	_resourcesChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnResourcesChanged(System.Collections.Generic.IList, System.Collections.Specialized.NotifyCollectionChangedAction)" />*/
	_onResourcesChanged: function (affectedResources, action) {
		this.___resourceTable = null;
		if (this._resourcesChanged != null) {
			var args = new $.ig.ResourcesChangedEventArgs(affectedResources, action);
			this._resourcesChanged(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnResourcesChanged(System.Collections.Generic.IList, System.Collections.Specialized.NotifyCollectionChangedAction)" />*/
	,
	_appointmentPropertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentPropertyChanged(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	onAppointmentPropertyChanged: function (appointment, property, oldValue, newValue) {
		if (this._appointmentPropertyChanged != null) {
			var args = new $.ig.AppointmentPropertyChangedEventArgs(appointment, property, oldValue, newValue);
			this._appointmentPropertyChanged(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentPropertyChanged(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	,
	_resourcePropertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	onResourcePropertyChanged: function (resource, property, dayOfWeek) {
		dayOfWeek = $.ig.util.wrapNullable($.ig.DayOfWeek.prototype.$type, dayOfWeek);
		this.___resourceTable = null;
		if (this._resourcePropertyChanged != null) {
			var args = new $.ig.ResourcePropertyChangedEventArgs(resource, property, dayOfWeek);
			this._resourcePropertyChanged(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	,
	_appointmentsBinding: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsBinding()" />*/
	_onAppointmentsBinding: function () {
		if (this._appointmentsBinding != null) {
			this._appointmentsBinding(this, $.ig.EventArgs.prototype.empty);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsBinding()" />*/
	,
	_appointmentsBound: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsBound()" />*/
	_onAppointmentsBound: function () {
		if (this._appointmentsBound != null) {
			this._appointmentsBound(this, $.ig.EventArgs.prototype.empty);
		}
		this._onAppointmentsChanged($.ig.NotifyCollectionChangedAction.prototype.reset, null, true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnAppointmentsBound()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::InternalOnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	_internalOnResourcePropertyChanged: function (resource, property, dayOfWeek) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::InternalOnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	_getAppointmentCounts: function (range, resources) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Action)" />*/
	_getAppointmentCounts1: function (range, resources, callback) {
		var result = this._getAppointmentCounts(range, resources);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			callback(result, false);
		} else {
			result._completed = $.ig.Delegate.prototype.combine(result._completed, function (sender, args) {
				callback(result, true);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DateQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean)" />*/
	hasAppointmentsInRange: function (range, resources, findFirst) {
		return $_3(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DateQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean, System.Action)" />*/
	_hasAppointmentsInRange1: function (range, resources, findFirst, callback) {
		var result = this.hasAppointmentsInRange(range, resources, findFirst);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			callback(result, false);
		} else {
			result._completed = $.ig.Delegate.prototype.combine(result._completed, function (sender, args) {
				callback(result, true);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean, System.Action)" />*/
	,
	getAppointmentsInRange: function () {
		return $_4(this._getAppointmentsInRange.apply(this, arguments));
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange)" />*/
	_getAppointmentsInRange: function (range) {
		return this._getAppointmentsInRange1(range, null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	_getAppointmentsInRange1: function (range, resources) {
		return $_4(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Action)" />*/
	_getAppointmentsInRange2: function (range, resources, callback) {
		var result = this._getAppointmentsInRange1(range, resources);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			callback(result, false);
		} else {
			result._completed = $.ig.Delegate.prototype.combine(result._completed, function (sender, args) {
				callback(result, true);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Action)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.ScheduleDataSource::GetResources()" />*/
	getResources: function () {
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.ScheduleDataSource::GetResources()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::CreateAppointment(System.Action)" />*/
	createAppointment: function (errorCallback) {
		return $_5(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::CreateAppointment(System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::DeleteAppointment(Infragistics.Scheduler.Appointment)" />*/
	deleteAppointment: function (appointment) {
		return $_6(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::DeleteAppointment(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::BeginEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	beginEdit: function (appointment, errorCallback) {
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::BeginEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::CancelEdit(Infragistics.Scheduler.Appointment)" />*/
	cancelEdit: function (appointment) {
		return $_6(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::CancelEdit(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::CancelEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	_cancelEdit1: function (appointment, callback) {
		var result = this.cancelEdit(appointment);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			callback(result, false);
		} else {
			result._completed = $.ig.Delegate.prototype.combine(result._completed, function (sender, args) {
				callback(result, true);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::CancelEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean)" />*/
	endEdit: function (appointment, force) {
		return $_6(null);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean, System.Action)" />*/
	_endEdit1: function (appointment, force, callback) {
		var result = this.endEdit(appointment, force);
		if (result.status() == $.ig.scheduler.OperationStatus.completed) {
			callback(result, false);
		} else {
			result._completed = $.ig.Delegate.prototype.combine(result._completed, function (sender, args) {
				callback(result, true);
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean, System.Action)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsAppointmentDataReady()" />*/
	isAppointmentDataReady: function () {
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsAppointmentDataReady()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::GetRecurrenceRoot(System.String)" />*/
	_getRecurrenceRoot: function (recurrenceId) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::GetRecurrenceRoot(System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Data.ScheduleDataSource::DateTimeFormatProvider()" />*/
	_dateTimeFormatProvider: function (value) {
		if (arguments.length === 1) {
			this.___dateTimeFormatProvider = value;
			return value;
		} else {
			if (this.___dateTimeFormatProvider == null) {
				this.___dateTimeFormatProvider = $.ig.DateUtils.prototype.defaultDateTimeFormatProvider();
			}
			return this.___dateTimeFormatProvider;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Data.ScheduleDataSource::DateTimeFormatProvider()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Data.ScheduleDataSource::ResourcesVersion()" />*/
	_resourcesVersion: function () {
		return this.___resourcesVersion;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Data.ScheduleDataSource::ResourcesVersion()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ColorSchemeManager Infragistics.Scheduler.Data.ScheduleDataSource::ColorSchemeManager()" />*/
	_colorSchemeManager: function () {
		if (this.___colorSchemeManager == null) {
			this.___colorSchemeManager = new $.ig.ColorSchemeManager(this);
		}
		return this.___colorSchemeManager;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ColorSchemeManager Infragistics.Scheduler.Data.ScheduleDataSource::ColorSchemeManager()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::CreateActivity(System.Type)" />*/
	_createActivity: function (type) {
		if (type == $.ig.scheduler.Appointment.prototype.$type) {
			return this._createNewAppointment(true);
		}
		$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("'{0}' is not a recognized activity type.", type.fullName()));
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::CreateActivity(System.Type)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::CreateNewAppointment(System.Boolean)" />*/
	_createNewAppointment: function (autoGenerateId) {
		var appointment = new $.ig.scheduler.Appointment();
		if (autoGenerateId) {
			appointment.id($.ig.Guid.prototype.newGuid().toString());
		}
		return appointment;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::CreateNewAppointment(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::InitDataSource(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	_initDataSource: function (activity, value) {
		activity._initDataSource(value);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::InitDataSource(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleDataSource::GetResource(System.String)" />*/
	_getResource: function (id) {
		if (this.___resourceTable == null) {
			this.___resourceTable = new $.ig.Dictionary$2(String, $.ig.scheduler.ScheduleResource.prototype.$type, 0);
			var resources = this.getResources();
			var en = resources.getEnumerator();
			while (en.moveNext()) {
				var resource = en.current();
				this.___resourceTable.add(resource.id(), resource);
			}
		}
		var value = null;
		var $ret = this.___resourceTable.tryGetValue(id, value);
		value = $ret.p1;
		return value;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleDataSource::GetResource(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnActivityTimesChanged(Infragistics.Scheduler.ActivityBase, System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	_onActivityTimesChanged: function (activity, oldStart, oldEnd, newStart, newEnd) {
		$.ig.Debug.prototype.assert1(false, "OnActivityTimesChanged should be overridden.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnActivityTimesChanged(Infragistics.Scheduler.ActivityBase, System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnActivityResourceChanged(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	_onActivityResourceChanged: function (activity, oldResourceId, newResourceId) {
		$.ig.Debug.prototype.assert1(false, "OnActivityResourceChanged should be overridden.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnActivityResourceChanged(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetDaysWithActivity(System.Int32, System.Int32, System.Collections.Generic.IEnumerable, System.Action)" />*/
	_getDaysWithActivity: function (year, month, resources, callback) {
		var firstOfMonth = $.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0);
		var firstOfNextMonth = $.ig.Date.prototype.addMonths(firstOfMonth, 1);
		var range = new $.ig.scheduler.DateTimeRange(firstOfMonth, firstOfNextMonth);
		this._hasAppointmentsInRange1(range, resources, false, callback);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::GetDaysWithActivity(System.Int32, System.Int32, System.Collections.Generic.IEnumerable, System.Action)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsExpectedType(Infragistics.Scheduler.Data.AppointmentProperty, System.Object)" />*/
	_isExpectedType: function (propId, value) {
		var result = false;
		switch (propId) {
			case $.ig.scheduler.AppointmentProperty.start:
			case $.ig.scheduler.AppointmentProperty.end:
			case $.ig.scheduler.AppointmentProperty.originalStart:
				result = ($.ig.util.cast($.ig.Date.prototype.$type, value) !== null);
				break;
			case $.ig.scheduler.AppointmentProperty.id:
			case $.ig.scheduler.AppointmentProperty.resourceId:
			case $.ig.scheduler.AppointmentProperty.recurrenceId:
			case $.ig.scheduler.AppointmentProperty.subject:
			case $.ig.scheduler.AppointmentProperty.location:
			case $.ig.scheduler.AppointmentProperty.description:
			case $.ig.scheduler.AppointmentProperty.recurrence:
				result = (typeof value === 'string');
				break;
			case $.ig.scheduler.AppointmentProperty.isRemoved:
				result = ($.ig.util.cast($.ig.Boolean.prototype.$type, value) !== null);
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized AppointmentProperty: '{0}'", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
				break;
		}
		return result;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsExpectedType(Infragistics.Scheduler.Data.AppointmentProperty, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsExpectedType(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object)" />*/
	_isExpectedType1: function (propId, value) {
		var result = false;
		switch (propId) {
			case $.ig.scheduler.ScheduleResourceProperty.id:
			case $.ig.scheduler.ScheduleResourceProperty.displayName:
				result = (typeof value === 'string');
				break;
			case $.ig.scheduler.ScheduleResourceProperty.colorScheme: return $.ig.util.cast($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, value) !== null || typeof value === 'number' || typeof value === 'string';
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized ScheduleResourceProperty: '{0}'", $.ig.scheduler.ScheduleResourceProperty.prototype.getBox(propId)));
				break;
		}
		return result;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleDataSource::IsExpectedType(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleDataSource::Convert(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Boolean)" />*/
	_convert: function (propId, value, throwException) {
		var convertedValue = null;
		var exception = null;
		switch (propId) {
			case $.ig.scheduler.AppointmentProperty.start:
			case $.ig.scheduler.AppointmentProperty.end:
			case $.ig.scheduler.AppointmentProperty.originalStart:
				convertedValue = (function () { var $ret = $.ig.Utils.prototype.convertToDateTime(value, exception); exception = $ret.p1; return $ret.ret; }());
				break;
			case $.ig.scheduler.AppointmentProperty.id:
			case $.ig.scheduler.AppointmentProperty.resourceId:
			case $.ig.scheduler.AppointmentProperty.recurrenceId:
			case $.ig.scheduler.AppointmentProperty.subject:
			case $.ig.scheduler.AppointmentProperty.location:
			case $.ig.scheduler.AppointmentProperty.description:
			case $.ig.scheduler.AppointmentProperty.recurrence:
				convertedValue = (function () { var $ret = $.ig.Utils.prototype.convertToString(value, exception, null); exception = $ret.p1; return $ret.ret; }());
				break;
			case $.ig.scheduler.AppointmentProperty.isRemoved:
				convertedValue = (function () { var $ret = $.ig.Utils.prototype.convertToBoolean(value, exception); exception = $ret.p1; return $ret.ret; }());
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized AppointmentProperty: '{0}'", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
				break;
		}
		if (throwException && exception != null) {
			throw exception;
		}
		return convertedValue;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleDataSource::Convert(Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleDataSource::Convert(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Boolean)" />*/
	_convert1: function (propId, value, throwException) {
		var convertedValue = null;
		var exception = null;
		switch (propId) {
			case $.ig.scheduler.ScheduleResourceProperty.id:
			case $.ig.scheduler.ScheduleResourceProperty.displayName:
				convertedValue = (function () { var $ret = $.ig.Utils.prototype.convertToString(value, exception, null); exception = $ret.p1; return $ret.ret; }());
				break;
			case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
				convertedValue = $.ig.util.unwrapNullable((function () { var $ret = $.ig.Utils.prototype.convertToColorScheme(value, exception); exception = $ret.p1; return $ret.ret; }()));
				break;
			default:
				$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized ScheduleResourceProperty: '{0}'", $.ig.scheduler.ScheduleResourceProperty.prototype.getBox(propId)));
				break;
		}
		if (throwException && exception != null) {
			throw exception;
		}
		return convertedValue;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleDataSource::Convert(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnPropertyChanged(System.String)" />*/
	onPropertyChanged: function (propertyName) {
		if (this._propertyChanged != null) {
			this._propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::OnPropertyChanged(System.String)" />*/
	,
	_propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::BumpResourcesVersion()" />*/
	bumpResourcesVersion: function () {
		this.___resourcesVersion++;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::BumpResourcesVersion()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::GetOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	_getOccurrence: function (recurrenceRoot, originalStart) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleDataSource::GetOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentOccurrence(Infragistics.Scheduler.Appointment, System.DateTime)" />*/
	_getAppointmentOccurrence: function (recurrenceRoot, originalStart) {
		return $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, this._getOccurrence(recurrenceRoot, originalStart));
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentOccurrence(Infragistics.Scheduler.Appointment, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentBackgroundColor(Infragistics.Scheduler.ScheduleResource)" />*/
	getAppointmentBackgroundColor: function (resource) {
		if (resource == null) {
			throw new $.ig.ArgumentNullException(0, "resource");
		}
		var brush = this._colorSchemeManager().getBackgroundBrush1(resource);
		return brush != null ? brush.color().colorString() : String.empty();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentBackgroundColor(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentTextColor(Infragistics.Scheduler.ScheduleResource)" />*/
	getAppointmentTextColor: function (resource) {
		if (resource == null) {
			throw new $.ig.ArgumentNullException(0, "resource");
		}
		var brush = this._colorSchemeManager().getTextBrush(resource);
		return brush != null ? brush.color().colorString() : String.empty();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.ScheduleDataSource::GetAppointmentTextColor(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::Destroy()" />*/
	destroy: function () {
		$.ig.Debug.prototype.assert1(false, "The base class implementation of OnDestroy should never be called.");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleDataSource::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.ScheduleDataSource', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ScheduleDataSource" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ScheduleListDataSource" />*/

$.ig.scheduler.ScheduleListDataSource = $.ig.util.defType('scheduler.ScheduleListDataSource', 'scheduler.ScheduleDataSource', {
	___appointmentPropertyMappings: null,
	___resourcePropertyMappings: null,
	___handleAppointmentItemsPropertyChanged: false,
	___appointmentItemsSource: null,
	___appointmentItemsSourceWrapper: null,
	___resourceItemsSource: null,
	___dataObjectTree: null,
	___appointmentPropertyMapVerified: false,
	___resourcePropertyMapVerified: false,
	___pendingEditOperations: null,
	___appointmentTable: null,
	___createAppointmentDataObjectCallback: null,
	___resources: null,
	___isIsOnDataObjectPropertyChanged: false,
	___appointmentListModificationManager: null,
	___recurrenceManager: null,
	___resourceNotificationsSuspended: false,
	init: function () {
		this.___handleAppointmentItemsPropertyChanged = $.ig.scheduler.ScheduleListDataSource.prototype.__handleAppointmentItemsPropertyChangedDefault;
		this.___appointmentPropertyMapVerified = false;
		this.___resourcePropertyMapVerified = false;
		this.___isIsOnDataObjectPropertyChanged = false;
		$.ig.scheduler.ScheduleDataSource.prototype.init.call(this);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointment(System.Action)" />*/
	createAppointment: function (errorCallback) {
		var dcError = this._verifyCanModifyAppointmentItemsSource($.ig.scheduler.DataSourceOperation.createDataObject, null);
		if (dcError != null) {
			this._raiseDataError($.ig.scheduler.DataSourceOperation.createDataObject, dcError, false);
			if (errorCallback != null) {
				errorCallback(dcError);
			}
			return null;
		}
		var appointment = this._createNewAppointment(true);
		this._pendingEditOperations().add(appointment, new $.ig.PendingOperation$1($.ig.scheduler.ActivityBase.prototype.$type, appointment, $.ig.scheduler.ActivityOperation.create, null));
		return appointment;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointment(System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::DeleteAppointment(Infragistics.Scheduler.Appointment)" />*/
	deleteAppointment: function (appointment) {
		if (appointment == null) {
			throw new $.ig.ArgumentNullException(0, "appointment");
		}
		var affectedRange = null;
		var dataObject = appointment.dataObject();
		var exception = null;
		var result = new $.ig.scheduler.AppointmentOperationResult(appointment, $.ig.scheduler.ActivityOperation.del, null);
		if (appointment.isRecurrenceRoot() || appointment._isOccurrence()) {
			affectedRange = this._recurrenceManager().del(appointment, result);
			this._onAppointmentsChanged($.ig.NotifyCollectionChangedAction.prototype.remove, affectedRange, false);
			return result;
		}
		var dcError = this._verifyCanModifyAppointmentItemsSource($.ig.scheduler.DataSourceOperation.createDataObject, null);
		if (dcError != null) {
			this._raiseDataError($.ig.scheduler.DataSourceOperation.deleteDataObject, dcError, false);
			result._fail(dcError);
			return result;
		}
		var listManager = this._appointmentListModificationManager();
		var index = listManager.indexOf(dataObject);
		if (index < 0) {
			exception = $.ig.Utils.prototype.createException("LE_NoDataObject");
			dcError = new $.ig.scheduler.DataObjectModificationError$1($.ig.scheduler.Appointment.prototype.$type, appointment, dataObject, exception);
			result._fail(dcError);
			this._raiseDataError($.ig.scheduler.DataSourceOperation.deleteDataObject, dcError, false);
			return result;
		}
		try {
			listManager.removeFromItemSource(index, dataObject);
			this._dataObjectTree().onAppointmentRemoved(appointment);
			this._unregisterAppointment(appointment, dataObject, true);
			result._complete();
		}
		catch (ex) {
			dcError = new $.ig.scheduler.DataError(ex);
			result._fail(dcError);
			this._raiseDataError($.ig.scheduler.DataSourceOperation.deleteDataObject, dcError, false);
		}
		affectedRange = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		var appointmentList = new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 1, [ appointment ]);
		this._onAppointmentsChanged($.ig.NotifyCollectionChangedAction.prototype.remove, affectedRange, false);
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::DeleteAppointment(Infragistics.Scheduler.Appointment)" />*/
	,
	getAppointmentsInRange: function () {
		var n;
		if (arguments.length === 1) {
			n = 0;
		} else if (arguments.length === 2) {
			n = 1;
		}
		switch (n) {
			case 0: return $_4($.ig.scheduler.ScheduleDataSource.prototype._getAppointmentsInRange.apply(this, arguments));
			case 1: return $_4(this._getAppointmentsInRange1.apply(this, arguments));
			default: throw new Error('Invalid arguments');
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	_getAppointmentsInRange1: function (range, resources) {
		var result = new $.ig.scheduler.AppointmentQueryResult(range, resources);
		result._dataObjectList(new $.ig.List$1($.ig.Object.prototype.$type, 2, 0));
		result.appointments(new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 2, 0));
		var firstItem = this._verifyFirstAppointmentItem(result);
		if (firstItem == null) {
			return result;
		}
		if (this._verifyAppointmentPropertyMappings1(firstItem, result) == false) {
			return result;
		}
		this._initializeDataObjectTree(result);
		var ids = $.ig.scheduler.ScheduleListDataSource.prototype._getResourceIds(resources);
		var dataObjectList = this._dataObjectTree().getItemsInRange(range, ids);
		result._dataObjectList(dataObjectList);
		var appointmentList = this._populateAppointmentList(dataObjectList, result);
		this._recurrenceManager().getAppointmentsInRange(range, resources, appointmentList);
		if (appointmentList.count() > 1) {
			appointmentList.sort2($.ig.ActivitySortComparer.prototype._getComparer());
		}
		result.appointments(appointmentList);
		result._complete();
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::GetAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DateQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean)" />*/
	hasAppointmentsInRange: function (range, resources, findFirst) {
		var $self = this;
		var result = new $.ig.scheduler.DateQueryResult(range, resources, findFirst);
		result.dates(new $.ig.List$1($.ig.Date.prototype.$type, 2, 0));
		var firstItem = this._verifyFirstAppointmentItem(result);
		if (firstItem == null) {
			return result;
		}
		if (this._verifyAppointmentPropertyMappings1(firstItem, result) == false) {
			return result;
		}
		this._initializeDataObjectTree(result);
		var resourceIds = $.ig.scheduler.ScheduleListDataSource.prototype._getResourceIds(resources);
		var list = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		var hasActivity = (function () { var $ret = $self._dataObjectTree().hasActivityInRange(range, resourceIds, findFirst, list); list = $ret.p3; return $ret.ret; }());
		hasActivity = hasActivity || this._recurrenceManager().hasActivityInRange(range, resources, findFirst, list);
		result.dates(findFirst ? new $.ig.List$1($.ig.Date.prototype.$type, 2, 0) : list);
		result.hasActivity(hasActivity);
		result._complete();
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DateQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::HasAppointmentsInRange(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	_getAppointmentCounts: function (range, resources) {
		var result = new $.ig.ActivityCountQueryResult(range, resources);
		result._initialize(new Array(0), new Array(0));
		var firstItem = this._verifyFirstAppointmentItem(result);
		if (firstItem == null) {
			return result;
		}
		if (this._verifyAppointmentPropertyMappings1(firstItem, result) == false) {
			return result;
		}
		this._initializeDataObjectTree(result);
		result = this._dataObjectTree().getActivityCounts(range, resources);
		this._recurrenceManager().getActivityCounts(range, resources, result);
		result._complete();
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ActivityCountQueryResult Infragistics.Scheduler.Data.ScheduleListDataSource::GetAppointmentCounts(Infragistics.DateTimeRange, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::BeginEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	beginEdit: function (appointment, errorCallback) {
		var pending = this._pendingEditOperations();
		var operation = null;
		if ((function () { var $ret = pending.tryGetValue(appointment, operation); operation = $ret.p1; return $ret.ret; }())) {
			if (operation.operation() != $.ig.scheduler.ActivityOperation.edit) {
				var error = new $.ig.scheduler.DataError($.ig.Utils.prototype.createException("LE_BeginEdit_CreatePending"));
				if (errorCallback != null) {
					errorCallback(error);
				}
			} else {
				return true;
			}
		}
		var clone = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, appointment._clone());
		pending.add(appointment, new $.ig.PendingOperation$1($.ig.scheduler.ActivityBase.prototype.$type, appointment, $.ig.scheduler.ActivityOperation.edit, clone));
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::BeginEdit(Infragistics.Scheduler.Appointment, System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::CancelEdit(Infragistics.Scheduler.Appointment)" />*/
	cancelEdit: function (appointment) {
		return this._endEditHelper(appointment, false, false);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::CancelEdit(Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean)" />*/
	endEdit: function (appointment, force) {
		return this._endEditHelper(appointment, true, force);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::EndEdit(Infragistics.Scheduler.Appointment, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::EndEditHelper(Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean)" />*/
	_endEditHelper: function (appointment, commit, force) {
		var $self = this;
		var result = null;
		var error = null;
		var exception = null;
		var pending = null;
		if ((function () { var $ret = $self._pendingEditOperations().tryGetValue(appointment, pending); pending = $ret.p1; return $ret.ret; }())) {
			this._pendingEditOperations().remove(appointment);
			result = new $.ig.scheduler.AppointmentOperationResult(appointment, pending.operation(), null);
			if (commit) {
				try {
					var $ret = this._onEndEdit(appointment, pending.operation(), error);
					error = $ret.p2;
				}
				catch (ex) {
					error = new $.ig.scheduler.DataError(ex);
				}
				if (error != null) {
					result._fail(error);
				}
			} else {
				this._onCancelEdit(appointment, pending.clone(), pending.operation());
			}
		} else {
			exception = $.ig.Utils.prototype.createException("LE_EndEdit_NotInEditMode");
			error = new $.ig.scheduler.DataError(exception);
			result = new $.ig.scheduler.AppointmentOperationResult(appointment, $.ig.scheduler.ActivityOperation.edit, null);
		}
		if (error != null) {
			result._fail(error);
		} else {
			result._complete();
		}
		return result;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentOperationResult Infragistics.Scheduler.Data.ScheduleListDataSource::EndEditHelper(Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAppointmentDataReady()" />*/
	isAppointmentDataReady: function () {
		var wrapper = this._appointmentItemsSourceWrapper();
		return wrapper._isBindingPending() == false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAppointmentDataReady()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.Data.ScheduleListDataSource::Resources()" />*/
	_resources: function () {
		if (this.___resources == null) {
			this.___resources = this._initializeResourcesFromItemsSource();
		}
		return this.___resources;
	}
	/*<EndProperty Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.Data.ScheduleListDataSource::Resources()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleListDataSource::GetResource(System.Object)" />*/
	_getResource1: function (dataObject) {
		return this._resources()._item(dataObject);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleListDataSource::GetResource(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::GetResources()" />*/
	getResources: function () {
		return this._resources();
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::GetResources()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAssociatedWithResource(Infragistics.Scheduler.Data.IActivityDataObject, System.Collections.Generic.IEnumerable)" />*/
	_isAssociatedWithResource1: function (activity, resources) {
		if (resources == null) {
			return true;
		}
		var resourceIds = $.ig.scheduler.ScheduleListDataSource.prototype._getResourceIds(resources);
		return $.ig.scheduler.ScheduleListDataSource.prototype._isAssociatedWithResource(activity, resourceIds);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAssociatedWithResource(Infragistics.Scheduler.Data.IActivityDataObject, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAssociatedWithResource(Infragistics.Scheduler.Data.IActivityDataObject, )" />*/
	_isAssociatedWithResource: function (activity, resourceIds) {
		if (resourceIds != null && resourceIds.length > 0) {
			for (var i = 0; i < resourceIds.length; i++) {
				var resourceId = resourceIds[i];
				if ($.ig.Utils.prototype.stringEquals(activity.resourceId(), resourceId, true)) {
					return true;
				}
			}
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAssociatedWithResource(Infragistics.Scheduler.Data.IActivityDataObject, )" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.ScheduleListDataSource::GetResourceIds(System.Collections.Generic.IEnumerable)" />*/
	_getResourceIds: function (resources) {
		if (resources == null) {
			return new Array(0);
		}
		var ids = new $.ig.List$1(String, 0);
		var en = resources.getEnumerator();
		while (en.moveNext()) {
			var resource = en.current();
			var id = resource.id();
			if (String.isNullOrEmpty(id)) {
				continue;
			}
			ids.add(resource.id());
		}
		return ids.toArray();
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.ScheduleListDataSource::GetResourceIds(System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeResourcesFromItemsSource()" />*/
	_initializeResourcesFromItemsSource: function () {
		var $self = this;
		if (this.___resourceItemsSource == null) {
			return $.ig.ScheduleResourceStorage.prototype._create(null);
		}
		var dsError = null;
		var en = this.___resourceItemsSource.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			var $ret = this._verifyResourcePropertyMappings(dataObject, dsError);
			dsError = $ret.p1;
			break;
		}
		if (dsError != null) {
			return $.ig.ScheduleResourceStorage.prototype._create(null);
		}
		var dataList = $.ig.scheduler.ScheduleListDataSource.prototype._getModifiableList(this.___resourceItemsSource);
		var capacity = dataList != null ? dataList.count() : 10;
		var list = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 2, capacity);
		var ids = new $.ig.HashSet$1(String, 0);
		var unused = null;
		var en1 = this.___resourceItemsSource.getEnumerator();
		while (en1.moveNext()) {
			var dataObject1 = en1.current();
			var dataObjectAsResource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject1);
			var resource = dataObjectAsResource != null ? dataObjectAsResource : this._createResource();
			if (dataObjectAsResource == null) {
				if ((function () { var $ret = $self._initializeFromDataObject1(dataObject1, resource, ids, unused); unused = $ret.p3; return $ret.ret; }()) == false) {
					continue;
				}
			}
			this._registerNewResource(resource, dataObject1);
			list.add(resource);
		}
		return $.ig.ScheduleResourceStorage.prototype._create(list);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResourceStorage Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeResourcesFromItemsSource()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleListDataSource::GetRecurrenceRoot(System.String)" />*/
	_getRecurrenceRoot: function (recurrenceId) {
		return this._recurrenceManager().getRecurrenceRoot1(recurrenceId);
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleListDataSource::GetRecurrenceRoot(System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager Infragistics.Scheduler.Data.ScheduleListDataSource::RecurrenceManager()" />*/
	_recurrenceManager: function () {
		if (this.___recurrenceManager == null) {
			this.___recurrenceManager = new $.ig.AppointmentRecurrenceManager(this);
		}
		return this.___recurrenceManager;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Internal.Recurrence.AppointmentRecurrenceManager Infragistics.Scheduler.Data.ScheduleListDataSource::RecurrenceManager()" />*/
	,
	/*<BeginProperty Name="System.Func Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentDataObjectCallback()" />*/
	createAppointmentDataObjectCallback: function (value) {
		if (arguments.length === 1) {
			if (this.___createAppointmentDataObjectCallback != value) {
				this.___createAppointmentDataObjectCallback = value;
				this.onPropertyChanged("CreateAppointmentDataObjectCallback");
			}
			return value;
		} else {
			return this.___createAppointmentDataObjectCallback;
		}
	}
	/*<EndProperty Name="System.Func Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentDataObjectCallback()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Data.ScheduleListDataSource::PendingEditOperations()" />*/
	_pendingEditOperations: function () {
		if (this.___pendingEditOperations == null) {
			this.___pendingEditOperations = new $.ig.Dictionary$2($.ig.scheduler.ActivityBase.prototype.$type, $.ig.PendingOperation$1.prototype.$type.specialize($.ig.scheduler.ActivityBase.prototype.$type), 0);
		}
		return this.___pendingEditOperations;
	}
	/*<EndProperty Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Data.ScheduleListDataSource::PendingEditOperations()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::HandleAppointmentItemsPropertyChanged()" />*/
	handleAppointmentItemsPropertyChanged: function (value) {
		if (arguments.length === 1) {
			if (value != this.___handleAppointmentItemsPropertyChanged) {
				this.___handleAppointmentItemsPropertyChanged = value;
				var itemSource = this._internalAppointmentItemsSource();
				if (itemSource != null) {
					var en = itemSource.getEnumerator();
					while (en.moveNext()) {
						var dataObject = en.current();
						var inpc = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
						this._hookAppointmentDataObjectPropertyChanged(inpc, this.___handleAppointmentItemsPropertyChanged);
					}
				}
				this.onPropertyChanged("HandleAppointmentItemsPropertyChanged");
			}
			return value;
		} else {
			return this.___handleAppointmentItemsPropertyChanged;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::HandleAppointmentItemsPropertyChanged()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ListModificationManager Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentListModificationManager()" />*/
	_appointmentListModificationManager: function () {
		if (this.___appointmentListModificationManager == null) {
			this.___appointmentListModificationManager = new $.ig.JSAppointmentListModificationManager(this);
		}
		return this.___appointmentListModificationManager;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ListModificationManager Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentListModificationManager()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentItemsSource()" />*/
	appointmentItemsSource: function (value) {
		if (arguments.length === 1) {
			if (value != this.___appointmentItemsSource) {
				if (this.___appointmentItemsSource != null) {
					this.___appointmentItemsSourceWrapper._destroy();
					this.___appointmentItemsSourceWrapper = null;
				}
				if (this.___appointmentListModificationManager != null) {
					this.___appointmentListModificationManager.destroy();
					this.___appointmentListModificationManager = null;
				}
				this.___appointmentItemsSource = value;
				this._createAppointmentDataSourceWrapper();
				this.onPropertyChanged("AppointmentItemsSource");
			}
			return value;
		} else {
			return this.___appointmentItemsSource;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentItemsSource()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.JSItemsSourceProxy Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentItemsSourceWrapper()" />*/
	_appointmentItemsSourceWrapper: function () {
		return this.___appointmentItemsSourceWrapper;
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.JSItemsSourceProxy Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentItemsSourceWrapper()" />*/
	,
	/*<BeginProperty Name="System.Collections.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::InternalAppointmentItemsSource()" />*/
	_internalAppointmentItemsSource: function () {
		this._createAppointmentDataSourceWrapper();
		return this.___appointmentItemsSourceWrapper;
	}
	/*<EndProperty Name="System.Collections.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::InternalAppointmentItemsSource()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentDataSourceWrapper()" />*/
	_createAppointmentDataSourceWrapper: function () {
		if (this.___appointmentItemsSourceWrapper == null) {
			this.___appointmentItemsSourceWrapper = $.ig.JSItemsSourceProxy.prototype._create(this, this.appointmentItemsSource(), this._onAppointmentItemsSourceBinding.runOn(this), this._onAppointmentItemsSourceBound.runOn(this));
			this.___appointmentItemsSourceWrapper._initialize();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentDataSourceWrapper()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentItemsSourceBinding()" />*/
	_onAppointmentItemsSourceBinding: function () {
		this._onAppointmentsBinding();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentItemsSourceBinding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentItemsSourceBound()" />*/
	_onAppointmentItemsSourceBound: function () {
		this._onAppointmentsBound();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentItemsSourceBound()" />*/
	,
	/*<BeginProperty Name="System.Collections.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::ResourceItemsSource()" />*/
	resourceItemsSource: function (value) {
		if (arguments.length === 1) {
			if (value != this.___resourceItemsSource) {
				if (this.___resourceItemsSource != null) {
					this._cleanUpResourcesItemSource(this.___resourceItemsSource);
				}
				this.___resourceItemsSource = value;
				var incc = $.ig.util.cast($.ig.INotifyCollectionChanged.prototype.$type, this.___resourceItemsSource);
				if (incc != null) {
					this._hookResourceItemsSourceCollectionChanged(incc, true);
				}
				this.___resourcePropertyMapVerified = false;
				this.onPropertyChanged("ResourceItemsSource");
			}
			return value;
		} else {
			return this.___resourceItemsSource;
		}
	}
	/*<EndProperty Name="System.Collections.IEnumerable Infragistics.Scheduler.Data.ScheduleListDataSource::ResourceItemsSource()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::FirstAppointmentItem()" />*/
	_firstAppointmentItem: function () {
		var itemSource = this._internalAppointmentItemsSource();
		if (itemSource == null) {
			return null;
		}
		var en = itemSource.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			return item;
		}
		return null;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::FirstAppointmentItem()" />*/
	,
	/*<BeginProperty Name=" Infragistics.Scheduler.Data.ScheduleListDataSource::RequiredAppointmentPropertyMappings()" />*/
	_requiredAppointmentPropertyMappings: function () {
		return [ $.ig.scheduler.AppointmentProperty.id, $.ig.scheduler.AppointmentProperty.start, $.ig.scheduler.AppointmentProperty.end ];
	}
	/*<EndProperty Name=" Infragistics.Scheduler.Data.ScheduleListDataSource::RequiredAppointmentPropertyMappings()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityTree Infragistics.Scheduler.Data.ScheduleListDataSource::DataObjectTree()" />*/
	_dataObjectTree: function () {
		if (this.___dataObjectTree == null) {
			this.___dataObjectTree = new $.ig.ActivityTree(this);
		}
		return this.___dataObjectTree;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityTree Infragistics.Scheduler.Data.ScheduleListDataSource::DataObjectTree()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentPropertyMappings()" />*/
	appointmentPropertyMappings: function () {
		if (arguments.length !== 0) {
			var $t = this.appointmentPropertyMappings();
			return $_7($t.item.apply($t, arguments));
		}
		if (this.___appointmentPropertyMappings == null) {
			this.___appointmentPropertyMappings = new $.ig.scheduler.AppointmentPropertyMappingsCollection();
		}
		return this.___appointmentPropertyMappings;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentPropertyMappings()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection Infragistics.Scheduler.Data.ScheduleListDataSource::ResourcePropertyMappings()" />*/
	resourcePropertyMappings: function () {
		if (arguments.length !== 0) {
			var $t = this.resourcePropertyMappings();
			return $_8($t.item.apply($t, arguments));
		}
		if (this.___resourcePropertyMappings == null) {
			this.___resourcePropertyMappings = new $.ig.scheduler.ResourcePropertyMappingsCollection();
		}
		return this.___resourcePropertyMappings;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection Infragistics.Scheduler.Data.ScheduleListDataSource::ResourcePropertyMappings()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAppointmentDataObjectNative()" />*/
	_isAppointmentDataObjectNative: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::IsAppointmentDataObjectNative()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyFirstAppointmentItem(Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	_verifyFirstAppointmentItem: function (result) {
		var firstItem = this._firstAppointmentItem();
		if (firstItem == null) {
			result._complete();
			return null;
		}
		return firstItem;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyFirstAppointmentItem(Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyAppointmentPropertyMappings(System.Object, Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	_verifyAppointmentPropertyMappings1: function (firstItem, result) {
		var $self = this;
		var dsError = null;
		if ((function () { var $ret = $self._verifyAppointmentPropertyMappings(firstItem, dsError); dsError = $ret.p1; return $ret.ret; }()) == false) {
			result._logError(dsError);
			result._complete();
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyAppointmentPropertyMappings(System.Object, Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeDataObjectTree(Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	_initializeDataObjectTree: function (result) {
		var tree = this._dataObjectTree();
		var initializationErrors = null;
		var recurrences = null;
		var variances = null;
		var $ret = this._initializeTree(initializationErrors, recurrences, variances);
		initializationErrors = $ret.p0;
		recurrences = $ret.p1;
		variances = $ret.p2;
		if (initializationErrors != null && initializationErrors.count() > 0) {
			var en = initializationErrors.getEnumerator();
			while (en.moveNext()) {
				var error = en.current();
				result._logError(error);
			}
			return false;
		}
		if (recurrences != null && recurrences.count() > 0) {
			this._createRecurrences(recurrences, variances, result);
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeDataObjectTree(Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnActivityTimesChanged(Infragistics.Scheduler.ActivityBase, System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	_onActivityTimesChanged: function (activity, oldStart, oldEnd, newStart, newEnd) {
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, activity);
		if (appointment != null) {
			this._syncDataObjectProperty(appointment, $.ig.scheduler.AppointmentProperty.start, newStart);
			this._syncDataObjectProperty(appointment, $.ig.scheduler.AppointmentProperty.end, newEnd);
			if (this.___dataObjectTree != null) {
				this.___dataObjectTree.onAppointmentTimesChanged(appointment, oldStart, oldEnd);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnActivityTimesChanged(Infragistics.Scheduler.ActivityBase, System.DateTime, System.DateTime, System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnActivityResourceChanged(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	_onActivityResourceChanged: function (activity, oldResourceId, newResourceId) {
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, activity);
		if (appointment != null) {
			this._syncDataObjectProperty(appointment, $.ig.scheduler.AppointmentProperty.resourceId, newResourceId);
			if (this.___dataObjectTree != null) {
				this.___dataObjectTree.onAppointmentResourceChanged(appointment, oldResourceId, newResourceId);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnActivityResourceChanged(Infragistics.Scheduler.ActivityBase, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentTable()" />*/
	_createAppointmentTable: function () {
		if (this.___appointmentTable == null) {
			var itemSourceAsList = $.ig.scheduler.ScheduleListDataSource.prototype._getModifiableList(this._internalAppointmentItemsSource());
			var capacity = itemSourceAsList != null ? itemSourceAsList.count() : 100;
			this.___appointmentTable = new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.scheduler.Appointment.prototype.$type, 1, capacity);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateAppointmentTable()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Data.ScheduleListDataSource::PopulateAppointmentList(System.Collections.Generic.IList, Infragistics.Scheduler.Data.AppointmentQueryResult)" />*/
	_populateAppointmentList: function (dataObjectList, result) {
		var $self = this;
		var appointmentList = new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 2, dataObjectList.count());
		var en = dataObjectList.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
			if (appointment == null) {
				this._createAppointmentTable();
				if ((function () { var $ret = $self.___appointmentTable.tryGetValue(dataObject, appointment); appointment = $ret.p1; return $ret.ret; }()) == false) {
					appointment = this._createNewAppointment(true);
					var error = null;
					if ((function () { var $ret = $self._initializeFromDataObject(dataObject, appointment, error); error = $ret.p2; return $ret.ret; }()) == false) {
						result._logError(error);
						continue;
					}
					this._registerNewAppointment(appointment, dataObject, true);
				}
			} else {
				this._registerNewAppointment(appointment, appointment, true);
			}
			if (appointment != null) {
				appointmentList.add(appointment);
			}
		}
		return appointmentList;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Data.ScheduleListDataSource::PopulateAppointmentList(System.Collections.Generic.IList, Infragistics.Scheduler.Data.AppointmentQueryResult)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RegisterNewAppointment(Infragistics.Scheduler.Appointment, System.Object, System.Boolean)" />*/
	_registerNewAppointment: function (appointment, dataObject, addToTable) {
		var dataObjectIsAppointment = $.ig.Utils.prototype.isSameInstance(appointment, dataObject);
		appointment._setDataObject(dataObject, false);
		if (addToTable && dataObjectIsAppointment == false) {
			this._addToTable(dataObject, appointment);
		}
		this._initDataSource(appointment, this);
		if (dataObjectIsAppointment == false && this.handleAppointmentItemsPropertyChanged()) {
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			if (impl != null) {
				this._hookAppointmentDataObjectPropertyChanged(impl, true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RegisterNewAppointment(Infragistics.Scheduler.Appointment, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RegisterNewResource(Infragistics.Scheduler.ScheduleResource, System.Object)" />*/
	_registerNewResource: function (resource, dataObject) {
		var dataObjectIsResource = resource.equals(dataObject);
		resource._setDataObject(dataObject, false);
		resource._initDataSource(this);
		if (String.isNullOrEmpty(resource.id())) {
			resource.id($.ig.Guid.prototype.newGuid().toString());
		}
		if (dataObjectIsResource == false) {
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			if (impl != null) {
				this._hookResourceDataObjectPropertyChanged(impl, true);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RegisterNewResource(Infragistics.Scheduler.ScheduleResource, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::UnregisterAppointment(Infragistics.Scheduler.Appointment, System.Object, System.Boolean)" />*/
	_unregisterAppointment: function (appointment, dataObject, removeFromTable) {
		var dataObjectIsAppointment = $.ig.Utils.prototype.isSameInstance(appointment, dataObject);
		appointment._setDataObject(null, false);
		if (removeFromTable && dataObjectIsAppointment == false) {
			this._removeFromTable(dataObject, appointment);
		}
		this._initDataSource(appointment, null);
		if (dataObjectIsAppointment == false && this.handleAppointmentItemsPropertyChanged()) {
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			if (impl != null) {
				this._hookAppointmentDataObjectPropertyChanged(impl, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::UnregisterAppointment(Infragistics.Scheduler.Appointment, System.Object, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::UnregisterResource(Infragistics.Scheduler.ScheduleResource, System.Object)" />*/
	_unregisterResource: function (resource, dataObject) {
		var dataObjectIsResource = resource.equals(dataObject);
		resource._setDataObject(null, false);
		resource._initDataSource(null);
		if (dataObjectIsResource == false) {
			this.___resources = this._resources()._remove(resource);
		}
		if (dataObjectIsResource == false) {
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			if (impl != null) {
				this._hookAppointmentDataObjectPropertyChanged(impl, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::UnregisterResource(Infragistics.Scheduler.ScheduleResource, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookAppointmentDataObjectPropertyChanged(System.ComponentModel.INotifyPropertyChanged, System.Boolean)" />*/
	_hookAppointmentDataObjectPropertyChanged: function (dataObject, hook) {
		if (dataObject == null) {
			return;
		}
		dataObject.propertyChanged = $.ig.Delegate.prototype.remove(dataObject.propertyChanged, this._onAppointmentDataObjectPropertyChanged1.runOn(this));
		if (hook) {
			dataObject.propertyChanged = $.ig.Delegate.prototype.combine(dataObject.propertyChanged, this._onAppointmentDataObjectPropertyChanged1.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookAppointmentDataObjectPropertyChanged(System.ComponentModel.INotifyPropertyChanged, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookResourceDataObjectPropertyChanged(System.ComponentModel.INotifyPropertyChanged, System.Boolean)" />*/
	_hookResourceDataObjectPropertyChanged: function (dataObject, hook) {
		if (dataObject == null) {
			return;
		}
		dataObject.propertyChanged = $.ig.Delegate.prototype.remove(dataObject.propertyChanged, this._onResourceDataObjectPropertyChanged1.runOn(this));
		if (hook) {
			dataObject.propertyChanged = $.ig.Delegate.prototype.combine(dataObject.propertyChanged, this._onResourceDataObjectPropertyChanged1.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookResourceDataObjectPropertyChanged(System.ComponentModel.INotifyPropertyChanged, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookResourceItemsSourceCollectionChanged(System.Collections.Specialized.INotifyCollectionChanged, System.Boolean)" />*/
	_hookResourceItemsSourceCollectionChanged: function (list, hook) {
		if (list == null) {
			return;
		}
		list.collectionChanged = $.ig.Delegate.prototype.remove(list.collectionChanged, this._onResourcesItemsSourceCollectionChanged.runOn(this));
		if (hook) {
			list.collectionChanged = $.ig.Delegate.prototype.combine(list.collectionChanged, this._onResourcesItemsSourceCollectionChanged.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::HookResourceItemsSourceCollectionChanged(System.Collections.Specialized.INotifyCollectionChanged, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ScheduleListDataSource::GetResources(System.Collections.IList)" />*/
	_getResources1: function (dataObjects) {
		var list = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 0);
		if (dataObjects == null || this.___resources == null) {
			return list;
		}
		var en = dataObjects.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			var resource = this.___resources._item(dataObject);
			if (resource == null) {
				continue;
			}
			list.add(resource);
		}
		return list;
	}
	/*<EndMethod Name="System.Collections.Generic.IList Infragistics.Scheduler.Data.ScheduleListDataSource::GetResources(System.Collections.IList)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentExists(System.Object)" />*/
	_appointmentExists: function (dataObject) {
		var $self = this;
		var unused = null;
		return (function () { var $ret = $self._tryGetAppointment(dataObject, unused); unused = $ret.p1; return $ret.ret; }());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AppointmentExists(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetAppointment(System.Object, Infragistics.Scheduler.Appointment)" />*/
	_tryGetAppointment: function (dataObject, appointment) {
		var $self = this;
		appointment = null;
		if (this.___appointmentTable == null) {
			return {
				ret: false,
				p1: appointment
			};
		}
		return {
			ret: (function () { var $ret = $self.___appointmentTable.tryGetValue(dataObject, appointment); appointment = $ret.p1; return $ret.ret; }()),
			p1: appointment
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetAppointment(System.Object, Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentsItemsSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)" />*/
	_onAppointmentsItemsSourceCollectionChanged: function (action, newItems, oldItems) {
		var affectedRange = null;
		switch (action) {
			case $.ig.NotifyCollectionChangedAction.prototype.add:
				var $ret = this._addAppointmentDataObjects(newItems, affectedRange);
				affectedRange = $ret.p1;
				this._notifyAppointmentsChanged_External($.ig.NotifyCollectionChangedAction.prototype.add, affectedRange);
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.remove:
				var $ret1 = this._removeAppointmentDataObjects(oldItems, affectedRange);
				affectedRange = $ret1.p1;
				this._notifyAppointmentsChanged_External($.ig.NotifyCollectionChangedAction.prototype.remove, affectedRange);
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.reset:
				this._createAppointmentTable();
				var dataObjects = $.ig.Utils.prototype.listFromIEnumerable(this.___appointmentTable.keys(), this.___appointmentTable.count());
				var $ret2 = this._removeAppointmentDataObjects(dataObjects, affectedRange);
				affectedRange = $ret2.p1;
				if (this.___dataObjectTree != null) {
					this.___dataObjectTree.clear();
				}
				this._notifyAppointmentsChanged_External($.ig.NotifyCollectionChangedAction.prototype.reset, affectedRange);
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.replace:
				var $ret3 = this._removeAppointmentDataObjects(oldItems, affectedRange);
				affectedRange = $ret3.p1;
				this._notifyAppointmentsChanged_External($.ig.NotifyCollectionChangedAction.prototype.remove, affectedRange);
				var $ret4 = this._addAppointmentDataObjects(newItems, affectedRange);
				affectedRange = $ret4.p1;
				this._notifyAppointmentsChanged_External($.ig.NotifyCollectionChangedAction.prototype.add, affectedRange);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentsItemsSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::NotifyAppointmentsChanged_External(System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange)" />*/
	_notifyAppointmentsChanged_External: function (action, affectedRange) {
		this._onAppointmentsChanged(action, affectedRange, true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::NotifyAppointmentsChanged_External(System.Collections.Specialized.NotifyCollectionChangedAction, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::NotifyResourcesChanged_External(System.Collections.Generic.IList, System.Collections.Specialized.NotifyCollectionChangedAction)" />*/
	_notifyResourcesChanged_External: function (resources, action) {
		this._onResourcesChanged(resources, action);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::NotifyResourcesChanged_External(System.Collections.Generic.IList, System.Collections.Specialized.NotifyCollectionChangedAction)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddAppointmentDataObjects(System.Collections.IList, Infragistics.DateTimeRange)" />*/
	_addAppointmentDataObjects: function (items, affectedRange) {
		var $self = this;
		affectedRange = null;
		var unused = null;
		var en = items.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			if ((function () { var $ret = $self._verifyAppointmentPropertyMappings(dataObject, unused); unused = $ret.p1; return $ret.ret; }()) == false) {
				return {
					p1: affectedRange
				};
			}
			break;
		}
		var $ret = this._dataObjectTree().onItemsSourceItemsAdded(items, $.ig.NotifyCollectionChangedAction.prototype.add, affectedRange);
		affectedRange = $ret.p2;
		return {
			p1: affectedRange
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddAppointmentDataObjects(System.Collections.IList, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveAppointmentDataObjects(System.Collections.IList, Infragistics.DateTimeRange)" />*/
	_removeAppointmentDataObjects: function (items, affectedRange) {
		var $self = this;
		affectedRange = null;
		var recurrenceRootRemoved = false;
		var min = $.ig.Date.prototype.maxValue();
		var max = $.ig.Date.prototype.minValue();
		var en = items.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			if (this.___recurrenceManager != null) {
				if (this.___recurrenceManager.onItemsSourceItemRemoved(dataObject)) {
					recurrenceRootRemoved = true;
					continue;
				}
			}
			var existingAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
			if (existingAppointment != null || (function () { var $ret = $self._tryGetAppointment(dataObject, existingAppointment); existingAppointment = $ret.p1; return $ret.ret; }())) {
				if (existingAppointment.start() < min) {
					min = existingAppointment.start();
				}
				if (existingAppointment.end() > max) {
					max = existingAppointment.end();
				}
				this._unregisterAppointment(existingAppointment, dataObject, true);
			}
		}
		if (recurrenceRootRemoved) {
			affectedRange = null;
		} else if (+min != +($.ig.Date.prototype.maxValue()) && +max != +($.ig.Date.prototype.minValue())) {
			affectedRange = new $.ig.scheduler.DateTimeRange(min, max);
		}
		if (this.___dataObjectTree != null) {
			this.___dataObjectTree.bulkRemove(items);
		}
		return {
			p1: affectedRange
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveAppointmentDataObjects(System.Collections.IList, Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourcesItemsSourceCollectionChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	_onResourcesItemsSourceCollectionChanged: function (sender, e) {
		var resources = null;
		this.bumpResourcesVersion();
		this.___resources = null;
		switch (e.action()) {
			case $.ig.NotifyCollectionChangedAction.prototype.add:
				this._addResourceDataObjects(e.newItems());
				resources = this._getResources1(e.newItems());
				this._notifyResourcesChanged_External(resources, $.ig.NotifyCollectionChangedAction.prototype.add);
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.remove:
				this._removeResourceDataObjects(e.oldItems());
				resources = this._getResources1(e.oldItems());
				this._notifyResourcesChanged_External(resources, $.ig.NotifyCollectionChangedAction.prototype.remove);
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.reset:
				if (this.___resources != null) {
					resources = new $.ig.List$1($.ig.scheduler.ScheduleResource.prototype.$type, 1, this.___resources);
					this._removeResourceDataObjects(this.___resources);
					this._notifyResourcesChanged_External(resources, $.ig.NotifyCollectionChangedAction.prototype.remove);
				}
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.replace:
				var removed = this._getResources1(e.oldItems());
				this._removeResourceDataObjects(e.oldItems());
				this._addResourceDataObjects(e.newItems());
				var added = this._getResources1(e.newItems());
				this._notifyResourcesChanged_External(removed, $.ig.NotifyCollectionChangedAction.prototype.remove);
				this._notifyResourcesChanged_External(added, $.ig.NotifyCollectionChangedAction.prototype.add);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourcesItemsSourceCollectionChanged(System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddResourceDataObjects(System.Collections.IList)" />*/
	_addResourceDataObjects: function (items) {
		var $self = this;
		var unused = null;
		var en = items.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			if ((function () { var $ret = $self._verifyResourcePropertyMappings(dataObject, unused); unused = $ret.p1; return $ret.ret; }()) == false) {
				return;
			}
			break;
		}
		var en1 = items.getEnumerator();
		while (en1.moveNext()) {
			var dataObject1 = en1.current();
			this._addResourceDataObject(dataObject1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddResourceDataObjects(System.Collections.IList)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveResourceDataObjects(System.Collections.IEnumerable)" />*/
	_removeResourceDataObjects: function (items) {
		var en = items.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			this._removeResourceDataObject(dataObject);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveResourceDataObjects(System.Collections.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AddResourceDataObject(System.Object)" />*/
	_addResourceDataObject: function (dataObject) {
		var $self = this;
		var dataObjectAsResource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject);
		var resource = dataObjectAsResource != null ? dataObjectAsResource : this._createResource();
		if (dataObjectAsResource == null) {
			var error = null;
			var resourceIds = this._getResourceIds1();
			if ((function () { var $ret = $self._initializeFromDataObject1(dataObject, resource, resourceIds, error); error = $ret.p3; return $ret.ret; }()) == false) {
				return false;
			}
		}
		this._registerNewResource(resource, dataObject);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AddResourceDataObject(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveResourceDataObject(System.Object)" />*/
	_removeResourceDataObject: function (dataObject) {
		if (this.___resources == null) {
			return false;
		}
		var resource = this._getResource1(dataObject);
		this._unregisterResource(resource, dataObject);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveResourceDataObject(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.HashSet Infragistics.Scheduler.Data.ScheduleListDataSource::GetResourceIds()" />*/
	_getResourceIds1: function () {
		if (this.___resources == null) {
			return null;
		}
		var hs = new $.ig.HashSet$1(String, 0);
		var en = this.___resources.getEnumerator();
		while (en.moveNext()) {
			var resource = en.current();
			hs.add(resource.id());
		}
		return hs;
	}
	/*<EndMethod Name="System.Collections.Generic.HashSet Infragistics.Scheduler.Data.ScheduleListDataSource::GetResourceIds()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentPropertyChanged(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	onAppointmentPropertyChanged: function (appointment, property, oldValue, newValue) {
		if (property == $.ig.scheduler.AppointmentProperty.recurrence) {
			var oldRecurrence = $.ig.util.cast(String, oldValue);
			var newRecurrence = $.ig.util.cast(String, newValue);
			this._recurrenceManager().transitionRecurrence(appointment, oldRecurrence, newRecurrence);
		}
		if (property != $.ig.scheduler.AppointmentProperty.start && property != $.ig.scheduler.AppointmentProperty.end && property != $.ig.scheduler.AppointmentProperty.recurrence) {
			this._syncDataObjectProperty(appointment, property, newValue);
		}
		$.ig.scheduler.ScheduleDataSource.prototype.onAppointmentPropertyChanged.call(this, appointment, property, oldValue, newValue);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentPropertyChanged(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SyncDataObjectProperty(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object)" />*/
	_syncDataObjectProperty: function (appointment, property, value) {
		var dataObject = appointment != null ? appointment.dataObject() : null;
		if (dataObject == null) {
			return;
		}
		var dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (dataObjectAsAppointment == null) {
			if (this.handleAppointmentItemsPropertyChanged()) {
				this._hookAppointmentDataObjectPropertyChanged($.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject), false);
			}
			try {
				var unused = null;
				var $ret = this._trySetAppointmentDataObjectPropertyValue(dataObject, property, value, unused);
				unused = $ret.p3;
			}
			finally {
				if (this.handleAppointmentItemsPropertyChanged()) {
					this._hookAppointmentDataObjectPropertyChanged($.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject), true);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SyncDataObjectProperty(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.AppointmentProperty, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SyncDataObjectProperty(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object)" />*/
	_syncDataObjectProperty1: function (resource, property, value) {
		var dataObject = resource != null ? resource.dataObject() : null;
		if (dataObject == null) {
			return;
		}
		var dataObjectAsResource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject);
		if (dataObjectAsResource == null) {
			this._suspendResourceNotifications();
			try {
				var unused = null;
				var $ret = this._trySetResourcePropertyValue(dataObject, property, value, unused);
				unused = $ret.p3;
			}
			finally {
				this._resumeResourceNotifications();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SyncDataObjectProperty(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentDataObjectPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	_onAppointmentDataObjectPropertyChanged1: function (sender, e) {
		var mapping = this.appointmentPropertyMappings()._getMapping(e.propertyName());
		if (mapping == null) {
			return;
		}
		this._onAppointmentDataObjectPropertyChanged(sender, mapping._property$i(), true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentDataObjectPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentDataObjectPropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Boolean)" />*/
	_onAppointmentDataObjectPropertyChanged: function (dataObject, propId, isExternalChange) {
		var $self = this;
		var appointment = null;
		if (this.___appointmentTable != null && (function () { var $ret = $self.___appointmentTable.tryGetValue(dataObject, appointment); appointment = $ret.p1; return $ret.ret; }()) == false) {
			$.ig.Debug.prototype.assert1(false, "Could not find the associated Appointment here.");
			return;
		}
		if (appointment == null) {
			appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, this._recurrenceManager().getRecurrenceRoot(dataObject));
		}
		if (appointment == null) {
			$.ig.Debug.prototype.assert1(false, "Data object property changed but we have no corresponding activity.");
			return;
		}
		if (this.___isIsOnDataObjectPropertyChanged) {
			return;
		}
		this.___isIsOnDataObjectPropertyChanged = true;
		try {
			var value = null;
			var error = null;
			if ((function () { var $ret = $self._tryGetAppointmentPropertyValue(dataObject, propId, value, error); value = $ret.p2; error = $ret.p3; return $ret.ret; }())) {
				var unused = null;
				var $ret = appointment._setPropertyValue1(propId, value, unused);
				unused = $ret.p2;
			}
		}
		finally {
			this.___isIsOnDataObjectPropertyChanged = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnAppointmentDataObjectPropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceDataObjectPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	_onResourceDataObjectPropertyChanged1: function (sender, e) {
		var mapping = this.resourcePropertyMappings()._getMapping(e.propertyName());
		if (mapping == null) {
			return;
		}
		this._onResourceDataObjectPropertyChanged(sender, mapping._property$i(), true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceDataObjectPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceDataObjectPropertyChanged(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Boolean)" />*/
	_onResourceDataObjectPropertyChanged: function (dataObject, propId, isExternalChange) {
		var $self = this;
		if (propId == $.ig.scheduler.ScheduleResourceProperty.id) {
			this.bumpResourcesVersion();
		}
		var resource = this._getResource1(dataObject);
		if (resource == null) {
			$.ig.Debug.prototype.assert1(false, "Could not find the associated ScheduleResource here.");
			return;
		}
		var value = null;
		var error = null;
		if ((function () { var $ret = $self._tryGetResourcePropertyValue(dataObject, propId, value, error); value = $ret.p2; error = $ret.p3; return $ret.ret; }())) {
			var unused = null;
			var $ret = resource._setPropertyValue(propId, value, unused);
			unused = $ret.p2;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceDataObjectPropertyChanged(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnPropertyMapChanged(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_onPropertyMapChanged: function (propId) {
		if (this.___appointmentPropertyMapVerified && this.___appointmentPropertyMappings != null && this.___appointmentPropertyMappings._isRequired(propId)) {
			this.___appointmentPropertyMapVerified = false;
		}
		this.onPropertyChanged("AppointmentPropertyMap");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnPropertyMapChanged(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnPropertyMapChanged(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	_onPropertyMapChanged1: function (propId) {
		if (this.___resourcePropertyMapVerified && this.___resourcePropertyMappings != null && this.___resourcePropertyMappings._isRequired(propId)) {
			this.___resourcePropertyMapVerified = false;
		}
		this.onPropertyChanged("ResourcePropertyMap");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnPropertyMapChanged(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::OnEndEdit(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ActivityOperation, Infragistics.Scheduler.Data.DataError)" />*/
	_onEndEdit: function (activity, operation, error) {
		var $self = this;
		error = null;
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, activity);
		var isDataObjectNative = this._isAppointmentDataObjectNative();
		switch (operation) {
			case $.ig.scheduler.ActivityOperation.create:
				var dataObject = null;
				var exception = null;
				this._createAppointmentTable();
				if (isDataObjectNative) {
					dataObject = appointment;
				} else {
					dataObject = (function () { var $ret = $self._createDataObject(appointment, exception); exception = $ret.p1; return $ret.ret; }());
					if (exception != null) {
						error = new $.ig.scheduler.DataError(exception);
						return {
							ret: false,
							p2: error
						};
					}
					var existing = null;
					if ((function () { var $ret = $self.___appointmentTable.tryGetValue(dataObject, existing); existing = $ret.p1; return $ret.ret; }())) {
						exception = $.ig.Utils.prototype.createException("LE_EndEdit_DataObjectAlreadyAssociated");
						error = new $.ig.scheduler.DataError(exception);
						return {
							ret: false,
							p2: error
						};
					}
					if ((function () { var $ret = $self._initializeFromAppointment(appointment, dataObject, error); error = $ret.p2; return $ret.ret; }()) == false) {
						return {
							ret: false,
							p2: error
						};
					}
				}
				this._registerNewAppointment(appointment, dataObject, true);
				if ((function () { var $ret = $self._addToItemSource(appointment.id(), dataObject, error); error = $ret.p2; return $ret.ret; }()) == false) {
					this._unregisterAppointment(appointment, dataObject, true);
					return {
						ret: false,
						p2: error
					};
				}
				this._dataObjectTree().onAppointmentAdded(appointment);
				var affectedRange = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
				var appointmentList = new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 1, [ appointment ]);
				this._onAppointmentsChanged($.ig.NotifyCollectionChangedAction.prototype.add, affectedRange, false);
				break;
			case $.ig.scheduler.ActivityOperation.edit:
				if (activity._isVarianceCreationPending()) {
					dataObject = (function () { var $ret = $self._createDataObject(appointment, exception); exception = $ret.p1; return $ret.ret; }());
					if (exception != null) {
						error = new $.ig.scheduler.DataError(exception);
						return {
							ret: false,
							p2: error
						};
					}
					if ((function () { var $ret = $self._initializeFromAppointment(appointment, dataObject, error); error = $ret.p2; return $ret.ret; }()) == false) {
						return {
							ret: false,
							p2: error
						};
					}
					appointment._setDataObject(dataObject, false);
					this._appointmentListModificationManager().addToItemSource(appointment.id(), dataObject);
					this._recurrenceManager().registerVariance(appointment.recurrenceId(), appointment);
				}
				break;
		}
		return {
			ret: true,
			p2: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::OnEndEdit(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ActivityOperation, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AddToItemSource(System.String, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	_addToItemSource: function (id, dataObject, error) {
		error = this._appointmentListModificationManager().addToItemSource(id, dataObject);
		return {
			ret: error == null,
			p2: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::AddToItemSource(System.String, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddToTable(System.Object, Infragistics.Scheduler.Appointment)" />*/
	_addToTable: function (dataObject, appointment) {
		this._createAppointmentTable();
		if (this.___appointmentTable.containsKey(dataObject)) {
			$.ig.Debug.prototype.assert1(false, "This data object already exists in the data object/appointment table.");
			return;
		}
		this.___appointmentTable.add(dataObject, appointment);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::AddToTable(System.Object, Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveFromTable(System.Object, Infragistics.Scheduler.Appointment)" />*/
	_removeFromTable: function (dataObject, appointment) {
		var $self = this;
		if (this.___appointmentTable == null) {
			return;
		}
		var appt = null;
		if ((function () { var $ret = $self.___appointmentTable.tryGetValue(dataObject, appt); appt = $ret.p1; return $ret.ret; }()) == false) {
			$.ig.Debug.prototype.assert1(false, "Specified dataObject is not in the table.");
			return;
		}
		if ($.ig.Object.prototype.referenceEquals(appointment, appt) == false) {
			$.ig.Debug.prototype.assert1(false, "Specified dataObject is associated with a different appointment.");
			return;
		}
		this.___appointmentTable.remove(dataObject);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RemoveFromTable(System.Object, Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::CreateDataObject(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	_createDataObject: function (appointment, exception) {
		var itemSource = this._internalAppointmentItemsSource();
		exception = null;
		var manager = this._appointmentListModificationManager();
		if (manager.supportsDataObjectCreation() == false) {
			exception = $.ig.Utils.prototype.createException("LE_CreateDataObjectFailed");
			return {
				ret: null,
				p1: exception
			};
		}
		try {
			return {
				ret: (function () { var $ret = manager.createAppointmentDataObjectInstance(appointment, exception); exception = $ret.p1; return $ret.ret; }()),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
		}
		return {
			ret: null,
			p1: exception
		};
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::CreateDataObject(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::CreateDataObject(Infragistics.Scheduler.ScheduleResource, System.Exception)" />*/
	_createDataObject1: function (resource, exception) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Data.ScheduleListDataSource::CreateDataObject(Infragistics.Scheduler.ScheduleResource, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnCancelEdit(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ActivityOperation)" />*/
	_onCancelEdit: function (activity, clone, operation) {
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, activity);
		if (appointment == null) {
			$.ig.Debug.prototype.assert1(false, "Expecting an appointment here.");
			return;
		}
		switch (operation) {
			case $.ig.scheduler.ActivityOperation.create: break;
			case $.ig.scheduler.ActivityOperation.edit:
				activity._initializeFrom1(clone);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnCancelEdit(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Data.ActivityOperation)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RaisePropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	raisePropertyChanged: function (dataObject, property) {
		var mapping = this.appointmentPropertyMappings()._item1(property);
		var propertyName = mapping != null ? mapping.dataObjectPropertyName() : null;
		if (String.isNullOrEmpty(propertyName)) {
			throw $.ig.Utils.prototype.createException1("LE_NoPropertyMapping_Appointment", [ $.ig.scheduler.AppointmentProperty.prototype.getBox(property) ]);
		}
		if (this.___appointmentTable == null || this.___appointmentTable.containsKey(dataObject) == false) {
			var exception = $.ig.Utils.prototype.createException("LE_DataObjectNotAssociated");
			throw exception;
		}
		this._onAppointmentDataObjectPropertyChanged(dataObject, property, false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::RaisePropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyCanModifyAppointmentItemsSource(Infragistics.Scheduler.Data.DataSourceOperation, Infragistics.Scheduler.Appointment)" />*/
	_verifyCanModifyAppointmentItemsSource: function (operation, appointment) {
		var error = null;
		var itemsSource = this._internalAppointmentItemsSource();
		var canModify = this._appointmentListModificationManager().supportsListModification();
		if (canModify == false) {
			var resName = itemsSource == null ? "LE_NoAppointmentItemsSource" : "LE_AppointmentItemsSource_CannotEdit";
			var exception = $.ig.Utils.prototype.createException(resName);
			error = new $.ig.scheduler.DataError(exception);
			return error;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyCanModifyAppointmentItemsSource(Infragistics.Scheduler.Data.DataSourceOperation, Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeTree(System.Collections.Generic.IList, System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	_initializeTree: function (errors, recurrences, variances) {
		var tree = this._dataObjectTree();
		errors = null;
		recurrences = null;
		var $ret = tree.initialize(errors, recurrences, variances);
		errors = $ret.p0;
		recurrences = $ret.p1;
		variances = $ret.p2;
		return {
			p0: errors,
			p1: recurrences,
			p2: variances
		};
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeTree(System.Collections.Generic.IList, System.Collections.Generic.IList, System.Collections.Generic.IDictionary)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyAppointmentPropertyMappings(System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	_verifyAppointmentPropertyMappings: function (dataObject, error) {
		var $self = this;
		error = null;
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (appointment != null) {
			return {
				ret: true,
				p1: error
			};
		}
		if (this.___appointmentPropertyMapVerified) {
			return {
				ret: true,
				p1: error
			};
		}
		var enumConverter = function (enumValue) {
			return enumValue;
		};
		try {
			var result = (function () { var $ret = $self._verifyPropertyMappings$1($.ig.scheduler.AppointmentProperty.prototype.$type, $self.appointmentPropertyMappings(), enumConverter, dataObject, error); error = $ret.p3; return $ret.ret; }());
			return {
				ret: result,
				p1: error
			};
		}
		finally {
			this.___appointmentPropertyMapVerified = true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyAppointmentPropertyMappings(System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyResourcePropertyMappings(System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	_verifyResourcePropertyMappings: function (dataObject, error) {
		var $self = this;
		error = null;
		var resource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject);
		if (resource != null) {
			return {
				ret: true,
				p1: error
			};
		}
		if (this.___resourcePropertyMapVerified) {
			return {
				ret: true,
				p1: error
			};
		}
		var enumConverter = function (enumValue) {
			return enumValue;
		};
		try {
			return {
				ret: (function () { var $ret = $self._verifyPropertyMappings$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, $self.resourcePropertyMappings(), enumConverter, dataObject, error); error = $ret.p3; return $ret.ret; }()),
				p1: error
			};
		}
		finally {
			this.___resourcePropertyMapVerified = true;
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyResourcePropertyMappings(System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyPropertyMappings`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	_verifyPropertyMappings$1: function ($t, map, enumConverter, dataObject, error) {
		error = null;
		if (dataObject == null) {
			$.ig.Debug.prototype.assert1(false, "We need a dataObject here in order to get PropertyAccessors");
			return {
				ret: false,
				p3: error
			};
		}
		var exception = null;
		var missing = new $.ig.List$1($t, 0);
		var names = $.ig.Enum.prototype.getNames($t);
		var values = $.ig.Enum.prototype.getValues($t);
		for (var i = 0; i < names.length; i++) {
			var enumName = names[i];
			var o = $.ig.Utils.prototype.getArrayValue(values, i);
			var enumValue = $.ig.util.getValue(o);
			var propString = $.ig.util.cast(String, names[i]);
			var propId = enumConverter(enumValue);
			var mapping = map._item1(propId);
			var propName = mapping != null ? mapping.dataObjectPropertyName() : propString;
			if (mapping != null && mapping._isDisabled()) {
				propName = null;
			}
			var pa = $.ig.PropertyAccessor.prototype.create(dataObject, propName);
			if (pa == null) {
				if (mapping != null) {
					var message = $.ig.schedulerCore.locale.getString("LE_SchedulePropertyMap_NoPropertyFound", [ propName ]);
					exception = new $.ig.Error(1, message);
					error = new $.ig.scheduler.InvalidPropertyMappingError$1($t, propId, propName, exception);
					this._raiseDataError($.ig.scheduler.DataSourceOperation.verifyPropertyMappings, error, true);
					return {
						ret: false,
						p3: error
					};
				} else {
					if (map._isRequired(propId)) {
						missing.add(propId);
					}
					continue;
				}
			}
			if (mapping == null) {
				map._addDefaultMapping1(propId);
				mapping = map._item1(propId);
			}
			if (mapping == null) {
				if (map._isRequired(propId)) {
					missing.add(propId);
				}
				continue;
			}
			mapping._propertyAccessor(pa);
		}
		if (missing.count() > 0) {
			var sb = new $.ig.StringBuilder(0);
			sb.appendLine1($.ig.schedulerCore.locale.getString("LE_SchedulePropertyMap_Missing"));
			sb.appendLine();
			var lastIndex = missing.count() - 1;
			for (var i1 = 0; i1 <= lastIndex; i1++) {
				sb.append5($.ig.util.toString$1($t, missing.__inner[i1]));
				if (i1 < lastIndex) {
					sb.append5($.ig.Utils.prototype.listSeparator());
				}
			}
			exception = new $.ig.Error(1, sb.toString());
			error = new $.ig.scheduler.IncompletePropertyMappingsError$1($t, missing, exception);
			this._raiseDataError($.ig.scheduler.DataSourceOperation.verifyPropertyMappings, error, true);
			return {
				ret: false,
				p3: error
			};
		}
		return {
			ret: true,
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::VerifyPropertyMappings`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetAppointmentPropertyValue(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_tryGetAppointmentPropertyValue: function (dataObject, propId, value, error) {
		var $self = this;
		error = null;
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (appointment != null) {
			value = appointment._getPropertyValue2(propId);
			return {
				ret: true,
				p2: value,
				p3: error
			};
		}
		var isExpectedTypeHandler = function (property, val) {
			return true;
		};
		var convertHandler = function (property, val) {
			return val;
		};
		return {
			ret: (function () { var $ret = $self._tryGetPropertyValueHelper$1($.ig.scheduler.AppointmentProperty.prototype.$type, $self.appointmentPropertyMappings(), isExpectedTypeHandler, convertHandler, dataObject, propId, value, error); value = $ret.p5; error = $ret.p6; return $ret.ret; }()),
			p2: value,
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetAppointmentPropertyValue(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetResourcePropertyValue(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_tryGetResourcePropertyValue: function (dataObject, propId, value, error) {
		var $self = this;
		error = null;
		var resource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject);
		if (resource != null) {
			value = resource._getPropertyValue(propId);
			return {
				ret: true,
				p2: value,
				p3: error
			};
		}
		var isExpectedTypeHandler = function (property, val) {
			return $.ig.scheduler.ScheduleDataSource.prototype._isExpectedType1(property, val);
		};
		var convertHandler = function (property, val) {
			return $.ig.scheduler.ScheduleDataSource.prototype._convert1(property, val, true);
		};
		return {
			ret: (function () { var $ret = $self._tryGetPropertyValueHelper$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, $self.resourcePropertyMappings(), isExpectedTypeHandler, convertHandler, dataObject, propId, value, error); value = $ret.p5; error = $ret.p6; return $ret.ret; }()),
			p2: value,
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetResourcePropertyValue(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetPropertyValueHelper`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Func, System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource.T, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_tryGetPropertyValueHelper$1: function ($t, propertyMap, expectedTypeHandler, convertHandler, dataObject, propId, value, error) {
		value = null;
		error = null;
		if (dataObject == null) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.getDataObjectProperty, null, new $.ig.ArgumentNullException(0, "dataObject"));
			return {
				ret: false,
				p5: value,
				p6: error
			};
		}
		var mapping = propertyMap._item1(propId);
		var pa = mapping != null && mapping._isDisabled() == false ? mapping._propertyAccessor() : null;
		if (pa == null) {
			return {
				ret: false,
				p5: value,
				p6: error
			};
		}
		try {
			value = pa.getValue(dataObject);
		}
		catch (ex) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.getDataObjectProperty, null, ex);
			return {
				ret: false,
				p5: value,
				p6: error
			};
		}
		try {
			if (mapping != null && mapping.convertCallback() != null) {
				value = mapping.convertCallback()(value);
				if (expectedTypeHandler(propId, value) == false) {
					value = convertHandler(propId, value);
				}
			} else {
				value = convertHandler(propId, value);
			}
		}
		catch (ex1) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.convertDataObjectProperty, value, ex1);
			return {
				ret: false,
				p5: value,
				p6: error
			};
		}
		return {
			ret: true,
			p5: value,
			p6: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TryGetPropertyValueHelper`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Func, System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource.T, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetAppointmentDataObjectPropertyValue(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_trySetAppointmentDataObjectPropertyValue: function (dataObject, propId, value, error) {
		var $self = this;
		error = null;
		var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
		if (appointment != null) {
			var ex = null;
			var $ret = appointment._setPropertyValue1(propId, value, ex);
			ex = $ret.p2;
			if (ex != null) {
				throw ex;
			}
			return {
				ret: true,
				p3: error
			};
		}
		return {
			ret: (function () { var $ret = $self._trySetPropertyValueHelper$1($.ig.scheduler.AppointmentProperty.prototype.$type, $self.appointmentPropertyMappings(), null, dataObject, propId, value, error); error = $ret.p5; return $ret.ret; }()),
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetAppointmentDataObjectPropertyValue(System.Object, Infragistics.Scheduler.Data.AppointmentProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetResourcePropertyValue(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_trySetResourcePropertyValue: function (dataObject, propId, value, error) {
		var $self = this;
		error = null;
		var resource = $.ig.util.cast($.ig.scheduler.ScheduleResource.prototype.$type, dataObject);
		if (resource != null) {
			var ex = null;
			var $ret = resource._setPropertyValue(propId, value, ex);
			ex = $ret.p2;
			if (ex != null) {
				throw ex;
			}
			return {
				ret: true,
				p3: error
			};
		}
		var convertHandler = function (property, val, destinationType) {
			destinationType = String;
			switch (propId) {
				case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
					var ex = null;
					var colorScheme = $.ig.util.wrapNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, val);
					val = (function () { var $ret = $.ig.Utils.prototype.convertColorScheme(colorScheme, destinationType, ex); ex = $ret.p2; return $ret.ret; }());
					if (ex != null) {
						throw ex;
					}
					break;
			}
			return val;
		};
		return {
			ret: (function () { var $ret = $self._trySetPropertyValueHelper$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, $self.resourcePropertyMappings(), convertHandler, dataObject, propId, value, error); error = $ret.p5; return $ret.ret; }()),
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetResourcePropertyValue(System.Object, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetPropertyValueHelper`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource.T, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	_trySetPropertyValueHelper$1: function ($t, propertyMap, convertHandler, dataObject, propId, value, error) {
		error = null;
		if (dataObject == null) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.setDataObjectProperty, null, new $.ig.ArgumentNullException(0, "dataObject"));
			return {
				ret: false,
				p5: error
			};
		}
		var mapping = propertyMap._item1(propId);
		var pa = mapping != null && mapping._isDisabled() == false ? mapping._propertyAccessor() : null;
		if (pa == null) {
			return {
				ret: false,
				p5: error
			};
		}
		try {
			if (mapping != null && mapping.convertBackCallback() != null) {
				value = mapping.convertBackCallback()(value);
			} else if (convertHandler != null) {
				value = convertHandler(propId, value, pa.propertyType());
			}
		}
		catch (ex) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.convertScheduleObjectProperty, value, ex);
			return {
				ret: false,
				p5: error
			};
		}
		try {
			pa.setValue(dataObject, value);
		}
		catch (ex1) {
			error = new $.ig.scheduler.DataObjectPropertyAccessError$1($t, dataObject, propId, $.ig.scheduler.DataSourceOperation.setDataObjectProperty, value, ex1);
			return {
				ret: false,
				p5: error
			};
		}
		return {
			ret: true,
			p5: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::TrySetPropertyValueHelper`1(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection, System.Func, System.Object, Infragistics.Scheduler.Data.ScheduleListDataSource.T, System.Object, Infragistics.Scheduler.Data.DataObjectPropertyAccessError)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceAdded(Infragistics.Scheduler.ScheduleResource)" />*/
	_onResourceAdded: function (resource) {
		var $self = this;
		var exception = null;
		var dataObject = null;
		var list = $.ig.scheduler.ScheduleListDataSource.prototype._getModifiableList(this.___resourceItemsSource);
		if (list != null && list != this.___resourceItemsSource) {
			dataObject = (function () { var $ret = $self._createDataObject1(resource, exception); exception = $ret.p1; return $ret.ret; }());
			if (dataObject == null && exception != null) {
				var error = new $.ig.scheduler.DataError(exception);
				this._raiseDataError($.ig.scheduler.DataSourceOperation.createDataObject, error, false);
				return;
			}
		}
		this._registerNewResource(resource, dataObject);
		return;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceAdded(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceRemoved(Infragistics.Scheduler.ScheduleResource)" />*/
	_onResourceRemoved: function (resource) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::OnResourceRemoved(Infragistics.Scheduler.ScheduleResource)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromDataObject(System.Object, Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.DataError)" />*/
	_initializeFromDataObject: function (dataObject, appointment, error) {
		var $self = this;
		error = null;
		appointment._setDataObject(dataObject, false);
		if (dataObject == appointment) {
			return {
				ret: true,
				p2: error
			};
		}
		var values = $.ig.Enum.prototype.getValues($.ig.scheduler.AppointmentProperty.prototype.$type);
		var map = this.appointmentPropertyMappings();
		var en = values.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			var propId = $.ig.util.getEnumValue(o);
			var propError = null;
			var value = null;
			if ((function () { var $ret = $self._tryGetAppointmentPropertyValue(dataObject, propId, value, propError); value = $ret.p2; propError = $ret.p3; return $ret.ret; }()) == false) {
				if (propError != null) {
					error = propError;
					this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, propError, false);
					return {
						ret: false,
						p2: error
					};
				}
				continue;
			}
			switch (propId) {
				case $.ig.scheduler.AppointmentProperty.start:
				case $.ig.scheduler.AppointmentProperty.end:
				case $.ig.scheduler.AppointmentProperty.originalStart:
					appointment._initializePropertyValue3(propId, value);
					break;
				case $.ig.scheduler.AppointmentProperty.id:
				case $.ig.scheduler.AppointmentProperty.resourceId:
				case $.ig.scheduler.AppointmentProperty.recurrenceId:
				case $.ig.scheduler.AppointmentProperty.subject:
				case $.ig.scheduler.AppointmentProperty.location:
				case $.ig.scheduler.AppointmentProperty.description:
				case $.ig.scheduler.AppointmentProperty.recurrence:
					appointment._initializePropertyValue4(propId, value);
					break;
				case $.ig.scheduler.AppointmentProperty.isRemoved:
					appointment._initializePropertyValue($.ig.scheduler.AppointmentProperty.prototype.$getName(propId), value);
					break;
				default:
					$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized property '{0}'", $.ig.scheduler.AppointmentProperty.prototype.getBox(propId)));
					break;
			}
		}
		return {
			ret: true,
			p2: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromDataObject(System.Object, Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromDataObject(System.Object, Infragistics.Scheduler.ScheduleResource, System.Collections.Generic.HashSet, Infragistics.Scheduler.Data.DataError)" />*/
	_initializeFromDataObject1: function (dataObject, resource, ids, error) {
		var $self = this;
		error = null;
		resource._setDataObject(dataObject, false);
		if (dataObject == resource) {
			return {
				ret: true,
				p3: error
			};
		}
		var values = $.ig.Enum.prototype.getValues($.ig.scheduler.ScheduleResourceProperty.prototype.$type);
		var map = this.resourcePropertyMappings();
		var exception = null;
		var en = values.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			var propId = $.ig.util.getEnumValue(o);
			var propError = null;
			var value = null;
			if ((function () { var $ret = $self._tryGetResourcePropertyValue(dataObject, propId, value, propError); value = $ret.p2; propError = $ret.p3; return $ret.ret; }()) == false) {
				if (propError != null) {
					error = propError;
					this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, propError, false);
					return {
						ret: false,
						p3: error
					};
				}
			}
			if (propId == $.ig.scheduler.ScheduleResourceProperty.id) {
				var id = $.ig.util.cast(String, value);
				if (String.isNullOrEmpty(id) || ids.add(id) == false) {
					var resName = String.isNullOrEmpty(id) ? "LE_MissingIdentifier" : "LE_DuplicateIdentifier";
					var args = String.isNullOrEmpty(id) ? null : [ id ];
					exception = $.ig.Utils.prototype.createException1(resName, args);
					propError = new $.ig.scheduler.DataObjectPropertyAccessError$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, dataObject, $.ig.scheduler.ScheduleResourceProperty.id, $.ig.scheduler.DataSourceOperation.initializeDataObject, id, exception);
					this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, propError, false);
					return {
						ret: false,
						p3: error
					};
				}
			}
			switch (propId) {
				case $.ig.scheduler.ScheduleResourceProperty.id:
				case $.ig.scheduler.ScheduleResourceProperty.displayName:
					resource._initializePropertyValue(propId, value);
					break;
				case $.ig.scheduler.ScheduleResourceProperty.colorScheme:
					exception = null;
					if ((function () { var $ret = resource._initializeColorSchemePropertyValue(value, exception); exception = $ret.p1; return $ret.ret; }()) == false) {
						propError = new $.ig.scheduler.DataObjectPropertyAccessError$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, dataObject, $.ig.scheduler.ScheduleResourceProperty.colorScheme, $.ig.scheduler.DataSourceOperation.initializeDataObject, value, exception);
						this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, propError, false);
						return {
							ret: false,
							p3: error
						};
					}
					break;
				default:
					$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("Unrecognized property '{0}'", $.ig.scheduler.ScheduleResourceProperty.prototype.getBox(propId)));
					break;
			}
		}
		return {
			ret: true,
			p3: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromDataObject(System.Object, Infragistics.Scheduler.ScheduleResource, System.Collections.Generic.HashSet, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromAppointment(Infragistics.Scheduler.Appointment, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	_initializeFromAppointment: function (appointment, dataObject, error) {
		var $self = this;
		error = null;
		var dsError = null;
		if ((function () { var $ret = $self._verifyAppointmentPropertyMappings(dataObject, dsError); dsError = $ret.p1; return $ret.ret; }()) == false) {
			error = dsError;
			return {
				ret: false,
				p2: error
			};
		}
		if (dataObject == appointment) {
			return {
				ret: true,
				p2: error
			};
		}
		var values = $.ig.Enum.prototype.getValues($.ig.scheduler.AppointmentProperty.prototype.$type);
		var map = this.appointmentPropertyMappings();
		var en = values.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			var propId = $.ig.util.getEnumValue(o);
			var mapping = map._item1(propId);
			if (mapping == null) {
				continue;
			}
			var value = appointment._getPropertyValue2(propId);
			var propError = null;
			if ((function () { var $ret = $self._trySetAppointmentDataObjectPropertyValue(dataObject, propId, value, propError); propError = $ret.p3; return $ret.ret; }()) == false) {
				error = propError;
				return {
					ret: false,
					p2: error
				};
			}
		}
		return {
			ret: true,
			p2: error
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ScheduleListDataSource::InitializeFromAppointment(Infragistics.Scheduler.Appointment, System.Object, Infragistics.Scheduler.Data.DataError)" />*/
	,
	/*<BeginMethod Name="System.Collections.IList Infragistics.Scheduler.Data.ScheduleListDataSource::GetModifiableList(System.Collections.IEnumerable)" />*/
	_getModifiableList: function (itemsSource) {
		var list = $.ig.util.cast($.ig.IList.prototype.$type, itemsSource);
		return list == null || list.isFixedSize() ? null : list;
	}
	/*<EndMethod Name="System.Collections.IList Infragistics.Scheduler.Data.ScheduleListDataSource::GetModifiableList(System.Collections.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CleanUpAppointmentsItemSource(System.Collections.IEnumerable)" />*/
	_cleanUpAppointmentsItemSource: function (old) {
		var itemSource = this._internalAppointmentItemsSource();
		var en = itemSource.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			this._hookAppointmentDataObjectPropertyChanged(impl, false);
		}
		if (this.___appointmentListModificationManager != null) {
			this.___appointmentListModificationManager.destroy();
			this.___appointmentListModificationManager = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CleanUpAppointmentsItemSource(System.Collections.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CleanUpResourcesItemSource(System.Collections.IEnumerable)" />*/
	_cleanUpResourcesItemSource: function (old) {
		var incc = $.ig.util.cast($.ig.INotifyCollectionChanged.prototype.$type, old);
		if (incc != null) {
			this._hookResourceItemsSourceCollectionChanged(incc, false);
		}
		var en = this.___resourceItemsSource.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			var impl = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, dataObject);
			this._hookResourceDataObjectPropertyChanged(impl, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CleanUpResourcesItemSource(System.Collections.IEnumerable)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleListDataSource::CreateResource()" />*/
	_createResource: function () {
		return new $.ig.scheduler.ScheduleResource();
	}
	/*<EndMethod Name="Infragistics.Scheduler.ScheduleResource Infragistics.Scheduler.Data.ScheduleListDataSource::CreateResource()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SuspendResourceNotifications()" />*/
	_suspendResourceNotifications: function () {
		this.___resourceNotificationsSuspended = true;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::SuspendResourceNotifications()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::ResumeResourceNotifications()" />*/
	_resumeResourceNotifications: function () {
		this.___resourceNotificationsSuspended = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::ResumeResourceNotifications()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::InternalOnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	_internalOnResourcePropertyChanged: function (resource, property, dayOfWeek) {
		if (this.___resourceNotificationsSuspended) {
			return;
		}
		this.___resourceNotificationsSuspended = true;
		try {
			var value = resource._getPropertyValue(property);
			this._syncDataObjectProperty1(resource, property, value);
			this.onResourcePropertyChanged(resource, property, dayOfWeek);
		}
		finally {
			this.___resourceNotificationsSuspended = false;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::InternalOnResourcePropertyChanged(Infragistics.Scheduler.ScheduleResource, Infragistics.Scheduler.Data.ScheduleResourceProperty, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateRecurrences(System.Collections.Generic.IList, System.Collections.Generic.IDictionary, Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	_createRecurrences: function (dataObjectList, variances, result) {
		var $self = this;
		var list = new $.ig.List$1($.ig.scheduler.ActivityBase.prototype.$type, 2, dataObjectList.count());
		var dataObjectAsAppointment = null;
		var en = dataObjectList.getEnumerator();
		while (en.moveNext()) {
			var dataObject = en.current();
			dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject);
			var root = dataObjectAsAppointment != null ? dataObjectAsAppointment : this._createNewAppointment(true);
			var error = null;
			if ((function () { var $ret = $self._initializeFromDataObject(dataObject, root, error); error = $ret.p2; return $ret.ret; }()) == false) {
				if (result != null) {
					result._logError(error);
				}
				this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error, false);
				continue;
			}
			this._registerNewAppointment(root, dataObject, false);
			list.add(root);
		}
		var varianceTable = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.scheduler.ActivityBase.prototype.$type), 0);
		if (variances != null) {
			var en1 = variances.getEnumerator();
			while (en1.moveNext()) {
				var pair = en1.current();
				var varianceList = new $.ig.List$1($.ig.scheduler.ActivityBase.prototype.$type, 0);
				var en2 = pair.value().getEnumerator();
				while (en2.moveNext()) {
					var dataObject1 = en2.current();
					dataObjectAsAppointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, dataObject1);
					var variance = dataObjectAsAppointment != null ? dataObjectAsAppointment : this._createNewAppointment(true);
					var error1 = null;
					if ((function () { var $ret = $self._initializeFromDataObject(dataObject1, variance, error1); error1 = $ret.p2; return $ret.ret; }()) == false) {
						if (result != null) {
							result._logError(error1);
						}
						this._raiseDataError($.ig.scheduler.DataSourceOperation.initializeDataObject, error1, false);
						continue;
					}
					this._registerNewAppointment(variance, dataObject1, false);
					varianceList.add(variance);
				}
				varianceTable.add(pair.key(), varianceList);
			}
		}
		this._recurrenceManager().initialize(list, varianceTable);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::CreateRecurrences(System.Collections.Generic.IList, System.Collections.Generic.IDictionary, Infragistics.Scheduler.Data.DateRangeQueryResultBase)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleListDataSource::GetOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	_getOccurrence: function (recurrenceRoot, originalStart) {
		if (recurrenceRoot == null) {
			throw new $.ig.ArgumentNullException(0, "recurrenceRoot");
		}
		if (String.isNullOrEmpty(recurrenceRoot.recurrence())) {
			throw new $.ig.ArgumentException(0);
		}
		var ar = this._recurrenceManager().getActivityRecurrence(recurrenceRoot);
		if (ar == null) {
			$.ig.Debug.prototype.assert1(false, "Specified recurrenceRoot has no associated recurrence.");
			return null;
		}
		var occurrence = null;
		occurrence = ar.getVariance(originalStart);
		if (occurrence != null) {
			return occurrence;
		}
		occurrence = this._createNewAppointment(true);
		$.ig.RecurrenceManager.prototype.initializeOccurrence(this, recurrenceRoot, occurrence, originalStart);
		return occurrence;
	}
	/*<EndMethod Name="Infragistics.Scheduler.ActivityBase Infragistics.Scheduler.Data.ScheduleListDataSource::GetOccurrence(Infragistics.Scheduler.ActivityBase, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::Destroy()" />*/
	destroy: function () {
		if (this.appointmentItemsSource() != null) {
			this._onAppointmentsChanged($.ig.NotifyCollectionChangedAction.prototype.reset, null, false);
		}
		if (this.___pendingEditOperations != null) {
			var en = this.___pendingEditOperations.values().getEnumerator();
			while (en.moveNext()) {
				var operation = en.current();
				var appointment = $.ig.util.cast($.ig.scheduler.Appointment.prototype.$type, operation.activity());
				if (appointment != null) {
					this.endEdit(appointment, true);
				}
			}
			this.___pendingEditOperations = null;
		}
		if (this.___appointmentPropertyMappings != null) {
			this.___appointmentPropertyMappings._destroy();
			this.___appointmentPropertyMappings = null;
		}
		if (this.___resourcePropertyMappings != null) {
			this.___resourcePropertyMappings._destroy();
			this.___resourcePropertyMappings = null;
		}
		if (this.___dataObjectTree != null) {
			this.___dataObjectTree.destroy();
			this.___dataObjectTree = null;
		}
		if (this.___appointmentItemsSource != null) {
			var itemSource = this._internalAppointmentItemsSource();
			this._cleanUpAppointmentsItemSource(itemSource);
			this.___appointmentItemsSource = null;
		}
		if (this.___resourceItemsSource != null) {
			this._cleanUpResourcesItemSource(this.___resourceItemsSource);
			this.___resourceItemsSource = null;
		}
		if (this.___resources != null) {
			var en1 = this.___resources.getEnumerator();
			while (en1.moveNext()) {
				var resource = en1.current();
				resource._initDataSource(null);
				resource.destroy();
			}
			this.___resources = null;
		}
		if (this.___appointmentTable != null) {
			var en2 = this.___appointmentTable.values().getEnumerator();
			while (en2.moveNext()) {
				var appointment1 = en2.current();
				this._initDataSource(appointment1, null);
			}
			this.___appointmentTable = null;
		}
		this.___createAppointmentDataObjectCallback = null;
		if (this.___appointmentListModificationManager != null) {
			this.___appointmentListModificationManager.destroy();
			this.___appointmentListModificationManager = null;
		}
		if (this.___appointmentItemsSourceWrapper != null) {
			this.___appointmentItemsSourceWrapper._destroy();
			this.___appointmentItemsSourceWrapper = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ScheduleListDataSource::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.ScheduleListDataSource', $.ig.scheduler.ScheduleDataSource.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ScheduleListDataSource" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.PendingOperation`1" />*/

$.ig.util.defType('PendingOperation$1', 'Object', {
	$t: null,
	init: function ($t, activity, operation, clone) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.Object.prototype.init.call(this);
		this.activity(activity);
		this.operation(operation);
		this.clone(clone);
	},
	_activity: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.PendingOperation.T Infragistics.Scheduler.Data.PendingOperation`1::Activity()" />*/
	activity: function (value) {
		if (arguments.length === 1) {
			this._activity = value;
			return value;
		} else {
			return this._activity;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.PendingOperation.T Infragistics.Scheduler.Data.PendingOperation`1::Activity()" />*/
	,
	_clone: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.PendingOperation.T Infragistics.Scheduler.Data.PendingOperation`1::Clone()" />*/
	clone: function (value) {
		if (arguments.length === 1) {
			this._clone = value;
			return value;
		} else {
			return this._clone;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.PendingOperation.T Infragistics.Scheduler.Data.PendingOperation`1::Clone()" />*/
	,
	_operation: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ActivityOperation Infragistics.Scheduler.Data.PendingOperation`1::Operation()" />*/
	operation: function (value) {
		if (arguments.length === 1) {
			this._operation = value;
			return value;
		} else {
			return this._operation;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ActivityOperation Infragistics.Scheduler.Data.PendingOperation`1::Operation()" />*/
	,
	$type: new $.ig.Type('PendingOperation$1', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.PendingOperation`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.SchedulePropertyMapping`1" />*/

$.ig.scheduler.SchedulePropertyMapping$1 = $.ig.util.defType('scheduler.SchedulePropertyMapping$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.Object.prototype.init.call(this);
	},
	___property: null,
	___dataObjectPropertyName: null,
	___convertCallback: null,
	___convertBackCallback: null,
	__propertyAccessor: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.PropertyAccessor Infragistics.Scheduler.Data.SchedulePropertyMapping`1::PropertyAccessor()" />*/
	_propertyAccessor: function (value) {
		if (arguments.length === 1) {
			this.__propertyAccessor = value;
			return value;
		} else {
			return this.__propertyAccessor;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.PropertyAccessor Infragistics.Scheduler.Data.SchedulePropertyMapping`1::PropertyAccessor()" />*/
	,
	property: function (value) {
		if (arguments.length === 1) {
			this._property$i.apply(this, arguments);
			return value;
		} else {
			return this._property$i.apply(this, arguments);
		}
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Data.SchedulePropertyMapping.T Infragistics.Scheduler.Data.SchedulePropertyMapping`1::Property()" />*/
	_property$i: function (value) {
		if (arguments.length === 1) {
			this.verifyProperty(value);
			this.___property = value;
			this.onPropertyChanged($.ig.scheduler.SchedulePropertyMapping$1.prototype.__propertyPropertyName);
			return value;
		} else {
			return this.___property;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.SchedulePropertyMapping.T Infragistics.Scheduler.Data.SchedulePropertyMapping`1::Property()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Data.SchedulePropertyMapping`1::DataObjectPropertyName()" />*/
	dataObjectPropertyName: function (value) {
		if (arguments.length === 1) {
			this.___dataObjectPropertyName = value;
			this.onPropertyChanged($.ig.scheduler.SchedulePropertyMapping$1.prototype.__dataObjectPropertyNamePropertyName);
			return value;
		} else {
			return this.___dataObjectPropertyName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Data.SchedulePropertyMapping`1::DataObjectPropertyName()" />*/
	,
	/*<BeginProperty Name="System.Func Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ConvertCallback()" />*/
	convertCallback: function (value) {
		if (arguments.length === 1) {
			this.___convertCallback = value;
			this.onPropertyChanged($.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertCallbackPropertyName);
			return value;
		} else {
			return this.___convertCallback;
		}
	}
	/*<EndProperty Name="System.Func Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ConvertCallback()" />*/
	,
	/*<BeginProperty Name="System.Func Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ConvertBackCallback()" />*/
	convertBackCallback: function (value) {
		if (arguments.length === 1) {
			this.___convertBackCallback = value;
			this.onPropertyChanged($.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertBackCallbackPropertyName);
			return value;
		} else {
			return this.___convertBackCallback;
		}
	}
	/*<EndProperty Name="System.Func Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ConvertBackCallback()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Data.SchedulePropertyMapping`1::IsDisabled()" />*/
	_isDisabled: function () {
		return String.isNullOrEmpty(this.dataObjectPropertyName());
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Data.SchedulePropertyMapping`1::IsDisabled()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMapping`1::OnPropertyChanged(System.String)" />*/
	onPropertyChanged: function (propertyName) {
		if (this._propertyChanged != null) {
			this._propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMapping`1::OnPropertyChanged(System.String)" />*/
	,
	_propertyChanged: null,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ToString()" />*/
	toString: function () {
		var alias = this.dataObjectPropertyName();
		return String.isNullOrEmpty(alias) ? $.ig.util.stringFormat("{0} (not mapped)", $.ig.util.getBoxIfEnum(this.$t, this._property$i())) : $.ig.util.stringFormat("{0} -> '{1}'", $.ig.util.getBoxIfEnum(this.$t, this._property$i()), this.dataObjectPropertyName());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Data.SchedulePropertyMapping`1::ToString()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMapping`1::VerifyProperty(Infragistics.Scheduler.Data.SchedulePropertyMapping.T)" />*/
	verifyProperty: function (property) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMapping`1::VerifyProperty(Infragistics.Scheduler.Data.SchedulePropertyMapping.T)" />*/
	,
	$type: new $.ig.Type('scheduler.SchedulePropertyMapping$1', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.SchedulePropertyMapping`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1" />*/

$.ig.scheduler.SchedulePropertyMappingsCollection$1 = $.ig.util.defType('scheduler.SchedulePropertyMappingsCollection$1', 'ObservableCollection$1', {
	$t: null,
	___defaultMappings: null,
	init: function ($t) {
		this.$t = $t;
		if (!this.hasOwnProperty("$type")) {
			this.$type = this.$type.specialize(this.$t);
		}
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.scheduler.SchedulePropertyMapping$1.prototype.$type.specialize(this.$t), 0);
		this.___defaultMappings = this.createDefaultMappingsArray();
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Data.SchedulePropertyMapping Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::Item(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	_item1: function (property) {
		var index = this.toInt(property);
		var en = this.getEnumerator();
		while (en.moveNext()) {
			var mapping = en.current();
			var thisOne = this.toInt(mapping._property$i());
			if (thisOne == index) {
				return mapping;
			}
		}
		return this.___defaultMappings[index];
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.SchedulePropertyMapping Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::Item(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.SchedulePropertyMapping Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::GetMapping(System.String)" />*/
	_getMapping: function (dataObjectPropertyName) {
		var en = this.getEnumerator();
		while (en.moveNext()) {
			var mapping = en.current();
			if ($.ig.Utils.prototype.stringEquals(mapping.dataObjectPropertyName(), dataObjectPropertyName, true)) {
				return mapping;
			}
		}
		var $t = this.___defaultMappings;
		for (var i = 0; i < $t.length; i++) {
			var mapping1 = $t[i];
			if (mapping1 != null && $.ig.Utils.prototype.stringEquals(mapping1.dataObjectPropertyName(), dataObjectPropertyName, true)) {
				return mapping1;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.SchedulePropertyMapping Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::GetMapping(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::AddDefaultMapping(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	_addDefaultMapping1: function (property) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::AddDefaultMapping(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::AddDefaultMapping(Infragistics.Scheduler.Data.SchedulePropertyMapping)" />*/
	addDefaultMapping: function (value) {
		var index = this.toInt(value._property$i());
		this.___defaultMappings[index] = value;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::AddDefaultMapping(Infragistics.Scheduler.Data.SchedulePropertyMapping)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::CreateDefaultMappingsArray()" />*/
	createDefaultMappingsArray: function () {
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::CreateDefaultMappingsArray()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::IsRequired(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	_isRequired: function (property) {
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::IsRequired(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::ToInt(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	toInt: function (value) {
		return $_0(null);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::ToInt(Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection.T)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::Destroy()" />*/
	_destroy: function () {
		this.clear();
		this.___defaultMappings = null;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1::Destroy()" />*/
	,
	$type: new $.ig.Type('scheduler.SchedulePropertyMappingsCollection$1', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.scheduler.SchedulePropertyMapping$1.prototype.$type.specialize(0)))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.SchedulePropertyMappingsCollection`1" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection" />*/

$.ig.scheduler.AppointmentPropertyMappingsCollection = $.ig.util.defType('scheduler.AppointmentPropertyMappingsCollection', 'scheduler.SchedulePropertyMappingsCollection$1', {
	init: function () {
		$.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.init.call(this, $.ig.scheduler.AppointmentProperty.prototype.$type);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentPropertyMapping Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::Add(Infragistics.Scheduler.Data.AppointmentProperty, System.String)" />*/
	_add2: function (property, dataObjectPropertyName) {
		var mapping = (function () {
			var $ret = new $.ig.scheduler.AppointmentPropertyMapping();
			$ret._property$i(property);
			$ret.dataObjectPropertyName(dataObjectPropertyName);
			return $ret;
		}());
		this.add(mapping);
		return mapping;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentPropertyMapping Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::Add(Infragistics.Scheduler.Data.AppointmentProperty, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::ToInt(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	toInt: function (value) {
		return value;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::ToInt(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::AddDefaultMapping(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_addDefaultMapping1: function (property) {
		var mapping = (function () {
			var $ret = new $.ig.scheduler.AppointmentPropertyMapping();
			$ret._property$i(property);
			$ret.dataObjectPropertyName($.ig.scheduler.AppointmentProperty.prototype.$getName(property));
			return $ret;
		}());
		$.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.addDefaultMapping.call(this, mapping);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::AddDefaultMapping(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::CreateDefaultMappingsArray()" />*/
	createDefaultMappingsArray: function () {
		var values = $.ig.Enum.prototype.getValues($.ig.scheduler.AppointmentProperty.prototype.$type);
		return new Array(values.length);
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::CreateDefaultMappingsArray()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::IsRequired(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	_isRequired: function (property) {
		return property == $.ig.scheduler.AppointmentProperty.id || property == $.ig.scheduler.AppointmentProperty.start || property == $.ig.scheduler.AppointmentProperty.end;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection::IsRequired(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	$type: new $.ig.Type('scheduler.AppointmentPropertyMappingsCollection', $.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.$type.specialize($.ig.scheduler.AppointmentProperty.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentPropertyMappingsCollection" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection" />*/

$.ig.scheduler.ResourcePropertyMappingsCollection = $.ig.util.defType('scheduler.ResourcePropertyMappingsCollection', 'scheduler.SchedulePropertyMappingsCollection$1', {
	init: function () {
		$.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.init.call(this, $.ig.scheduler.ScheduleResourceProperty.prototype.$type);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ResourcePropertyMapping Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::Add(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.String)" />*/
	_add2: function (property, dataObjectPropertyName) {
		var mapping = (function () {
			var $ret = new $.ig.scheduler.ResourcePropertyMapping();
			$ret._property$i(property);
			$ret.dataObjectPropertyName(dataObjectPropertyName);
			return $ret;
		}());
		this.add(mapping);
		return mapping;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ResourcePropertyMapping Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::Add(Infragistics.Scheduler.Data.ScheduleResourceProperty, System.String)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::ToInt(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	toInt: function (value) {
		return value;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::ToInt(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::AddDefaultMapping(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	_addDefaultMapping1: function (property) {
		var mapping = (function () {
			var $ret = new $.ig.scheduler.ResourcePropertyMapping();
			$ret._property$i(property);
			$ret.dataObjectPropertyName($.ig.scheduler.ScheduleResourceProperty.prototype.$getName(property));
			return $ret;
		}());
		$.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.addDefaultMapping.call(this, mapping);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::AddDefaultMapping(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::CreateDefaultMappingsArray()" />*/
	createDefaultMappingsArray: function () {
		var values = $.ig.Enum.prototype.getValues($.ig.scheduler.ScheduleResourceProperty.prototype.$type);
		return new Array(values.length);
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::CreateDefaultMappingsArray()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::IsRequired(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	_isRequired: function (property) {
		return property == $.ig.scheduler.ScheduleResourceProperty.id || property == $.ig.scheduler.ScheduleResourceProperty.displayName;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection::IsRequired(Infragistics.Scheduler.Data.ScheduleResourceProperty)" />*/
	,
	$type: new $.ig.Type('scheduler.ResourcePropertyMappingsCollection', $.ig.scheduler.SchedulePropertyMappingsCollection$1.prototype.$type.specialize($.ig.scheduler.ScheduleResourceProperty.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ResourcePropertyMappingsCollection" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.AppointmentPropertyMapping" />*/

$.ig.scheduler.AppointmentPropertyMapping = $.ig.util.defType('scheduler.AppointmentPropertyMapping', 'scheduler.SchedulePropertyMapping$1', {
	init: function () {
		$.ig.scheduler.SchedulePropertyMapping$1.prototype.init.call(this, $.ig.scheduler.AppointmentProperty.prototype.$type);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Data.AppointmentPropertyMapping::VerifyProperty(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	verifyProperty: function (property) {
		var exceptionMessage = null;
		switch (property) {
			case $.ig.scheduler.AppointmentProperty.recurrenceRoot:
				exceptionMessage = $.ig.schedulerCore.locale.getString("LE_AppointmentPropertyMapping_RecurrenceRoot");
				break;
			case $.ig.scheduler.AppointmentProperty.resource:
				exceptionMessage = $.ig.schedulerCore.locale.getString("LE_AppointmentPropertyMapping_Resource");
				break;
			default: break;
		}
		if (String.isNullOrEmpty(exceptionMessage) == false) {
			throw new $.ig.Error(1, exceptionMessage);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Data.AppointmentPropertyMapping::VerifyProperty(Infragistics.Scheduler.Data.AppointmentProperty)" />*/
	,
	$type: new $.ig.Type('scheduler.AppointmentPropertyMapping', $.ig.scheduler.SchedulePropertyMapping$1.prototype.$type.specialize($.ig.scheduler.AppointmentProperty.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.AppointmentPropertyMapping" />*/

/*<BeginType Name="Infragistics.Scheduler.Data.ResourcePropertyMapping" />*/

$.ig.scheduler.ResourcePropertyMapping = $.ig.util.defType('scheduler.ResourcePropertyMapping', 'scheduler.SchedulePropertyMapping$1', {
	init: function () {
		$.ig.scheduler.SchedulePropertyMapping$1.prototype.init.call(this, $.ig.scheduler.ScheduleResourceProperty.prototype.$type);
	},
	$type: new $.ig.Type('scheduler.ResourcePropertyMapping', $.ig.scheduler.SchedulePropertyMapping$1.prototype.$type.specialize($.ig.scheduler.ScheduleResourceProperty.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Data.ResourcePropertyMapping" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.JSItemsSourceProxy" />*/

$.ig.util.defType('JSItemsSourceProxy', 'Object', {
	___dataSource: null,
	init: function (dataSource) {
		$.ig.Object.prototype.init.call(this);
		this.___dataSource = dataSource;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.JS.JSItemsSourceProxy Infragistics.Scheduler.JS.JSItemsSourceProxy::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.Action, System.Action)" />*/
	_create: function (dataSource, itemsSource, dataBindingHandler, dataBoundHandler) {
		return new $.ig.JSIGDataSourceWrapper(dataSource, itemsSource, dataBindingHandler, dataBoundHandler);
	}
	/*<EndMethod Name="Infragistics.Scheduler.JS.JSItemsSourceProxy Infragistics.Scheduler.JS.JSItemsSourceProxy::Create(Infragistics.Scheduler.Data.ScheduleListDataSource, System.Object, System.Action, System.Action)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.JS.JSItemsSourceProxy::DataSource()" />*/
	_dataSource: function () {
		return this.___dataSource;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleListDataSource Infragistics.Scheduler.JS.JSItemsSourceProxy::DataSource()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::Initialize()" />*/
	_initialize: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::Initialize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.JSItemsSourceProxy::IndexOf(System.Object)" />*/
	_indexOf: function (dataObject) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.JSItemsSourceProxy::IndexOf(System.Object)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.JS.JSItemsSourceProxy::ListCount()" />*/
	_listCount: function () {
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.JS.JSItemsSourceProxy::ListCount()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.JS.JSItemsSourceProxy::IsBindingPending()" />*/
	_isBindingPending: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.JS.JSItemsSourceProxy::IsBindingPending()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::NotifyExternalAdd()" />*/
	_notifyExternalAdd: function (items) {
		var list = $.ig.Utils.prototype.listFromIEnumerable(items, items.length);
		this._dataSource()._onAppointmentsItemsSourceCollectionChanged($.ig.NotifyCollectionChangedAction.prototype.add, list, null);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::NotifyExternalAdd()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::NotifyExternalDelete()" />*/
	_notifyExternalDelete: function (items) {
		var list = $.ig.Utils.prototype.listFromIEnumerable(items, items.length);
		this._dataSource()._onAppointmentsItemsSourceCollectionChanged($.ig.NotifyCollectionChangedAction.prototype.remove, null, list);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::NotifyExternalDelete()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::HookAddRemoveEvents(System.Boolean)" />*/
	_hookAddRemoveEvents: function (hook) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::HookAddRemoveEvents(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSItemsSourceProxy::Add(System.String, System.Object)" />*/
	_add: function (id_, dataObject_) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSItemsSourceProxy::Add(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSItemsSourceProxy::Delete(System.Int32, System.Object)" />*/
	_del: function (index, dataObject) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSItemsSourceProxy::Delete(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::Destroy()" />*/
	_destroy: function () {
		this._hookAddRemoveEvents(false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSItemsSourceProxy::Destroy()" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.JSItemsSourceProxy::GetEnumerator()" />*/
	getEnumerator: function () {
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.JSItemsSourceProxy::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('JSItemsSourceProxy', $.ig.Object.prototype.$type, [$.ig.IEnumerable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.JSItemsSourceProxy" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.JSIGDataSourceWrapper" />*/

$.ig.util.defType('JSIGDataSourceWrapper', 'JSItemsSourceProxy', {
	___igDataSource: null,
	___dataBindingHandler: null,
	___dataBoundHandler: null,
	___isBindingPending: false,
	init: function (dataSource, itemsSource, dataBindingHandler, dataBoundHandler) {
		$.ig.JSItemsSourceProxy.prototype.init.call(this, dataSource);
		this.___igDataSource = itemsSource;
		this.___dataBindingHandler = dataBindingHandler;
		this.___dataBoundHandler = dataBoundHandler;
		this.___isBindingPending = false;
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Initialize()" />*/
	_initialize: function () {
		var $self = this;
		var bind = false;
		this.___igDataSource = (function () { var $ret = $self._createIGDataSource($self.___igDataSource, bind); bind = $ret.p1; return $ret.ret; }());
		var dataBindingHandler_ = this._onDataBinding.runOn(this);
		var dataBoundHandler_ = this._onDataBound.runOn(this);
		this.___igDataSource.settings.dataBinding = dataBindingHandler_;
		this.___igDataSource.settings.dataBound = dataBoundHandler_;
		if (bind) {
			this.___igDataSource.dataBind();
		}
		this._hookAddRemoveEvents(true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Initialize()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.JSIGDataSourceWrapper::IndexOf(System.Object)" />*/
	_indexOf: function (dataObject) {
		var array = this._data();
		for (var i = 0, count = array.length; i < count; i++) {
			var o = $.ig.Utils.prototype.getArrayValue(array, i);
			if (o == dataObject) {
				return i;
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.JSIGDataSourceWrapper::IndexOf(System.Object)" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.JS.JSIGDataSourceWrapper::ListCount()" />*/
	_listCount: function () {
		return this._data().length;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.JS.JSIGDataSourceWrapper::ListCount()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.JS.JSIGDataSourceWrapper::CreateIGDataSource(System.Object, System.Boolean)" />*/
	_createIGDataSource: function (value_, bind) {
		bind = false;
		if (value_ == null) {
			value_ = new $.ig.Array();
		}
		var isIGDataSource = (value_ instanceof $.ig.DataSource);
		if (isIGDataSource) {
			return {
				ret: value_,
				p1: bind
			};
		}
		var isArray = (value_ instanceof Array);
		if (isArray) {
			value_ = new $.ig.DataSource({type: "json", dataSource: value_});
			bind = true;
			return {
				ret: value_,
				p1: bind
			};
		}
		throw $.ig.Utils.prototype.createException("LE_AppointmentItemsSource_InvalidValue_JS");
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.JS.JSIGDataSourceWrapper::CreateIGDataSource(System.Object, System.Boolean)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.JS.JSIGDataSourceWrapper::IsBindingPending()" />*/
	_isBindingPending: function () {
		return this.___isBindingPending;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.JS.JSIGDataSourceWrapper::IsBindingPending()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnDataBinding()" />*/
	_onDataBinding: function () {
		if (this.___igDataSource == null) {
			return;
		}
		this.___isBindingPending = true;
		if (this.___dataBindingHandler != null) {
			this.___dataBindingHandler();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnDataBinding()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnDataBound()" />*/
	_onDataBound: function () {
		if (this.___igDataSource == null) {
			return;
		}
		this.___isBindingPending = false;
		if (this.___dataBoundHandler != null) {
			this.___dataBoundHandler();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnDataBound()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::HookAddRemoveEvents(System.Boolean)" />*/
	_hookAddRemoveEvents: function (hook) {
		this.___igDataSource.settings.rowAdded = null;
		this.___igDataSource.settings.rowDeleted = null;
		if (hook) {
			var add_ = this._onIGDataSourceRowAdded.runOn(this);
			var delete_ = this._onIGDataSourceRowDeleted.runOn(this);
			this.___igDataSource.settings.rowAdded = add_;
			this.___igDataSource.settings.rowDeleted = delete_;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::HookAddRemoveEvents(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnIGDataSourceRowAdded(System.Object, System.Object)" />*/
	_onIGDataSourceRowAdded: function (row, dataSource) {
		var dataObject = $.ig.JSIGDataSourceWrapper.prototype._getDataObjectFromIGRow(row);
		this._notifyExternalAdd([ dataObject ]);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnIGDataSourceRowAdded(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnIGDataSourceRowDeleted(System.Object, System.Object)" />*/
	_onIGDataSourceRowDeleted: function (row, dataSource) {
		var dataObject = $.ig.JSIGDataSourceWrapper.prototype._getDataObjectFromIGRow(row);
		this._notifyExternalDelete([ dataObject ]);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::OnIGDataSourceRowDeleted(System.Object, System.Object)" />*/
	,
	/*<BeginProperty Name="System.Array Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Data()" />*/
	_data: function () {
		if (this._isBindingPending()) {
			return new $.ig.Array();
		}
		return $.ig.util.cast(Array, this.___igDataSource.data());
	}
	/*<EndProperty Name="System.Array Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Data()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Add(System.String, System.Object)" />*/
	_add: function (id_, dataObject_) {
		var error = null;
		this._hookAddRemoveEvents(false);
		try {
			this.___igDataSource.addRow(id_, dataObject_, true);
		}
		catch (ex) {
			error = new $.ig.scheduler.DataError(ex);
		}
		finally {
			this._hookAddRemoveEvents(true);
		}
		return error;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Add(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Delete(System.Int32, System.Object)" />*/
	_del: function (index, dataObject) {
		var error = null;
		this._hookAddRemoveEvents(false);
		try {
			this.___igDataSource.deleteRow(index, true);
		}
		catch (ex) {
			error = new $.ig.scheduler.DataError(ex);
		}
		finally {
			this._hookAddRemoveEvents(true);
		}
		return error;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Delete(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.JS.JSIGDataSourceWrapper::GetDataObjectFromIGRow(System.Object)" />*/
	_getDataObjectFromIGRow: function (igRow_) {
		return igRow_.row;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.JS.JSIGDataSourceWrapper::GetDataObjectFromIGRow(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Destroy()" />*/
	_destroy: function () {
		this.___igDataSource.settings.dataBinding = null;
		this.___igDataSource.settings.dataBound = null;
		this._hookAddRemoveEvents(false);
		this.___igDataSource = null;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSIGDataSourceWrapper::Destroy()" />*/
	,
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.JSIGDataSourceWrapper::GetEnumerator()" />*/
	getEnumerator: function () {
		var a = this._data();
		if (a == null) {
			a = new $.ig.Array();
		}
		return a.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.JSIGDataSourceWrapper::GetEnumerator()" />*/
	,
	$type: new $.ig.Type('JSIGDataSourceWrapper', $.ig.JSItemsSourceProxy.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.JSIGDataSourceWrapper" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.JSListModificationManager" />*/

$.ig.util.defType('JSListModificationManager', 'ListModificationManager', {
	init: function (dataSource) {
		$.ig.ListModificationManager.prototype.init.call(this, dataSource);
	},
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.JS.JSListModificationManager::ListCount()" />*/
	listCount: function () {
		return $.ig.util.toNullable($.ig.Number.prototype.$type, this.dataSource()._appointmentItemsSourceWrapper()._listCount());
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.JS.JSListModificationManager::ListCount()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.JS.JSListModificationManager::SupportsDataObjectCreation()" />*/
	supportsDataObjectCreation: function () {
		return this.dataSource().createAppointmentDataObjectCallback() != null;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.JS.JSListModificationManager::SupportsDataObjectCreation()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.JS.JSListModificationManager::SupportsListModification()" />*/
	supportsListModification: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.JS.JSListModificationManager::SupportsListModification()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	addToItemSource: function (id, dataObject) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.JSListModificationManager::IndexOf(System.Object)" />*/
	indexOf: function (dataObject) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.JSListModificationManager::IndexOf(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	removeFromItemSource: function (index, dataObject) {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.JS.JSListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	createAppointmentDataObjectInstance: function (appointment, exception) {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.JS.JSListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSListModificationManager::Destroy()" />*/
	destroy: function () {
		throw new $.ig.NotImplementedException(0);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSListModificationManager::Destroy()" />*/
	,
	$type: new $.ig.Type('JSListModificationManager', $.ig.ListModificationManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.JSListModificationManager" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.JSAppointmentListModificationManager" />*/

$.ig.util.defType('JSAppointmentListModificationManager', 'JSListModificationManager', {
	init: function (dataSource) {
		$.ig.JSListModificationManager.prototype.init.call(this, dataSource);
		this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(true);
	},
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.JS.JSAppointmentListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	createAppointmentDataObjectInstance: function (appointment, exception) {
		exception = null;
		try {
			if (this.dataSource().createAppointmentDataObjectCallback() != null) {
				return {
					ret: this.dataSource().createAppointmentDataObjectCallback()(appointment),
					p1: exception
				};
			} else {
				exception = $.ig.Utils.prototype.createException("LE_NoCreateAppointmentDataObjectCallback_JS");
			}
		}
		catch (ex) {
			exception = ex;
		}
		return {
			ret: null,
			p1: exception
		};
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.JS.JSAppointmentListModificationManager::CreateAppointmentDataObjectInstance(Infragistics.Scheduler.Appointment, System.Exception)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSAppointmentListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	addToItemSource: function (id, dataObject) {
		var error = null;
		this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(false);
		try {
			this.dataSource()._appointmentItemsSourceWrapper()._add(id, dataObject);
		}
		catch (ex) {
			error = new $.ig.scheduler.DataError(ex);
		}
		finally {
			this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(true);
		}
		return error;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSAppointmentListModificationManager::AddToItemSource(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.JSAppointmentListModificationManager::IndexOf(System.Object)" />*/
	indexOf: function (dataObject) {
		return this.dataSource()._appointmentItemsSourceWrapper()._indexOf(dataObject);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.JSAppointmentListModificationManager::IndexOf(System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSAppointmentListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	removeFromItemSource: function (index, dataObject) {
		var error = null;
		this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(false);
		try {
			this.dataSource()._appointmentItemsSourceWrapper()._del(index, dataObject);
		}
		catch (ex) {
			error = new $.ig.scheduler.DataError(ex);
		}
		finally {
			this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(true);
		}
		return error;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.DataError Infragistics.Scheduler.JS.JSAppointmentListModificationManager::RemoveFromItemSource(System.Int32, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.JSAppointmentListModificationManager::Destroy()" />*/
	destroy: function () {
		this.dataSource()._appointmentItemsSourceWrapper()._hookAddRemoveEvents(false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.JSAppointmentListModificationManager::Destroy()" />*/
	,
	$type: new $.ig.Type('JSAppointmentListModificationManager', $.ig.JSListModificationManager.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.JSAppointmentListModificationManager" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter" />*/

$.ig.util.defType('DateTimeFormatter', 'Object', {
	__formatters: null,
	__cultureName: null,
	__defaultFormat: null,
	init: function (cultureName) {
		$.ig.Object.prototype.init.call(this);
		this.__cultureName = cultureName;
		this.__formatters = new $.ig.Dictionary$2(String, $.ig.Object.prototype.$type, 1, 10);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::DefaultFormat()" />*/
	defaultFormat: function () {
		if (this.__defaultFormat == null) {
			var provider = new $.ig.DefaultDateTimeFormatProvider();
			this.__defaultFormat = provider.item(this.__cultureName);
		}
		return this.__defaultFormat;
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::DefaultFormat()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Format(System.DateTime, System.Collections.Generic.IEnumerable)" />*/
	format: function (date_, formatOptions_) {
		var $self = this;
		var options_ = null;
		options_ = {};
		var key = $.ig.DateTimeFormatter.prototype.buildKey(formatOptions_);
		var formatter_ = null;
		if ((function () { var $ret = $self.__formatters.tryGetValue(key, formatter_); formatter_ = $ret.p1; return $ret.ret; }()) == false) {
			var en = formatOptions_.getEnumerator();
			while (en.moveNext()) {
				var formatOption = en.current();
				formatOption.applyFormatOption(options_);
			}
			formatter_ = new Intl.DateTimeFormat(this.__cultureName, options_);
			this.__formatters.add(key, formatter_);
		}
		var retVal_ = null;
		retVal_ = formatter_.format(date_);
		return retVal_;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Format(System.DateTime, System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::RemoveFromCache(System.Collections.Generic.IEnumerable)" />*/
	removeFromCache: function (formatOptions) {
		var key = $.ig.DateTimeFormatter.prototype.buildKey(formatOptions);
		if (this.__formatters.containsKey(key)) {
			this.__formatters.remove(key);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::RemoveFromCache(System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::BuildKey(System.Collections.Generic.IEnumerable)" />*/
	buildKey: function (formatOptions) {
		var sb = new $.ig.StringBuilder(0);
		var en = formatOptions.getEnumerator();
		while (en.moveNext()) {
			var formatOption = en.current();
			var s = $.ig.util.stringFormat("{0}.{1}/", $.ig.DateFormatPart.prototype.getBox(formatOption.part()), formatOption.getFormat());
			sb.append5(s);
		}
		return sb.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::BuildKey(System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.MonthFormat)" />*/
	convert: function (format) {
		switch (format) {
			case $.ig.MonthFormat.prototype.twoDigit: return $.ig.MonthDateFormat.prototype.twoDigit;
			case $.ig.MonthFormat.prototype.$short: return $.ig.MonthDateFormat.prototype.$short;
			case $.ig.MonthFormat.prototype.$long: return $.ig.MonthDateFormat.prototype.$long;
			default: return $.ig.MonthDateFormat.prototype.numeric;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.MonthFormat)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.YearFormat)" />*/
	convert1: function (format) {
		switch (format) {
			case $.ig.YearFormat.prototype.twoDigit: return $.ig.NumericDateFormat.prototype.twoDigit;
			default: return $.ig.NumericDateFormat.prototype.numeric;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.YearFormat)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	convert2: function (format) {
		switch (format) {
			case $.ig.DayOfWeekFormat.prototype.full: return $.ig.WeekdayDateFormat.prototype.$long;
			case $.ig.DayOfWeekFormat.prototype.abbreviated: return $.ig.WeekdayDateFormat.prototype.$short;
			default: return $.ig.WeekdayDateFormat.prototype.narrow;
		}
	}
	/*<EndMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter::Convert(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	$type: new $.ig.Type('DateTimeFormatter', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateTimeFormatter" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase" />*/

$.ig.util.defType('FormatOptionBase', 'Object', {
	init: function (part) {
		$.ig.Object.prototype.init.call(this);
		this.part(part);
	},
	_part: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateFormatPart Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::Part()" />*/
	part: function (value) {
		if (arguments.length === 1) {
			this._part = value;
			return value;
		} else {
			return this._part;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DateFormatPart Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::Part()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::GetFormat()" />*/
	getFormat: function () {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::GetFormatValue()" />*/
	getFormatValue: function () {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::GetFormatValue()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::ApplyFormatOption(System.Object)" />*/
	applyFormatOption: function (options_) {
		var format = this.getFormat();
		var value = this.getFormatValue();
		if (value < 0) {
			return;
		}
		switch (this.part()) {
			case $.ig.DateFormatPart.prototype.day:
				options_.day = format;
				break;
			case $.ig.DateFormatPart.prototype.era:
				options_.era = format;
				break;
			case $.ig.DateFormatPart.prototype.hour:
				options_.hour = format;
				break;
			case $.ig.DateFormatPart.prototype.minute:
				options_.minute = format;
				break;
			case $.ig.DateFormatPart.prototype.month:
				options_.month = format;
				break;
			case $.ig.DateFormatPart.prototype.second:
				options_.second = format;
				break;
			case $.ig.DateFormatPart.prototype.timeZoneName:
				options_.timeZoneName = format;
				break;
			case $.ig.DateFormatPart.prototype.weekday:
				options_.weekday = format;
				break;
			case $.ig.DateFormatPart.prototype.year:
				options_.year = format;
				break;
			default:
				$.ig.Debug.prototype.writeLine($.ig.util.stringFormat("Unhandled DateFormatPart {0}", $.ig.DateFormatPart.prototype.getBox(this.part())));
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase::ApplyFormatOption(System.Object)" />*/
	,
	$type: new $.ig.Type('FormatOptionBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions" />*/

$.ig.util.defType('FormatOptions', 'Object', {
	___options: null,
	init: function (options) {
		this.___options = null;
		$.ig.Object.prototype.init.call(this);
		var list = new $.ig.List$1($.ig.FormatOptionBase.prototype.$type, 2, options.length);
		for (var i = 0; i < options.length; i++) {
			var option = options[i];
			var value = option.getFormatValue();
			if (value < 0) {
				continue;
			}
			list.add(option);
		}
	},
	/*<BeginMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions::System.Collections.IEnumerable.GetEnumerator()" />*/
	getEnumerator1: function () {
		return this.___options.getEnumerator();
	}
	/*<EndMethod Name="System.Collections.IEnumerator Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions::System.Collections.IEnumerable.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase>.GetEnumerator()" />*/
	getEnumerator: function () {
		return $.ig.util.cast($.ig.IEnumerator$1.prototype.$type.specialize($.ig.FormatOptionBase.prototype.$type), this.___options.getEnumerator());
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptionBase>.GetEnumerator()" />*/
	,
	$type: new $.ig.Type('FormatOptions', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.FormatOptionBase.prototype.$type)])
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.FormatOptions" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption" />*/

$.ig.util.defType('MonthFormatOption', 'FormatOptionBase', {
	init: function (format) {
		$.ig.FormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.month);
		this.format(format);
	},
	_format: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::Format()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::GetFormat()" />*/
	getFormat: function () {
		return $.ig.MonthFormatOption.prototype.toString1(this.format());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::GetFormatValue()" />*/
	getFormatValue: function () {
		return (this.format());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::GetFormatValue()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::ToString(Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat)" />*/
	toString1: function (value) {
		var strVal = String.empty();
		switch (value) {
			case $.ig.MonthDateFormat.prototype.twoDigit:
				strVal = "2-digit";
				break;
			default:
				strVal = $.ig.MonthDateFormat.prototype.$getName(value).toLowerCase();
				break;
		}
		return strVal;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption::ToString(Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat)" />*/
	,
	$type: new $.ig.Type('MonthFormatOption', $.ig.FormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption" />*/

$.ig.util.defType('WeekdayFormatOption', 'FormatOptionBase', {
	init: function (format) {
		$.ig.FormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.weekday);
		this.format(format);
	},
	_format: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::Format()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::GetFormat()" />*/
	getFormat: function () {
		return $.ig.WeekdayDateFormat.prototype.$getName(this.format()).toLowerCase();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::GetFormatValue()" />*/
	getFormatValue: function () {
		return (this.format());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption::GetFormatValue()" />*/
	,
	$type: new $.ig.Type('WeekdayFormatOption', $.ig.FormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption" />*/

$.ig.util.defType('EraFormatOption', 'FormatOptionBase', {
	init: function (format) {
		$.ig.FormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.era);
		this.format(format);
	},
	_format: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::Format()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::GetFormat()" />*/
	getFormat: function () {
		return $.ig.EraDateFormat.prototype.$getName(this.format()).toLowerCase();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::GetFormatValue()" />*/
	getFormatValue: function () {
		return (this.format());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption::GetFormatValue()" />*/
	,
	$type: new $.ig.Type('EraFormatOption', $.ig.FormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.EraFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption" />*/

$.ig.util.defType('TimeZoneNameFormatOption', 'FormatOptionBase', {
	init: function (format) {
		$.ig.FormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.timeZoneName);
		this.format(format);
	},
	_format: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormat Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormat Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::Format()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::GetFormat()" />*/
	getFormat: function () {
		return $.ig.TimeZoneNameFormat.prototype.$getName(this.format()).toLowerCase();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::GetFormatValue()" />*/
	getFormatValue: function () {
		return (this.format());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption::GetFormatValue()" />*/
	,
	$type: new $.ig.Type('TimeZoneNameFormatOption', $.ig.FormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.TimeZoneNameFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase" />*/

$.ig.util.defType('NumericFormatOptionBase', 'FormatOptionBase', {
	init: function (part, format) {
		$.ig.FormatOptionBase.prototype.init.call(this, part);
		this.format(format);
	},
	_format: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::Format()" />*/
	format: function (value) {
		if (arguments.length === 1) {
			this._format = value;
			return value;
		} else {
			return this._format;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::Format()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::GetFormat()" />*/
	getFormat: function () {
		return $.ig.NumericFormatOptionBase.prototype.toString1(this.format());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::GetFormat()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::ToString(Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat)" />*/
	toString1: function (value) {
		var strVal = String.empty();
		switch (value) {
			case $.ig.NumericDateFormat.prototype.twoDigit:
				strVal = "2-digit";
				break;
			default:
				strVal = $.ig.NumericDateFormat.prototype.$getName(value).toLowerCase();
				break;
		}
		return strVal;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::ToString(Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::GetFormatValue()" />*/
	getFormatValue: function () {
		return (this.format());
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase::GetFormatValue()" />*/
	,
	$type: new $.ig.Type('NumericFormatOptionBase', $.ig.FormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericFormatOptionBase" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.YearFormatOption" />*/

$.ig.util.defType('YearFormatOption', 'NumericFormatOptionBase', {
	init: function (format) {
		$.ig.NumericFormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.year, format);
	},
	$type: new $.ig.Type('YearFormatOption', $.ig.NumericFormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.YearFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DayFormatOption" />*/

$.ig.util.defType('DayFormatOption', 'NumericFormatOptionBase', {
	init: function (format) {
		$.ig.NumericFormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.day, format);
	},
	$type: new $.ig.Type('DayFormatOption', $.ig.NumericFormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DayFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.HourFormatOption" />*/

$.ig.util.defType('HourFormatOption', 'NumericFormatOptionBase', {
	init: function (format) {
		$.ig.NumericFormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.hour, format);
	},
	$type: new $.ig.Type('HourFormatOption', $.ig.NumericFormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.HourFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MinuteFormatOption" />*/

$.ig.util.defType('MinuteFormatOption', 'NumericFormatOptionBase', {
	init: function (format) {
		$.ig.NumericFormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.minute, format);
	},
	$type: new $.ig.Type('MinuteFormatOption', $.ig.NumericFormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.MinuteFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.SecondFormatOption" />*/

$.ig.util.defType('SecondFormatOption', 'NumericFormatOptionBase', {
	init: function (format) {
		$.ig.NumericFormatOptionBase.prototype.init.call(this, $.ig.DateFormatPart.prototype.second, format);
	},
	$type: new $.ig.Type('SecondFormatOption', $.ig.NumericFormatOptionBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.SecondFormatOption" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase" />*/

$.ig.util.defType('DefaultDateTimeFormatProviderBase', 'Object', {
	init: function () {
		this.__invariant = null;
		$.ig.Object.prototype.init.call(this);
	},
	__table: null,
	__invariant: null,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::Item(System.String)" />*/
	item: function (cultureName) {
		var $self = this;
		if (this.__table == null) {
			this.__table = this.createTable();
		}
		if (this.__table != null) {
			var info = null;
			if ((function () { var $ret = $self.__table.tryGetValue(cultureName, info); info = $ret.p1; return $ret.ret; }())) {
				return info;
			}
			var index = cultureName.indexOf("-");
			if (index > 0) {
				cultureName = cultureName.substr(index + 1);
				return this.item(cultureName);
			}
		}
		return this.invariant();
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::Item(System.String)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::Invariant()" />*/
	invariant: function () {
		if (this.__invariant == null) {
			this.__invariant = $.ig.DefaultDateTimeFormatInfo.prototype.createInvariant();
		}
		return this.__invariant;
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::Invariant()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::CreateTable()" />*/
	createTable: function () {
	}
	/*<EndMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::CreateTable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::MergeTable(System.Collections.Generic.Dictionary, System.Func)" />*/
	mergeTable: function (table, inclusionCallback) {
		if (this.__table == null) {
			this.__table = this.createTable();
		}
		$.ig.DefaultDateTimeFormatProviderBase.prototype.mergeTables(table, this.__table, inclusionCallback);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::MergeTable(System.Collections.Generic.Dictionary, System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::MergeTables(System.Collections.Generic.Dictionary, System.Collections.Generic.Dictionary, System.Func)" />*/
	mergeTables: function (source, destination, inclusionCallback) {
		if (source == null || destination == null) {
			return;
		}
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var pair = en.current();
			if (destination.containsKey(pair.key())) {
				continue;
			}
			if (inclusionCallback != null && inclusionCallback(pair.key()) == false) {
				continue;
			}
			destination.add(pair.key(), pair.value());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase::MergeTables(System.Collections.Generic.Dictionary, System.Collections.Generic.Dictionary, System.Func)" />*/
	,
	$type: new $.ig.Type('DefaultDateTimeFormatProviderBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider" />*/

$.ig.util.defType('DefaultDateTimeFormatProvider', 'DefaultDateTimeFormatProviderBase', {
	init: function () {
		$.ig.DefaultDateTimeFormatProviderBase.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider::CreateTable()" />*/
	createTable: function () {
		var table = new $.ig.Dictionary$2(String, $.ig.DefaultDateTimeFormatInfo.prototype.$type, 1, 12);
		var info = null;
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-DE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-AT", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-BE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-CH", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-LI", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("de-LU", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, -1, 0, 4, 0, 0, 1, 1, -1, 0, 4, 0, 0, 1, 1, 0, 4, 0, 0, 1, -1);
		table.add("en-CA", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, -1, 0, 4, 1, 1, 1, 1, -1, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("en-GB", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("en-US", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-MX", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-419", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-AR", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-BO", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-CL", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-CO", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-CR", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-CU", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-DO", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-EC", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-ES", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-GQ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-GT", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-HN", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-NI", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-PA", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-PE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-PH", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-PR", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-PY", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("es-SV", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-US", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-UY", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("es-VE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-029", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-BE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-BF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-BI", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-BJ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-BL", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 0, -1, 0, 4, 0, 1, 1, 1, -1, 0, 4, 0, 1, 1, 1, 0, 4, 0, 1, 1, -1);
		table.add("fr-CA", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CD", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CG", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CH", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CI", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-CM", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 6, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-DJ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 6, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-DZ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-FR", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-GA", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-GF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-GN", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-GP", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-GQ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-HT", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-KM", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-LU", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 6, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MA", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MC", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MG", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-ML", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MQ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-MR", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-MU", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-NC", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-NE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-PF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-PM", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-RE", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-RW", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-SC", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-SN", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 6, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-SY", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-TD", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-TG", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-TN", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 1, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("fr-VU", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-WF", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("fr-YT", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 0, 0, -1, 0, 4, 0, 0, 1, 1, -1, 0, 4, 0, 0, 1, 1, 0, 4, 0, 0, 1, -1);
		table.add("ja", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 0, 0, -1, 0, 4, 0, 0, 1, 1, -1, 0, 4, 0, 0, 1, 1, 0, 4, 0, 0, 1, -1);
		table.add("ja-JP", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, -1, 0, 4, 1, 0, 1, 1, -1, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("bg", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, -1, 0, 4, 1, 0, 1, 1, -1, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("bg-BG", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, -1, 0, 4, 0, 0, 1, 1, -1, 0, 4, 0, 0, 1, 1, 0, 4, 0, 0, 1, -1);
		table.add("ru", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("ru-BY", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("ru-KG", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("ru-KZ", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 0, 1, 1, 2, 0, 4, 1, 0, 1, 1, 0, 4, 1, 0, 1, -1);
		table.add("ru-MD", info);
		info = new $.ig.DefaultDateTimeFormatInfo(0, 1, 0, 4, 0, 4, 0, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
		table.add("ru-UA", info);
		return table;
	}
	/*<EndMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider::CreateTable()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider::Combine(Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase, System.Func)" />*/
	combine: function (provider, inclusionCallback) {
		if (provider == null) {
			throw new $.ig.ArgumentNullException(0, "provider");
		}
		var table = provider.createTable();
		if (table == null || table.count() == 0) {
			return;
		}
		this.mergeTable(table, inclusionCallback);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider::Combine(Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProviderBase, System.Func)" />*/
	,
	$type: new $.ig.Type('DefaultDateTimeFormatProvider', $.ig.DefaultDateTimeFormatProviderBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatProvider" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo" />*/

$.ig.util.defType('DefaultDateTimeFormatInfo', 'Object', {
	init: function (initNumber, firstDayOfWeek, twelveHourTime, yearMonth_Month, yearMonth_Year, monthDay_Month, monthDay_Day, fullDateTime_Weekday, fullDateTime_Year, fullDateTime_Month, fullDateTime_Day, fullDateTime_Hour, fullDateTime_Minute, fullDateTime_Second, longDate_Weekday, longDate_Year, longDate_Month, longDate_Day, longTime_Hour, longTime_Minute, longTime_Second, shortDate_Year, shortDate_Month, shortDate_Day, shortTime_Hour, shortTime_Minute, shortTime_Second) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.firstDayOfWeek(firstDayOfWeek);
		this.twelveHourTime(twelveHourTime > 0);
		this.yearMonth_Month(yearMonth_Month);
		this.yearMonth_Year(yearMonth_Year);
		this.monthDay_Month(monthDay_Month);
		this.monthDay_Day(monthDay_Day);
		this.fullDateTime_Weekday(fullDateTime_Weekday);
		this.fullDateTime_Year(fullDateTime_Year);
		this.fullDateTime_Month(fullDateTime_Month);
		this.fullDateTime_Day(fullDateTime_Day);
		this.fullDateTime_Hour(fullDateTime_Hour);
		this.fullDateTime_Minute(fullDateTime_Minute);
		this.fullDateTime_Second(fullDateTime_Second);
		this.longDate_Weekday(longDate_Weekday);
		this.longDate_Year(longDate_Year);
		this.longDate_Month(longDate_Month);
		this.longDate_Day(longDate_Day);
		this.longTime_Hour(longTime_Hour);
		this.longTime_Minute(longTime_Minute);
		this.longTime_Second(longTime_Second);
		this.shortDate_Year(shortDate_Year);
		this.shortDate_Month(shortDate_Month);
		this.shortDate_Day(shortDate_Day);
		this.shortTime_Hour(shortTime_Hour);
		this.shortTime_Minute(shortTime_Minute);
		this.shortTime_Second(shortTime_Second);
	},
	init1: function (initNumber) {
		$.ig.Object.prototype.init.call(this);
		var invariant = $.ig.DefaultDateTimeFormatInfo.prototype.createInvariant();
		this.firstDayOfWeek(invariant.firstDayOfWeek());
		this.twelveHourTime(invariant.twelveHourTime());
		this.yearMonth_Month(invariant.yearMonth_Month());
		this.yearMonth_Year(invariant.yearMonth_Year());
		this.monthDay_Month(invariant.monthDay_Month());
		this.monthDay_Day(invariant.monthDay_Day());
		this.fullDateTime_Weekday(invariant.fullDateTime_Weekday());
		this.fullDateTime_Year(invariant.fullDateTime_Year());
		this.fullDateTime_Month(invariant.fullDateTime_Month());
		this.fullDateTime_Day(invariant.fullDateTime_Day());
		this.fullDateTime_Hour(invariant.fullDateTime_Hour());
		this.fullDateTime_Minute(invariant.fullDateTime_Minute());
		this.fullDateTime_Second(invariant.fullDateTime_Second());
		this.longDate_Weekday(invariant.longDate_Weekday());
		this.longDate_Year(invariant.longDate_Year());
		this.longDate_Month(invariant.longDate_Month());
		this.longDate_Day(invariant.longDate_Day());
		this.longTime_Hour(invariant.longTime_Hour());
		this.longTime_Minute(invariant.longTime_Minute());
		this.longTime_Second(invariant.longTime_Second());
		this.shortDate_Year(invariant.shortDate_Year());
		this.shortDate_Month(invariant.shortDate_Month());
		this.shortDate_Day(invariant.shortDate_Day());
		this.shortTime_Hour(invariant.shortTime_Hour());
		this.shortTime_Minute(invariant.shortTime_Minute());
		this.shortTime_Second(invariant.shortTime_Second());
	},
	_firstDayOfWeek: 0,
	/*<BeginProperty Name="System.DayOfWeek Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FirstDayOfWeek()" />*/
	firstDayOfWeek: function (value) {
		if (arguments.length === 1) {
			this._firstDayOfWeek = value;
			return value;
		} else {
			return this._firstDayOfWeek;
		}
	}
	/*<EndProperty Name="System.DayOfWeek Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FirstDayOfWeek()" />*/
	,
	_twelveHourTime: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::TwelveHourTime()" />*/
	twelveHourTime: function (value) {
		if (arguments.length === 1) {
			this._twelveHourTime = value;
			return value;
		} else {
			return this._twelveHourTime;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::TwelveHourTime()" />*/
	,
	_yearMonth_Month: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::YearMonth_Month()" />*/
	yearMonth_Month: function (value) {
		if (arguments.length === 1) {
			this._yearMonth_Month = value;
			return value;
		} else {
			return this._yearMonth_Month;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::YearMonth_Month()" />*/
	,
	_yearMonth_Year: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::YearMonth_Year()" />*/
	yearMonth_Year: function (value) {
		if (arguments.length === 1) {
			this._yearMonth_Year = value;
			return value;
		} else {
			return this._yearMonth_Year;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::YearMonth_Year()" />*/
	,
	_monthDay_Month: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::MonthDay_Month()" />*/
	monthDay_Month: function (value) {
		if (arguments.length === 1) {
			this._monthDay_Month = value;
			return value;
		} else {
			return this._monthDay_Month;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::MonthDay_Month()" />*/
	,
	_monthDay_Day: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::MonthDay_Day()" />*/
	monthDay_Day: function (value) {
		if (arguments.length === 1) {
			this._monthDay_Day = value;
			return value;
		} else {
			return this._monthDay_Day;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::MonthDay_Day()" />*/
	,
	_fullDateTime_Weekday: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Weekday()" />*/
	fullDateTime_Weekday: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Weekday = value;
			return value;
		} else {
			return this._fullDateTime_Weekday;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Weekday()" />*/
	,
	_fullDateTime_Year: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Year()" />*/
	fullDateTime_Year: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Year = value;
			return value;
		} else {
			return this._fullDateTime_Year;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Year()" />*/
	,
	_fullDateTime_Month: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Month()" />*/
	fullDateTime_Month: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Month = value;
			return value;
		} else {
			return this._fullDateTime_Month;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Month()" />*/
	,
	_fullDateTime_Day: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Day()" />*/
	fullDateTime_Day: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Day = value;
			return value;
		} else {
			return this._fullDateTime_Day;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Day()" />*/
	,
	_fullDateTime_Hour: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Hour()" />*/
	fullDateTime_Hour: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Hour = value;
			return value;
		} else {
			return this._fullDateTime_Hour;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Hour()" />*/
	,
	_fullDateTime_Minute: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Minute()" />*/
	fullDateTime_Minute: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Minute = value;
			return value;
		} else {
			return this._fullDateTime_Minute;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Minute()" />*/
	,
	_fullDateTime_Second: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Second()" />*/
	fullDateTime_Second: function (value) {
		if (arguments.length === 1) {
			this._fullDateTime_Second = value;
			return value;
		} else {
			return this._fullDateTime_Second;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::FullDateTime_Second()" />*/
	,
	_longDate_Weekday: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Weekday()" />*/
	longDate_Weekday: function (value) {
		if (arguments.length === 1) {
			this._longDate_Weekday = value;
			return value;
		} else {
			return this._longDate_Weekday;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.WeekdayDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Weekday()" />*/
	,
	_longDate_Year: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Year()" />*/
	longDate_Year: function (value) {
		if (arguments.length === 1) {
			this._longDate_Year = value;
			return value;
		} else {
			return this._longDate_Year;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Year()" />*/
	,
	_longDate_Month: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Month()" />*/
	longDate_Month: function (value) {
		if (arguments.length === 1) {
			this._longDate_Month = value;
			return value;
		} else {
			return this._longDate_Month;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Month()" />*/
	,
	_longDate_Day: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Day()" />*/
	longDate_Day: function (value) {
		if (arguments.length === 1) {
			this._longDate_Day = value;
			return value;
		} else {
			return this._longDate_Day;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongDate_Day()" />*/
	,
	_longTime_Hour: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Hour()" />*/
	longTime_Hour: function (value) {
		if (arguments.length === 1) {
			this._longTime_Hour = value;
			return value;
		} else {
			return this._longTime_Hour;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Hour()" />*/
	,
	_longTime_Minute: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Minute()" />*/
	longTime_Minute: function (value) {
		if (arguments.length === 1) {
			this._longTime_Minute = value;
			return value;
		} else {
			return this._longTime_Minute;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Minute()" />*/
	,
	_longTime_Second: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Second()" />*/
	longTime_Second: function (value) {
		if (arguments.length === 1) {
			this._longTime_Second = value;
			return value;
		} else {
			return this._longTime_Second;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::LongTime_Second()" />*/
	,
	_shortDate_Year: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Year()" />*/
	shortDate_Year: function (value) {
		if (arguments.length === 1) {
			this._shortDate_Year = value;
			return value;
		} else {
			return this._shortDate_Year;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Year()" />*/
	,
	_shortDate_Month: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Month()" />*/
	shortDate_Month: function (value) {
		if (arguments.length === 1) {
			this._shortDate_Month = value;
			return value;
		} else {
			return this._shortDate_Month;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.MonthDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Month()" />*/
	,
	_shortDate_Day: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Day()" />*/
	shortDate_Day: function (value) {
		if (arguments.length === 1) {
			this._shortDate_Day = value;
			return value;
		} else {
			return this._shortDate_Day;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortDate_Day()" />*/
	,
	_shortTime_Hour: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Hour()" />*/
	shortTime_Hour: function (value) {
		if (arguments.length === 1) {
			this._shortTime_Hour = value;
			return value;
		} else {
			return this._shortTime_Hour;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Hour()" />*/
	,
	_shortTime_Minute: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Minute()" />*/
	shortTime_Minute: function (value) {
		if (arguments.length === 1) {
			this._shortTime_Minute = value;
			return value;
		} else {
			return this._shortTime_Minute;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Minute()" />*/
	,
	_shortTime_Second: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Second()" />*/
	shortTime_Second: function (value) {
		if (arguments.length === 1) {
			this._shortTime_Second = value;
			return value;
		} else {
			return this._shortTime_Second;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.JS.DateTimeFormatting.NumericDateFormat Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::ShortTime_Second()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::WriteDeclaration(System.String, System.Text.StringBuilder)" />*/
	writeDeclaration: function (identifier, sb) {
		sb.append5($.ig.util.stringFormat("DefaultDateTimeFormatInfo {0} = new DefaultDateTimeFormatInfo(", identifier));
		sb.append5($.ig.util.stringFormat("{0},", this.firstDayOfWeek()));
		sb.append5($.ig.util.stringFormat("{0},", this.twelveHourTime() ? "1" : "0"));
		sb.append5($.ig.util.stringFormat("{0},", this.yearMonth_Month()));
		sb.append5($.ig.util.stringFormat("{0},", this.yearMonth_Year()));
		sb.append5($.ig.util.stringFormat("{0},", this.monthDay_Month()));
		sb.append5($.ig.util.stringFormat("{0},", this.monthDay_Day()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Weekday()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Year()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Month()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Day()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Hour()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Minute()));
		sb.append5($.ig.util.stringFormat("{0},", this.fullDateTime_Second()));
		sb.append5($.ig.util.stringFormat("{0},", this.longDate_Weekday()));
		sb.append5($.ig.util.stringFormat("{0},", this.longDate_Year()));
		sb.append5($.ig.util.stringFormat("{0},", this.longDate_Month()));
		sb.append5($.ig.util.stringFormat("{0},", this.longDate_Day()));
		sb.append5($.ig.util.stringFormat("{0},", this.longTime_Hour()));
		sb.append5($.ig.util.stringFormat("{0},", this.longTime_Minute()));
		sb.append5($.ig.util.stringFormat("{0},", this.longTime_Second()));
		sb.append5($.ig.util.stringFormat("{0},", this.shortDate_Year()));
		sb.append5($.ig.util.stringFormat("{0},", this.shortDate_Month()));
		sb.append5($.ig.util.stringFormat("{0},", this.shortDate_Day()));
		sb.append5($.ig.util.stringFormat("{0},", this.shortTime_Hour()));
		sb.append5($.ig.util.stringFormat("{0},", this.shortTime_Minute()));
		sb.append5($.ig.util.stringFormat("{0}", this.shortTime_Second()));
		sb.appendLine1($.ig.util.stringFormat(");", identifier));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::WriteDeclaration(System.String, System.Text.StringBuilder)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::CreateInvariant()" />*/
	createInvariant: function () {
		return new $.ig.DefaultDateTimeFormatInfo(0, 0, 0, 4, 0, 4, 1, 2, 0, 4, 1, 1, 1, 1, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 1, -1);
	}
	/*<EndMethod Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo::CreateInvariant()" />*/
	,
	$type: new $.ig.Type('DefaultDateTimeFormatInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.DefaultDateTimeFormatInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DateTimeFormatProvider" />*/

$.ig.util.defType('DateTimeFormatProvider', 'Object', {
	__dayNamesLong: null,
	__dayNamesAbbreviated: null,
	__dayNamesShortest: null,
	__monthNamesLong: null,
	__monthNamesAbbreviated: null,
	init: function (cultureName) {
		$.ig.Object.prototype.init.call(this);
		if (String.isNullOrEmpty(cultureName)) {
			cultureName = $.ig.CultureInfo.prototype.currentCulture().name();
		}
		this.cultureName(cultureName);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.DateTimeFormatProvider::Create(System.String)" />*/
	create: function (cultureName) {
		return new $.ig.JSDateTimeFormatProvider(cultureName);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.DateTimeFormatProvider::Create(System.String)" />*/
	,
	_cultureName: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::CultureName()" />*/
	cultureName: function (value) {
		if (arguments.length === 1) {
			this._cultureName = value;
			return value;
		} else {
			return this._cultureName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::CultureName()" />*/
	,
	/*<BeginProperty Name="System.DayOfWeek Infragistics.Scheduler.Core.DateTimeFormatProvider::FirstDayOfWeek()" />*/
	firstDayOfWeek: function () {
	}
	/*<EndProperty Name="System.DayOfWeek Infragistics.Scheduler.Core.DateTimeFormatProvider::FirstDayOfWeek()" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDayNamesOverride(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getDayNamesOverride: function (format) {
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDayNamesOverride(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDayNames(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getDayNames: function (format) {
		switch (format) {
			case $.ig.DayOfWeekFormat.prototype.none: return new Array(0);
			case $.ig.DayOfWeekFormat.prototype.shortest:
				if (this.__dayNamesShortest != null) {
					return this.__dayNamesShortest;
				}
				break;
			case $.ig.DayOfWeekFormat.prototype.abbreviated:
				if (this.__dayNamesAbbreviated != null) {
					return this.__dayNamesAbbreviated;
				}
				break;
			case $.ig.DayOfWeekFormat.prototype.full:
				if (this.__dayNamesLong != null) {
					return this.__dayNamesLong;
				}
				break;
		}
		var names = this.getDayNamesOverride(format);
		switch (format) {
			case $.ig.DayOfWeekFormat.prototype.shortest:
				this.__dayNamesShortest = names;
				break;
			case $.ig.DayOfWeekFormat.prototype.abbreviated:
				this.__dayNamesAbbreviated = names;
				break;
			case $.ig.DayOfWeekFormat.prototype.full:
				this.__dayNamesLong = names;
				break;
		}
		return names;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDayNames(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthNamesOverride(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	getMonthNamesOverride: function (format) {
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthNamesOverride(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthNames(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	getMonthNames: function (format) {
		var names = null;
		switch (format) {
			case $.ig.MonthNameFormat.prototype.abbreviated:
				if (this.__monthNamesAbbreviated == null) {
					this.__monthNamesAbbreviated = this.getMonthNamesOverride(format);
				}
				names = this.__monthNamesAbbreviated;
				break;
			case $.ig.MonthNameFormat.prototype.full:
				if (this.__monthNamesLong == null) {
					this.__monthNamesLong = this.getMonthNamesOverride(format);
				}
				names = this.__monthNamesLong;
				break;
		}
		return names;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthNames(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDaysInMonth(System.Int32, System.Int32, System.Int32)" />*/
	getDaysInMonth: function (year, month, era) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateTimeFormatProvider::GetDaysInMonth(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthsInYear(System.Int32, System.Int32)" />*/
	getMonthsInYear: function (year, era) {
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateTimeFormatProvider::GetMonthsInYear(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatYearMonth(System.DateTime)" />*/
	formatYearMonth: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatYearMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatMonthDay(System.DateTime)" />*/
	formatMonthDay: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatMonthDay(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatLongDate(System.DateTime)" />*/
	formatLongDate: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatLongDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatShortDate(System.DateTime)" />*/
	formatShortDate: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatShortDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatLongTime(System.DateTime)" />*/
	formatLongTime: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatLongTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatShortTime(System.DateTime)" />*/
	formatShortTime: function (date) {
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::FormatShortTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::ToString()" />*/
	toString: function () {
		return this.cultureName();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateTimeFormatProvider::ToString()" />*/
	,
	$type: new $.ig.Type('DateTimeFormatProvider', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DateTimeFormatProvider" />*/

/*<BeginType Name="Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider" />*/

$.ig.util.defType('JSDateTimeFormatProvider', 'DateTimeFormatProvider', {
	__formatter: null,
	init: function (cultureName) {
		$.ig.Object.prototype.init.call(this);
		if (String.isNullOrEmpty(cultureName)) {
			cultureName = $.ig.CultureInfo.prototype.currentCulture().name();
		}
		this.__formatter = new $.ig.DateTimeFormatter(cultureName);
	},
	/*<BeginProperty Name="System.DayOfWeek Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FirstDayOfWeek()" />*/
	firstDayOfWeek: function () {
		return this.__formatter.defaultFormat().firstDayOfWeek();
	}
	/*<EndProperty Name="System.DayOfWeek Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FirstDayOfWeek()" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetDayNamesOverride(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getDayNamesOverride: function (format) {
		var array = new Array($.ig.DateUtils.prototype.daysInWeek);
		var first = $.ig.Date.prototype.fromValues(2016, 11, 20, 0, 0, 0, 0);
		var dates = [ first, $.ig.Date.prototype.addDays(first, 1), $.ig.Date.prototype.addDays(first, 2), $.ig.Date.prototype.addDays(first, 3), $.ig.Date.prototype.addDays(first, 4), $.ig.Date.prototype.addDays(first, 5), $.ig.Date.prototype.addDays(first, 6) ];
		var formatOption = $.ig.DateTimeFormatter.prototype.convert2(format);
		var options = [ new $.ig.WeekdayFormatOption(formatOption) ];
		for (var i = 0, count = $.ig.DateUtils.prototype.daysInWeek; i < count; i++) {
			array[i] = this.__formatter.format(dates[i], options);
		}
		this.__formatter.removeFromCache(options);
		return array;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetDayNamesOverride(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetDaysInMonth(System.Int32, System.Int32, System.Int32)" />*/
	getDaysInMonth: function (year, month, era) {
		return new Date(year, month, 0).getDate();
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetDaysInMonth(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetMonthsInYear(System.Int32, System.Int32)" />*/
	getMonthsInYear: function (year, era) {
		return 12;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetMonthsInYear(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatYearMonth(System.DateTime)" />*/
	formatYearMonth: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.MonthFormatOption(defaults.yearMonth_Month()), new $.ig.YearFormatOption(defaults.yearMonth_Year()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatYearMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatMonthDay(System.DateTime)" />*/
	formatMonthDay: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.MonthFormatOption(defaults.monthDay_Month()), new $.ig.YearFormatOption(defaults.monthDay_Day()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatMonthDay(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatLongDate(System.DateTime)" />*/
	formatLongDate: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.YearFormatOption(defaults.longDate_Year()), new $.ig.MonthFormatOption(defaults.longDate_Month()), new $.ig.DayFormatOption(defaults.longDate_Day()), new $.ig.WeekdayFormatOption(defaults.longDate_Weekday()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatLongDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatShortDate(System.DateTime)" />*/
	formatShortDate: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.YearFormatOption(defaults.shortDate_Year()), new $.ig.MonthFormatOption(defaults.shortDate_Month()), new $.ig.DayFormatOption(defaults.shortDate_Day()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatShortDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatLongTime(System.DateTime)" />*/
	formatLongTime: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.HourFormatOption(defaults.longTime_Hour()), new $.ig.MinuteFormatOption(defaults.longTime_Minute()), new $.ig.SecondFormatOption(defaults.longTime_Second()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatLongTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatShortTime(System.DateTime)" />*/
	formatShortTime: function (date) {
		var defaults = this.__formatter.defaultFormat();
		var options = [ new $.ig.HourFormatOption(defaults.shortTime_Hour()), new $.ig.MinuteFormatOption(defaults.shortTime_Minute()), new $.ig.SecondFormatOption(defaults.shortTime_Second()) ];
		return this.__formatter.format(date, options);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::FormatShortTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetMonthNamesOverride(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	getMonthNamesOverride: function (format) {
		var f = format == $.ig.MonthNameFormat.prototype.abbreviated ? $.ig.MonthDateFormat.prototype.$short : $.ig.MonthDateFormat.prototype.$long;
		var option = new $.ig.MonthFormatOption(f);
		var dates = new $.ig.List$1($.ig.Date.prototype.$type, 2, 13);
		var start = $.ig.Date.prototype.fromValues(2016, 1, 1, 0, 0, 0, 0);
		var date = start;
		while (date.getFullYear() == start.getFullYear()) {
			dates.add(date);
			date = $.ig.Date.prototype.addMonths(date, 1);
		}
		var names = new Array(dates.count());
		for (var i = 0; i < dates.count(); i++) {
			names[i] = this.__formatter.format(dates.__inner[i], [ option ]);
		}
		this.__formatter.removeFromCache([ option ]);
		return names;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider::GetMonthNamesOverride(Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	,
	$type: new $.ig.Type('JSDateTimeFormatProvider', $.ig.DateTimeFormatProvider.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.JS.DateTimeFormatting.JSDateTimeFormatProvider" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasContainerBase" />*/

$.ig.util.defType('CanvasContainerBase', 'Object', {
	__isValid: false,
	__location: null,
	__viewPortOffset: null,
	__size: null,
	__scrollDirection: 0,
	__metricsProvider: null,
	__canvases: null,
	__manager: null,
	__extraScrollAreaExtent: 0,
	__lastDevicePixelRatio: 0,
	__canvasExtentInScrollingDirection: 0,
	init: function (scrollDirection, metricsProvider) {
		this.__size = new $.ig.Size();
		this.__extraScrollAreaExtent = 150;
		this.__lastDevicePixelRatio = 1;
		this.__canvasExtentInScrollingDirection = 100;
		$.ig.Object.prototype.init.call(this);
		this.__scrollDirection = scrollDirection;
		this.__metricsProvider = metricsProvider;
		this.__manager = new $.ig.CanvasPresenterManager(this);
	},
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.CanvasContainerBase::CanvasFallbackBackgroundBrush()" />*/
	canvasFallbackBackgroundBrush: function () {
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.CanvasContainerBase::CanvasFallbackBackgroundBrush()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::CanvasExtentInScrollingDirection()" />*/
	canvasExtentInScrollingDirection: function (value) {
		if (arguments.length === 1) {
			if (this.__canvasExtentInScrollingDirection != value) {
				this.__canvasExtentInScrollingDirection = value;
				this.invalidate();
			}
			return value;
		} else {
			return this.__canvasExtentInScrollingDirection;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::CanvasExtentInScrollingDirection()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.CanvasContainerBase::DevicePixelRatio()" />*/
	devicePixelRatio: function () {
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.CanvasContainerBase::DevicePixelRatio()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::ExtraScrollAreaExtent()" />*/
	extraScrollAreaExtent: function (value) {
		if (arguments.length === 1) {
			if (value != this.__extraScrollAreaExtent) {
				this.__extraScrollAreaExtent = value;
				this.invalidate();
			}
			return value;
		} else {
			return this.__extraScrollAreaExtent;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::ExtraScrollAreaExtent()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasContainerBase::IsValid()" />*/
	isValid: function () {
		return this.__isValid;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasContainerBase::IsValid()" />*/
	,
	/*<BeginProperty Name="System.Windows.Point Infragistics.Scheduler.Core.CanvasContainerBase::Location()" />*/
	location: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Point.prototype.l_op_Inequality(value, this.__location)) {
				this.__location = value;
				this.invalidate();
				this.onLocationChanged();
			}
			return value;
		} else {
			return this.__location;
		}
	}
	/*<EndProperty Name="System.Windows.Point Infragistics.Scheduler.Core.CanvasContainerBase::Location()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.CanvasContainerBase::ScrollDirection()" />*/
	scrollDirection: function (value) {
		if (arguments.length === 1) {
			if (value != this.__scrollDirection) {
				this.__scrollDirection = value;
			}
			return value;
		} else {
			return this.__scrollDirection;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.CanvasContainerBase::ScrollDirection()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.CanvasContainerBase::Size()" />*/
	size: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Size.prototype.l_op_Inequality(value, this.__size)) {
				this.__size = value;
				this.invalidate();
				this.onSizeChanged();
			}
			return value;
		} else {
			return this.__size;
		}
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.CanvasContainerBase::Size()" />*/
	,
	/*<BeginProperty Name="System.Windows.Point Infragistics.Scheduler.Core.CanvasContainerBase::ViewPortOffset()" />*/
	viewPortOffset: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Point.prototype.l_op_Inequality(value, this.__viewPortOffset)) {
				this.__viewPortOffset = value;
			}
			return value;
		} else {
			return this.__viewPortOffset;
		}
	}
	/*<EndProperty Name="System.Windows.Point Infragistics.Scheduler.Core.CanvasContainerBase::ViewPortOffset()" />*/
	,
	/*<BeginMethod Name="Infragistics.RenderingContext Infragistics.Scheduler.Core.CanvasContainerBase::CreateCanvasContext()" />*/
	createCanvasContext: function () {
	}
	/*<EndMethod Name="Infragistics.RenderingContext Infragistics.Scheduler.Core.CanvasContainerBase::CreateCanvasContext()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Dispose()" />*/
	dispose: function () {
		this.__isValid = false;
		if (this.__canvases != null) {
			var en = this.__canvases.getEnumerator();
			while (en.moveNext()) {
				var canvas = en.current();
				this.disposeCanvas(canvas);
			}
			this.__canvases = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::DisposeCanvas(Infragistics.RenderingContext)" />*/
	disposeCanvas: function (context) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::DisposeCanvas(Infragistics.RenderingContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::DisposePresenter(Infragistics.Scheduler.Core.IModelPresenter)" />*/
	disposePresenter: function (presenter) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::DisposePresenter(Infragistics.Scheduler.Core.IModelPresenter)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::GetCanvasIndexForPoint(System.Int32, System.Int32)" />*/
	getCanvasIndexForPoint: function (x, y) {
		var firstCanvasOrigin;
		var testValue;
		if (this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			firstCanvasOrigin = this.__location.__y - this.__extraScrollAreaExtent;
			testValue = y - this.__viewPortOffset.__y;
		} else {
			firstCanvasOrigin = this.__location.__x - this.__extraScrollAreaExtent;
			testValue = x - this.__viewPortOffset.__x;
		}
		return $.ig.intDivide($.ig.truncate((testValue - firstCanvasOrigin)), this.__canvasExtentInScrollingDirection);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.CanvasContainerBase::GetCanvasIndexForPoint(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Invalidate()" />*/
	invalidate: function () {
		this.__isValid = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnBeginRender(System.Double)" />*/
	onBeginRender: function (devicePixelRatio) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnBeginRender(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnBeginRenderContext(System.Double, Infragistics.RenderingContext)" />*/
	onBeginRenderContext: function (devicePixelRatio, canvasContext) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnBeginRenderContext(System.Double, Infragistics.RenderingContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnEndRender(System.Double)" />*/
	onEndRender: function (devicePixelRatio) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnEndRender(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnEndRenderContext(System.Double, Infragistics.RenderingContext)" />*/
	onEndRenderContext: function (devicePixelRatio, canvasContext) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnEndRenderContext(System.Double, Infragistics.RenderingContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnLocationChanged()" />*/
	onLocationChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnLocationChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnSizeChanged()" />*/
	onSizeChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::OnSizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.CanvasContainerBase::RenderAllViews(Infragistics.Scheduler.Core.SchedulerViewMode, System.Collections.Generic.IEnumerable, System.Func)" />*/
	renderAllViews: function (viewMlode, allModels, processModelCallback) {
		var havveAnyModelsBennProcessed = false;
		this.validate();
		this.onBeginRender(this.__lastDevicePixelRatio);
		var viewModeRole = $.ig.Utils.prototype.roleFromViewMode(viewMlode);
		var workRect = new $.ig.Rectangle();
		var extentRemaining = this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical ? this.__size.height() : this.__size.width();
		extentRemaining += 2 * this.__extraScrollAreaExtent;
		workRect.canvasLeft(0);
		workRect.canvasTop(0);
		if (this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			workRect.width(this.__size.width());
			workRect.height(this.__canvasExtentInScrollingDirection);
		} else {
			workRect.width(this.__canvasExtentInScrollingDirection);
			workRect.height(this.__size.height());
		}
		var canvasIndex = -1;
		while (extentRemaining > 0) {
			canvasIndex++;
			var context = this.__canvases.__inner[canvasIndex];
			context.save();
			context.scale(this.__lastDevicePixelRatio, this.__lastDevicePixelRatio);
			context.clearRectangle(0, 0, workRect.width(), workRect.height());
			this.onBeginRenderContext(this.__lastDevicePixelRatio, context);
			extentRemaining -= this.__canvasExtentInScrollingDirection;
		}
		var lastCanvasIndexCleared = canvasIndex;
		var offsetX = this.__location.__x;
		var offsetY = this.__location.__y;
		var en = allModels.getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			if (processModelCallback(model)) {
				continue;
			}
			var presenter = this.__manager.getModelPresenter(model);
			var view = $.ig.util.cast($.ig.CanvasElementView.prototype.$type, presenter.nativeView());
			if (view == null) {
				continue;
			}
			var x = model.x();
			var y = model.y();
			var firstCanvasIndex = this.getCanvasIndexForPoint(x, y);
			var lastCanvasIndex = this.getCanvasIndexForPoint(x + model.width(), y + model.height());
			if (lastCanvasIndex < 0) {
				continue;
			}
			havveAnyModelsBennProcessed = true;
			if (lastCanvasIndex >= this.__canvases.count()) {
				lastCanvasIndex = this.__canvases.count() - 1;
			}
			if (firstCanvasIndex < 0) {
				firstCanvasIndex = 0;
			}
			for (var i = firstCanvasIndex; i <= lastCanvasIndex; i++) {
				if (this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
					offsetY = -(this.__location.__y + this.__viewPortOffset.__y + (i * this.__canvasExtentInScrollingDirection) - this.__extraScrollAreaExtent);
				} else {
					offsetX = -(this.__location.__x + this.__viewPortOffset.__x + (i * this.__canvasExtentInScrollingDirection) - this.__extraScrollAreaExtent);
				}
				view.render(this.__canvases.__inner[i], model, this.__metricsProvider, offsetX, offsetY, workRect);
			}
		}
		for (var i1 = 0; i1 <= lastCanvasIndexCleared; i1++) {
			this.__canvases.__inner[i1].restore();
			this.onEndRenderContext(this.__lastDevicePixelRatio, this.__canvases.__inner[i1]);
		}
		this.onEndRender(this.__lastDevicePixelRatio);
		return havveAnyModelsBennProcessed;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.CanvasContainerBase::RenderAllViews(Infragistics.Scheduler.Core.SchedulerViewMode, System.Collections.Generic.IEnumerable, System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::SetCanvasContextPosition(Infragistics.RenderingContext, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setCanvasContextPosition: function (canvasContext, devicePixelRatio, left, top, width, height) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::SetCanvasContextPosition(Infragistics.RenderingContext, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Validate()" />*/
	validate: function () {
		var newRatio = this.devicePixelRatio();
		if (newRatio != this.__lastDevicePixelRatio) {
			this.__lastDevicePixelRatio = newRatio;
		} else if (this.__isValid) {
			return;
		}
		this.__isValid = true;
		if (this.__canvases == null) {
			this.__canvases = new $.ig.List$1($.ig.RenderingContext.prototype.$type, 0);
		}
		var left = 0;
		var top = 0;
		var extentInScrollingDirection;
		var extentInNonScrollingDirection;
		if (this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			top = -this.__extraScrollAreaExtent;
			extentInScrollingDirection = $.ig.truncate(this.size().height());
			extentInNonScrollingDirection = $.ig.truncate(this.size().width());
		} else {
			left = -this.__extraScrollAreaExtent;
			extentInScrollingDirection = $.ig.truncate(this.size().width());
			extentInNonScrollingDirection = $.ig.truncate(this.size().height());
		}
		extentInScrollingDirection += 2 * this.__extraScrollAreaExtent;
		var oldCount = this.__canvases.count();
		var totalCanvasesRequired = $.ig.truncate(Math.ceil(extentInScrollingDirection / this.__canvasExtentInScrollingDirection));
		while (totalCanvasesRequired > this.__canvases.count()) {
			this.__canvases.add(this.createCanvasContext());
		}
		var count = this.__canvases.count();
		for (var i = 0; i < count; i++) {
			var canvas = this.__canvases.__inner[i];
			if (this.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
				this.setCanvasContextPosition(canvas, newRatio, left, top, extentInNonScrollingDirection, this.__canvasExtentInScrollingDirection);
				top += this.__canvasExtentInScrollingDirection;
			} else {
				this.setCanvasContextPosition(canvas, newRatio, left, top, this.__canvasExtentInScrollingDirection, extentInNonScrollingDirection);
				left += this.__canvasExtentInScrollingDirection;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainerBase::Validate()" />*/
	,
	$type: new $.ig.Type('CanvasContainerBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasContainerBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasContainer" />*/

$.ig.util.defType('CanvasContainer', 'CanvasContainerBase', {
	__element: null,
	init: function (scrollDirection, metricsProvider) {
		$.ig.CanvasContainerBase.prototype.init.call(this, scrollDirection, metricsProvider);
		this.__element = document.createElement("div");
		this.__element.style.position = "absolute";
		this.__element.style.zIndex = 0;
	},
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.CanvasContainer::CanvasFallbackBackgroundBrush()" />*/
	canvasFallbackBackgroundBrush: function () {
		if ($.ig.CanvasContainer.prototype.__canvasFallbackBackgroundBrush == null) {
			$.ig.CanvasContainer.prototype.__canvasFallbackBackgroundBrush = new $.ig.Brush();
			$.ig.CanvasContainer.prototype.__canvasFallbackBackgroundBrush.color($.ig.Color.prototype.fromArgb(255, 255, 255, 255));
		}
		return $.ig.CanvasContainer.prototype.__canvasFallbackBackgroundBrush;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.CanvasContainer::CanvasFallbackBackgroundBrush()" />*/
	,
	/*<BeginMethod Name="Infragistics.RenderingContext Infragistics.Scheduler.Core.CanvasContainer::CreateCanvasContext()" />*/
	createCanvasContext: function () {
		var newCanvas = document.createElement("canvas");
		newCanvas.style.position = "absolute";
		this.__element.appendChild(newCanvas);
		var canvasWrapper = new $.ig.JQueryDomWrapper(newCanvas, $(newCanvas));
		var renderer = new $.ig.JQueryDomRenderer(canvasWrapper);
		return new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), renderer.get2DCanvasContext(canvasWrapper));
	}
	/*<EndMethod Name="Infragistics.RenderingContext Infragistics.Scheduler.Core.CanvasContainer::CreateCanvasContext()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.CanvasContainer::DevicePixelRatio()" />*/
	devicePixelRatio: function () {
		return window.devicePixelRatio;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.CanvasContainer::DevicePixelRatio()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::Dispose()" />*/
	dispose: function () {
		$.ig.CanvasContainerBase.prototype.dispose.call(this);
		if (this.__element != null) {
			$.ig.SchedulerUtils.prototype.remove(this.__element);
			this.__element = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::DisposeCanvas(Infragistics.RenderingContext)" />*/
	disposeCanvas: function (context) {
		var canvasElement = $.ig.CanvasContainer.prototype.getElementFromContext(context);
		if (canvasElement != null) {
			$.ig.SchedulerUtils.prototype.remove(canvasElement);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::DisposeCanvas(Infragistics.RenderingContext)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::DisposePresenter(Infragistics.Scheduler.Core.IModelPresenter)" />*/
	disposePresenter: function (presenter) {
		var elementView = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
		if (elementView != null) {
			elementView.dispose();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::DisposePresenter(Infragistics.Scheduler.Core.IModelPresenter)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::OnLocationChanged()" />*/
	onLocationChanged: function () {
		if (this.__element != null) {
			this.__element.style.left = this.location().__x + "px";
			this.__element.style.top = this.location().__y + "px";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::OnLocationChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::OnSizeChanged()" />*/
	onSizeChanged: function () {
		if (this.__element != null) {
			this.__element.style.width = this.size().width() + "px";
			this.__element.style.height = this.size().height() + "px";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::OnSizeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::SetCanvasContextPosition(Infragistics.RenderingContext, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setCanvasContextPosition: function (canvasContext, devicePixelRatio, left, top, width, height) {
		var canvasElement = $.ig.CanvasContainer.prototype.getElementFromContext(canvasContext);
		if (canvasElement != null) {
			canvasElement.width = $.ig.truncate((width * devicePixelRatio));
			canvasElement.height = $.ig.truncate((height * devicePixelRatio));
			canvasElement.style.left = left + "px";
			canvasElement.style.top = top + "px";
			canvasElement.style.width = width + "px";
			canvasElement.style.height = height + "px";
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasContainer::SetCanvasContextPosition(Infragistics.RenderingContext, System.Double, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Html.Element Infragistics.Scheduler.Core.CanvasContainer::Element()" />*/
	element: function () {
		return this.__element;
	}
	/*<EndProperty Name="System.Html.Element Infragistics.Scheduler.Core.CanvasContainer::Element()" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.CanvasContainer::GetElementFromContext(Infragistics.RenderingContext)" />*/
	getElementFromContext: function (context) {
		var underlying = context.getUnderlyingContext();
		return context.getUnderlyingContext().canvas;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.CanvasContainer::GetElementFromContext(Infragistics.RenderingContext)" />*/
	,
	$type: new $.ig.Type('CanvasContainer', $.ig.CanvasContainerBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasContainer" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs" />*/

$.ig.util.defType('AppointmentDoubleClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_appointment: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::Appointment()" />*/
	appointment: function (value) {
		if (arguments.length === 1) {
			this._appointment = value;
			return value;
		} else {
			return this._appointment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::Appointment()" />*/
	,
	_clickedInDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::ClickedInDate()" />*/
	clickedInDate: function (value) {
		if (arguments.length === 1) {
			this._clickedInDate = value;
			return value;
		} else {
			return this._clickedInDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::ClickedInDate()" />*/
	,
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs::ViewMode()" />*/
	,
	$type: new $.ig.Type('AppointmentDoubleClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AppointmentDoubleClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.LayoutUpdatedEventArgs" />*/

$.ig.util.defType('LayoutUpdatedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.LayoutUpdatedEventArgs::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.LayoutUpdatedEventArgs::ViewMode()" />*/
	,
	$type: new $.ig.Type('LayoutUpdatedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.LayoutUpdatedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.IModelPresenter" />*/

$.ig.util.defType('IModelPresenter', 'Object', {
	$type: new $.ig.Type('IModelPresenter', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.IModelPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.PresenterBase" />*/

$.ig.util.defType('PresenterBase', 'Object', {
	init: function (elementView) {
		$.ig.Object.prototype.init.call(this);
		this.elementView(elementView);
	},
	_elementView: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ElementView Infragistics.Scheduler.Core.PresenterBase::ElementView()" />*/
	elementView: function (value) {
		if (arguments.length === 1) {
			this._elementView = value;
			return value;
		} else {
			return this._elementView;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ElementView Infragistics.Scheduler.Core.PresenterBase::ElementView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.PresenterBase::FillsBackground()" />*/
	fillsBackground: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.PresenterBase::FillsBackground()" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.PresenterBase::GetBlendedColor(System.Windows.Media.Brush, System.Windows.Media.Brush, System.Double)" />*/
	getBlendedColor: function (backgroundColor, selectedBackgroundColor, selectedStatus) {
		if (selectedStatus == 0) {
			return backgroundColor;
		}
		if (selectedStatus == 1) {
			return selectedBackgroundColor;
		}
		return $.ig.BrushUtil.prototype.getInterpolation(backgroundColor, selectedStatus, selectedBackgroundColor, $.ig.InterpolationMode.prototype.rGB);
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.PresenterBase::GetBlendedColor(System.Windows.Media.Brush, System.Windows.Media.Brush, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.PresenterBase::GetOpacity(Infragistics.Scheduler.Core.ModelBase)" />*/
	getOpacity: function (model) {
		return model.opacity();
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.PresenterBase::GetOpacity(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.PresenterBase::NativeView()" />*/
	nativeView: function () {
		return this.elementView();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.PresenterBase::NativeView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdated: function (model) {
		this.modelUpdatedOverride(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdatedOverride: function (model) {
		if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.padding) != 0 || model.isDirty($.ig.ModelBase.prototype.paddingLeftPropertyName) || model.isDirty($.ig.ModelBase.prototype.paddingTopPropertyName) || model.isDirty($.ig.ModelBase.prototype.paddingRightPropertyName) || model.isDirty($.ig.ModelBase.prototype.paddingBottomPropertyName)) {
			this.elementView().setPadding(model.paddingLeft(), model.paddingTop(), model.paddingRight(), model.paddingBottom());
		}
		if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.textBrush) != 0 || model.isDirty($.ig.ModelBase.prototype.textBrushPropertyName)) {
			this.elementView().setTextBrush(model, model.textBrush());
		}
		if (model.isPositionDirty()) {
			this.elementView().invalidate();
		}
		if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.isSelected) != 0 || model.isDirty($.ig.ModelBase.prototype.isSelectedPropertyName)) {
			this.elementView().setIsSelected(model);
		}
		if (this.fillsBackground()) {
			if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.background) != 0 || (model.isContentDirty() && (model.isDirty($.ig.ModelBase.prototype.backgroundPropertyName) || model.isDirty($.ig.ModelBase.prototype.selectedStatusPropertyName)))) {
				this.elementView().setBackgroundBrush(model, model.background());
			}
		}
		if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.opacity) != 0 || (model.isContentDirty() && model.isDirty($.ig.ModelBase.prototype.opacityPropertyName))) {
			this.elementView().setOpacity(model.opacity());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::SetRole(Infragistics.Scheduler.Core.ModelBase)" />*/
	setRole: function (model) {
		if (this.elementView() != null) {
			this.elementView().setRole(model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.PresenterBase::SetRole(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('PresenterBase', $.ig.Object.prototype.$type, [$.ig.IModelPresenter.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.PresenterBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerPresenterManager" />*/

$.ig.util.defType('SchedulerPresenterManager', 'Object', {
	__scheduler: null,
	init: function (scheduler) {
		$.ig.Object.prototype.init.call(this);
		this.__scheduler = scheduler;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.SchedulerPresenterManager::GetModelPresenter(System.Html.Element, Infragistics.Scheduler.Core.ModelBase, System.Boolean, Infragistics.Scheduler.Core.MonthViewSelectedDateView)" />*/
	getModelPresenter: function (parentElement, model, createSelectedDayView, existingSelectedDateView) {
		var hybridPresenter = $.ig.util.cast($.ig.HybridModelPresenter.prototype.$type, model.presenter());
		if (hybridPresenter == null) {
			hybridPresenter = new $.ig.HybridModelPresenter();
		}
		var presenter = $.ig.util.cast($.ig.PresenterBase.prototype.$type, hybridPresenter.elementPresenter());
		var pendingProps = 0;
		if (null != presenter) {
			var view = presenter.elementView();
			if (view != null) {
				pendingProps = view.propertiesEverSet();
			}
			if (view != null && view.domElement() != null && view.domElement().parentNode == parentElement) {
				if (createSelectedDayView) {
					if ($.ig.util.cast($.ig.MonthViewSelectedDateView.prototype.$type, view) !== null) {
						return presenter;
					}
				} else {
					if (!($.ig.util.cast($.ig.MonthViewSelectedDateView.prototype.$type, view) !== null)) {
						return presenter;
					}
				}
			}
			if (view != null) {
				view.dispose();
			}
			model.presenter(null);
		}
		if (model.getType() == $.ig.TextModel.prototype.$type && model.role() != $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment) {
			presenter = new $.ig.TextContentPresenter($.ig.TextOnlyNoBackgroundView.prototype.createTextOnlyView($.ig.util.cast($.ig.TextModel.prototype.$type, model)));
		} else if ($.ig.util.cast($.ig.TimeSlotModel.prototype.$type, model) !== null) {
			if (createSelectedDayView) {
				presenter = new $.ig.TimeSlotPresenter(existingSelectedDateView != null && existingSelectedDateView.domElement() != null ? existingSelectedDateView : $.ig.MonthViewSelectedDateView.prototype.createSelectedDateView($.ig.util.cast($.ig.TimeSlotModel.prototype.$type, model)));
			} else {
				presenter = new $.ig.TimeSlotPresenter($.ig.TimeSlotView.prototype.create($.ig.util.cast($.ig.TimeSlotModel.prototype.$type, model)));
			}
		} else if ($.ig.util.cast($.ig.TextModel.prototype.$type, model) !== null) {
			presenter = new $.ig.TextContentPresenter($.ig.TextContentView.prototype.create($.ig.util.cast($.ig.TextModel.prototype.$type, model)));
		} else if ($.ig.util.cast($.ig.ShapeModel.prototype.$type, model) !== null) {
			presenter = new $.ig.ShapePresenter($.ig.ShapeView.prototype.create($.ig.util.cast($.ig.ShapeModel.prototype.$type, model)));
		}
		if (presenter != null) {
			hybridPresenter.elementPresenter(presenter);
			model.presenter(hybridPresenter);
			var view1 = presenter.elementView();
			if (view1 != null) {
				view1.propertiesPending(pendingProps);
			}
			presenter.setRole(model);
			var elementView = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
			if (elementView != null && elementView.domElement() != null) {
				parentElement.appendChild(elementView.domElement());
			}
		}
		return presenter;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.SchedulerPresenterManager::GetModelPresenter(System.Html.Element, Infragistics.Scheduler.Core.ModelBase, System.Boolean, Infragistics.Scheduler.Core.MonthViewSelectedDateView)" />*/
	,
	$type: new $.ig.Type('SchedulerPresenterManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerPresenterManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapePresenter" />*/

$.ig.util.defType('ShapePresenter', 'PresenterBase', {
	init: function (shapeView) {
		$.ig.PresenterBase.prototype.init.call(this, shapeView);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ShapePresenter::FillsBackground()" />*/
	fillsBackground: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ShapePresenter::FillsBackground()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapePresenter::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdatedOverride: function (model) {
		var shapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, model);
		if (shapeModel.isContentDirty()) {
			this.shapeView().applyModelSettings(shapeModel);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapePresenter::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ShapeView Infragistics.Scheduler.Core.ShapePresenter::ShapeView()" />*/
	shapeView: function () {
		return this.elementView();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ShapeView Infragistics.Scheduler.Core.ShapePresenter::ShapeView()" />*/
	,
	$type: new $.ig.Type('ShapePresenter', $.ig.PresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapePresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextContentPresenter" />*/

$.ig.util.defType('TextContentPresenter', 'PresenterBase', {
	init: function (textView) {
		$.ig.PresenterBase.prototype.init.call(this, textView);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentPresenter::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdatedOverride: function (model) {
		$.ig.PresenterBase.prototype.modelUpdatedOverride.call(this, model);
		var textModel = $.ig.util.cast($.ig.TextModel.prototype.$type, model);
		if ((this.elementView().propertiesPending() & $.ig.ElementView_PropertyIds.prototype.text) != 0 || (model.isContentDirty() && model.isDirty($.ig.TextModel.prototype.textPropertyName))) {
			textModel.renderValue(textModel.text());
			this.textView().initializeText(textModel);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentPresenter::ModelUpdatedOverride(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.TextContentView Infragistics.Scheduler.Core.TextContentPresenter::TextView()" />*/
	textView: function () {
		return this.elementView();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.TextContentView Infragistics.Scheduler.Core.TextContentPresenter::TextView()" />*/
	,
	$type: new $.ig.Type('TextContentPresenter', $.ig.PresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextContentPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TimeSlotPresenter" />*/

$.ig.util.defType('TimeSlotPresenter', 'PresenterBase', {
	init: function (view) {
		$.ig.PresenterBase.prototype.init.call(this, view);
	},
	$type: new $.ig.Type('TimeSlotPresenter', $.ig.PresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TimeSlotPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.Scheduler" />*/

$.ig.util.defType('Scheduler', 'Object', {
	___container: null,
	___view: null,
	___isArrangeScheduled: false,
	___viewport: null,
	___cssObject: null,
	___windowResizedHandler: null,
	___cultureName: null,
	appointmentDoubleClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentDoubleClickedEvent(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_raiseAppointmentDoubleClickedEvent: function (model, viewMode) {
		var path = model.path();
		var appointment = path.appointmentResolved();
		if (appointment != null) {
			if (this.appointmentDoubleClicked != null) {
				this.appointmentDoubleClicked(this, (function () {
					var $ret = new $.ig.AppointmentDoubleClickedEventArgs();
					$ret.appointment(appointment);
					$ret.clickedInDate($.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0));
					$ret.viewMode(viewMode);
					return $ret;
				}()));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentDoubleClickedEvent(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	dayDoubleClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayDoubleClickedEvent(Infragistics.Scheduler.Core.ModelBase)" />*/
	_raiseDayDoubleClickedEvent: function (model) {
		var path = model.path();
		if (path.isDayPath()) {
			if (this.dayDoubleClicked != null) {
				this.dayDoubleClicked(this, (function () {
					var $ret = new $.ig.DayClickedEventArgs();
					$ret.clickedDate($.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0));
					return $ret;
				}()));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayDoubleClickedEvent(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	layoutUpdated: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseLayoutUpdatedEvent(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_raiseLayoutUpdatedEvent: function (viewMode) {
		if (this.layoutUpdated != null) {
			this.layoutUpdated(this, (function () {
				var $ret = new $.ig.LayoutUpdatedEventArgs();
				$ret.viewMode(viewMode);
				return $ret;
			}()));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseLayoutUpdatedEvent(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	_height: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.Scheduler::Height()" />*/
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.Scheduler::Height()" />*/
	,
	_width: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.Scheduler::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.Scheduler::Width()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerView Infragistics.Scheduler.Core.Scheduler::View()" />*/
	_view: function () {
		return this.___view;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerView Infragistics.Scheduler.Core.Scheduler::View()" />*/
	,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Scheduler.Core.Scheduler::Viewport()" />*/
	_viewport: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Rect.prototype.l_op_Inequality(this.___viewport, value)) {
				this.___viewport = value;
				this.scheduleArrange();
			}
			return value;
		} else {
			return this.___viewport;
		}
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Scheduler.Core.Scheduler::Viewport()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.Scheduler::CultureName()" />*/
	cultureName: function (value) {
		if (arguments.length === 1) {
			if (value != this.___cultureName) {
				var oldValue = this.___cultureName;
				this.___cultureName = value;
				this._onPropertyChanged("CultureName", oldValue, this.___cultureName);
			}
			return value;
		} else {
			return this.___cultureName;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.Scheduler::CultureName()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ContainerResized()" />*/
	containerResized: function () {
		if (this.___container != null) {
			var width = Math.round(this.___container.width());
			var height = Math.round(this.___container.height());
			this._viewport(new $.ig.Rect(0, 0, 0, width, height));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ContainerResized()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Destroy()" />*/
	destroy: function () {
		if (this.___view != null) {
			this.___view.dispose();
			this.___view = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Destroy()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Flush()" />*/
	flush: function () {
		if (this.___isArrangeScheduled) {
			this._arrange();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Flush()" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementAtPoint(System.Windows.Point)" />*/
	getElementAtPoint: function (point) {
		var model = this._getPointInfo$1($.ig.ModelBase.prototype.$type, point);
		if (model == null) {
			return null;
		}
		var presenter = model.presenter();
		if (presenter != null) {
			var elementView = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
			if (elementView != null) {
				return elementView.domElement();
			}
		}
		return null;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementAtPoint(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementForActivity(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Core.SchedulerViewMode, System.DateTime)" />*/
	getElementForActivity: function (activity, viewMode, day) {
		return this.___view.getElementForActivity(activity, viewMode, day.getFullYear(), $.ig.Date.prototype.getMonth(day), day.getDate());
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementForActivity(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Core.SchedulerViewMode, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementForDay(System.DateTime)" />*/
	getElementForDay: function (day) {
		return this.___view.getElementForDay(day.getFullYear(), $.ig.Date.prototype.getMonth(day), day.getDate());
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.Scheduler::GetElementForDay(System.DateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerHitTestResult Infragistics.Scheduler.Core.Scheduler::HitTest(System.Windows.Point)" />*/
	hitTest: function (point) {
		return this._getPointInfo$1($.ig.scheduler.SchedulerHitTestResult.prototype.$type, point);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerHitTestResult Infragistics.Scheduler.Core.Scheduler::HitTest(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::InitializeCss(System.Object)" />*/
	initializeCss: function (css) {
		this.___cssObject = css;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::InitializeCss(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnInitialized()" />*/
	onInitialized: function () {
		this._initialize();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnInitialized()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProvideContainer(System.Object)" />*/
	provideContainer: function (container) {
		var $self = this;
		var oldContainer = this.___container;
		var newContainer = container == null ? null : $(container);
		this.___container = newContainer;
		if (container == null && this.___windowResizedHandler != null) {
			window.removeEventListener("resize", this.___windowResizedHandler, false);
			this.___windowResizedHandler = null;
		}
		if (oldContainer != null) {
			if (this.___view != null) {
				this.___view.dispose();
				this.___view = null;
				this._nativeView(null);
			}
		}
		if (newContainer != null) {
			if (this.___windowResizedHandler == null) {
				this.___windowResizedHandler = function (sender, args) {
					$self.___viewport = new $.ig.Rect(4);
					$self.containerResized();
				};
				window.addEventListener("resize", this.___windowResizedHandler, false);
			}
			var width = Math.round(newContainer.width());
			var height = Math.round(newContainer.height());
			this.___viewport = new $.ig.Rect(0, 0, 0, width, height);
			newContainer.css("overflow", "hidden");
			this.___view = $.ig.SchedulerView.prototype.create(this, container, this.___cssObject);
			this._nativeView(this.___view);
			this.___view.initializeStyles();
			this.scheduleArrange();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProvideContainer(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ScheduleArrange()" />*/
	scheduleArrange: function () {
		if (!this.___isArrangeScheduled) {
			this.___isArrangeScheduled = true;
			window.setTimeout(this._arrange.runOn(this), 0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ScheduleArrange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::StyleUpdated()" />*/
	styleUpdated: function () {
		if (this.___view != null) {
			this.___view.clearCachedMetrics();
			this.___view.initializeStyles();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::StyleUpdated()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.Scheduler.T Infragistics.Scheduler.Core.Scheduler::GetPointInfo`1(System.Windows.Point)" />*/
	_getPointInfo$1: function ($t, point) {
		var cumulativeOffsetY = 0;
		var en = this.___viewModeManager.viewModeInfos().getEnumerator();
		while (en.moveNext()) {
			var vmi = en.current();
			var visualModel = vmi.visualModel();
			if (visualModel == null) {
				continue;
			}
			var actualRgn = visualModel.actualVisibleRegion();
			if ($.ig.Rect.prototype.l_op_Equality(actualRgn, null) || actualRgn.isEmpty()) {
				continue;
			}
			var workPoint = { __x: point.__x, __y: point.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			workPoint.__x += actualRgn.x();
			workPoint.__y += actualRgn.y() - cumulativeOffsetY;
			if (!visualModel.actualVisibleRegion().containsPoint(workPoint)) {
				cumulativeOffsetY += visualModel.availableHeight();
				continue;
			}
			var en1 = visualModel.getAllModels(true).getEnumerator();
			while (en1.moveNext()) {
				var model = en1.current();
				if (!model.isHitTestVisible()) {
					continue;
				}
				if (model.x() > workPoint.__x || model.y() > workPoint.__y || model.x() + model.width() < workPoint.__x || model.y() + model.height() < workPoint.__y) {
					continue;
				}
				if ($.ig.util.cast($t, model) !== null) {
					return $.ig.util.cast($t, model);
				}
				if ($t == $.ig.scheduler.SchedulerHitTestResult.prototype.$type) {
					var result = $.ig.scheduler.SchedulerHitTestResult.prototype._create(model, vmi, cumulativeOffsetY);
					if (result != null) {
						return $.ig.util.cast($t, result);
					}
				}
			}
			if ($t == $.ig.scheduler.SchedulerHitTestResult.prototype.$type) {
				return $.ig.util.cast($t, $.ig.scheduler.SchedulerHitTestResult.prototype._create(null, vmi, cumulativeOffsetY));
			} else {
				return null;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.Scheduler.T Infragistics.Scheduler.Core.Scheduler::GetPointInfo`1(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Arrange()" />*/
	_arrange: function () {
		if (this.___isArrangeScheduled) {
			this._arrangeImpl();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Arrange()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ArrangeImpl()" />*/
	_arrangeImpl: function () {
		this.___isArrangeScheduled = false;
		if (this.___view != null) {
			this.___view.setSize($.ig.truncate(this.___viewport.width()), $.ig.truncate(this.___viewport.height()));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ArrangeImpl()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnCreated()" />*/
	_onCreated: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnCreated()" />*/
	,
	___viewModeManager: null,
	___refreshSuspended: false,
	___modelFactories: null,
	___inProcessPendingSizeChanges: false,
	___roleNames: null,
	___pendingMonthViewScrollToDate: new Date(),
	___pendingAgendaViewScrollToDate: new Date(),
	___pendingAgendaViewScrollToAppointment: null,
	___dateTimeFormatProvider: null,
	___lastOverallSize: null,
	init: function () {
		this.___viewport = new $.ig.Rect(0, 0, 0, 0, 0);
		this.___windowResizedHandler = null;
		this.___pendingMonthViewScrollToDate = $.ig.Date.prototype.minValue();
		this.___pendingAgendaViewScrollToDate = $.ig.Date.prototype.minValue();
		this.___pendingAgendaViewScrollToAppointment = null;
		this.___lastOverallSize = new $.ig.Size(0);
		this.___agendaViewAppointmentMargin = null;
		this.___agendaViewAppointmentScope = $.ig.scheduler.AgendaViewAppointmentScope.onlyAppointmentsForSelectedDate;
		this.___agendaViewDayHeaderMargin = null;
		this.___agendaViewInterDaySpacing = 10;
		this.___agendaViewMaximumDate = $.ig.Scheduler.prototype._createDefaultAgendaViewMaximumDate();
		this.___agendaViewMinimumDate = $.ig.Scheduler.prototype._createDefaultAgendaViewMinimumDate();
		this.___maximumDate = $.ig.Scheduler.prototype._createDefaultMaximumDate();
		this.___minimumDate = $.ig.Scheduler.prototype._createDefaultMinimumDate();
		this.___monthViewAgendaVisibility = $.ig.Visibility.prototype.visible;
		this.___monthViewDayContentDisplayMode = $.ig.scheduler.MonthViewDayContentDisplayMode.squareIndicator;
		this.___monthViewDayOfWeekHeaderMargin = null;
		this.___monthViewDayOfWeekHeaderVisibility = $.ig.Visibility.prototype.visible;
		this.___monthViewHorizontalSeparatorVisibility = $.ig.Visibility.prototype.collapsed;
		this.___monthViewInterMonthSpacing = 10;
		this.___monthViewLeadingDayVisibility = $.ig.Visibility.prototype.visible;
		this.___monthViewNameMargin = null;
		this.___monthViewNameVisibility = $.ig.Visibility.prototype.visible;
		this.___monthViewScrollDirection = $.ig.scheduler.SchedulerViewScrollDirection.horizontal;
		this.___monthViewScrollMode = $.ig.MonthViewScrollMode.prototype.paged;
		this.___monthViewTrailingDayVisibility = $.ig.Visibility.prototype.visible;
		this.___monthViewVerticalSeparatorVisibility = $.ig.Visibility.prototype.collapsed;
		this.___monthViewWeekNumberVisibility = $.ig.Visibility.prototype.collapsed;
		this.___viewSplitOrientation = $.ig.scheduler.SchedulerViewSplitOrientation.horizontal;
		this.___viewSplitOrientationMode = $.ig.scheduler.SchedulerViewSplitOrientationMode.manual;
		this.___pendingSizeChanges = new $.ig.List$1($.ig.Scheduler_SizeChangeInfo.prototype.$type, 0);
		$.ig.Object.prototype.init.call(this);
		this._setup();
		this._isClickActionDesired(true);
		this._onCreated();
	},
	appointmentClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentClicked(Infragistics.Scheduler.Core.AppointmentClickedEventArgs)" />*/
	_raiseAppointmentClicked: function (args) {
		if (null != this.appointmentClicked) {
			this.appointmentClicked(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentClicked(Infragistics.Scheduler.Core.AppointmentClickedEventArgs)" />*/
	,
	appointmentSelected: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentSelected(Infragistics.Scheduler.Core.AppointmentSelectedEventArgs)" />*/
	_raiseAppointmentSelected: function (args) {
		if (null != this.appointmentSelected) {
			this.appointmentSelected(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseAppointmentSelected(Infragistics.Scheduler.Core.AppointmentSelectedEventArgs)" />*/
	,
	dayClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayClicked(Infragistics.Scheduler.Core.DayClickedEventArgs)" />*/
	_raiseDayClicked: function (args) {
		if (null != this.dayClicked) {
			this.dayClicked(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayClicked(Infragistics.Scheduler.Core.DayClickedEventArgs)" />*/
	,
	dayOfWeekHeaderClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayOfWeekHeaderClicked(Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs)" />*/
	_raiseDayOfWeekHeaderClicked: function (args) {
		if (null != this.dayOfWeekHeaderClicked) {
			this.dayOfWeekHeaderClicked(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseDayOfWeekHeaderClicked(Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs)" />*/
	,
	monthHeaderClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseMonthHeaderClicked(Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs)" />*/
	_raiseMonthHeaderClicked: function (args) {
		if (null != this.monthHeaderClicked) {
			this.monthHeaderClicked(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseMonthHeaderClicked(Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs)" />*/
	,
	selectedDateChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseSelectedDateChanged(Infragistics.Scheduler.Core.SelectedDateChangedEventArgs)" />*/
	_raiseSelectedDateChanged: function (args) {
		if (null != this.selectedDateChanged) {
			this.selectedDateChanged(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseSelectedDateChanged(Infragistics.Scheduler.Core.SelectedDateChangedEventArgs)" />*/
	,
	weekNumberClicked: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseWeekNumberClicked(Infragistics.Scheduler.Core.WeekNumberClickedEventArgs)" />*/
	_raiseWeekNumberClicked: function (args) {
		if (null != this.weekNumberClicked) {
			this.weekNumberClicked(this, args);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RaiseWeekNumberClicked(Infragistics.Scheduler.Core.WeekNumberClickedEventArgs)" />*/
	,
	___agendaViewAppointmentEndTimeBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeBackgroundBrush()" />*/
	agendaViewAppointmentEndTimeBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentEndTimeBackgroundBrush;
			this.___agendaViewAppointmentEndTimeBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentEndTimeBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentEndTimeBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentEndTimeBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentEndTimeBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeBackgroundBrush()" />*/
	,
	___agendaViewEndTimeFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeFontInfo()" />*/
	agendaViewAppointmentEndTimeFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewEndTimeFontInfo;
			this.___agendaViewEndTimeFontInfo = value;
			if (this.___agendaViewEndTimeFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentEndTimeFontInfoPropertyName, oldValue, this.___agendaViewEndTimeFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewEndTimeFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeFontInfo()" />*/
	,
	___agendaViewAppointmentEndTimeSelectedBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeSelectedBackgroundBrush()" />*/
	agendaViewAppointmentEndTimeSelectedBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentEndTimeSelectedBackgroundBrush;
			this.___agendaViewAppointmentEndTimeSelectedBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentEndTimeSelectedBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentEndTimeSelectedBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentEndTimeSelectedBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeSelectedBackgroundBrush()" />*/
	,
	___agendaViewEndTimeSelectedTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeSelectedTextBrush()" />*/
	agendaViewAppointmentEndTimeSelectedTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewEndTimeSelectedTextBrush;
			this.___agendaViewEndTimeSelectedTextBrush = value;
			if (oldValue != this.___agendaViewEndTimeSelectedTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedTextBrushPropertyName, oldValue, this.___agendaViewEndTimeSelectedTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewEndTimeSelectedTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeSelectedTextBrush()" />*/
	,
	___agendaViewEndTimeTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeTextBrush()" />*/
	agendaViewAppointmentEndTimeTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewEndTimeTextBrush;
			this.___agendaViewEndTimeTextBrush = value;
			if (oldValue != this.___agendaViewEndTimeTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentEndTimeTextBrushPropertyName, oldValue, this.___agendaViewEndTimeTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewEndTimeTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentEndTimeTextBrush()" />*/
	,
	___agendaViewAppointmentLocationBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationBackgroundBrush()" />*/
	agendaViewAppointmentLocationBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentLocationBackgroundBrush;
			this.___agendaViewAppointmentLocationBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentLocationBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentLocationBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentLocationBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentLocationBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationBackgroundBrush()" />*/
	,
	___agendaViewAppointmentLocationFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationFontInfo()" />*/
	agendaViewAppointmentLocationFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentLocationFontInfo;
			this.___agendaViewAppointmentLocationFontInfo = value;
			if (this.___agendaViewAppointmentLocationFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentLocationFontInfoPropertyName, oldValue, this.___agendaViewAppointmentLocationFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentLocationFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationFontInfo()" />*/
	,
	___agendaViewAppointmentLocationSelectedBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationSelectedBackgroundBrush()" />*/
	agendaViewAppointmentLocationSelectedBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentLocationSelectedBackgroundBrush;
			this.___agendaViewAppointmentLocationSelectedBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentLocationSelectedBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentLocationSelectedBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentLocationSelectedBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationSelectedBackgroundBrush()" />*/
	,
	___agendaViewAppointmentLocationSelectedTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationSelectedTextBrush()" />*/
	agendaViewAppointmentLocationSelectedTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentLocationSelectedTextBrush;
			this.___agendaViewAppointmentLocationSelectedTextBrush = value;
			if (oldValue != this.___agendaViewAppointmentLocationSelectedTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedTextBrushPropertyName, oldValue, this.___agendaViewAppointmentLocationSelectedTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentLocationSelectedTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationSelectedTextBrush()" />*/
	,
	___agendaViewAppointmentLocationTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationTextBrush()" />*/
	agendaViewAppointmentLocationTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentLocationTextBrush;
			this.___agendaViewAppointmentLocationTextBrush = value;
			if (oldValue != this.___agendaViewAppointmentLocationTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentLocationTextBrushPropertyName, oldValue, this.___agendaViewAppointmentLocationTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentLocationTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentLocationTextBrush()" />*/
	,
	___agendaViewAppointmentMargin: null,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentMargin()" />*/
	agendaViewAppointmentMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentMargin;
			this.___agendaViewAppointmentMargin = value;
			if (oldValue != this.___agendaViewAppointmentMargin) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentMarginPropertyName, oldValue, this.___agendaViewAppointmentMargin);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentMargin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentMargin()" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewAppointmentMarginImpl()" />*/
	_createDefaultAgendaViewAppointmentMarginImpl: function () {
		return $.ig.SchedulerDefaultThemeInfo.prototype.thicknessEmptyValue;
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewAppointmentMarginImpl()" />*/
	,
	___agendaViewAppointmentScope: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.AgendaViewAppointmentScope Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentScope()" />*/
	agendaViewAppointmentScope: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentScope;
			this.___agendaViewAppointmentScope = value;
			if (oldValue != this.___agendaViewAppointmentScope) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentScopePropertyName, $.ig.scheduler.AgendaViewAppointmentScope.prototype.getBox(oldValue), $.ig.scheduler.AgendaViewAppointmentScope.prototype.getBox(this.___agendaViewAppointmentScope));
			}
			return value;
		} else {
			return this.___agendaViewAppointmentScope;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.AgendaViewAppointmentScope Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentScope()" />*/
	,
	___agendaViewAppointmentSeparatorLineBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSeparatorLineBrush()" />*/
	agendaViewAppointmentSeparatorLineBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSeparatorLineBrush;
			this.___agendaViewAppointmentSeparatorLineBrush = value;
			if (oldValue != this.___agendaViewAppointmentSeparatorLineBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSeparatorLineBrushPropertyName, oldValue, this.___agendaViewAppointmentSeparatorLineBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSeparatorLineBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSeparatorLineBrush()" />*/
	,
	___agendaViewAppointmentStartTimeBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeBackgroundBrush()" />*/
	agendaViewAppointmentStartTimeBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentStartTimeBackgroundBrush;
			this.___agendaViewAppointmentStartTimeBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentStartTimeBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentStartTimeBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentStartTimeBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentStartTimeBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeBackgroundBrush()" />*/
	,
	___agendaViewStartTimeFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeFontInfo()" />*/
	agendaViewAppointmentStartTimeFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewStartTimeFontInfo;
			this.___agendaViewStartTimeFontInfo = value;
			if (this.___agendaViewStartTimeFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentStartTimeFontInfoPropertyName, oldValue, this.___agendaViewStartTimeFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewStartTimeFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeFontInfo()" />*/
	,
	___agendaViewAppointmentStartTimeSelectedBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeSelectedBackgroundBrush()" />*/
	agendaViewAppointmentStartTimeSelectedBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentStartTimeSelectedBackgroundBrush;
			this.___agendaViewAppointmentStartTimeSelectedBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentStartTimeSelectedBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentStartTimeSelectedBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentStartTimeSelectedBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeSelectedBackgroundBrush()" />*/
	,
	___agendaViewStartTimeSelectedTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeSelectedTextBrush()" />*/
	agendaViewAppointmentStartTimeSelectedTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewStartTimeSelectedTextBrush;
			this.___agendaViewStartTimeSelectedTextBrush = value;
			if (oldValue != this.___agendaViewStartTimeSelectedTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedTextBrushPropertyName, oldValue, this.___agendaViewStartTimeSelectedTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewStartTimeSelectedTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeSelectedTextBrush()" />*/
	,
	___agendaViewStartTimeTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeTextBrush()" />*/
	agendaViewAppointmentStartTimeTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewStartTimeTextBrush;
			this.___agendaViewStartTimeTextBrush = value;
			if (oldValue != this.___agendaViewStartTimeTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentStartTimeTextBrushPropertyName, oldValue, this.___agendaViewStartTimeTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewStartTimeTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentStartTimeTextBrush()" />*/
	,
	___agendaViewAppointmentSubjectBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectBackgroundBrush()" />*/
	agendaViewAppointmentSubjectBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSubjectBackgroundBrush;
			this.___agendaViewAppointmentSubjectBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentSubjectBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSubjectBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentSubjectBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSubjectBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectBackgroundBrush()" />*/
	,
	___agendaViewAppointmentSubjectFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectFontInfo()" />*/
	agendaViewAppointmentSubjectFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSubjectFontInfo;
			this.___agendaViewAppointmentSubjectFontInfo = value;
			if (this.___agendaViewAppointmentSubjectFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSubjectFontInfoPropertyName, oldValue, this.___agendaViewAppointmentSubjectFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSubjectFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectFontInfo()" />*/
	,
	___agendaViewAppointmentSubjectSelectedBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectSelectedBackgroundBrush()" />*/
	agendaViewAppointmentSubjectSelectedBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSubjectSelectedBackgroundBrush;
			this.___agendaViewAppointmentSubjectSelectedBackgroundBrush = value;
			if (oldValue != this.___agendaViewAppointmentSubjectSelectedBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrushPropertyName, oldValue, this.___agendaViewAppointmentSubjectSelectedBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSubjectSelectedBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectSelectedBackgroundBrush()" />*/
	,
	___agendaViewAppointmentSubjectSelectedTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectSelectedTextBrush()" />*/
	agendaViewAppointmentSubjectSelectedTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSubjectSelectedTextBrush;
			this.___agendaViewAppointmentSubjectSelectedTextBrush = value;
			if (oldValue != this.___agendaViewAppointmentSubjectSelectedTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedTextBrushPropertyName, oldValue, this.___agendaViewAppointmentSubjectSelectedTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSubjectSelectedTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectSelectedTextBrush()" />*/
	,
	___agendaViewAppointmentSubjectTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectTextBrush()" />*/
	agendaViewAppointmentSubjectTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewAppointmentSubjectTextBrush;
			this.___agendaViewAppointmentSubjectTextBrush = value;
			if (oldValue != this.___agendaViewAppointmentSubjectTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewAppointmentSubjectTextBrushPropertyName, oldValue, this.___agendaViewAppointmentSubjectTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewAppointmentSubjectTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentSubjectTextBrush()" />*/
	,
	___agendaViewBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewBackgroundBrush()" />*/
	agendaViewBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewBackgroundBrush;
			this.___agendaViewBackgroundBrush = value;
			if (oldValue != this.___agendaViewBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewBackgroundBrushPropertyName, oldValue, this.___agendaViewBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewBackgroundBrush()" />*/
	,
	___agendaViewDayHeaderBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderBackgroundBrush()" />*/
	agendaViewDayHeaderBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewDayHeaderBackgroundBrush;
			this.___agendaViewDayHeaderBackgroundBrush = value;
			if (oldValue != this.___agendaViewDayHeaderBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewDayHeaderBackgroundBrushPropertyName, oldValue, this.___agendaViewDayHeaderBackgroundBrush);
			}
			return value;
		} else {
			return this.___agendaViewDayHeaderBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderBackgroundBrush()" />*/
	,
	___agendaViewDayHeaderFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderFontInfo()" />*/
	agendaViewDayHeaderFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewDayHeaderFontInfo;
			this.___agendaViewDayHeaderFontInfo = value;
			if (this.___agendaViewDayHeaderFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewDayHeaderFontInfoPropertyName, oldValue, this.___agendaViewDayHeaderFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewDayHeaderFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderFontInfo()" />*/
	,
	___agendaViewDayHeaderMargin: null,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderMargin()" />*/
	agendaViewDayHeaderMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewDayHeaderMargin;
			this.___agendaViewDayHeaderMargin = value;
			if (oldValue != this.___agendaViewDayHeaderMargin) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewDayHeaderMarginPropertyName, oldValue, this.___agendaViewDayHeaderMargin);
			}
			return value;
		} else {
			return this.___agendaViewDayHeaderMargin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderMargin()" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewDayHeaderMarginImpl()" />*/
	_createDefaultAgendaViewDayHeaderMarginImpl: function () {
		return $.ig.SchedulerDefaultThemeInfo.prototype.thicknessEmptyValue;
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewDayHeaderMarginImpl()" />*/
	,
	___agendaViewDayHeaderSeparatorLineBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderSeparatorLineBrush()" />*/
	agendaViewDayHeaderSeparatorLineBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewDayHeaderSeparatorLineBrush;
			this.___agendaViewDayHeaderSeparatorLineBrush = value;
			if (oldValue != this.___agendaViewDayHeaderSeparatorLineBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewDayHeaderSeparatorLineBrushPropertyName, oldValue, this.___agendaViewDayHeaderSeparatorLineBrush);
			}
			return value;
		} else {
			return this.___agendaViewDayHeaderSeparatorLineBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderSeparatorLineBrush()" />*/
	,
	___agendaViewDayHeaderTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderTextBrush()" />*/
	agendaViewDayHeaderTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewDayHeaderTextBrush;
			this.___agendaViewDayHeaderTextBrush = value;
			if (oldValue != this.___agendaViewDayHeaderTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewDayHeaderTextBrushPropertyName, oldValue, this.___agendaViewDayHeaderTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewDayHeaderTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewDayHeaderTextBrush()" />*/
	,
	___agendaViewInterDaySpacing: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.Scheduler::AgendaViewInterDaySpacing()" />*/
	agendaViewInterDaySpacing: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewInterDaySpacing;
			this.___agendaViewInterDaySpacing = value;
			if (oldValue != this.___agendaViewInterDaySpacing) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewInterDaySpacingPropertyName, oldValue, this.___agendaViewInterDaySpacing);
			}
			return value;
		} else {
			return this.___agendaViewInterDaySpacing;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.Scheduler::AgendaViewInterDaySpacing()" />*/
	,
	___agendaViewMaximumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::AgendaViewMaximumDate()" />*/
	agendaViewMaximumDate: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewMaximumDate;
			this.___agendaViewMaximumDate = value;
			if (+oldValue != +(this.___agendaViewMaximumDate)) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewMaximumDatePropertyName, oldValue, this.___minimumDate);
			}
			return value;
		} else {
			return this.___agendaViewMaximumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::AgendaViewMaximumDate()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewMaximumDate()" />*/
	_createDefaultAgendaViewMaximumDate: function () {
		return $.ig.Scheduler.prototype._createDefaultMaximumDate();
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewMaximumDate()" />*/
	,
	___agendaViewMessageFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewMessageFontInfo()" />*/
	agendaViewMessageFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewMessageFontInfo;
			this.___agendaViewMessageFontInfo = value;
			if (this.___agendaViewMessageFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewMessageFontInfoPropertyName, oldValue, this.___agendaViewMessageFontInfo);
			}
			return value;
		} else {
			return this.___agendaViewMessageFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::AgendaViewMessageFontInfo()" />*/
	,
	___agendaViewMessageTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewMessageTextBrush()" />*/
	agendaViewMessageTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewMessageTextBrush;
			this.___agendaViewMessageTextBrush = value;
			if (oldValue != this.___agendaViewMessageTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewMessageTextBrushPropertyName, oldValue, this.___agendaViewMessageTextBrush);
			}
			return value;
		} else {
			return this.___agendaViewMessageTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::AgendaViewMessageTextBrush()" />*/
	,
	___agendaViewMinimumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::AgendaViewMinimumDate()" />*/
	agendaViewMinimumDate: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___agendaViewMinimumDate;
			this.___agendaViewMinimumDate = value;
			if (+oldValue != +(this.___agendaViewMinimumDate)) {
				this._onPropertyChanged($.ig.Scheduler.prototype._agendaViewMinimumDatePropertyName, oldValue, this.___minimumDate);
			}
			return value;
		} else {
			return this.___agendaViewMinimumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::AgendaViewMinimumDate()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewMinimumDate()" />*/
	_createDefaultAgendaViewMinimumDate: function () {
		return $.ig.Scheduler.prototype._createDefaultMinimumDate();
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultAgendaViewMinimumDate()" />*/
	,
	___dataSource: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.Core.Scheduler::DataSource()" />*/
	dataSource: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___dataSource;
			this.___dataSource = value;
			if (oldValue != this.___dataSource) {
				this._onPropertyChanged($.ig.Scheduler.prototype._dataSourcePropertyName, oldValue, this.___dataSource);
			}
			return value;
		} else {
			return this.___dataSource;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.Core.Scheduler::DataSource()" />*/
	,
	___maximumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::MaximumDate()" />*/
	maximumDate: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___maximumDate;
			this.___maximumDate = value;
			if (+oldValue != +(this.___maximumDate)) {
				this._onPropertyChanged($.ig.Scheduler.prototype._maximumDatePropertyName, oldValue, this.___maximumDate);
			}
			return value;
		} else {
			return this.___maximumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::MaximumDate()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultMaximumDate()" />*/
	_createDefaultMaximumDate: function () {
		var now = $.ig.Date.prototype.now();
		return $.ig.Date.prototype.fromValues(now.getFullYear() + 5, $.ig.Date.prototype.getMonth(now), now.getDate(), 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultMaximumDate()" />*/
	,
	___minimumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::MinimumDate()" />*/
	minimumDate: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___minimumDate;
			this.___minimumDate = value;
			if (+oldValue != +(this.___minimumDate)) {
				this._onPropertyChanged($.ig.Scheduler.prototype._minimumDatePropertyName, oldValue, this.___minimumDate);
			}
			return value;
		} else {
			return this.___minimumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::MinimumDate()" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultMinimumDate()" />*/
	_createDefaultMinimumDate: function () {
		var now = $.ig.Date.prototype.now();
		return $.ig.Date.prototype.fromValues(now.getFullYear() - 5, $.ig.Date.prototype.getMonth(now), now.getDate(), 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::CreateDefaultMinimumDate()" />*/
	,
	___monthViewDayActivityIndicatorBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayActivityIndicatorBrush()" />*/
	monthViewDayActivityIndicatorBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayActivityIndicatorBrush;
			this.___monthViewDayActivityIndicatorBrush = value;
			if (oldValue != this.___monthViewDayActivityIndicatorBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayActivityIndicatorBrushPropertyName, oldValue, this.___monthViewDayActivityIndicatorBrush);
			}
			return value;
		} else {
			return this.___monthViewDayActivityIndicatorBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayActivityIndicatorBrush()" />*/
	,
	___monthViewAgendaVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewAgendaVisibility()" />*/
	monthViewAgendaVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewAgendaVisibility;
			this.___monthViewAgendaVisibility = value;
			if (oldValue != this.___monthViewAgendaVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewAgendaVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewAgendaVisibility));
			}
			return value;
		} else {
			return this.___monthViewAgendaVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewAgendaVisibility()" />*/
	,
	___monthViewAppointmentFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewAppointmentFontInfo()" />*/
	monthViewAppointmentFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewAppointmentFontInfo;
			this.___monthViewAppointmentFontInfo = value;
			if (this.___monthViewAppointmentFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewAppointmentFontInfoPropertyName, oldValue, this.___monthViewAppointmentFontInfo);
			}
			return value;
		} else {
			return this.___monthViewAppointmentFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewAppointmentFontInfo()" />*/
	,
	___monthViewBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewBackgroundBrush()" />*/
	monthViewBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewBackgroundBrush;
			this.___monthViewBackgroundBrush = value;
			if (oldValue != this.___monthViewBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewBackgroundBrushPropertyName, oldValue, this.___monthViewBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewBackgroundBrush()" />*/
	,
	___monthViewDayContentDisplayMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.MonthViewDayContentDisplayMode Infragistics.Scheduler.Core.Scheduler::MonthViewDayContentDisplayMode()" />*/
	monthViewDayContentDisplayMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayContentDisplayMode;
			this.___monthViewDayContentDisplayMode = value;
			if (oldValue != this.___monthViewDayContentDisplayMode) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayContentDisplayModePropertyName, $.ig.scheduler.MonthViewDayContentDisplayMode.prototype.getBox(oldValue), $.ig.scheduler.MonthViewDayContentDisplayMode.prototype.getBox(this.___monthViewDayContentDisplayMode));
			}
			return value;
		} else {
			return this.___monthViewDayContentDisplayMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.MonthViewDayContentDisplayMode Infragistics.Scheduler.Core.Scheduler::MonthViewDayContentDisplayMode()" />*/
	,
	___monthViewDayBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayBackgroundBrush()" />*/
	monthViewDayBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayBackgroundBrush;
			this.___monthViewDayBackgroundBrush = value;
			if (oldValue != this.___monthViewDayBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayBackgroundBrushPropertyName, oldValue, this.___monthViewDayBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewDayBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayBackgroundBrush()" />*/
	,
	___monthViewDayFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewDayFontInfo()" />*/
	monthViewDayFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayFontInfo;
			this.___monthViewDayFontInfo = value;
			if (this.___monthViewDayFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayFontInfoPropertyName, oldValue, this.___monthViewDayFontInfo);
			}
			return value;
		} else {
			return this.___monthViewDayFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewDayFontInfo()" />*/
	,
	___monthViewDayTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayTextBrush()" />*/
	monthViewDayTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayTextBrush;
			this.___monthViewDayTextBrush = value;
			if (oldValue != this.___monthViewDayTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayTextBrushPropertyName, oldValue, this.___monthViewDayTextBrush);
			}
			return value;
		} else {
			return this.___monthViewDayTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayTextBrush()" />*/
	,
	___monthViewDayOfWeekHeaderBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderBackgroundBrush()" />*/
	monthViewDayOfWeekHeaderBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayOfWeekHeaderBackgroundBrush;
			this.___monthViewDayOfWeekHeaderBackgroundBrush = value;
			if (oldValue != this.___monthViewDayOfWeekHeaderBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayOfWeekHeaderBackgroundBrushPropertyName, oldValue, this.___monthViewDayOfWeekHeaderBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewDayOfWeekHeaderBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderBackgroundBrush()" />*/
	,
	___monthViewDayOfWeekHeaderFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderFontInfo()" />*/
	monthViewDayOfWeekHeaderFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayOfWeekHeaderFontInfo;
			this.___monthViewDayOfWeekHeaderFontInfo = value;
			if (this.___monthViewDayOfWeekHeaderFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayOfWeekHeaderFontInfoPropertyName, oldValue, this.___monthViewDayOfWeekHeaderFontInfo);
			}
			return value;
		} else {
			return this.___monthViewDayOfWeekHeaderFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderFontInfo()" />*/
	,
	___monthViewDayOfWeekHeaderMargin: null,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderMargin()" />*/
	monthViewDayOfWeekHeaderMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayOfWeekHeaderMargin;
			this.___monthViewDayOfWeekHeaderMargin = value;
			if (oldValue != this.___monthViewDayOfWeekHeaderMargin) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayOfWeekHeaderMarginPropertyName, oldValue, this.___monthViewDayOfWeekHeaderMargin);
			}
			return value;
		} else {
			return this.___monthViewDayOfWeekHeaderMargin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderMargin()" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultMonthViewDayOfWeekHeaderMarginImpl()" />*/
	_createDefaultMonthViewDayOfWeekHeaderMarginImpl: function () {
		return $.ig.SchedulerDefaultThemeInfo.prototype.thicknessEmptyValue;
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultMonthViewDayOfWeekHeaderMarginImpl()" />*/
	,
	___monthViewDayOfWeekHeaderTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderTextBrush()" />*/
	monthViewDayOfWeekHeaderTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayOfWeekHeaderTextBrush;
			this.___monthViewDayOfWeekHeaderTextBrush = value;
			if (oldValue != this.___monthViewDayOfWeekHeaderTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayOfWeekHeaderTextBrushPropertyName, oldValue, this.___monthViewDayOfWeekHeaderTextBrush);
			}
			return value;
		} else {
			return this.___monthViewDayOfWeekHeaderTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderTextBrush()" />*/
	,
	___monthViewDayOfWeekHeaderVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderVisibility()" />*/
	monthViewDayOfWeekHeaderVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewDayOfWeekHeaderVisibility;
			this.___monthViewDayOfWeekHeaderVisibility = value;
			if (oldValue != this.___monthViewDayOfWeekHeaderVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewDayOfWeekHeaderVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewDayOfWeekHeaderVisibility));
			}
			return value;
		} else {
			return this.___monthViewDayOfWeekHeaderVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewDayOfWeekHeaderVisibility()" />*/
	,
	___monthViewHorizontalSeparatorVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewHorizontalSeparatorVisibility()" />*/
	monthViewHorizontalSeparatorVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewHorizontalSeparatorVisibility;
			this.___monthViewHorizontalSeparatorVisibility = value;
			if (oldValue != this.___monthViewHorizontalSeparatorVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewHorizontalSeparatorVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewHorizontalSeparatorVisibility));
			}
			return value;
		} else {
			return this.___monthViewHorizontalSeparatorVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewHorizontalSeparatorVisibility()" />*/
	,
	___monthViewInterMonthSpacing: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.Scheduler::MonthViewInterMonthSpacing()" />*/
	monthViewInterMonthSpacing: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewInterMonthSpacing;
			this.___monthViewInterMonthSpacing = value;
			if (oldValue != this.___monthViewInterMonthSpacing) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewInterMonthSpacingPropertyName, oldValue, this.___monthViewInterMonthSpacing);
			}
			return value;
		} else {
			return this.___monthViewInterMonthSpacing;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.Scheduler::MonthViewInterMonthSpacing()" />*/
	,
	___monthViewLeadingDayBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayBackgroundBrush()" />*/
	monthViewLeadingDayBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewLeadingDayBackgroundBrush;
			this.___monthViewLeadingDayBackgroundBrush = value;
			if (oldValue != this.___monthViewLeadingDayBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewLeadingDayBackgroundBrushPropertyName, oldValue, this.___monthViewLeadingDayBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewLeadingDayBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayBackgroundBrush()" />*/
	,
	___monthViewLeadingDayFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayFontInfo()" />*/
	monthViewLeadingDayFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewLeadingDayFontInfo;
			this.___monthViewLeadingDayFontInfo = value;
			if (this.___monthViewLeadingDayFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewLeadingDayFontInfoPropertyName, oldValue, this.___monthViewLeadingDayFontInfo);
			}
			return value;
		} else {
			return this.___monthViewLeadingDayFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayFontInfo()" />*/
	,
	___monthViewLeadingDayTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayTextBrush()" />*/
	monthViewLeadingDayTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewLeadingDayTextBrush;
			this.___monthViewLeadingDayTextBrush = value;
			if (oldValue != this.___monthViewLeadingDayTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewLeadingDayTextBrushPropertyName, oldValue, this.___monthViewLeadingDayTextBrush);
			}
			return value;
		} else {
			return this.___monthViewLeadingDayTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayTextBrush()" />*/
	,
	___monthViewLeadingDayVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayVisibility()" />*/
	monthViewLeadingDayVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewLeadingDayVisibility;
			this.___monthViewLeadingDayVisibility = value;
			if (oldValue != this.___monthViewLeadingDayVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewLeadingDayVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewLeadingDayVisibility));
			}
			return value;
		} else {
			return this.___monthViewLeadingDayVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewLeadingDayVisibility()" />*/
	,
	___monthViewNameBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameBackgroundBrush()" />*/
	monthViewNameBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameBackgroundBrush;
			this.___monthViewNameBackgroundBrush = value;
			if (oldValue != this.___monthViewNameBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameBackgroundBrushPropertyName, oldValue, this.___monthViewNameBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewNameBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameBackgroundBrush()" />*/
	,
	___monthViewNameSeparatorLineBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameSeparatorLineBrush()" />*/
	monthViewNameSeparatorLineBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameSeparatorLineBrush;
			this.___monthViewNameSeparatorLineBrush = value;
			if (oldValue != this.___monthViewNameSeparatorLineBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameSeparatorLineBrushPropertyName, oldValue, this.___monthViewNameSeparatorLineBrush);
			}
			return value;
		} else {
			return this.___monthViewNameSeparatorLineBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameSeparatorLineBrush()" />*/
	,
	___monthViewNameTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameTextBrush()" />*/
	monthViewNameTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameTextBrush;
			this.___monthViewNameTextBrush = value;
			if (oldValue != this.___monthViewNameTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameTextBrushPropertyName, oldValue, this.___monthViewNameTextBrush);
			}
			return value;
		} else {
			return this.___monthViewNameTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewNameTextBrush()" />*/
	,
	___monthViewNameFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewNameFontInfo()" />*/
	monthViewNameFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameFontInfo;
			this.___monthViewNameFontInfo = value;
			if (this.___monthViewNameFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameFontInfoPropertyName, oldValue, this.___monthViewNameFontInfo);
			}
			return value;
		} else {
			return this.___monthViewNameFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewNameFontInfo()" />*/
	,
	___monthViewNameMargin: null,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::MonthViewNameMargin()" />*/
	monthViewNameMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameMargin;
			this.___monthViewNameMargin = value;
			if (oldValue != this.___monthViewNameMargin) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameMarginPropertyName, oldValue, this.___monthViewNameMargin);
			}
			return value;
		} else {
			return this.___monthViewNameMargin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::MonthViewNameMargin()" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultMonthViewNameMarginImpl()" />*/
	_createDefaultMonthViewNameMarginImpl: function () {
		return $.ig.SchedulerDefaultThemeInfo.prototype.thicknessEmptyValue;
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Scheduler::CreateDefaultMonthViewNameMarginImpl()" />*/
	,
	___monthViewNameVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewNameVisibility()" />*/
	monthViewNameVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewNameVisibility;
			this.___monthViewNameVisibility = value;
			if (oldValue != this.___monthViewNameVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewNameVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewNameVisibility));
			}
			return value;
		} else {
			return this.___monthViewNameVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewNameVisibility()" />*/
	,
	___monthViewScrollDirection: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.Scheduler::MonthViewScrollDirection()" />*/
	monthViewScrollDirection: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewScrollDirection;
			this.___monthViewScrollDirection = value;
			if (oldValue != this.___monthViewScrollDirection) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewScrollDirectionPropertyName, $.ig.scheduler.SchedulerViewScrollDirection.prototype.getBox(oldValue), $.ig.scheduler.SchedulerViewMode.prototype.getBox(this.___viewMode));
			}
			return value;
		} else {
			return this.___monthViewScrollDirection;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.Scheduler::MonthViewScrollDirection()" />*/
	,
	___monthViewScrollMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.MonthViewScrollMode Infragistics.Scheduler.Core.Scheduler::MonthViewScrollMode()" />*/
	_monthViewScrollMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewScrollMode;
			this.___monthViewScrollMode = value;
			if (oldValue != this.___monthViewScrollMode) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewScrollModePropertyName, $.ig.MonthViewScrollMode.prototype.getBox(oldValue), $.ig.scheduler.SchedulerViewMode.prototype.getBox(this.___viewMode));
			}
			return value;
		} else {
			return this.___monthViewScrollMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.MonthViewScrollMode Infragistics.Scheduler.Core.Scheduler::MonthViewScrollMode()" />*/
	,
	___monthViewSelectedDayBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSelectedDayBackgroundBrush()" />*/
	monthViewSelectedDayBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewSelectedDayBackgroundBrush;
			this.___monthViewSelectedDayBackgroundBrush = value;
			if (oldValue != this.___monthViewSelectedDayBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewSelectedDayBackgroundBrushPropertyName, oldValue, this.___monthViewSelectedDayBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewSelectedDayBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSelectedDayBackgroundBrush()" />*/
	,
	___monthViewSelectedDayTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSelectedDayTextBrush()" />*/
	monthViewSelectedDayTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewSelectedDayTextBrush;
			this.___monthViewSelectedDayTextBrush = value;
			if (oldValue != this.___monthViewSelectedDayTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewSelectedDayTextBrushPropertyName, oldValue, this.___monthViewSelectedDayTextBrush);
			}
			return value;
		} else {
			return this.___monthViewSelectedDayTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSelectedDayTextBrush()" />*/
	,
	___monthViewSeparatorLineBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSeparatorLineBrush()" />*/
	monthViewSeparatorLineBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewSeparatorLineBrush;
			this.___monthViewSeparatorLineBrush = value;
			if (oldValue != this.___monthViewSeparatorLineBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewSeparatorLineBrushPropertyName, oldValue, this.___monthViewSeparatorLineBrush);
			}
			return value;
		} else {
			return this.___monthViewSeparatorLineBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewSeparatorLineBrush()" />*/
	,
	___monthViewTodayHighlightBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTodayHighlightBrush()" />*/
	monthViewTodayHighlightBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTodayHighlightBrush;
			this.___monthViewTodayHighlightBrush = value;
			if (oldValue != this.___monthViewTodayHighlightBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTodayHighlightBrushPropertyName, oldValue, this.___monthViewTodayHighlightBrush);
			}
			return value;
		} else {
			return this.___monthViewTodayHighlightBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTodayHighlightBrush()" />*/
	,
	___monthViewTodayTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTodayTextBrush()" />*/
	monthViewTodayTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTodayTextBrush;
			this.___monthViewTodayTextBrush = value;
			if (oldValue != this.___monthViewTodayTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTodayTextBrushPropertyName, oldValue, this.___monthViewTodayTextBrush);
			}
			return value;
		} else {
			return this.___monthViewTodayTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTodayTextBrush()" />*/
	,
	___monthViewTrailingDayBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayBackgroundBrush()" />*/
	monthViewTrailingDayBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTrailingDayBackgroundBrush;
			this.___monthViewTrailingDayBackgroundBrush = value;
			if (oldValue != this.___monthViewTrailingDayBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTrailingDayBackgroundBrushPropertyName, oldValue, this.___monthViewTrailingDayBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewTrailingDayBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayBackgroundBrush()" />*/
	,
	___monthViewTrailingDayFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayFontInfo()" />*/
	monthViewTrailingDayFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTrailingDayFontInfo;
			this.___monthViewTrailingDayFontInfo = value;
			if (this.___monthViewTrailingDayFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTrailingDayFontInfoPropertyName, oldValue, this.___monthViewTrailingDayFontInfo);
			}
			return value;
		} else {
			return this.___monthViewTrailingDayFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayFontInfo()" />*/
	,
	___monthViewTrailingDayTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayTextBrush()" />*/
	monthViewTrailingDayTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTrailingDayTextBrush;
			this.___monthViewTrailingDayTextBrush = value;
			if (oldValue != this.___monthViewTrailingDayTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTrailingDayTextBrushPropertyName, oldValue, this.___monthViewTrailingDayTextBrush);
			}
			return value;
		} else {
			return this.___monthViewTrailingDayTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayTextBrush()" />*/
	,
	___monthViewTrailingDayVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayVisibility()" />*/
	monthViewTrailingDayVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewTrailingDayVisibility;
			this.___monthViewTrailingDayVisibility = value;
			if (oldValue != this.___monthViewTrailingDayVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewTrailingDayVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewTrailingDayVisibility));
			}
			return value;
		} else {
			return this.___monthViewTrailingDayVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewTrailingDayVisibility()" />*/
	,
	___monthViewVerticalSeparatorVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewVerticalSeparatorVisibility()" />*/
	monthViewVerticalSeparatorVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewVerticalSeparatorVisibility;
			this.___monthViewVerticalSeparatorVisibility = value;
			if (oldValue != this.___monthViewVerticalSeparatorVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewVerticalSeparatorVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewVerticalSeparatorVisibility));
			}
			return value;
		} else {
			return this.___monthViewVerticalSeparatorVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewVerticalSeparatorVisibility()" />*/
	,
	___monthViewWeekNumberBackgroundBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberBackgroundBrush()" />*/
	monthViewWeekNumberBackgroundBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewWeekNumberBackgroundBrush;
			this.___monthViewWeekNumberBackgroundBrush = value;
			if (oldValue != this.___monthViewWeekNumberBackgroundBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewWeekNumberBackgroundBrushPropertyName, oldValue, this.___monthViewWeekNumberBackgroundBrush);
			}
			return value;
		} else {
			return this.___monthViewWeekNumberBackgroundBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberBackgroundBrush()" />*/
	,
	___monthViewWeekNumberFontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberFontInfo()" />*/
	monthViewWeekNumberFontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewWeekNumberFontInfo;
			this.___monthViewWeekNumberFontInfo = value;
			if (this.___monthViewWeekNumberFontInfo != oldValue) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewWeekNumberFontInfoPropertyName, oldValue, this.___monthViewWeekNumberFontInfo);
			}
			return value;
		} else {
			return this.___monthViewWeekNumberFontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberFontInfo()" />*/
	,
	___monthViewWeekNumberTextBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberTextBrush()" />*/
	monthViewWeekNumberTextBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewWeekNumberTextBrush;
			this.___monthViewWeekNumberTextBrush = value;
			if (oldValue != this.___monthViewWeekNumberTextBrush) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewWeekNumberTextBrushPropertyName, oldValue, this.___monthViewWeekNumberTextBrush);
			}
			return value;
		} else {
			return this.___monthViewWeekNumberTextBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberTextBrush()" />*/
	,
	___monthViewWeekNumberVisibility: 0,
	/*<BeginProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberVisibility()" />*/
	monthViewWeekNumberVisibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___monthViewWeekNumberVisibility;
			this.___monthViewWeekNumberVisibility = value;
			if (oldValue != this.___monthViewWeekNumberVisibility) {
				this._onPropertyChanged($.ig.Scheduler.prototype._monthViewWeekNumberVisibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(this.___monthViewWeekNumberVisibility));
			}
			return value;
		} else {
			return this.___monthViewWeekNumberVisibility;
		}
	}
	/*<EndProperty Name="System.Windows.Visibility Infragistics.Scheduler.Core.Scheduler::MonthViewWeekNumberVisibility()" />*/
	,
	___selectedAppointment: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.Scheduler::SelectedAppointment()" />*/
	selectedAppointment: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___selectedAppointment;
			this.___selectedAppointment = value;
			if (oldValue != this.___selectedAppointment) {
				this._onPropertyChanged($.ig.Scheduler.prototype._selectedAppointmentPropertyName, oldValue, this.___selectedAppointment);
			}
			return value;
		} else {
			return this.___selectedAppointment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.Scheduler::SelectedAppointment()" />*/
	,
	___selectedDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::SelectedDate()" />*/
	selectedDate: function (value) {
		if (arguments.length === 1) {
			if (+value == +null) {
				value = $.ig.Date.prototype.now();
			} else {
				value = $.ig.Date.prototype.fromTicks(value.getTime());
			}
			if (false == this._getIsDateWithinMinMaxDateRange(value)) {
				var min = this.minimumDate();
				var max = this.maximumDate();
				if (min > max) {
					var hold = max;
					max = min;
					min = hold;
				}
				if (value < min) {
					value = $.ig.Date.prototype.fromTicks(min.getTime());
				} else {
					value = $.ig.Date.prototype.fromTicks(max.getTime());
				}
				var oldVal = this.___selectedDate;
				this.___selectedDate = value;
				this._onPropertyChanged($.ig.Scheduler.prototype._selectedDatePropertyName, oldVal, this.___selectedDate);
				return;
			}
			var oldValue = this.___selectedDate;
			this.___selectedDate = value;
			if (+oldValue != +(this.___selectedDate)) {
				this._onPropertyChanged($.ig.Scheduler.prototype._selectedDatePropertyName, oldValue, this.___selectedDate);
			}
			return value;
		} else {
			return this.___selectedDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::SelectedDate()" />*/
	,
	___viewSplitOrientation: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientation Infragistics.Scheduler.Core.Scheduler::ViewSplitOrientation()" />*/
	viewSplitOrientation: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___viewSplitOrientation;
			this.___viewSplitOrientation = value;
			if (oldValue != this.___viewSplitOrientation) {
				this._onPropertyChanged($.ig.Scheduler.prototype._viewSplitOrientationPropertyName, $.ig.scheduler.SchedulerViewSplitOrientation.prototype.getBox(oldValue), $.ig.scheduler.SchedulerViewMode.prototype.getBox(this.___viewMode));
			}
			return value;
		} else {
			return this.___viewSplitOrientation;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientation Infragistics.Scheduler.Core.Scheduler::ViewSplitOrientation()" />*/
	,
	___viewSplitOrientationMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientationMode Infragistics.Scheduler.Core.Scheduler::ViewSplitOrientationMode()" />*/
	viewSplitOrientationMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___viewSplitOrientationMode;
			this.___viewSplitOrientationMode = value;
			if (oldValue != this.___viewSplitOrientationMode) {
				this._onPropertyChanged($.ig.Scheduler.prototype._viewSplitOrientationModePropertyName, $.ig.scheduler.SchedulerViewSplitOrientationMode.prototype.getBox(oldValue), $.ig.scheduler.SchedulerViewMode.prototype.getBox(this.___viewMode));
			}
			return value;
		} else {
			return this.___viewSplitOrientationMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewSplitOrientationMode Infragistics.Scheduler.Core.Scheduler::ViewSplitOrientationMode()" />*/
	,
	___viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.Scheduler::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.___viewMode;
			this.___viewMode = value;
			if (oldValue != this.___viewMode) {
				this._onPropertyChanged($.ig.Scheduler.prototype._viewModePropertyName, $.ig.scheduler.SchedulerViewMode.prototype.getBox(oldValue), $.ig.scheduler.SchedulerViewMode.prototype.getBox(this.___viewMode));
			}
			return value;
		} else {
			return this.___viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.Scheduler::ViewMode()" />*/
	,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.Scheduler::AgendaViewDateRangeResolved()" />*/
	_agendaViewDateRangeResolved: function () {
		if (this.agendaViewAppointmentScope() == $.ig.scheduler.AgendaViewAppointmentScope.allAppointments) {
			return new $.ig.scheduler.DateTimeRange(this.agendaViewMinimumDate(), this.agendaViewMaximumDate());
		} else if (+(this.selectedDate()) != +null) {
			return new $.ig.scheduler.DateTimeRange($.ig.Utilities.prototype.startOfDayFromDate(this.selectedDate()), $.ig.Utilities.prototype.endOfDayFromDate(this.selectedDate()));
		} else {
			return new $.ig.scheduler.DateTimeRange(this.agendaViewMinimumDate(), this.agendaViewMaximumDate());
		}
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.Scheduler::AgendaViewDateRangeResolved()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.Scheduler::CultureNameInternal()" />*/
	_cultureNameInternal: function () {
		return this.cultureName();
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.Scheduler::CultureNameInternal()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.Scheduler::DateTimeFormatProvider()" />*/
	_dateTimeFormatProvider: function (value) {
		if (arguments.length === 1) {
			if (value != this.___dateTimeFormatProvider) {
				this.___dateTimeFormatProvider = value;
				this._syncDataSourceDateTimeFormatProvider();
			}
			return value;
		} else {
			if (this.___dateTimeFormatProvider == null) {
				this.___dateTimeFormatProvider = $.ig.DateTimeFormatProvider.prototype.create(this._cultureNameInternal());
				this._syncDataSourceDateTimeFormatProvider();
			}
			return this.___dateTimeFormatProvider;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.Scheduler::DateTimeFormatProvider()" />*/
	,
	__isClickActionDesired: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsClickActionDesired()" />*/
	_isClickActionDesired: function (value) {
		if (arguments.length === 1) {
			this.__isClickActionDesired = value;
			return value;
		} else {
			return this.__isClickActionDesired;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsClickActionDesired()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsDisplayingMonthViewAndAgendaView()" />*/
	_isDisplayingMonthViewAndAgendaView: function () {
		return this._viewModeManager().getIsPrimaryViewMode($.ig.scheduler.SchedulerViewMode.monthView) && this._viewModeManager().getIsSecondaryViewMode($.ig.scheduler.SchedulerViewMode.agendaView);
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsDisplayingMonthViewAndAgendaView()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsNativeViewAvailable()" />*/
	_isNativeViewAvailable: function () {
		return null != this._nativeView();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsNativeViewAvailable()" />*/
	,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.Scheduler::MinMaxDateResolved()" />*/
	_minMaxDateResolved: function () {
		return new $.ig.scheduler.DateTimeRange(this.minimumDate(), this.maximumDate());
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.Scheduler::MinMaxDateResolved()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelFactories Infragistics.Scheduler.Core.Scheduler::ModelFactories()" />*/
	_modelFactories: function () {
		if (null == this.___modelFactories) {
			this.___modelFactories = new $.ig.ModelFactories();
			this.___modelFactories.registerModelFactory(new $.ig.MonthNameModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.DayOfWeekHeaderModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.TimeSlotModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.ShapeModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.TextModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.MonthWeekNumberModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.AgendaDayHeaderModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.AgendaApptStartTimeModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.AgendaApptEndTimeModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.AgendaApptSubjectModelFactory(), false);
			this.___modelFactories.registerModelFactory(new $.ig.AgendaApptLocationModelFactory(), false);
		}
		return this.___modelFactories;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelFactories Infragistics.Scheduler.Core.Scheduler::ModelFactories()" />*/
	,
	__nativeView: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.INativeSchedulerView Infragistics.Scheduler.Core.Scheduler::NativeView()" />*/
	_nativeView: function (value) {
		if (arguments.length === 1) {
			this.__nativeView = value;
			return value;
		} else {
			return this.__nativeView;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.INativeSchedulerView Infragistics.Scheduler.Core.Scheduler::NativeView()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.INativeSchedulerView Infragistics.Scheduler.Core.Scheduler::NativeViewResolved()" />*/
	_nativeViewResolved: function () {
		return this._nativeView() || $.ig.NativeSchedulerViewDummy.prototype.instance();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.INativeSchedulerView Infragistics.Scheduler.Core.Scheduler::NativeViewResolved()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::PendingMonthViewScrollToDate()" />*/
	_pendingMonthViewScrollToDate: function () {
		return this.___pendingMonthViewScrollToDate;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::PendingMonthViewScrollToDate()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewModeManager Infragistics.Scheduler.Core.Scheduler::ViewModeManager()" />*/
	_viewModeManager: function () {
		return this.___viewModeManager;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewModeManager Infragistics.Scheduler.Core.Scheduler::ViewModeManager()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentInfos()" />*/
	_agendaViewAppointmentInfos: function () {
		if (this._viewModeManager().containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
			var visualModel = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, this._viewModeManager().getViewModeInfo($.ig.scheduler.SchedulerViewMode.agendaView).visualModel());
			return visualModel.agendaInfo().getAppointmentInfos();
		}
		return new $.ig.List$1($.ig.AgendaViewAppointmentInfo.prototype.$type, 0);
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Scheduler::AgendaViewAppointmentInfos()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsLayoutEngineSet()" />*/
	_isLayoutEngineSet: function () {
		var layoutEngine = this._getLayoutEngine(this.viewMode());
		return null != layoutEngine;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::IsLayoutEngineSet()" />*/
	,
	/*<BeginProperty Name=" Infragistics.Scheduler.Core.Scheduler::RoleNames()" />*/
	_roleNames: function () {
		if (null == this.___roleNames) {
			this.___roleNames = $.ig.Enum.prototype.getNames($.ig.scheduler.SchedulerElementRole.prototype.$type);
		}
		return this.___roleNames;
	}
	/*<EndProperty Name=" Infragistics.Scheduler.Core.Scheduler::RoleNames()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureDayVisibleInMonthView(System.DateTime, System.Boolean)" />*/
	ensureDayVisibleInMonthView: function (date, animated) {
		if (+date == +null) {
			return false;
		}
		if (this._monthViewScrollMode() == $.ig.MonthViewScrollMode.prototype.paged) {
			return this.ensureMonthVisibleInMonthView(date, animated);
		}
		var viewMode = $.ig.scheduler.SchedulerViewMode.monthView;
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return false;
		}
		var visualModel = $.ig.util.cast($.ig.VisualModelMonthView.prototype.$type, viewModeInfo.visualModel());
		if (null == visualModel) {
			return false;
		}
		if (false == this._getIsMonthWithinMinMaxDateRange(visualModel, date)) {
			return false;
		}
		var scrollOffset = visualModel.getScrollOffsetOfDate(this.monthViewScrollDirection(), date);
		if (this.monthViewScrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			if (scrollOffset.__y < visualModel.actualVisibleTop()) {
				this._nativeView().scrollViewTo(viewMode, $.ig.truncate(scrollOffset.__x), $.ig.truncate(scrollOffset.__y), animated);
			} else {
				if (scrollOffset.__y > (visualModel.actualVisibleBottom() - visualModel.monthInfo().daySize().height())) {
					var newY = scrollOffset.__y - visualModel.actualVisibleHeight() + visualModel.monthInfo().daySize().height();
					this._nativeView().scrollViewTo(viewMode, $.ig.truncate(scrollOffset.__x), $.ig.truncate(newY), animated);
				}
			}
		} else {
			if (scrollOffset.__x < visualModel.actualVisibleLeft()) {
				this._nativeView().scrollViewTo(viewMode, $.ig.truncate(scrollOffset.__x), $.ig.truncate(scrollOffset.__y), animated);
			} else if (scrollOffset.__x > (visualModel.actualVisibleRight() - visualModel.monthInfo().daySize().width())) {
				var newX = scrollOffset.__x - visualModel.actualVisibleWidth() + visualModel.monthInfo().daySize().width();
				this._nativeView().scrollViewTo(viewMode, $.ig.truncate(newX), $.ig.truncate(scrollOffset.__y), animated);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureDayVisibleInMonthView(System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureDayVisibleInAgendaView(System.DateTime, System.Boolean, System.Boolean)" />*/
	ensureDayVisibleInAgendaView: function (date, animated, scrollDayToTop) {
		if (+date == +null) {
			return false;
		}
		var viewMode = $.ig.scheduler.SchedulerViewMode.agendaView;
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return false;
		}
		var visualModel = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, viewModeInfo.visualModel());
		if (null == visualModel) {
			return false;
		}
		if (false == this._agendaViewDateRangeResolved().contains(date)) {
			return false;
		}
		var scrollOffsetOfDay = visualModel.agendaInfo().getScrollOffsetOfDay(date);
		if (scrollDayToTop) {
			this._nativeView().scrollViewTo(viewMode, 0, scrollOffsetOfDay, animated);
		} else {
			if (scrollOffsetOfDay < visualModel.actualVisibleTop()) {
				this._nativeView().scrollViewTo(viewMode, 0, scrollOffsetOfDay, animated);
			} else {
				var dayMetrics = visualModel.agendaInfo().getDayMetrics(date);
				var dayScrollOffsetBottom = scrollOffsetOfDay + dayMetrics.scrollExtent();
				if (dayScrollOffsetBottom > visualModel.actualVisibleBottom()) {
					this._nativeView().scrollViewTo(viewMode, 0, dayScrollOffsetBottom - $.ig.truncate(visualModel.actualVisibleHeight()), animated);
				}
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureDayVisibleInAgendaView(System.DateTime, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureMonthVisibleInMonthView(System.DateTime, System.Boolean)" />*/
	ensureMonthVisibleInMonthView: function (date, animated) {
		if (+date == +null) {
			return false;
		}
		var viewMode = $.ig.scheduler.SchedulerViewMode.monthView;
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return false;
		}
		var visualModel = $.ig.util.cast($.ig.VisualModelMonthView.prototype.$type, viewModeInfo.visualModel());
		if (null == visualModel) {
			return false;
		}
		if (false == this._getIsMonthWithinMinMaxDateRange(visualModel, date)) {
			return false;
		}
		var scrollOffset = visualModel.getScrollOffsetOfMonthContainingDate(this.monthViewScrollDirection(), date);
		this._nativeView().scrollViewTo(viewMode, $.ig.truncate(scrollOffset.__x), $.ig.truncate(scrollOffset.__y), animated);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureMonthVisibleInMonthView(System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.Scheduler::ExportVisualModel()" />*/
	exportVisualModel: function () {
		return this.exportVisualModel1(this.viewMode());
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.Scheduler::ExportVisualModel()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.Scheduler::ExportVisualModel(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	exportVisualModel1: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return null;
		}
		return viewModeInfo.visualModel().$export();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.Scheduler::ExportVisualModel(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Scheduler::ExportVisualModelSerialized()" />*/
	exportVisualModelSerialized: function () {
		return this.exportVisualModelSerialized1(this.viewMode());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Scheduler::ExportVisualModelSerialized()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Scheduler::ExportVisualModelSerialized(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	exportVisualModelSerialized1: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return String.empty();
		}
		var $export = viewModeInfo.visualModel().$export();
		return $export._serialize();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Scheduler::ExportVisualModelSerialized(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Refresh()" />*/
	refresh: function () {
		if (this.___refreshSuspended) {
			return;
		}
		var en = this.___viewModeManager.viewModeInfos().getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			var visualModel = viewModeInfo.visualModel();
			var layoutEngine = viewModeInfo.layoutEngine();
			var spatialEngine = viewModeInfo.spatialEngine();
			var visibilityEngine = viewModeInfo.visibilityEngine();
			if (null != layoutEngine) {
				layoutEngine.invalidateVisibility(visibilityEngine.createCalculateAction(this, visualModel, spatialEngine, false));
				layoutEngine.refresh(visualModel, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Refresh()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SuspendRefreshAndPerformAction(System.Action)" />*/
	suspendRefreshAndPerformAction: function (action) {
		if (null == action) {
			return;
		}
		var origRefreshSuspended = this._refreshSuspended();
		if (false == this._refreshSuspended()) {
			this._refreshSuspended(true);
		}
		action();
		this._refreshSuspended(origRefreshSuspended);
		if (false == this._refreshSuspended()) {
			this._bypassLayoutOptimizations(1);
			this._refreshLayout(this.___viewModeManager.viewModes());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SuspendRefreshAndPerformAction(System.Action)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.Scheduler::CreateModel(System.String, Infragistics.Scheduler.Core.ModelPath)" />*/
	_createModel: function (modelKey, path) {
		var model = this._modelFactories().createModel(modelKey, path);
		if (null != model) {
			model.owner(this);
			model.actionMananager(new $.ig.DefaultModelActionManager(this, model));
		}
		return model;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.Scheduler::CreateModel(System.String, Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureAppointmentVisibleInAgendaView(Infragistics.Scheduler.Appointment, System.DateTime, System.Boolean)" />*/
	_ensureAppointmentVisibleInAgendaView: function (appointment, inDate, animated) {
		if (appointment == null) {
			return false;
		}
		var viewMode = $.ig.scheduler.SchedulerViewMode.agendaView;
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null == viewModeInfo) {
			return false;
		}
		var visualModel = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, viewModeInfo.visualModel());
		if (null == visualModel) {
			return false;
		}
		var scrollOffsetOfAppointment = 0;
		var apptFound = false;
		var en = this._agendaViewAppointmentInfos().getEnumerator();
		while (en.moveNext()) {
			var apptInfo = en.current();
			if (apptInfo._appointment.isSameAs(appointment) && +($.ig.Date.prototype.getDate(apptInfo._inDate)) == +($.ig.Date.prototype.getDate(inDate))) {
				scrollOffsetOfAppointment = apptInfo._scrollOffset;
				apptFound = true;
				break;
			}
		}
		if (false == apptFound) {
			return false;
		}
		var apptScrollOffsetBottom = scrollOffsetOfAppointment + visualModel.agendaInfo().appointmentHeight();
		if (scrollOffsetOfAppointment < visualModel.actualVisibleTop() || scrollOffsetOfAppointment > visualModel.actualVisibleBottom()) {
			var scrollToDay = false;
			if (this._agendaViewDateRangeResolved().contains(inDate)) {
				var scrollOffsetOfDay = visualModel.agendaInfo().getScrollOffsetOfDay(inDate);
				if ((scrollOffsetOfDay + visualModel.actualVisibleHeight()) > apptScrollOffsetBottom) {
					scrollToDay = true;
				}
			}
			if (scrollToDay) {
				this.ensureDayVisibleInAgendaView(inDate, true, true);
			} else {
				this._nativeView().scrollViewTo(viewMode, 0, scrollOffsetOfAppointment, animated);
			}
		} else {
			if (apptScrollOffsetBottom > visualModel.actualVisibleBottom()) {
				this._nativeView().scrollViewTo(viewMode, 0, apptScrollOffsetBottom - $.ig.truncate(visualModel.actualVisibleHeight()), animated);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::EnsureAppointmentVisibleInAgendaView(Infragistics.Scheduler.Appointment, System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::GetLargestFontThatFits(System.String, Infragistics.FontInfo, System.Double, System.Double, System.Double, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	_getLargestFontThatFits: function (text, desiredFont, availableWidth, availableHeight, maxFontSize, role) {
		var newFont = $.ig.Utilities.prototype.fontInfoFromFontInfo(desiredFont, false);
		newFont.fontSize(4);
		var textSize = this._nativeView()._measureString$i(text, newFont, role);
		maxFontSize = Math.min(128, maxFontSize);
		while (newFont.fontSize() < maxFontSize) {
			if (textSize.width() > availableWidth || textSize.height() > availableHeight) {
				newFont.fontSize(newFont.fontSize() - 1);
				return newFont;
			}
			newFont.fontSize(newFont.fontSize() + 1);
			textSize = this._nativeView()._measureString$i(text, newFont, role);
		}
		return newFont;
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Scheduler::GetLargestFontThatFits(System.String, Infragistics.FontInfo, System.Double, System.Double, System.Double, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ILayoutEngine Infragistics.Scheduler.Core.Scheduler::GetLayoutEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_getLayoutEngine: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null != viewModeInfo) {
			return viewModeInfo.layoutEngine();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ILayoutEngine Infragistics.Scheduler.Core.Scheduler::GetLayoutEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SpatialEngine Infragistics.Scheduler.Core.Scheduler::GetSpatialEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_getSpatialEngine: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null != viewModeInfo) {
			return viewModeInfo.spatialEngine();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SpatialEngine Infragistics.Scheduler.Core.Scheduler::GetSpatialEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisibilityEngine Infragistics.Scheduler.Core.Scheduler::GetVisibilityEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_getVisibilityEngine: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null != viewModeInfo) {
			return viewModeInfo.visibilityEngine();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisibilityEngine Infragistics.Scheduler.Core.Scheduler::GetVisibilityEngine(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModel Infragistics.Scheduler.Core.Scheduler::GetVisualModel(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_getVisualModel: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		if (null != viewModeInfo) {
			return viewModeInfo.visualModel();
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModel Infragistics.Scheduler.Core.Scheduler::GetVisualModel(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::LogTraceInfo(System.String)" />*/
	_logTraceInfo: function (traceInfo) {
		$.ig.Scheduler.prototype.___traceLog.add("[" + $.ig.Date.prototype.now().toString() + "]" + traceInfo);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::LogTraceInfo(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::TraceLogAsString(System.Boolean)" />*/
	_traceLogAsString: function (clear) {
		var sb = new $.ig.StringBuilder(0);
		var en = $.ig.Scheduler.prototype.___traceLog.getEnumerator();
		while (en.moveNext()) {
			var trace = en.current();
			sb.appendLine1(trace);
		}
		var s = sb.toString();
		if (clear) {
			$.ig.Scheduler.prototype.___traceLog.clear();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::TraceLogAsString(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.Scheduler::ModelTypeFromModelKey(System.String)" />*/
	_modelTypeFromModelKey: function (modelKey) {
		return this._modelFactories().modelTypeFromModelKey(modelKey);
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.Scheduler::ModelTypeFromModelKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDeviceOrientationChanged(System.Boolean)" />*/
	_onDeviceOrientationChanged: function (isPortrait) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDeviceOrientationChanged(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnModelClicked(Infragistics.Scheduler.Core.ModelBase)" />*/
	_onModelClicked: function (model) {
		var viewMode = this._getViewModeFromModelPath(model.path());
		switch (viewMode) {
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				this._processModelClickedForAgendaView(model);
				break;
			case $.ig.scheduler.SchedulerViewMode.monthView:
				this._processModelClickedForMonthView(model);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnModelClicked(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnOverallSizeChanged(System.Double, System.Double)" />*/
	_onOverallSizeChanged: function (width, height) {
		if (width == this.___lastOverallSize.width() && height == this.___lastOverallSize.height()) {
			return;
		}
		this.___lastOverallSize = new $.ig.Size(1, width, height);
		this._evaluateAspectRatioForViewSplitOrientationChange(false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnOverallSizeChanged(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnVisibleRangeChanged()" />*/
	_onVisibleRangeChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnVisibleRangeChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnVisibilityEngineCalculationComplete(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_onVisibilityEngineCalculationComplete: function (viewMode) {
		if (viewMode == $.ig.scheduler.SchedulerViewMode.monthView && +($.ig.Date.prototype.minValue()) != +(this.___pendingMonthViewScrollToDate)) {
			this.ensureMonthVisibleInMonthView(this.___pendingMonthViewScrollToDate, false);
			this.___pendingMonthViewScrollToDate = $.ig.Date.prototype.minValue();
		} else if (viewMode == $.ig.scheduler.SchedulerViewMode.agendaView) {
			if (null != this.___pendingAgendaViewScrollToAppointment) {
				var date = +(this.___pendingAgendaViewScrollToDate) != +($.ig.Date.prototype.minValue()) ? this.___pendingAgendaViewScrollToDate : +(this.selectedDate()) != +($.ig.Date.prototype.minValue()) ? this.selectedDate() : $.ig.Date.prototype.now();
				if (false == this._ensureAppointmentVisibleInAgendaView(this.___pendingAgendaViewScrollToAppointment, date, false)) {
					if (+($.ig.Date.prototype.minValue()) != +(this.___pendingAgendaViewScrollToDate)) {
						this.ensureDayVisibleInAgendaView(this.___pendingAgendaViewScrollToDate, true, true);
					}
				}
			} else if (+($.ig.Date.prototype.minValue()) != +(this.___pendingAgendaViewScrollToDate)) {
				this.ensureDayVisibleInAgendaView(this.___pendingAgendaViewScrollToDate, true, true);
			}
			this.___pendingAgendaViewScrollToDate = $.ig.Date.prototype.minValue();
			this.___pendingAgendaViewScrollToAppointment = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnVisibilityEngineCalculationComplete(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OutputTraceInfo(System.String, System.String, System.String, System.String)" />*/
	_outputTraceInfo: function (traceGroupName, className, methodName, traceInfo) {
		$.ig.Debug.prototype.writeLine($.ig.util.stringFormat1("%%% PCLTRACE [{0}-{1}]  '{2}' - {3}", [ className, methodName, traceGroupName, traceInfo ]));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OutputTraceInfo(System.String, System.String, System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessPendingSizeChanges(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_processPendingSizeChanges: function (viewMode) {
		this.___pendingSizeChanges.clear();
		return;
		if (this.___inProcessPendingSizeChanges) {
			return;
		}
		this.___inProcessPendingSizeChanges = true;
		for (var i = 0; i < this.___pendingSizeChanges.count(); i++) {
			var sizeChangeInfo = this.___pendingSizeChanges.__inner[i];
			if (sizeChangeInfo._viewMode == viewMode) {
				switch (sizeChangeInfo._viewMode) {
					case $.ig.scheduler.SchedulerViewMode.monthView:
						{
							var viewModeInfo = this._viewModeManager().getViewModeInfo(viewMode);
							var visualModel = viewModeInfo.visualModel();
							switch (viewModeInfo.scrollDirection()) {
								case $.ig.scheduler.SchedulerViewScrollDirection.vertical:
									{
										if (sizeChangeInfo._absoluteHeightBeforeSizeChange > 0) {
											(function ($obj) { var $value = $obj.bypassLayoutOptimizationsRefCount(); $obj.bypassLayoutOptimizationsRefCount($value + 1); return $value; }(visualModel));
											var pctChange = (visualModel.absoluteHeight() - sizeChangeInfo._absoluteHeightBeforeSizeChange) / sizeChangeInfo._absoluteHeightBeforeSizeChange;
											if (pctChange != 0) {
												var scrollOffset = visualModel.actualVisibleRegion().top();
												scrollOffset += (scrollOffset * pctChange);
												this._nativeView().scrollViewTo(this.viewMode(), 0, $.ig.truncate((scrollOffset)), false);
											}
										}
										break;
									}
								case $.ig.scheduler.SchedulerViewScrollDirection.horizontal:
									{
										if (sizeChangeInfo._absoluteWidthBeforeSizeChange > 0) {
											(function ($obj) { var $value = $obj.bypassLayoutOptimizationsRefCount(); $obj.bypassLayoutOptimizationsRefCount($value + 1); return $value; }(visualModel));
											var pctChange1 = (visualModel.absoluteWidth() - sizeChangeInfo._absoluteWidthBeforeSizeChange) / sizeChangeInfo._absoluteWidthBeforeSizeChange;
											if (pctChange1 != 0) {
												var scrollOffset1 = visualModel.actualVisibleRegion().left();
												scrollOffset1 += (scrollOffset1 * pctChange1);
												this._nativeView().scrollViewTo(this.viewMode(), $.ig.truncate((scrollOffset1)), 0, false);
											}
										}
										break;
									}
							}
							break;
						}
					default: break;
				}
				this.___pendingSizeChanges.removeAt(i);
				i--;
			}
		}
		this.___inProcessPendingSizeChanges = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessPendingSizeChanges(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RefreshLayout(System.Collections.Generic.IEnumerable)" />*/
	_refreshLayout: function (viewModes) {
		this._initialize();
		var en = viewModes.getEnumerator();
		while (en.moveNext()) {
			var viewMode = en.current();
			var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
			var visualModel = viewModeInfo.visualModel();
			if (visualModel.availableWidth() == 0) {
				continue;
			}
			var layoutEngine = viewModeInfo.layoutEngine();
			var spatialEngine = viewModeInfo.spatialEngine();
			var visibilityEngine = viewModeInfo.visibilityEngine();
			if (null == layoutEngine) {
				continue;
			}
			try {
				this._refreshSuspended(true);
				var oldContentWidth = visualModel.absoluteWidth();
				var oldContentHeight = visualModel.absoluteHeight();
				spatialEngine.invalidateLayoutData(this, visualModel);
				var newContentWidth = visualModel.absoluteWidth();
				var newContentHeight = visualModel.absoluteHeight();
				if (oldContentWidth != newContentWidth || oldContentHeight != newContentHeight) {
					if (viewMode == $.ig.scheduler.SchedulerViewMode.monthView) {
						this._adjustMonthViewActualVisibleRegionForNewContentSize(visualModel, this.___pendingMonthViewScrollToDate, true);
						var holdPendingScrollToDate = this.___pendingMonthViewScrollToDate;
						this.___pendingMonthViewScrollToDate = $.ig.Date.prototype.minValue();
						this._nativeView().onContentSizeChanged(viewMode);
						this.___pendingMonthViewScrollToDate = holdPendingScrollToDate;
						if (oldContentHeight != 0 && oldContentWidth != 0) {
							if (this.___pendingSizeChanges.count() < 1) {
								this.___pendingSizeChanges.add(new $.ig.Scheduler_SizeChangeInfo(1, oldContentHeight, oldContentWidth, viewMode));
								this._processPendingSizeChanges(viewMode);
							}
						}
					} else {
						this._nativeView().onContentSizeChanged(viewMode);
					}
					this._setInitialScrollPositionOfViewModeIfNecessary(viewMode);
				}
			}
			finally {
				this._refreshSuspended(false);
			}
			layoutEngine.invalidateVisibility(visibilityEngine.createCalculateAction(this, visualModel, spatialEngine, true));
			layoutEngine.refresh(visualModel, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RefreshLayout(System.Collections.Generic.IEnumerable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RefreshPosition(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_refreshPosition: function (viewMode) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		var layoutEngine = viewModeInfo.layoutEngine();
		var visualModel = viewModeInfo.visualModel();
		layoutEngine.invalidateVisibility(viewModeInfo.visibilityEngine().createCalculateAction(this, visualModel, viewModeInfo.spatialEngine(), false));
		layoutEngine.refresh(visualModel, true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::RefreshPosition(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::RefreshSuspended()" />*/
	_refreshSuspended: function (value) {
		if (arguments.length === 1) {
			this.___refreshSuspended = value;
			return value;
		} else {
			return this.___refreshSuspended;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::RefreshSuspended()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectNextAgendaViewAppointment()" />*/
	_selectNextAgendaViewAppointment: function () {
		return this._selectNextPreviousAgendaViewAppointment(true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectNextAgendaViewAppointment()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectPreviousAgendaViewAppointment()" />*/
	_selectPreviousAgendaViewAppointment: function () {
		return this._selectNextPreviousAgendaViewAppointment(false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectPreviousAgendaViewAppointment()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectNextPreviousAgendaViewAppointment(System.Boolean)" />*/
	_selectNextPreviousAgendaViewAppointment: function (next) {
		var infosCount = this._agendaViewAppointmentInfos().count();
		if (infosCount < 1) {
			return false;
		}
		var selectedAppointment = this.selectedAppointment();
		var indexOfSelectedAppointmentInfo = -1;
		for (var i = 0; i < infosCount; i++) {
			var appointmentInfo = this._agendaViewAppointmentInfos().__inner[i];
			if (appointmentInfo._appointment.isSameAs(selectedAppointment) && +($.ig.Date.prototype.getDate(appointmentInfo._inDate)) == +($.ig.Date.prototype.getDate(this.selectedDate()))) {
				indexOfSelectedAppointmentInfo = i;
				break;
			}
		}
		var indexOfNextPrevAppointmentInfo = indexOfSelectedAppointmentInfo;
		if (indexOfSelectedAppointmentInfo == -1) {
			if (next) {
				indexOfNextPrevAppointmentInfo = 0;
			} else {
				indexOfNextPrevAppointmentInfo = infosCount - 1;
			}
		} else {
			if (next) {
				if (indexOfSelectedAppointmentInfo < infosCount - 1) {
					indexOfNextPrevAppointmentInfo = indexOfSelectedAppointmentInfo + 1;
				} else {
					return false;
				}
			} else {
				if (indexOfSelectedAppointmentInfo > 0) {
					indexOfNextPrevAppointmentInfo = indexOfSelectedAppointmentInfo - 1;
				} else {
					return false;
				}
			}
		}
		var nextPrevAppointmentInfo = this._agendaViewAppointmentInfos().__inner[indexOfNextPrevAppointmentInfo];
		this.selectedDate(nextPrevAppointmentInfo._inDate);
		this.selectedAppointment(nextPrevAppointmentInfo._appointment);
		this._ensureAppointmentVisibleInAgendaView(nextPrevAppointmentInfo._appointment, nextPrevAppointmentInfo._inDate, true);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::SelectNextPreviousAgendaViewAppointment(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetLayoutEngine(Infragistics.Scheduler.Core.ILayoutEngine, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_setLayoutEngine: function (layoutEngine, viewMode) {
		this.___viewModeManager.setLayoutEngineForViewMode(layoutEngine, viewMode);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetLayoutEngine(Infragistics.Scheduler.Core.ILayoutEngine, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, System.Double, System.Double)" />*/
	_sizeChanged: function (viewMode, width, height) {
		var viewModeInfo = this.___viewModeManager.getViewModeInfo(viewMode);
		var visualModel = viewModeInfo.visualModel();
		var sizeChanged = false;
		var oldHeight = visualModel.availableHeight();
		var oldWidth = visualModel.availableWidth();
		if (height != oldHeight || width != oldWidth) {
			sizeChanged = true;
		}
		if (false == sizeChanged) {
			return;
		}
		visualModel.availableHeight(height);
		visualModel.availableWidth(width);
		this.___pendingSizeChanges.add(new $.ig.Scheduler_SizeChangeInfo(1, visualModel.absoluteHeight(), visualModel.absoluteWidth(), viewMode));
		if (viewMode == $.ig.scheduler.SchedulerViewMode.monthView) {
			this.___pendingMonthViewScrollToDate = this._getMonthViewScrollToDate();
		}
		this._bypassLayoutOptimizations(1);
		this._refreshLayout([ viewMode ]);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, System.Double, System.Double)" />*/
	,
	___pendingSizeChanges: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetViewport(Infragistics.Scheduler.Core.SchedulerViewMode, System.Double, System.Double, System.Double, System.Double)" />*/
	_setViewport: function (viewMode, left, top, right, bottom) {
		var visualModel = this.___viewModeManager.getViewModeInfo(viewMode).visualModel();
		var oldVisibleRegion = visualModel.actualVisibleRegion();
		if (oldVisibleRegion.right() != right || oldVisibleRegion.bottom() != bottom || oldVisibleRegion.left() != left || oldVisibleRegion.top() != top) {
			visualModel.actualVisibleRegion(new $.ig.Rect(0, left, top, right - left, bottom - top));
			this._processPendingSizeChanges(viewMode);
			this._refreshPosition(viewMode);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetViewport(Infragistics.Scheduler.Core.SchedulerViewMode, System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SyncDataSourceDateTimeFormatProvider()" />*/
	_syncDataSourceDateTimeFormatProvider: function () {
		var dataSource = this.dataSource();
		if (dataSource != null) {
			dataSource._dateTimeFormatProvider(this._dateTimeFormatProvider());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SyncDataSourceDateTimeFormatProvider()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::AddRemoveAgendaViewForMonthView()" />*/
	_addRemoveAgendaViewForMonthView: function () {
		try {
			this._refreshSuspended(true);
			var viewModesUpdated = false;
			if (this.___monthViewAgendaVisibility == $.ig.Visibility.prototype.visible) {
				$.ig.Debug.prototype.assert1(false == this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView), "MonthViewAgendaViewVisibility was set to Visible, but a ViewMode for AgendaView already exists!");
				if (false == this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
					this._evaluateAspectRatioForViewSplitOrientationChange(true);
					this.___viewModeManager.addViewMode($.ig.scheduler.SchedulerViewMode.agendaView);
					this._nativeView().onSecondaryViewModeAdded($.ig.scheduler.SchedulerViewMode.agendaView);
					this._setInitialScrollPositionOfViewModeIfNecessary($.ig.scheduler.SchedulerViewMode.agendaView);
					this.___pendingAgendaViewScrollToAppointment = this.selectedAppointment();
					viewModesUpdated = true;
				}
			} else {
				if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
					$.ig.Debug.prototype.assert1(this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView), "MonthViewAgendaViewVisibility was set to Hidden, but a ViewMode for AgendaView was not found!");
					if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
						this.___viewModeManager.removeViewMode($.ig.scheduler.SchedulerViewMode.agendaView);
						this._nativeView().onSecondaryViewModeRemoved($.ig.scheduler.SchedulerViewMode.agendaView);
						viewModesUpdated = true;
					}
				}
			}
			if (viewModesUpdated) {
				this._bypassLayoutOptimizations(1);
				this._refreshLayout(this.___viewModeManager.viewModes());
			}
		}
		finally {
			this._refreshSuspended(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::AddRemoveAgendaViewForMonthView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::AdjustMonthViewActualVisibleRegionForNewContentSize(Infragistics.Scheduler.Core.VisualModel, System.DateTime, System.Boolean)" />*/
	_adjustMonthViewActualVisibleRegionForNewContentSize: function (visualModel, currentMonth, scrollIfNeeded) {
		if (+currentMonth == +($.ig.Date.prototype.minValue())) {
			return;
		}
		if (this._monthViewScrollMode() != $.ig.MonthViewScrollMode.prototype.paged) {
			return;
		}
		var oldLeft = visualModel.actualVisibleRegion().left();
		var oldTop = visualModel.actualVisibleRegion().top();
		switch (this.monthViewScrollDirection()) {
			case $.ig.scheduler.SchedulerViewScrollDirection.horizontal:
				var left = $.ig.truncate(visualModel.getScrollOffsetOfMonthContainingDate(this.monthViewScrollDirection(), currentMonth).__x);
				visualModel.actualVisibleRegion(new $.ig.Rect(0, left, 0, visualModel.availableWidth(), visualModel.availableHeight()));
				break;
			case $.ig.scheduler.SchedulerViewScrollDirection.vertical:
				var top = $.ig.truncate(visualModel.getScrollOffsetOfMonthContainingDate(this.monthViewScrollDirection(), currentMonth).__y);
				visualModel.actualVisibleRegion(new $.ig.Rect(0, 0, top, visualModel.availableWidth(), visualModel.availableHeight()));
				break;
		}
		if (scrollIfNeeded && (visualModel.actualVisibleRegion().left() != oldLeft || visualModel.actualVisibleRegion().top() != oldTop)) {
			this._nativeView().scrollViewTo($.ig.scheduler.SchedulerViewMode.monthView, $.ig.truncate(visualModel.actualVisibleRegion().left()), $.ig.truncate(visualModel.actualVisibleRegion().top()), false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::AdjustMonthViewActualVisibleRegionForNewContentSize(Infragistics.Scheduler.Core.VisualModel, System.DateTime, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::BypassLayoutOptimizations(System.Int32)" />*/
	_bypassLayoutOptimizations: function (count) {
		var en = this._viewModeManager().viewModeInfos().getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			viewModeInfo.visualModel().bypassLayoutOptimizationsRefCount(viewModeInfo.visualModel().bypassLayoutOptimizationsRefCount() + count);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::BypassLayoutOptimizations(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::EvaluateAspectRatioForViewSplitOrientationChange(System.Boolean)" />*/
	_evaluateAspectRatioForViewSplitOrientationChange: function (force) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::EvaluateAspectRatioForViewSplitOrientationChange(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::GetIsDateWithinMinMaxDateRange(System.DateTime)" />*/
	_getIsDateWithinMinMaxDateRange: function (date) {
		var minMaxDateResolved = this._minMaxDateResolved();
		return $.ig.Date.prototype.getDate(date) >= $.ig.Date.prototype.getDate(minMaxDateResolved.start()) && $.ig.Date.prototype.getDate(date) <= $.ig.Date.prototype.getDate(minMaxDateResolved.end());
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::GetIsDateWithinMinMaxDateRange(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::GetIsMonthWithinMinMaxDateRange(Infragistics.Scheduler.Core.VisualModelMonthView, System.DateTime)" />*/
	_getIsMonthWithinMinMaxDateRange: function (visualModel, month) {
		var vmMinDate = visualModel.minimumDate();
		var minDate = $.ig.Utilities.prototype.getFirstDateInMonth(vmMinDate);
		var vmMaxDate = visualModel.maximumDate();
		var maxDate = $.ig.Utilities.prototype.getLastDateInMonth(vmMaxDate, this._dateTimeFormatProvider());
		return month >= minDate && month <= maxDate;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Scheduler::GetIsMonthWithinMinMaxDateRange(Infragistics.Scheduler.Core.VisualModelMonthView, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::GetMonthViewScrollToDate()" />*/
	_getMonthViewScrollToDate: function () {
		var scrollToDate = (this._viewModeManager().getViewModeInfo($.ig.scheduler.SchedulerViewMode.monthView).visualModel()).lastLayoutFirstVisibleMonth();
		if (+scrollToDate == +($.ig.Date.prototype.minValue())) {
			return +(this.selectedDate()) == +($.ig.Date.prototype.minValue()) ? $.ig.Date.prototype.getDate($.ig.Date.prototype.now()) : this.selectedDate();
		} else {
			return scrollToDate;
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Scheduler::GetMonthViewScrollToDate()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.Scheduler::GetViewModeFromModelPath(Infragistics.Scheduler.Core.ModelPath)" />*/
	_getViewModeFromModelPath: function (path) {
		var roleName = this._roleNames()[path.role()].toLowerCase();
		if (roleName.startsWith("agenda")) {
			return $.ig.scheduler.SchedulerViewMode.agendaView;
		}
		if (roleName.startsWith("month")) {
			return $.ig.scheduler.SchedulerViewMode.monthView;
		}
		throw new $.ig.InvalidOperationException(1, $.ig.util.stringFormat("Unexpected value '{0}' encountered in ModelPath.Role!!!!", roleName));
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.Scheduler::GetViewModeFromModelPath(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Initialize()" />*/
	_initialize: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Initialize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDataSourceAppointmentsChanged(System.Object, Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	_onDataSourceAppointmentsChanged: function (sender, e) {
		if (null != e.affectedRange() && e.action() == $.ig.NotifyCollectionChangedAction.prototype.remove && null != this.selectedAppointment()) {
			if (e.affectedRange()._intersectsWith(new $.ig.scheduler.DateTimeRange(this.selectedAppointment().start(), this.selectedAppointment().end()), false)) {
				this.selectedAppointment(null);
			}
		}
		var viewModes = new $.ig.List$1($.ig.scheduler.SchedulerViewMode.prototype.$type, 2, this._viewModeManager().viewModeCount());
		var en = this._viewModeManager().viewModeInfos().getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			var visualModel = viewModeInfo.visualModel();
			if (null != viewModeInfo.layoutEngine() && visualModel.getIsRefreshLayoutRequiredForAppointmentsChanged(e)) {
				viewModes.add(viewModeInfo.viewMode());
				visualModel.onAppointmentsChanged(e);
			}
		}
		if (viewModes.count() > 0) {
			this._bypassLayoutOptimizations(1);
			this._refreshLayout(viewModes);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDataSourceAppointmentsChanged(System.Object, Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDataSourceAppointmentPropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	_onDataSourceAppointmentPropertyChanged: function (sender, e) {
		var viewModes = new $.ig.List$1($.ig.scheduler.SchedulerViewMode.prototype.$type, 2, this._viewModeManager().viewModeCount());
		var en = this._viewModeManager().viewModeInfos().getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			var visualModel = viewModeInfo.visualModel();
			if (null != viewModeInfo.layoutEngine() && visualModel.getIsRefreshLayoutRequiredForAppointmentPropertyChanged(e)) {
				viewModes.add(viewModeInfo.viewMode());
				visualModel.onAppointmentPropertyChanged(e);
			}
		}
		if (viewModes.count() > 0) {
			this._bypassLayoutOptimizations(1);
			this._refreshLayout(viewModes);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnDataSourceAppointmentPropertyChanged(System.Object, Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessAppointmentClicked(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Core.ModelBase)" />*/
	_processAppointmentClicked: function (clickedAppointment, clickedElementModel) {
		var viewMode = this._getViewModeFromModelPath(clickedElementModel.path());
		var shouldSelectAppointment = true;
		var path = clickedElementModel.path();
		var clickedInDate = $.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0);
		if (this.appointmentClicked != null) {
			var args = (function () {
				var $ret = new $.ig.AppointmentClickedEventArgs();
				$ret.clickedAppointment(clickedAppointment);
				$ret.clickedInDate(clickedInDate);
				$ret.allowSelection(shouldSelectAppointment);
				$ret.viewMode(viewMode);
				return $ret;
			}());
			this.appointmentClicked(this, args);
			shouldSelectAppointment = args.allowSelection();
		}
		if (shouldSelectAppointment && (false == clickedAppointment.isSameAs(this.selectedAppointment()))) {
			this.selectedAppointment(clickedAppointment);
			if (this.appointmentSelected != null) {
				this.appointmentSelected(this, (function () {
					var $ret = new $.ig.AppointmentSelectedEventArgs();
					$ret.selectedAppointment(clickedAppointment);
					$ret.selectedInDate(clickedInDate);
					$ret.viewMode(viewMode);
					return $ret;
				}()));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessAppointmentClicked(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessDataSourceChange(System.Object, System.Object)" />*/
	_processDataSourceChange: function (oldValue, newValue) {
		var oldDataSource = $.ig.util.cast($.ig.scheduler.ScheduleDataSource.prototype.$type, oldValue);
		var newDataSource = $.ig.util.cast($.ig.scheduler.ScheduleDataSource.prototype.$type, newValue);
		if (null != oldDataSource) {
			oldDataSource.destroy();
			oldDataSource._appointmentPropertyChanged = $.ig.Delegate.prototype.remove(oldDataSource._appointmentPropertyChanged, this._onDataSourceAppointmentPropertyChanged.runOn(this));
			oldDataSource._appointmentsChanged = $.ig.Delegate.prototype.remove(oldDataSource._appointmentsChanged, this._onDataSourceAppointmentsChanged.runOn(this));
		}
		if (null != newDataSource) {
			newDataSource._appointmentPropertyChanged = $.ig.Delegate.prototype.combine(newDataSource._appointmentPropertyChanged, this._onDataSourceAppointmentPropertyChanged.runOn(this));
			newDataSource._appointmentsChanged = $.ig.Delegate.prototype.combine(newDataSource._appointmentsChanged, this._onDataSourceAppointmentsChanged.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessDataSourceChange(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForAgendaView(Infragistics.Scheduler.Core.ModelBase)" />*/
	_processModelClickedForAgendaView: function (model) {
		if (model.role() == $.ig.scheduler.SchedulerElementRole.agendaViewMessage) {
			return;
		}
		var path = model.path();
		if (path.isDayPath()) {
			var dateClicked = $.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0);
			this.selectedDate(dateClicked);
			if (this._isDisplayingMonthViewAndAgendaView()) {
				this.ensureMonthVisibleInMonthView(dateClicked, true);
			}
			var clickedAppointment = model.path().appointmentResolved();
			if (null != clickedAppointment) {
				this._processAppointmentClicked(clickedAppointment, model);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForAgendaView(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForDayView(Infragistics.Scheduler.Core.ModelBase)" />*/
	_processModelClickedForDayView: function (model) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForDayView(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForMonthView(Infragistics.Scheduler.Core.ModelBase)" />*/
	_processModelClickedForMonthView: function (model) {
		var $self = this;
		var path = model.path();
		var weekNumber = $.ig.util.cast($.ig.MonthWeekNumberModel.prototype.$type, model);
		if (weekNumber != null) {
			if (this.weekNumberClicked != null) {
				this.weekNumberClicked(this, (function () {
					var $ret = new $.ig.WeekNumberClickedEventArgs();
					$ret.weekNumber(path.week());
					$ret.month(path.month());
					$ret.year(path.year());
					return $ret;
				}()));
			}
			return;
		} else if (path.isDayPath()) {
			var clickedAppointment = model.path().appointmentResolved();
			if (null != clickedAppointment) {
				this._processAppointmentClicked(clickedAppointment, model);
			}
			if (this.dayClicked != null) {
				this.dayClicked(this, (function () {
					var $ret = new $.ig.DayClickedEventArgs();
					$ret.clickedDate($.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0));
					$ret.viewMode($self._getViewModeFromModelPath(model.path()));
					return $ret;
				}()));
			}
			var newSelectedDate = $.ig.Date.prototype.fromValues(path.year(), path.month(), path.day(), 0, 0, 0, 0);
			if (this._getIsDateWithinMinMaxDateRange(newSelectedDate)) {
				if (+newSelectedDate != +(this.selectedDate())) {
					this.selectedDate(newSelectedDate);
				}
				if (path.isLeadingDay() || path.isTrailingDay()) {
					this.ensureDayVisibleInMonthView(this.selectedDate(), true);
				} else if (this.monthViewAgendaVisibility() == $.ig.Visibility.prototype.visible) {
					this.ensureDayVisibleInMonthView(this.selectedDate(), true);
				}
				if (this.monthViewAgendaVisibility() == $.ig.Visibility.prototype.visible) {
					this.ensureDayVisibleInAgendaView(this.selectedDate(), true, true);
				}
			}
		} else if (path.isDayOfWeekPath()) {
			if (this.dayOfWeekHeaderClicked != null) {
				this.dayOfWeekHeaderClicked(this, (function () {
					var $ret = new $.ig.DayOfWeekHeaderClickedEventArgs();
					$ret.dayOfWeek(path.dayOfWeek());
					$ret.month(path.month());
					$ret.year(path.year());
					return $ret;
				}()));
			}
		} else if (path.isMonthPath()) {
			if (this.monthHeaderClicked != null) {
				this.monthHeaderClicked(this, (function () {
					var $ret = new $.ig.MonthHeaderClickedEventArgs();
					$ret.month(path.month());
					$ret.year(path.year());
					return $ret;
				}()));
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForMonthView(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForWeekView(Infragistics.Scheduler.Core.ModelBase)" />*/
	_processModelClickedForWeekView: function (model) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::ProcessModelClickedForWeekView(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::PropertyUpdatedOverride(System.String, System.Object, System.Object)" />*/
	_propertyUpdatedOverride: function (propertyName, oldValue, newValue) {
		var $self = this;
		switch (propertyName) {
			case $.ig.Scheduler.prototype._viewModePropertyName:
				{
					var newViewMode = $.ig.util.getEnumValue(newValue);
					this._viewModeManager().setViewMode(newViewMode);
					this._nativeView().onPrimaryViewModeChanged(newViewMode);
					if (newViewMode == $.ig.scheduler.SchedulerViewMode.monthView) {
						if (this.monthViewAgendaVisibility() == $.ig.Visibility.prototype.visible) {
							this._addRemoveAgendaViewForMonthView();
						}
					}
					this._bypassLayoutOptimizations(1);
					this._refreshLayout(this.___viewModeManager.viewModes());
					break;
				}
			case $.ig.Scheduler.prototype._monthViewDayBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayOfWeekHeaderTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewNameBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewNameTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewSelectedDayBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewSelectedDayTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewWeekNumberBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewWeekNumberTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewLeadingDayBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewLeadingDayTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewTrailingDayBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewTrailingDayTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewSeparatorLineBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewTodayHighlightBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewTodayTextBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayActivityIndicatorBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._monthViewNameSeparatorLineBrushPropertyName:
				if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.monthView)) {
					this._bypassLayoutOptimizations(1);
					this.refresh();
				}
				break;
			case $.ig.Scheduler.prototype._monthViewNameFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayOfWeekHeaderFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayOfWeekHeaderVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewHorizontalSeparatorVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewLeadingDayVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewLeadingDayFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewTrailingDayVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewTrailingDayFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewVerticalSeparatorVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewWeekNumberFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewWeekNumberVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewInterMonthSpacingPropertyName:
			case $.ig.Scheduler.prototype._monthViewScrollDirectionPropertyName:
			case $.ig.Scheduler.prototype._monthViewScrollModePropertyName:
			case $.ig.Scheduler.prototype._monthViewAgendaVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewNameMarginPropertyName:
			case $.ig.Scheduler.prototype._monthViewNameVisibilityPropertyName:
			case $.ig.Scheduler.prototype._monthViewAppointmentFontInfoPropertyName:
			case $.ig.Scheduler.prototype._monthViewDayContentDisplayModePropertyName:
			case $.ig.Scheduler.prototype._monthViewDayOfWeekHeaderMarginPropertyName:
				{
					if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.monthView)) {
						if (propertyName == $.ig.Scheduler.prototype._monthViewScrollDirectionPropertyName) {
							var viewModeInfo = this.___viewModeManager.getViewModeInfo($.ig.scheduler.SchedulerViewMode.monthView);
							if (viewModeInfo.scrollDirection() != this.monthViewScrollDirection()) {
								viewModeInfo.scrollDirection(this.monthViewScrollDirection());
								this._nativeViewResolved().onScrollDirectionChanged($.ig.scheduler.SchedulerViewMode.monthView, this.monthViewScrollDirection());
								this.___pendingMonthViewScrollToDate = this._getMonthViewScrollToDate();
							}
						}
						if (propertyName == $.ig.Scheduler.prototype._monthViewAgendaVisibilityPropertyName) {
							this._addRemoveAgendaViewForMonthView();
						}
						if (propertyName == $.ig.Scheduler.prototype._monthViewScrollModePropertyName) {
							var viewModeInfo1 = this.___viewModeManager.getViewModeInfo($.ig.scheduler.SchedulerViewMode.monthView);
							var isPagingEnabled = this._monthViewScrollMode() == $.ig.MonthViewScrollMode.prototype.paged;
							if (viewModeInfo1.isPagingEnabled() != isPagingEnabled) {
								viewModeInfo1.isPagingEnabled(isPagingEnabled);
							}
							this._nativeViewResolved().onScrollModeChanged($.ig.scheduler.SchedulerViewMode.monthView, this._monthViewScrollMode());
							this.___pendingMonthViewScrollToDate = this._getMonthViewScrollToDate();
						}
						this._bypassLayoutOptimizations(1);
						this._refreshLayout([ $.ig.scheduler.SchedulerViewMode.monthView ]);
					}
					break;
				}
			case $.ig.Scheduler.prototype._agendaViewDayHeaderBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewDayHeaderTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentLocationBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentLocationTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSubjectBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSubjectTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentStartTimeTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentStartTimeBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentEndTimeTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentEndTimeBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedTextBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSeparatorLineBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewDayHeaderSeparatorLineBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewBackgroundBrushPropertyName:
			case $.ig.Scheduler.prototype._agendaViewMessageTextBrushPropertyName:
				if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
					this._bypassLayoutOptimizations(1);
					this.refresh();
				}
				break;
			case $.ig.Scheduler.prototype._agendaViewMaximumDatePropertyName:
			case $.ig.Scheduler.prototype._agendaViewMinimumDatePropertyName:
			case $.ig.Scheduler.prototype._agendaViewDayHeaderFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentLocationFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentSubjectFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentStartTimeFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentEndTimeFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewMessageFontInfoPropertyName:
			case $.ig.Scheduler.prototype._agendaViewInterDaySpacingPropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentScopePropertyName:
			case $.ig.Scheduler.prototype._agendaViewAppointmentMarginPropertyName:
			case $.ig.Scheduler.prototype._agendaViewDayHeaderMarginPropertyName:
				if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
					this._bypassLayoutOptimizations(1);
					this._refreshLayout([ $.ig.scheduler.SchedulerViewMode.agendaView ]);
				}
				break;
			case $.ig.Scheduler.prototype._maximumDatePropertyName:
			case $.ig.Scheduler.prototype._minimumDatePropertyName:
			case $.ig.Scheduler.prototype._dataSourcePropertyName:
			case $.ig.Scheduler.prototype._selectedAppointmentPropertyName:
			case $.ig.Scheduler.prototype._viewSplitOrientationPropertyName:
			case $.ig.Scheduler.prototype._viewSplitOrientationModePropertyName:
			case $.ig.Scheduler.prototype._selectedDatePropertyName:
			case $.ig.Scheduler.prototype._cultureNamePropertyName:
				{
					if (propertyName == $.ig.Scheduler.prototype._dataSourcePropertyName) {
						this._processDataSourceChange(oldValue, newValue);
					}
					if (propertyName == $.ig.Scheduler.prototype._cultureNamePropertyName) {
						this.___dateTimeFormatProvider = null;
						this._syncDataSourceDateTimeFormatProvider();
					}
					if (this._isDisplayingMonthViewAndAgendaView()) {
						if (propertyName == $.ig.Scheduler.prototype._viewSplitOrientationPropertyName) {
							this._nativeView().onViewSplitOrientationChanged();
						} else if (propertyName == $.ig.Scheduler.prototype._viewSplitOrientationModePropertyName) {
							if (this.viewSplitOrientationMode() == $.ig.scheduler.SchedulerViewSplitOrientationMode.auto) {
								this._evaluateAspectRatioForViewSplitOrientationChange(false);
							}
						}
					}
					if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.monthView)) {
						if (propertyName == $.ig.Scheduler.prototype._maximumDatePropertyName || propertyName == $.ig.Scheduler.prototype._minimumDatePropertyName) {
							var viewModeInfo2 = this.___viewModeManager.getViewModeInfo($.ig.scheduler.SchedulerViewMode.monthView);
							var firstVisibleMonth = (viewModeInfo2.visualModel()).lastLayoutFirstVisibleMonth();
							var minMaxDateResolved = this._minMaxDateResolved();
							var firstDateInFirstMonth = $.ig.Utilities.prototype.getFirstDateInMonth(minMaxDateResolved.start());
							var lastDateInLastMonth = $.ig.Utilities.prototype.getLastDateInMonth(minMaxDateResolved.end(), this._dateTimeFormatProvider());
							if (+firstVisibleMonth == +($.ig.Date.prototype.minValue())) {
								var now = $.ig.Date.prototype.getDate($.ig.Date.prototype.now());
								if (now < firstDateInFirstMonth) {
									this.___pendingMonthViewScrollToDate = firstDateInFirstMonth;
								} else if (now > lastDateInLastMonth) {
									this.___pendingMonthViewScrollToDate = lastDateInLastMonth;
								} else {
									this.___pendingMonthViewScrollToDate = +(this.selectedDate()) == +($.ig.Date.prototype.minValue()) ? now : this.selectedDate();
								}
							} else if (firstVisibleMonth < firstDateInFirstMonth) {
								this.___pendingMonthViewScrollToDate = minMaxDateResolved.start();
							} else if (firstVisibleMonth > lastDateInLastMonth) {
								this.___pendingMonthViewScrollToDate = minMaxDateResolved.end();
							} else {
								this.___pendingMonthViewScrollToDate = firstVisibleMonth;
							}
						}
					}
					if (propertyName == $.ig.Scheduler.prototype._selectedDatePropertyName) {
						this._raiseSelectedDateChanged((function () {
							var $ret = new $.ig.SelectedDateChangedEventArgs();
							$ret.selectedDate($self.___selectedDate);
							return $ret;
						}()));
					}
					if (propertyName == $.ig.Scheduler.prototype._selectedAppointmentPropertyName) {
						if (this.___viewModeManager.containsViewMode($.ig.scheduler.SchedulerViewMode.agendaView)) {
							this._ensureAppointmentVisibleInAgendaView(this.selectedAppointment(), this.selectedDate(), true);
						}
					}
					this._bypassLayoutOptimizations(1);
					this._refreshLayout(this.___viewModeManager.viewModes());
					break;
				}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::PropertyUpdatedOverride(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetInitialScrollPositionOfViewModeIfNecessary(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	_setInitialScrollPositionOfViewModeIfNecessary: function (viewMode) {
		var viewModeInfo = this._viewModeManager().getViewModeInfo(viewMode);
		switch (viewMode) {
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				if (false == viewModeInfo.isInitialScrollPositionSet()) {
					if (+(this.selectedDate()) == +($.ig.Date.prototype.minValue())) {
						this.selectedDate($.ig.Date.prototype.now());
					}
					this.ensureDayVisibleInAgendaView(this.selectedDate(), false, true);
					this.___pendingAgendaViewScrollToDate = this.selectedDate();
					viewModeInfo.isInitialScrollPositionSet(true);
				}
				break;
			case $.ig.scheduler.SchedulerViewMode.monthView:
				if (false == viewModeInfo.isInitialScrollPositionSet()) {
					if (+(this.selectedDate()) == +($.ig.Date.prototype.minValue())) {
						this.selectedDate($.ig.Date.prototype.now());
					}
					this.ensureMonthVisibleInMonthView(this.selectedDate(), false);
					this.___pendingMonthViewScrollToDate = this.selectedDate();
					viewModeInfo.isInitialScrollPositionSet(true);
				}
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::SetInitialScrollPositionOfViewModeIfNecessary(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Setup()" />*/
	_setup: function () {
		this.___viewModeManager = new $.ig.SchedulerViewModeManager(this);
		this.___viewMode = $.ig.scheduler.SchedulerViewMode.monthView;
		this.___viewModeManager.setViewMode(this.___viewMode);
		if (this.monthViewAgendaVisibility() == $.ig.Visibility.prototype.visible) {
			this.___viewModeManager.addViewMode($.ig.scheduler.SchedulerViewMode.agendaView);
		}
		$.ig.SchedulerDefaultThemeInfo.prototype.initialize();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::Setup()" />*/
	,
	propertyChanged: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnPropertyChanged(System.String, System.Object, System.Object)" />*/
	_onPropertyChanged: function (propertyName, oldValue, newValue) {
		var handler = this.propertyChanged;
		if (handler != null) {
			handler(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
		this._propertyUpdatedOverride(propertyName, oldValue, newValue);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Scheduler::OnPropertyChanged(System.String, System.Object, System.Object)" />*/
	,
	$type: new $.ig.Type('Scheduler', $.ig.Object.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.Scheduler" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.Scheduler_SizeChangeInfo" />*/

$.ig.util.defType('Scheduler_SizeChangeInfo', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	_absoluteHeightBeforeSizeChange: 0,
	_absoluteWidthBeforeSizeChange: 0,
	_viewMode: 0,
	init1: function (initNumber, absoluteHeight, absoluteWidth, viewMode) {
		$.ig.ValueType.prototype.init.call(this);
		this._absoluteHeightBeforeSizeChange = absoluteHeight;
		this._absoluteWidthBeforeSizeChange = absoluteWidth;
		this._viewMode = viewMode;
	},
	$type: new $.ig.Type('Scheduler_SizeChangeInfo', $.ig.ValueType.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.Scheduler_SizeChangeInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerHitTestResult" />*/

$.ig.scheduler.SchedulerHitTestResult = $.ig.util.defType('scheduler.SchedulerHitTestResult', 'Object', {
	___role: null,
	___viewMode: 0,
	___left: 0,
	___top: 0,
	___width: 0,
	___height: 0,
	___appointment: null,
	___year: 0,
	___week: 0,
	___month: 0,
	___day: 0,
	___dayOfWeek: 0,
	___isLeading: false,
	___isTrailing: false,
	init: function (model, viewModeInfo, cumulativeOffsetY) {
		this.___dayOfWeek = -1;
		$.ig.Object.prototype.init.call(this);
		this.___viewMode = viewModeInfo.viewMode();
		var vm = viewModeInfo.visualModel();
		if (model != null) {
			var path = model.path();
			this.___role = $.ig.scheduler.SchedulerElementRole.prototype.$getName(model.role());
			this.___year = path.year();
			this.___month = path.month();
			this.___appointment = path.appointmentResolved();
			this.___week = path.week();
			this.___day = path.day();
			this.___dayOfWeek = path.dayOfWeek();
			this.___isLeading = path.isLeadingDay();
			this.___isTrailing = path.isTrailingDay();
			if (vm.monthInfo() != null) {
				if (this.___dayOfWeek < 0 && this.___day > 0 && this.___month > 0 && this.___year > 0) {
					this.___dayOfWeek = vm.monthInfo().getDayOfWeekIndex($.ig.Date.prototype.fromValues(this.___year, this.___month, this.___day, 0, 0, 0, 0).getDay());
				}
				if (this.___week < 1 && this.___month > 0 && this.___year > 0) {
					var firstDayOfMonth = $.ig.Date.prototype.fromValues(this.___year, this.___month, 1, 0, 0, 0, 0);
					var startWeek = vm.monthInfo().getWeekNumberOfFirstWeekInMonth(firstDayOfMonth);
					var firstDayOffset = vm.monthInfo().getDayOfWeekIndex(firstDayOfMonth.getDay());
					this.___week = startWeek + ($.ig.intDivide((this.___day + firstDayOffset), 7));
				}
			}
			this.___left = model.x() - vm.actualVisibleLeft();
			this.___top = model.y() + cumulativeOffsetY - vm.actualVisibleTop();
			this.___width = model.width();
			this.___height = model.height();
		} else {
			switch (this.___viewMode) {
				case $.ig.scheduler.SchedulerViewMode.agendaView:
					this.___role = $.ig.scheduler.SchedulerElementRole.prototype.$getName($.ig.scheduler.SchedulerElementRole.agendaView);
					break;
				case $.ig.scheduler.SchedulerViewMode.monthView:
					this.___role = $.ig.scheduler.SchedulerElementRole.prototype.$getName($.ig.scheduler.SchedulerElementRole.monthView);
					break;
			}
			this.___left = 0;
			this.___top = cumulativeOffsetY;
			this.___width = vm.actualVisibleWidth();
			this.___height = vm.actualVisibleHeight();
		}
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerHitTestResult Infragistics.Scheduler.Core.SchedulerHitTestResult::Create(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.SchedulerViewModeInfo, System.Double)" />*/
	_create: function (model, viewModeInfo, cumulativeOffsetY) {
		return new $.ig.scheduler.SchedulerHitTestResult(model, viewModeInfo, cumulativeOffsetY);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerHitTestResult Infragistics.Scheduler.Core.SchedulerHitTestResult::Create(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.SchedulerViewModeInfo, System.Double)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.SchedulerHitTestResult::Appointment()" />*/
	appointment: function () {
		return this.___appointment;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.SchedulerHitTestResult::Appointment()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Day()" />*/
	day: function () {
		return this.___day;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Day()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::DayOfWeek()" />*/
	dayOfWeek: function () {
		return this.___dayOfWeek;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::DayOfWeek()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Height()" />*/
	height: function () {
		return this.___height;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Height()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerHitTestResult::IsLeading()" />*/
	isLeading: function () {
		return this.___isLeading;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerHitTestResult::IsLeading()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerHitTestResult::IsTrailing()" />*/
	isTrailing: function () {
		return this.___isTrailing;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerHitTestResult::IsTrailing()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Left()" />*/
	left: function () {
		return this.___left;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Left()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Month()" />*/
	month: function () {
		return this.___month;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Month()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.SchedulerHitTestResult::RoleDescription()" />*/
	roleDescription: function () {
		return this.___role;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.SchedulerHitTestResult::RoleDescription()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Top()" />*/
	top: function () {
		return this.___top;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Top()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SchedulerHitTestResult::ViewMode()" />*/
	viewMode: function () {
		return this.___viewMode;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SchedulerHitTestResult::ViewMode()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Week()" />*/
	week: function () {
		return this.___week;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Week()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Width()" />*/
	width: function () {
		return this.___width;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerHitTestResult::Width()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Year()" />*/
	year: function () {
		return this.___year;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerHitTestResult::Year()" />*/
	,
	$type: new $.ig.Type('scheduler.SchedulerHitTestResult', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerHitTestResult" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerUtils" />*/

$.ig.util.defType('SchedulerUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.SchedulerUtils::ConvertPixelvalueToDouble(System.String)" />*/
	convertPixelvalueToDouble: function (value) {
		if (value.contains("px")) {
			value = $.ig.util.replace(value, "px", "");
		}
		var result = 0;
		var $ret = $.ig.util.tryParseNumber(value, result);
		result = $ret.p1;
		return result;
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.SchedulerUtils::ConvertPixelvalueToDouble(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerUtils::Cache(Infragistics.Scheduler.Core.ModelBase)" />*/
	cache: function (model) {
		return model.owner()._view().getRoleCache(model.role());
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerUtils::Cache(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::AddClassName(System.Html.Element, System.String)" />*/
	addClassName: function (element, className) {
		$(element).addClass(className);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::AddClassName(System.Html.Element, System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::AppendChild(System.Html.Element, System.Html.Element)" />*/
	appendChild: function (parent, child) {
		$(parent).append($(child));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::AppendChild(System.Html.Element, System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::DisposeElementView(Infragistics.Scheduler.Core.ModelBase)" />*/
	disposeElementView: function (model) {
		if (model.presenter() != null) {
			var view = $.ig.util.cast($.ig.ElementView.prototype.$type, model.presenter().nativeView());
			if (view != null) {
				view.dispose();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::DisposeElementView(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerUtils::IsNumeric(System.Char)" />*/
	isNumeric: function (c) {
		return c.charCodeAt(0) >= '0'.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerUtils::IsNumeric(System.Char)" />*/
	,
	/*<BeginMethod Name="System.Html.DivElement Infragistics.Scheduler.Core.SchedulerUtils::CreateDiv(System.String)" />*/
	createDiv: function (className) {
		var div = document.createElement("div");
		div.className = className;
		return div;
	}
	/*<EndMethod Name="System.Html.DivElement Infragistics.Scheduler.Core.SchedulerUtils::CreateDiv(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Controls.DOMEventProxy Infragistics.Scheduler.Core.SchedulerUtils::CreateDOMEventProxy(System.Html.Element)" />*/
	createDOMEventProxy: function (element) {
		var ele = $(element);
		var wrap = new $.ig.JQueryDomWrapper(element, ele);
		return new $.ig.DOMEventProxy(wrap, new $.ig.JQueryDomRenderer(wrap));
	}
	/*<EndMethod Name="Infragistics.Controls.DOMEventProxy Infragistics.Scheduler.Core.SchedulerUtils::CreateDOMEventProxy(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::Remove(System.Html.Element)" />*/
	remove: function (element) {
		$(element).remove();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::Remove(System.Html.Element)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::RemoveClassName(System.Html.Element, System.String)" />*/
	removeClassName: function (element, className) {
		$(element).removeClass(className);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerUtils::RemoveClassName(System.Html.Element, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.SchedulerUtils::GetCssLengthInPxels(System.Int32)" />*/
	getCssLengthInPxels: function (value) {
		if (value == 0) {
			return "0";
		}
		return value.toString() + "px";
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.SchedulerUtils::GetCssLengthInPxels(System.Int32)" />*/
	,
	$type: new $.ig.Type('SchedulerUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerUtils" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.INativeView" />*/

$.ig.util.defType('INativeView', 'Object', {
	$type: new $.ig.Type('INativeView', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.INativeView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ElementView" />*/

$.ig.util.defType('ElementView', 'Object', {
	__domElement: null,
	__backgroundBrush: null,
	__opacity: 0,
	__textBrush: null,
	__padding: null,
	__isValid: false,
	__isSelected: false,
	__isSelectable: false,
	__role: $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, null),
	__lastLeft: 0,
	__lastTop: 0,
	__lastWidth: 0,
	__lastHeight: 0,
	__zIndex: 0,
	__propertiesPending: 0,
	__propertiesEverSet: 0,
	init: function (domElement) {
		this.__opacity = 1;
		this.__lastLeft = -1;
		this.__lastTop = -1;
		this.__lastWidth = -1;
		this.__lastHeight = -1;
		this.__zIndex = -1;
		this.__propertiesPending = 0;
		this.__propertiesEverSet = 0;
		$.ig.Object.prototype.init.call(this);
		this.__domElement = domElement;
		if (this.__domElement != null) {
			if (this.isAbsolute()) {
				this.__domElement.style.position = "absolute";
				this.__domElement.style.left = "0px";
				this.__domElement.style.top = "0px";
			}
			if (this.suppressMargin()) {
				this.__domElement.style.margin = "0px";
			}
			if (this.clipChildren()) {
				this.__domElement.style.overflow = "hidden";
			}
			if (this.usesBorderBoxSizing()) {
				this.__domElement.style.boxSizing = "border-box";
			}
		}
	},
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsAbsolute()" />*/
	isAbsolute: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsAbsolute()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::ClipChildren()" />*/
	clipChildren: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::ClipChildren()" />*/
	,
	/*<BeginProperty Name="System.Html.Element Infragistics.Scheduler.Core.ElementView::DomElement()" />*/
	domElement: function () {
		return this.__domElement;
	}
	/*<EndProperty Name="System.Html.Element Infragistics.Scheduler.Core.ElementView::DomElement()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::DrawsBackground()" />*/
	drawsBackground: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::DrawsBackground()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsSelectable()" />*/
	isSelectable: function () {
		return this.__isSelectable;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsSelectable()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsSelected()" />*/
	isSelected: function () {
		return this.__isSelected;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsSelected()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsValid()" />*/
	isValid: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::IsValid()" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.Core.ElementView::Role()" />*/
	role: function () {
		return this.__role;
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.Core.ElementView::Role()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ElementView_PropertyIds Infragistics.Scheduler.Core.ElementView::PropertiesPending()" />*/
	propertiesPending: function (value) {
		if (arguments.length === 1) {
			this.__propertiesPending = value;
			this.__propertiesEverSet |= value;
			return value;
		} else {
			return this.__propertiesPending;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ElementView_PropertyIds Infragistics.Scheduler.Core.ElementView::PropertiesPending()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ElementView_PropertyIds Infragistics.Scheduler.Core.ElementView::PropertiesEverSet()" />*/
	propertiesEverSet: function () {
		return this.__propertiesEverSet;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ElementView_PropertyIds Infragistics.Scheduler.Core.ElementView::PropertiesEverSet()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::SuppressMargin()" />*/
	suppressMargin: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::SuppressMargin()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::UsesBorderBoxSizing()" />*/
	usesBorderBoxSizing: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ElementView::UsesBorderBoxSizing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ElementView::ZIndex()" />*/
	zIndex: function (value) {
		if (arguments.length === 1) {
			if (value != this.__zIndex) {
				this.__zIndex = value;
				if (this.__domElement != null) {
					this.__domElement.style.zIndex = this.__zIndex;
				}
			}
			return value;
		} else {
			return this.__zIndex;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ElementView::ZIndex()" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ElementView::GetDefaultBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	getDefaultBackgroundBrush: function (model, background) {
		var roleCache = model.owner()._view().getRoleCache(model.role());
		return roleCache.background();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ElementView::GetDefaultBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.ElementView::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	getSelectedCssClassName: function (model) {
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.ElementView::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::Dispose()" />*/
	dispose: function () {
		if (this.__domElement != null) {
			$.ig.SchedulerUtils.prototype.remove(this.__domElement);
			this.__domElement = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::Invalidate()" />*/
	invalidate: function () {
		this.__isValid = false;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::Invalidate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	onIsSelectedChanged: function (model) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	onRoleChanged: function (model, oldRole, newRole) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnStyleUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	onStyleUpdated: function (model) {
		this.__role = $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, null);
		this.setRole(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::OnStyleUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::PositionOutOfView()" />*/
	positionOutOfView: function () {
		this.__lastLeft = -10000;
		this.domElement().style.left = this.__lastLeft + "px";
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::PositionOutOfView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	setBackgroundBrush: function (model, background) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.background;
		if (!this.drawsBackground()) {
			return;
		}
		var brush = "";
		var defaultBrush = this.getDefaultBackgroundBrush(model, background);
		if (defaultBrush != background || (background != null && !this.drawsBackground())) {
			brush = this.drawsBackground() ? background != null ? background.__fill : null : "transparent";
		}
		if (brush != this.__backgroundBrush) {
			this.__backgroundBrush = brush;
			if (this.__domElement != null) {
				this.__domElement.style.backgroundColor = brush;
			}
			this.invalidate();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetIsSelected(Infragistics.Scheduler.Core.ModelBase)" />*/
	setIsSelected: function (model) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.isSelected;
		if (this.__isSelected != model.isSelected()) {
			this.__isSelected = model.isSelected();
			this.onIsSelectedChanged(model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetIsSelected(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetOpacity(System.Double)" />*/
	setOpacity: function (value) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.opacity;
		if (this.__opacity == value) {
			return;
		}
		this.__opacity = value;
		this.invalidate();
		this.__domElement.style.opacity = value.toString();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetOpacity(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetPadding(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPadding: function (left, top, right, bottom) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.padding;
		var padding;
		if (left == 0 && top == 0 && right == 0 && bottom == 0) {
			padding = null;
		} else if (left == top && top == right && right == bottom) {
			padding = left + "px";
		} else if (left == right && top == bottom) {
			padding = top + "px " + left + "px";
		} else if (left == right) {
			padding = top + "px " + left + "px " + bottom + "px";
		} else {
			padding = top + "px " + right + "px " + bottom + "px " + left + "px";
		}
		if (this.__padding != padding) {
			this.__padding = padding;
			this.__domElement.style.padding = padding;
			this.invalidate();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetPadding(System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPosition: function (model, left, top, width, height) {
		if (this.__domElement == null) {
			return;
		}
		if (left != this.__lastLeft) {
			this.__domElement.style.left = left + "px";
			this.__lastLeft = left;
		}
		if (top != this.__lastTop) {
			this.__domElement.style.top = top + "px";
			this.__lastTop = top;
		}
		if (width != this.__lastWidth) {
			this.__domElement.style.width = width + "px";
			this.__lastWidth = width;
		}
		if (height != this.__lastHeight) {
			this.__domElement.style.height = height + "px";
			this.__lastHeight = height;
		}
		this.__isValid = true;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetRole(Infragistics.Scheduler.Core.ModelBase)" />*/
	setRole: function (model) {
		var role = model.role();
		if ($.ig.util.nullableEquals(role, this.__role)) {
			return;
		}
		if (this.__domElement != null) {
			var oldRole = this.__role;
			this.__role = $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, role);
			this.__isSelectable = false;
			if ($.ig.util.nullableNotEquals(this.__role, null)) {
				var newCssClass = model.owner()._view().getCssClassName(this.__role.value());
				this.__domElement.className = newCssClass;
				switch (this.__role) {
					case $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDay):
					case $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayToday):
						this.__isSelectable = true;
						break;
				}
			}
			this.invalidate();
			this.onRoleChanged(model, oldRole, this.__role);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetRole(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetTextBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	setTextBrush: function (model, textBrush) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.textBrush;
		var brush = "";
		var roleCache = model.owner()._view().getRoleCache(model.role());
		if (roleCache.foreground() != textBrush) {
			brush = textBrush != null ? textBrush.__fill : null;
		}
		if (brush != this.__textBrush) {
			this.__textBrush = brush;
			this.__domElement.style.color = brush;
			this.invalidate();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ElementView::SetTextBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	,
	$type: new $.ig.Type('ElementView', $.ig.Object.prototype.$type, [$.ig.INativeView.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ElementView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SelectableViewBase" />*/

$.ig.util.defType('SelectableViewBase', 'ElementView', {
	__lastSelectedClassName: null,
	init: function (domElement) {
		$.ig.ElementView.prototype.init.call(this, domElement);
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.SelectableViewBase::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	getSelectedCssClassName: function (model) {
		switch (model.role()) {
			case $.ig.scheduler.SchedulerElementRole.monthViewDay:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
				return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.monthViewDaySelected);
			case $.ig.scheduler.SchedulerElementRole.agendaApptArea: return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.agendaApptSelected);
			case $.ig.scheduler.SchedulerElementRole.agendaApptEndTime: return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.agendaApptEndTimeSelected);
			case $.ig.scheduler.SchedulerElementRole.agendaApptLocation: return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.agendaApptLocationSelected);
			case $.ig.scheduler.SchedulerElementRole.agendaApptStartTime: return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.agendaApptStartTimeSelected);
			case $.ig.scheduler.SchedulerElementRole.agendaApptSubject: return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.agendaApptSubjectSelected);
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.SelectableViewBase::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	onIsSelectedChanged: function (model) {
		this.verifySelectedState(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	onRoleChanged: function (model, oldRole, newRole) {
		this.__lastSelectedClassName = null;
		this.verifySelectedState(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::VerifySelectedState(Infragistics.Scheduler.Core.ModelBase)" />*/
	verifySelectedState: function (model) {
		if (!model.isSelected()) {
			if (this.__lastSelectedClassName != null) {
				$.ig.SchedulerUtils.prototype.removeClassName(this.domElement(), this.__lastSelectedClassName);
			}
			this.__lastSelectedClassName = null;
			return;
		}
		var className = this.getSelectedCssClassName(model);
		if (className == this.__lastSelectedClassName) {
			return;
		}
		if (this.__lastSelectedClassName != null) {
			$.ig.SchedulerUtils.prototype.removeClassName(this.domElement(), this.__lastSelectedClassName);
		}
		this.__lastSelectedClassName = className;
		if (this.__lastSelectedClassName != null) {
			$.ig.SchedulerUtils.prototype.addClassName(this.domElement(), this.__lastSelectedClassName);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SelectableViewBase::VerifySelectedState(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('SelectableViewBase', $.ig.ElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SelectableViewBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TimeSlotView" />*/

$.ig.util.defType('TimeSlotView', 'SelectableViewBase', {
	init: function (domElement) {
		$.ig.SelectableViewBase.prototype.init.call(this, domElement);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TimeSlotView Infragistics.Scheduler.Core.TimeSlotView::Create(Infragistics.Scheduler.Core.TimeSlotModel)" />*/
	create: function (model) {
		var div = document.createElement("div");
		var view = new $.ig.TimeSlotView(div);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TimeSlotView Infragistics.Scheduler.Core.TimeSlotView::Create(Infragistics.Scheduler.Core.TimeSlotModel)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.TimeSlotView::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	getSelectedCssClassName: function (model) {
		switch (model.role()) {
			case $.ig.scheduler.SchedulerElementRole.monthViewDay:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
				return model.owner()._view().getCssClassName($.ig.scheduler.SchedulerElementRole.monthViewDaySelected);
		}
		return null;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.TimeSlotView::GetSelectedCssClassName(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPosition: function (model, left, top, width, height) {
		var tmodel = $.ig.util.cast($.ig.TimeSlotModel.prototype.$type, model);
		var selected = tmodel.isSelected();
		$.ig.SelectableViewBase.prototype.setPosition.call(this, model, left, top, width, height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('TimeSlotView', $.ig.SelectableViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TimeSlotView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthViewSelectedDateView" />*/

$.ig.util.defType('MonthViewSelectedDateView', 'TimeSlotView', {
	__children: null,
	__previousChildren: null,
	__selectedDate: new Date(),
	init: function (domElement) {
		this.__children = new $.ig.List$1($.ig.ModelBase.prototype.$type, 0);
		this.__selectedDate = $.ig.Date.prototype.today();
		$.ig.TimeSlotView.prototype.init.call(this, domElement);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthViewSelectedDateView Infragistics.Scheduler.Core.MonthViewSelectedDateView::CreateSelectedDateView(Infragistics.Scheduler.Core.TimeSlotModel)" />*/
	createSelectedDateView: function (model) {
		var div = document.createElement("div");
		var view = new $.ig.MonthViewSelectedDateView(div);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthViewSelectedDateView Infragistics.Scheduler.Core.MonthViewSelectedDateView::CreateSelectedDateView(Infragistics.Scheduler.Core.TimeSlotModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::Dispose()" />*/
	dispose: function () {
		var en = this.__children.getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			$.ig.SchedulerUtils.prototype.disposeElementView(model);
		}
		this.__children.clear();
		if (this.__previousChildren != null) {
			var en1 = this.__previousChildren.getEnumerator();
			while (en1.moveNext()) {
				var model1 = en1.current();
				$.ig.SchedulerUtils.prototype.disposeElementView(model1);
			}
			this.__previousChildren.clear();
		}
		$.ig.TimeSlotView.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.MonthViewSelectedDateView::GetDefaultBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	getDefaultBackgroundBrush: function (model, background) {
		var roleCache = model.owner()._view().getRoleCache($.ig.scheduler.SchedulerElementRole.monthViewDaySelected);
		if (roleCache.background() != null || background == null) {
			return roleCache.background();
		}
		return $.ig.TimeSlotView.prototype.getDefaultBackgroundBrush.call(this, model, background);
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.MonthViewSelectedDateView::GetDefaultBackgroundBrush(Infragistics.Scheduler.Core.ModelBase, System.Windows.Media.Brush)" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthViewSelectedDateView::SelectedDate()" />*/
	selectedDate: function () {
		return this.__selectedDate;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthViewSelectedDateView::SelectedDate()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::BeginLayouPass(System.DateTime)" />*/
	beginLayouPass: function (selectedDate) {
		this.__previousChildren = new $.ig.HashSet$1($.ig.ModelBase.prototype.$type, 0);
		var datechanged = +selectedDate != +(this.__selectedDate);
		var en = this.__children.getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			if (datechanged) {
				$.ig.SchedulerUtils.prototype.disposeElementView(model);
			} else {
				this.__previousChildren.add(model);
			}
		}
		this.__selectedDate = selectedDate;
		this.__children.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::BeginLayouPass(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::EndLayoutPass()" />*/
	endLayoutPass: function () {
		if (this.__previousChildren != null) {
			var en = this.__previousChildren.getEnumerator();
			while (en.moveNext()) {
				var model = en.current();
				$.ig.SchedulerUtils.prototype.disposeElementView(model);
			}
			this.__previousChildren = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::EndLayoutPass()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::OnChildModelAdded(Infragistics.Scheduler.Core.SchedulerPresenterManager, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.ModelBase)" />*/
	onChildModelAdded: function (pm, selectedDayModel, childModel) {
		this.__children.add(childModel);
		this.__previousChildren.remove(childModel);
		var presenter = pm.getModelPresenter(this.domElement(), childModel, false, null);
		var view = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
		if (view == null) {
			return;
		}
		switch (childModel.state()) {
			case $.ig.ModelStates.prototype.$new:
			case $.ig.ModelStates.prototype.recycled:
				view.invalidate();
				break;
		}
		childModel.state($.ig.ModelStates.prototype.inview);
		view.setRole(childModel);
		childModel.presenter().modelUpdated(childModel);
		childModel.cleanDirtyFlags();
		view.propertiesPending(0);
		view.setPosition(childModel, childModel.x() - selectedDayModel.x(), childModel.y() - selectedDayModel.y(), childModel.width(), childModel.height());
		childModel.isPositionDirty(false);
		childModel.isSizeDirty(false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthViewSelectedDateView::OnChildModelAdded(Infragistics.Scheduler.Core.SchedulerPresenterManager, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('MonthViewSelectedDateView', $.ig.TimeSlotView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthViewSelectedDateView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ILayoutEngine" />*/

$.ig.util.defType('ILayoutEngine', 'Object', {
	$type: new $.ig.Type('ILayoutEngine', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ILayoutEngine" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel" />*/

$.ig.util.defType('SchedulerLayoutPanel', 'ElementView', {
	__presenterManager: null,
	__scrollingView: null,
	__visualModel: null,
	__refreshPending: false,
	__visibilityInvalidated: false,
	__initialRefreshFinished: false,
	__isValidatingVisibiliy: false,
	__validateVisibility: null,
	__lastScrollingExtent: 0,
	__panelHeight: 0,
	__panelWidth: 0,
	__selectedDayView: null,
	__selectedDayModel: null,
	__viewPortOffset: null,
	__canvasContainer: null,
	init: function (domElement, presenterManager) {
		this.__visibilityInvalidated = false;
		this.__validateVisibility = null;
		$.ig.ElementView.prototype.init.call(this, domElement);
		this.refresh(this.__visualModel, false);
		this.__presenterManager = presenterManager;
		this.__initialRefreshFinished = false;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel Infragistics.Scheduler.Core.SchedulerLayoutPanel::Create(Infragistics.Scheduler.Core.SchedulerScrollingView, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	create: function (scrollingView, viewMode) {
		var div = document.createElement("div");
		var view = new $.ig.SchedulerLayoutPanel(div, new $.ig.SchedulerPresenterManager(scrollingView.scheduler()));
		view.__scrollingView = scrollingView;
		view.setScrollExtent(0);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel Infragistics.Scheduler.Core.SchedulerLayoutPanel::Create(Infragistics.Scheduler.Core.SchedulerScrollingView, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Dispose()" />*/
	dispose: function () {
		if (this.__canvasContainer != null) {
			this.__canvasContainer.dispose();
		}
		$.ig.ElementView.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Dispose()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::IsAbsolute()" />*/
	isAbsolute: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::IsAbsolute()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPosition: function (model, left, top, width, height) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::IsValidatingVisibiliy()" />*/
	isValidatingVisibiliy: function () {
		return this.__isValidatingVisibiliy;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::IsValidatingVisibiliy()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerLayoutPanel::Size()" />*/
	size: function () {
		return new $.ig.Size(1, this.__panelWidth, this.__panelHeight);
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerLayoutPanel::Size()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::InitializeCanvasContainer()" />*/
	initializeCanvasContainer: function () {
		if (this.__canvasContainer == null) {
			this.__canvasContainer = new $.ig.CanvasContainer(this.__scrollingView.scrollDirection(), this.__scrollingView.scheduler()._view());
			this.domElement().appendChild(this.__canvasContainer.element());
		}
		if (this.__scrollingView.isInInfiniteScrollMode()) {
			this.__canvasContainer.viewPortOffset(new $.ig.Point(0));
		} else {
			this.__canvasContainer.extraScrollAreaExtent(0);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::InitializeCanvasContainer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Refresh(Infragistics.Scheduler.Core.VisualModel, System.Boolean)" />*/
	refresh: function (visualModel, immediate) {
		this.__visualModel = visualModel;
		this.scheduleRefresh(immediate);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Refresh(Infragistics.Scheduler.Core.VisualModel, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ScheduleRefresh(System.Boolean)" />*/
	scheduleRefresh: function (immediate) {
		this.scheduleRefresh1(immediate ? 0 : 1);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ScheduleRefresh(System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ScheduleRefresh(System.Int32)" />*/
	scheduleRefresh1: function (milliseconds) {
		if (milliseconds == 0) {
			this.__refreshPending = true;
			this.doRefresh();
			return;
		}
		if (this.__refreshPending) {
			return;
		}
		this.__refreshPending = true;
		window.setTimeout(this.doAsyncRefresh.runOn(this), milliseconds);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ScheduleRefresh(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SizeToAbsoluteExtent(System.Double, System.Double)" />*/
	sizeToAbsoluteExtent: function (extent, offset) {
		var left = 0;
		var top = 0;
		var width = this.__panelWidth;
		var height = this.__panelHeight;
		if (this.__scrollingView.isInInfiniteScrollMode()) {
			if (this.__scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
				left = offset;
				width = Math.max(width, extent);
			} else {
				top = offset;
				height = Math.max(height, extent);
			}
		}
		this.domElement().style.width = width.toString() + "px";
		this.domElement().style.height = height.toString() + "px";
		this.__scrollingView.setOverlayPosition(left, top, this.__panelWidth, this.__panelHeight);
		if (this.__canvasContainer != null) {
			this.__canvasContainer.size(new $.ig.Size(1, this.__panelWidth, this.__panelHeight));
			this.__canvasContainer.location({ __x: left, __y: top, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SizeToAbsoluteExtent(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetPanelSize(System.Double, System.Double)" />*/
	setPanelSize: function (width, height) {
		this.__panelWidth = width;
		this.__panelHeight = height;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetPanelSize(System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::UpdateScrollExtent()" />*/
	updateScrollExtent: function () {
		this.setScrollExtent(this.__scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal ? this.__visualModel.absoluteWidth() : this.__visualModel.absoluteHeight());
		return this.__scrollingView.verifyPanelSize();
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::UpdateScrollExtent()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::ClearElementPresenter(Infragistics.Scheduler.Core.ModelBase)" />*/
	clearElementPresenter: function (model) {
		var presenter = $.ig.util.cast($.ig.HybridModelPresenter.prototype.$type, model.presenter());
		if (presenter != null) {
			var ePresenter = presenter.elementPresenter();
			if (ePresenter != null) {
				var view = $.ig.util.cast($.ig.ElementView.prototype.$type, ePresenter.nativeView());
				if (view != null) {
					if (view == this.__selectedDayView) {
						presenter.elementPresenter(null);
						return false;
					}
				}
			}
		}
		$.ig.SchedulerUtils.prototype.disposeElementView(model);
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::ClearElementPresenter(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::DoAsyncRefresh()" />*/
	doAsyncRefresh: function () {
		this.doRefresh();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::DoAsyncRefresh()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::DoRefresh()" />*/
	doRefresh: function () {
		if (!this.__refreshPending) {
			return false;
		}
		this.__refreshPending = false;
		if (this.__visibilityInvalidated) {
			this.__visibilityInvalidated = false;
			this.__isValidatingVisibiliy = true;
			this.__validateVisibility();
			this.__isValidatingVisibiliy = false;
		}
		if (this.__visualModel == null) {
			this.scheduleRefresh1(50);
			return false;
		}
		if ($.ig.Rect.prototype.l_op_Equality(this.__visualModel.actualVisibleRegion(), null) || this.__visualModel.actualVisibleRegion().isEmpty()) {
			this.scheduleRefresh1(50);
			return false;
		}
		if (this.domElement() == null) {
			return false;
		}
		if (!this.updateScrollExtent()) {
			this.scheduleRefresh1(1);
			return false;
		}
		var top = this.__visualModel.actualVisibleRegion().top();
		var left = this.__visualModel.actualVisibleRegion().left();
		var en = this.__visualModel.getHiddenModels().getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			this.removeModel(model);
		}
		this.__visualModel.hiddenLayer().clear();
		this.__viewPortOffset = { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		if (!this.__scrollingView.isInInfiniteScrollMode()) {
			if (this.__scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
				this.__viewPortOffset.__x = left;
			} else {
				this.__viewPortOffset.__y = top;
			}
		}
		if (this.__canvasContainer != null) {
			this.__canvasContainer.viewPortOffset(this.__viewPortOffset);
			this.__selectedDayModel = null;
			if (this.__selectedDayView != null && this.__selectedDayView.domElement() == null) {
				this.__selectedDayView = null;
			}
			var modelsWereProcessed = this.__canvasContainer.renderAllViews(this.__scrollingView.viewModeInfo().viewMode(), this.__visualModel.getAllModels(false), this.processNonCanvasModel.runOn(this));
			if (modelsWereProcessed) {
				this.__initialRefreshFinished = true;
			} else {
				this.verifyInitialModelLoad();
			}
			if (this.__selectedDayModel != null) {
				if (this.__selectedDayView != null) {
					this.__selectedDayView.endLayoutPass();
				}
			} else {
				if (this.__selectedDayView != null) {
					this.__selectedDayView.dispose();
					this.__selectedDayView = null;
				}
			}
			if (modelsWereProcessed) {
				this.__scrollingView.scheduler()._raiseLayoutUpdatedEvent(this.__scrollingView.viewModeInfo().viewMode());
			}
			return true;
		}
		this.__scrollingView.verifyBackground();
		var schedulerLayers = this.__visualModel.schedulerLayers();
		var zIndex = 0;
		var layerCount = schedulerLayers.count();
		for (var i = 0; i < layerCount; i++) {
			zIndex++;
			var currentLayer = schedulerLayers.__inner[i];
			var valueListCount = currentLayer.valueList().count();
			for (var c = 0; c < valueListCount; c++) {
				if (currentLayer.removedList().__inner[c]) {
					continue;
				}
				var model1 = currentLayer.valueList().__inner[c];
				var presenter = this.__presenterManager.getModelPresenter(this.domElement(), model1, false, null);
				this.processPresenter(this.__viewPortOffset, zIndex, model1, presenter);
			}
		}
		if (this.__initialRefreshFinished) {
			this.__scrollingView.scheduler()._raiseLayoutUpdatedEvent(this.__scrollingView.viewModeInfo().viewMode());
		}
		this.verifyInitialModelLoad();
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::DoRefresh()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::ProcessNonCanvasModel(Infragistics.Scheduler.Core.ModelBase)" />*/
	processNonCanvasModel: function (model) {
		switch (model.role()) {
			case $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment:
				{
					var presenter = this.__presenterManager.getModelPresenter(this.domElement(), model, false, null);
					this.processPresenter(this.__viewPortOffset, 20, model, presenter);
					return true;
				}
			case $.ig.scheduler.SchedulerElementRole.monthViewDayHorizontalSeparator:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayVerticalSeparator:
				return this.clearElementPresenter(model);
		}
		if (this.__selectedDayModel == null) {
			if (!($.ig.util.cast($.ig.TimeSlotModel.prototype.$type, model) !== null)) {
				return this.clearElementPresenter(model);
			}
			switch (model.role()) {
				default: return this.clearElementPresenter(model);
				case $.ig.scheduler.SchedulerElementRole.monthViewDay:
				case $.ig.scheduler.SchedulerElementRole.monthViewDaySelected:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
					if (!model.isSelected()) {
						return this.clearElementPresenter(model);
					}
					this.__selectedDayModel = model;
					break;
			}
			var presenter1 = this.__presenterManager.getModelPresenter(this.domElement(), model, true, this.__selectedDayView);
			this.processPresenter(this.__viewPortOffset, 10, model, presenter1);
			this.__selectedDayView = $.ig.util.cast($.ig.MonthViewSelectedDateView.prototype.$type, presenter1.nativeView());
			var mpath = model.path();
			this.__selectedDayView.beginLayouPass($.ig.Date.prototype.fromValues(mpath.year(), mpath.month(), mpath.day(), 0, 0, 0, 0));
			return true;
		}
		if (this.__selectedDayView == null) {
			return this.clearElementPresenter(model);
		}
		if (this.__selectedDayModel == model) {
			return true;
		}
		var path = model.path();
		if (path.isLeadingDay() || path.isTrailingDay() || !path.isDayPath()) {
			return this.clearElementPresenter(model);
		}
		var selectedDayPath = this.__selectedDayModel.path();
		if (path.day() != selectedDayPath.day() || path.month() != selectedDayPath.month() || path.year() != selectedDayPath.year()) {
			return this.clearElementPresenter(model);
		}
		this.__selectedDayView.onChildModelAdded(this.__presenterManager, this.__selectedDayModel, model);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::ProcessNonCanvasModel(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ProcessPresenter(System.Windows.Point, System.Int32, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IModelPresenter)" />*/
	processPresenter: function (viewPortOffset, zIndex, model, presenter) {
		var view = presenter.nativeView();
		if (view != null) {
			this.__initialRefreshFinished = true;
			switch (model.state()) {
				case $.ig.ModelStates.prototype.$new:
				case $.ig.ModelStates.prototype.recycled:
					view.invalidate();
					break;
			}
			model.state($.ig.ModelStates.prototype.inview);
			view.zIndex(zIndex);
			view.setRole(model);
			model.presenter().modelUpdated(model);
			model.cleanDirtyFlags();
			view.propertiesPending(0);
			view.setPosition(model, model.x() - $.ig.truncate(viewPortOffset.__x), model.y() - $.ig.truncate(viewPortOffset.__y), model.width(), model.height());
			model.isPositionDirty(false);
			model.isSizeDirty(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::ProcessPresenter(System.Windows.Point, System.Int32, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IModelPresenter)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::RemoveModel(Infragistics.Scheduler.Core.ModelBase)" />*/
	removeModel: function (model) {
		var presenter = $.ig.util.cast($.ig.HybridModelPresenter.prototype.$type, model.presenter());
		if (presenter == null) {
			return;
		}
		var ePresenter = presenter.elementPresenter();
		if (ePresenter == null) {
			return;
		}
		var view = $.ig.util.cast($.ig.ElementView.prototype.$type, ePresenter.nativeView());
		if (view != null && view.domElement() != null && view != this.__selectedDayView) {
			$.ig.SchedulerUtils.prototype.disposeElementView(model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::RemoveModel(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetScrollExtent(System.Double)" />*/
	setScrollExtent: function (extent) {
		if (this.domElement() != null) {
			var width = this.__panelWidth;
			var height = this.__panelHeight;
			var scroller = this.__scrollingView.scroller();
			if (scroller == null) {
				this.sizeToAbsoluteExtent(extent, 0);
			} else {
				this.__lastScrollingExtent = extent;
				var x = 0;
				var y = 0;
				if (this.__scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
					x = -scroller.horizontalOffset();
					width = Math.max(width, extent);
				} else {
					y = -scroller.verticalOffset();
					height = Math.max(height, extent);
				}
				var offset;
				if (this.__scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
					offset = this.__visualModel.actualVisibleLeft();
					scroller.horizontalExtent(extent);
				} else {
					offset = this.__visualModel.actualVisibleTop();
					scroller.verticalExtent(extent);
				}
				this.sizeToAbsoluteExtent(extent, offset);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::SetScrollExtent(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::VerifyInitialModelLoad()" />*/
	verifyInitialModelLoad: function () {
		if (this.__initialRefreshFinished) {
			return;
		}
		this.__scrollingView.scheduler()._setViewport(this.__scrollingView.viewModeInfo().viewMode(), this.__visualModel.actualVisibleRegion().left(), this.__visualModel.actualVisibleRegion().top(), this.__visualModel.actualVisibleRegion().right(), this.__visualModel.actualVisibleRegion().bottom() + 1);
		this.scheduleRefresh1(100);
		this.__initialRefreshFinished = true;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::VerifyInitialModelLoad()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.InitialRefreshFinished()" />*/
	initialRefreshFinished: function () {
		return this.__initialRefreshFinished;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.InitialRefreshFinished()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.InvalidateVisibility(System.Action)" />*/
	invalidateVisibility: function (validateVisibility) {
		this.__validateVisibility = validateVisibility;
		this.__visibilityInvalidated = true;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.InvalidateVisibility(System.Action)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.ViewportChanged()" />*/
	viewportChanged: function () {
		this.scheduleRefresh(true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayoutPanel::Infragistics.Scheduler.Core.ILayoutEngine.ViewportChanged()" />*/
	,
	$type: new $.ig.Type('SchedulerLayoutPanel', $.ig.ElementView.prototype.$type, [$.ig.ILayoutEngine.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerScrollingView" />*/

$.ig.util.defType('SchedulerScrollingView', 'ElementView', {
	__schedulerView: null,
	__viewModeInfo: null,
	__scrollDirection: 0,
	__panel: null,
	__scroller: null,
	__isLeftButtonDown: false,
	__isSettingScrollOffset: false,
	__isInInfiniteScrollMode: false,
	__location: $.ig.util.toNullable($.ig.Rect.prototype.$type, null),
	__eventProxy: null,
	__clickCount: 0,
	__mouseDownPoint: null,
	__doubleClickPending: false,
	__lastReportedSize: null,
	__firstMouseDown: new Date(),
	__hitTestOverlay: null,
	__backgroundOverride: null,
	__logicalScrollOffsetX: 0,
	__logicalScrollOffsetY: 0,
	_doubleClickMoveThreshold: 0,
	_doubleClickMillisecondThreshold: 0,
	init: function (domElement, schedulerView, viewModeInfo) {
		this.__mouseDownPoint = new $.ig.Point(0);
		this.__lastReportedSize = new $.ig.Size(0);
		this._doubleClickMoveThreshold = 6;
		this._doubleClickMillisecondThreshold = 250;
		$.ig.ElementView.prototype.init.call(this, domElement);
		this.__schedulerView = schedulerView;
		this.__viewModeInfo = viewModeInfo;
		this.__scrollDirection = viewModeInfo.scrollDirection();
		this.__isInInfiniteScrollMode = true;
		switch (this.__viewModeInfo.viewMode()) {
			case $.ig.scheduler.SchedulerViewMode.monthView:
				this.__isInInfiniteScrollMode = this.__schedulerView.scheduler()._monthViewScrollMode() != $.ig.MonthViewScrollMode.prototype.paged;
				break;
		}
		this.__hitTestOverlay = document.createElement("div");
		this.__hitTestOverlay.style.position = "absolute";
		this.__hitTestOverlay.style.left = "0";
		this.__hitTestOverlay.style.top = "0";
		this.__hitTestOverlay.style.zIndex = $.ig.ElementView.prototype.zIndex_HitTestOvelay;
		this.__hitTestOverlay.tabIndex = 0;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerScrollingView Infragistics.Scheduler.Core.SchedulerScrollingView::Create(Infragistics.Scheduler.Core.SchedulerView, Infragistics.Scheduler.Core.SchedulerViewModeInfo)" />*/
	create: function (schedulerView, viewModeInfo) {
		var div = document.createElement("div");
		var view = new $.ig.SchedulerScrollingView(div, schedulerView, viewModeInfo);
		div.style.position = "absolute";
		view.initializeCssClassName();
		view.__panel = $.ig.SchedulerLayoutPanel.prototype.create(view, viewModeInfo.viewMode());
		if (view.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
			view.__panel.domElement().style.height = "10px;";
			view.__panel.domElement().style.width = "10000px;";
		} else {
			view.__panel.domElement().style.width = "10px;";
			view.__panel.domElement().style.height = "10000px;";
		}
		div.appendChild(view.__panel.domElement());
		div.appendChild(view.__hitTestOverlay);
		schedulerView.domElement().appendChild(div);
		if (viewModeInfo.viewMode() == $.ig.scheduler.SchedulerViewMode.monthView) {
			view.__panel.initializeCanvasContainer();
		}
		if (view.isInInfiniteScrollMode()) {
			view.__scroller = new $.ig.ScrollManager(view.domElement(), null, function (evt, args) { view.onScrolling(evt, args); }, function (evt, args) { view.onScrolled(evt, args); }, null, function (evt, args) { view.onThumbDragMove(evt, args); }, null, null, null);
		}
		view.eventProxy($.ig.SchedulerUtils.prototype.createDOMEventProxy(view.__hitTestOverlay));
		view.onScrollDirectionChanged();
		schedulerView.scheduler()._setLayoutEngine(view.__panel, viewModeInfo.viewMode());
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerScrollingView Infragistics.Scheduler.Core.SchedulerScrollingView::Create(Infragistics.Scheduler.Core.SchedulerView, Infragistics.Scheduler.Core.SchedulerViewModeInfo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::Dispose()" />*/
	dispose: function () {
		if (this.__viewModeInfo != null && this.__viewModeInfo.layoutEngine() == this.__panel) {
			this.__viewModeInfo.layoutEngine(null);
		}
		if (this.__scroller != null) {
			this.__scroller.dispose();
			this.__scroller = null;
		}
		if (this.__eventProxy != null) {
			this.eventProxy(null);
		}
		if (this.__hitTestOverlay != null) {
			$.ig.SchedulerUtils.prototype.remove(this.__hitTestOverlay);
			this.__hitTestOverlay = null;
		}
		if (this.__panel != null) {
			this.__panel.dispose();
			this.__panel = null;
		}
		$.ig.ElementView.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactCompleted(System.Windows.Point, System.Boolean)" />*/
	onContactCompleted: function (point, isFinger) {
		this.onMouseAction(point, false, 1, $.ig.VisualElementInputType.prototype.mouseUp);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactCompleted(System.Windows.Point, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactMoved(System.Windows.Point, System.Boolean)" />*/
	onContactMoved: function (point, isFinger) {
		if (Math.abs(point.__x - this.__mouseDownPoint.__x) >= this._doubleClickMoveThreshold || Math.abs(point.__y - this.__mouseDownPoint.__y) >= this._doubleClickMoveThreshold) {
			this.__doubleClickPending = false;
		}
		this.onMouseAction(point, false, 1, $.ig.VisualElementInputType.prototype.mouseOver);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactMoved(System.Windows.Point, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactStarted(System.Windows.Point, System.Boolean)" />*/
	onContactStarted: function (point, isFinger) {
		this.__hitTestOverlay.focus();
		var now = $.ig.Date.prototype.now();
		if (this.__doubleClickPending && Math.abs(point.__x - this.__mouseDownPoint.__x) < this._doubleClickMoveThreshold && Math.abs(point.__y - this.__mouseDownPoint.__y) < this._doubleClickMoveThreshold && $.ig.util.timeSpanTotalMilliseconds((now - this.__firstMouseDown)) < this._doubleClickMillisecondThreshold) {
			this.__clickCount++;
			this.__doubleClickPending = false;
		} else {
			this.__doubleClickPending = true;
			this.__clickCount = 1;
			this.__firstMouseDown = now;
			this.__mouseDownPoint.__x = point.__x;
			this.__mouseDownPoint.__y = point.__y;
		}
		this.onMouseAction(point, false, this.__clickCount, $.ig.VisualElementInputType.prototype.mouseDown);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnContactStarted(System.Windows.Point, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::OnKeyDown(System.Windows.Input.Key)" />*/
	onKeyDown: function (key) {
		if (this.__eventProxy == null) {
			return false;
		}
		switch (key) {
			case $.ig.Key.prototype.up:
			case $.ig.Key.prototype.down:
			case $.ig.Key.prototype.left:
			case $.ig.Key.prototype.right:
			case $.ig.Key.prototype.tab:
				switch (this.__viewModeInfo.viewMode()) {
					case $.ig.scheduler.SchedulerViewMode.monthView: return this.processKeyDown_MonthView(key);
					case $.ig.scheduler.SchedulerViewMode.agendaView: return this.processKeyDown_AgendaView(key);
				}
				break;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::OnKeyDown(System.Windows.Input.Key)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrolling(System.Object, System.Object)" />*/
	onScrolling: function (sender, args) {
		this.onScrollOffsetChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrolling(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrolled(System.Object, System.Object)" />*/
	onScrolled: function (sender, args) {
		this.onScrollOffsetChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrolled(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnThumbDragMove(System.Object, System.Object)" />*/
	onThumbDragMove: function (sender, args) {
		this.onScrollOffsetChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnThumbDragMove(System.Object, System.Object)" />*/
	,
	/*<BeginProperty Name="Infragistics.Controls.EventProxy Infragistics.Scheduler.Core.SchedulerScrollingView::EventProxy()" />*/
	eventProxy: function (value) {
		if (arguments.length === 1) {
			if (value != this.__eventProxy) {
				if (this.__eventProxy != null) {
					var $t = this.__eventProxy;
					$t.onContactCompleted = $.ig.Delegate.prototype.remove($t.onContactCompleted, this.onContactCompleted.runOn(this));
					var $t1 = this.__eventProxy;
					$t1.onContactMoved = $.ig.Delegate.prototype.remove($t1.onContactMoved, this.onContactMoved.runOn(this));
					var $t2 = this.__eventProxy;
					$t2.onContactStarted = $.ig.Delegate.prototype.remove($t2.onContactStarted, this.onContactStarted.runOn(this));
					var $t3 = this.__eventProxy;
					$t3.onKeyDown = $.ig.Delegate.prototype.remove($t3.onKeyDown, this.onKeyDown.runOn(this));
					this.__eventProxy.shouldInteract(null);
					this.__eventProxy.destroy();
				}
				this.__eventProxy = value;
				if (value != null) {
					this.__eventProxy.shouldInteract(this.shouldInteract.runOn(this));
					var $t4 = this.__eventProxy;
					$t4.onContactCompleted = $.ig.Delegate.prototype.combine($t4.onContactCompleted, this.onContactCompleted.runOn(this));
					var $t5 = this.__eventProxy;
					$t5.onContactMoved = $.ig.Delegate.prototype.combine($t5.onContactMoved, this.onContactMoved.runOn(this));
					var $t6 = this.__eventProxy;
					$t6.onContactStarted = $.ig.Delegate.prototype.combine($t6.onContactStarted, this.onContactStarted.runOn(this));
					var $t7 = this.__eventProxy;
					$t7.onKeyDown = $.ig.Delegate.prototype.combine($t7.onKeyDown, this.onKeyDown.runOn(this));
					this.__eventProxy.viewport(new $.ig.Rect(0, 0, 0, 1, 1));
				}
			}
			return value;
		} else {
			return this.__eventProxy;
		}
	}
	/*<EndProperty Name="Infragistics.Controls.EventProxy Infragistics.Scheduler.Core.SchedulerScrollingView::EventProxy()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerScrollingView::HorizontalOffset()" />*/
	horizontalOffset: function () {
		return (this.__scroller != null) ? this.__scroller.horizontalOffset() : this.__logicalScrollOffsetX;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerScrollingView::HorizontalOffset()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::IsInInfiniteScrollMode()" />*/
	isInInfiniteScrollMode: function () {
		return this.__isInInfiniteScrollMode;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::IsInInfiniteScrollMode()" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.Core.SchedulerScrollingView::Location()" />*/
	location: function () {
		return this.__location;
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.Core.SchedulerScrollingView::Location()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel Infragistics.Scheduler.Core.SchedulerScrollingView::Panel()" />*/
	panel: function () {
		return this.__panel;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayoutPanel Infragistics.Scheduler.Core.SchedulerScrollingView::Panel()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.SchedulerScrollingView::Scheduler()" />*/
	scheduler: function () {
		return this.__schedulerView != null ? this.__schedulerView.scheduler() : null;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.SchedulerScrollingView::Scheduler()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.SchedulerScrollingView::ScrollDirection()" />*/
	scrollDirection: function (value) {
		if (arguments.length === 1) {
			if (value != this.__scrollDirection) {
				this.__scrollDirection = value;
				this.onScrollDirectionChanged();
			}
			return value;
		} else {
			return this.__scrollDirection;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.SchedulerScrollingView::ScrollDirection()" />*/
	,
	/*<BeginProperty Name="Infragistics.ScrollManager Infragistics.Scheduler.Core.SchedulerScrollingView::Scroller()" />*/
	scroller: function () {
		return this.__scroller;
	}
	/*<EndProperty Name="Infragistics.ScrollManager Infragistics.Scheduler.Core.SchedulerScrollingView::Scroller()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerScrollingView::VerticalOffset()" />*/
	verticalOffset: function () {
		return (this.__scroller != null) ? this.__scroller.verticalOffset() : this.__logicalScrollOffsetY;
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerScrollingView::VerticalOffset()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerScrollingView::ViewModeInfo()" />*/
	viewModeInfo: function () {
		return this.__viewModeInfo;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerScrollingView::ViewModeInfo()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerScrollingView::GetModelFromPoint(System.Windows.Point, System.Func)" />*/
	getModelFromPoint: function (point, filter) {
		var visualModel = this.__viewModeInfo.visualModel();
		if (visualModel == null) {
			return null;
		}
		var actualRgn = visualModel.actualVisibleRegion();
		if ($.ig.Rect.prototype.l_op_Equality(actualRgn, null) || actualRgn.isEmpty()) {
			return null;
		}
		point.__x += actualRgn.x();
		point.__y += actualRgn.y();
		if (!visualModel.actualVisibleRegion().containsPoint(point)) {
			return null;
		}
		var en = visualModel.getAllModels(true).getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			if (!model.isHitTestVisible()) {
				continue;
			}
			if (model.x() > point.__x || model.y() > point.__y || model.x() + model.width() < point.__x || model.y() + model.height() < point.__y) {
				continue;
			}
			if (filter == null || filter(model)) {
				return model;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerScrollingView::GetModelFromPoint(System.Windows.Point, System.Func)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::InitializeCssClassName()" />*/
	initializeCssClassName: function () {
		var role = $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, null);
		switch (this.__viewModeInfo.viewMode()) {
			case $.ig.scheduler.SchedulerViewMode.monthView:
				role = $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthView);
				break;
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				role = $.ig.util.toNullable($.ig.scheduler.SchedulerElementRole.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaView);
				break;
		}
		if ($.ig.util.nullableNotEquals(role, null)) {
			var className = this.__schedulerView.getCssClassName(role.value());
			if (className != null) {
				this.domElement().className = className;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::InitializeCssClassName()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::NotifySchedulerWithViewport()" />*/
	notifySchedulerWithViewport: function () {
		if (this.__panel == null) {
			return;
		}
		if ($.ig.Size.prototype.l_op_Inequality(this.__panel.size(), this.__lastReportedSize)) {
			this.__lastReportedSize = this.__panel.size();
			this.__schedulerView.scheduler()._sizeChanged(this.__viewModeInfo.viewMode(), this.__lastReportedSize.width(), this.__lastReportedSize.height());
		}
		if (this.__scroller != null) {
			this.__schedulerView.onScrollViewportChanged(this.__viewModeInfo.viewMode(), $.ig.truncate(this.__scroller.horizontalOffset()), $.ig.truncate(this.__scroller.verticalOffset()), $.ig.truncate(this.__panel.size().width()), $.ig.truncate(this.__panel.size().height()));
			this.__scroller.refresh();
		} else {
			this.__schedulerView.onScrollViewportChanged(this.__viewModeInfo.viewMode(), $.ig.truncate(this.__logicalScrollOffsetX), $.ig.truncate(this.__logicalScrollOffsetY), $.ig.truncate(this.__panel.size().width()), $.ig.truncate(this.__panel.size().height()));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::NotifySchedulerWithViewport()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnMouseAction(System.Windows.Point, System.Boolean, System.Int32, Infragistics.Scheduler.Core.VisualElementInputType)" />*/
	onMouseAction: function (point, rightButton, clickCount, inputType) {
		switch (inputType) {
			case $.ig.VisualElementInputType.prototype.mouseDown:
				this.__isLeftButtonDown = !rightButton;
				if (this.__isLeftButtonDown) {
					if (clickCount == 2) {
						this.__isLeftButtonDown = false;
						this.processDoubleClick(point);
					}
				}
				this.__firstMouseDown = $.ig.Date.prototype.now();
				this.__mouseDownPoint.__x = point.__x;
				this.__mouseDownPoint.__y = point.__y;
				break;
			case $.ig.VisualElementInputType.prototype.mouseOver: break;
			case $.ig.VisualElementInputType.prototype.mouseUp:
				if (this.__isLeftButtonDown) {
					this.__isLeftButtonDown = false;
					this.processClick(point);
				}
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnMouseAction(System.Windows.Point, System.Boolean, System.Int32, Infragistics.Scheduler.Core.VisualElementInputType)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrollDirectionChanged()" />*/
	onScrollDirectionChanged: function () {
		if (this.__location.hasValue()) {
			this.setLocation(this.__location.value());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrollDirectionChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrollOffsetChanged()" />*/
	onScrollOffsetChanged: function () {
		if (this.__isSettingScrollOffset) {
			return;
		}
		if (this.__scroller != null) {
			var x = 0;
			var y = 0;
			if (this.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
				x = this.__scroller.horizontalOffset();
			} else {
				y = this.__scroller.verticalOffset();
			}
			this.__logicalScrollOffsetX = x;
			this.__logicalScrollOffsetY = y;
		}
		this.__schedulerView.onScrollViewportChanged(this.__viewModeInfo.viewMode(), $.ig.truncate(this.__logicalScrollOffsetX), $.ig.truncate(this.__logicalScrollOffsetY), $.ig.truncate(this.__panel.size().width()), $.ig.truncate(this.__panel.size().height()));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnScrollOffsetChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnStyleUpdated()" />*/
	onStyleUpdated1: function () {
		this.initializeCssClassName();
		var en = this.__viewModeInfo.visualModel().getAllModels(false).getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			var presenter = model.presenter();
			if (presenter == null) {
				continue;
			}
			var view = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
			if (view != null) {
				view.onStyleUpdated(model);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::OnStyleUpdated()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessClick(System.Windows.Point)" />*/
	processClick: function (point) {
		var model = this.getModelFromPoint(point, null);
		if (model != null) {
			this.__schedulerView.scheduler()._onModelClicked(model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessClick(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessDoubleClick(System.Windows.Point)" />*/
	processDoubleClick: function (point) {
		var model = this.getModelFromPoint(point, this.processDoubleClickFilter.runOn(this));
		if (model == null) {
			return;
		}
		if (null != model.path().appointmentResolved()) {
			this.__schedulerView.scheduler()._raiseAppointmentDoubleClickedEvent(model, this.__viewModeInfo.viewMode());
			return;
		}
		switch (model.role()) {
			case $.ig.scheduler.SchedulerElementRole.monthViewDay:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayLeading:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing:
			case $.ig.scheduler.SchedulerElementRole.monthViewDaySelected:
				this.__schedulerView.scheduler()._raiseDayDoubleClickedEvent(model);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessDoubleClick(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessDoubleClickFilter(Infragistics.Scheduler.Core.ModelBase)" />*/
	processDoubleClickFilter: function (model) {
		switch (model.role()) {
			case $.ig.scheduler.SchedulerElementRole.monthViewDay:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayLeading:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing:
			case $.ig.scheduler.SchedulerElementRole.monthViewDaySelected:
				return true;
		}
		if (null != model.path().appointmentResolved()) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessDoubleClickFilter(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessKeyDown_AgendaView(System.Windows.Input.Key)" />*/
	processKeyDown_AgendaView: function (key) {
		var next = false;
		switch (key) {
			case $.ig.Key.prototype.tab:
				if ((this.__eventProxy.currentModifiers() & $.ig.ModifierKeys.prototype.shift) != 0) {
					next = false;
				} else {
					next = true;
				}
				break;
			case $.ig.Key.prototype.up:
				next = false;
				break;
			case $.ig.Key.prototype.down:
				next = true;
				break;
			default: return false;
		}
		this.__schedulerView.scheduler()._selectNextPreviousAgendaViewAppointment(next);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessKeyDown_AgendaView(System.Windows.Input.Key)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessKeyDown_MonthView(System.Windows.Input.Key)" />*/
	processKeyDown_MonthView: function (key) {
		var currentSelectedDate = this.__schedulerView.scheduler().selectedDate();
		var newSelectedDate = currentSelectedDate;
		switch (key) {
			case $.ig.Key.prototype.tab:
				if ((this.__eventProxy.currentModifiers() & $.ig.ModifierKeys.prototype.shift) != 0) {
					newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, -1);
				} else {
					newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, 1);
				}
				break;
			case $.ig.Key.prototype.up:
				newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, -7);
				break;
			case $.ig.Key.prototype.down:
				newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, +7);
				break;
			case $.ig.Key.prototype.left:
				newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, -1);
				break;
			case $.ig.Key.prototype.right:
				newSelectedDate = $.ig.Date.prototype.addDays(currentSelectedDate, +1);
				break;
		}
		if (+currentSelectedDate == +newSelectedDate || $.ig.Date.prototype.getMonth(currentSelectedDate) != $.ig.Date.prototype.getMonth(newSelectedDate)) {
			return false;
		}
		if (newSelectedDate > this.__schedulerView.scheduler().maximumDate() || newSelectedDate < this.__schedulerView.scheduler().minimumDate()) {
			return false;
		}
		this.__schedulerView.scheduler().selectedDate(newSelectedDate);
		if (+(this.__schedulerView.scheduler().selectedDate()) == +newSelectedDate) {
			this.__schedulerView.scheduler()._raiseSelectedDateChanged((function () {
				var $ret = new $.ig.SelectedDateChangedEventArgs();
				$ret.selectedDate(newSelectedDate);
				return $ret;
			}()));
			var model = this.__schedulerView.getModelForDay(newSelectedDate.getFullYear(), $.ig.Date.prototype.getMonth(newSelectedDate), newSelectedDate.getDate());
			if (model != null) {
				this.__schedulerView.scheduler()._onModelClicked(model);
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ProcessKeyDown_MonthView(System.Windows.Input.Key)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::Refresh()" />*/
	refresh: function () {
		if (this.__panel != null) {
			this.__panel.refresh(this.__viewModeInfo.visualModel(), false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::Refresh()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ScrollTo(System.Int32, System.Int32, System.Boolean)" />*/
	scrollTo: function (x, y, animated) {
		this.__logicalScrollOffsetX = x;
		this.__logicalScrollOffsetY = y;
		this.__isSettingScrollOffset = true;
		if (this.__scroller != null) {
			this.__scroller.refresh();
		}
		var vmodel = this.__viewModeInfo.visualModel();
		if (this.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
			this.__panel.sizeToAbsoluteExtent(vmodel.absoluteWidth(), x);
			if (this.__scroller != null) {
				this.__scroller.horizontalExtent(vmodel.absoluteWidth());
				this.__scroller.horizontalOffset(x);
			}
		} else {
			this.__panel.sizeToAbsoluteExtent(vmodel.absoluteHeight(), y);
			if (this.__scroller != null) {
				this.__scroller.verticalExtent(vmodel.absoluteHeight());
				this.__scroller.verticalOffset(y);
			}
		}
		this.__isSettingScrollOffset = false;
		if (this.__panel != null && !this.__panel.isValidatingVisibiliy()) {
			this.__schedulerView.onScrollViewportChanged(this.__viewModeInfo.viewMode(), x, y, $.ig.truncate(this.__panel.size().width()), $.ig.truncate(this.__panel.size().height()));
		}
		this.__panel.scheduleRefresh1(5);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::ScrollTo(System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::SetLocation(System.Windows.Rect)" />*/
	setLocation: function (location) {
		this.__location = $.ig.util.toNullable($.ig.Rect.prototype.$type, location);
		if (this.domElement() != null) {
			var panelWidth = location.width();
			var panelHeight = location.height();
			var element = this.domElement();
			element.style.left = location.left() + "px";
			element.style.top = location.top() + "px";
			element.style.width = panelWidth + "px";
			element.style.height = panelHeight + "px";
			if (this.__scroller != null) {
				var vm = this.__viewModeInfo.visualModel();
				if (this.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
					if (vm.absoluteWidth() > panelWidth) {
						panelHeight -= this.__scroller.horizontalScrollbarHeight();
					}
				} else {
					if (vm.absoluteHeight() > panelHeight) {
						panelWidth -= this.__scroller.verticalScrollbarWidth();
					}
				}
			}
			this.__panel.setPanelSize(panelWidth, panelHeight);
			window.setTimeout(this.notifySchedulerWithViewport.runOn(this), 1);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::SetLocation(System.Windows.Rect)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::SetOverlayPosition(System.Double, System.Double, System.Double, System.Double)" />*/
	setOverlayPosition: function (left, top, width, height) {
		this.__hitTestOverlay.style.left = left + "px";
		this.__hitTestOverlay.style.top = top + "px";
		this.__hitTestOverlay.style.width = width + "px";
		this.__hitTestOverlay.style.height = height + "px";
		if (this.__eventProxy != null) {
			this.__eventProxy.viewport(new $.ig.Rect(0, 0, 0, width, height));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::SetOverlayPosition(System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ShouldInteract(System.Windows.Point)" />*/
	shouldInteract: function (point) {
		if (this.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			if (point.__x > this.__panel.size().width()) {
				return false;
			}
		} else {
			if (point.__y > this.__panel.size().height()) {
				return false;
			}
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::ShouldInteract(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::VerifyBackground()" />*/
	verifyBackground: function () {
		var background = null;
		var role = $.ig.scheduler.SchedulerElementRole.agendaView;
		switch (this.__viewModeInfo.viewMode()) {
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				background = this.__schedulerView.scheduler().agendaViewBackgroundBrush();
				break;
			case $.ig.scheduler.SchedulerViewMode.monthView:
				role = $.ig.scheduler.SchedulerElementRole.monthView;
				background = this.__schedulerView.scheduler().monthViewBackgroundBrush();
				break;
		}
		if (background == null) {
			return;
		}
		var cache = this.__schedulerView.getRoleCache(role);
		var newBackStr = null;
		if (background != cache.background()) {
			newBackStr = background.__fill;
		}
		if (newBackStr == this.__backgroundOverride) {
			return;
		}
		this.__backgroundOverride = newBackStr;
		this.domElement().style.backgroundColor = this.__backgroundOverride;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerScrollingView::VerifyBackground()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::VerifyPanelSize()" />*/
	verifyPanelSize: function () {
		if ((!this.__location.hasValue()) || !this.__isInInfiniteScrollMode) {
			return true;
		}
		var location = this.__location.value();
		var panelWidth = location.width();
		var panelHeight = location.height();
		if (this.__scroller != null) {
			var vm = this.__viewModeInfo.visualModel();
			if (this.__scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
				if (vm.absoluteWidth() > panelWidth) {
					panelHeight -= this.__scroller.horizontalScrollbarHeight();
				}
				if (panelHeight == this.__panel.size().height()) {
					return true;
				}
			} else {
				if (vm.absoluteHeight() > panelHeight) {
					panelWidth -= this.__scroller.verticalScrollbarWidth();
				}
				if (panelWidth == this.__panel.size().width()) {
					return true;
				}
			}
		}
		this.setLocation(location);
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerScrollingView::VerifyPanelSize()" />*/
	,
	$type: new $.ig.Type('SchedulerScrollingView', $.ig.ElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerScrollingView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.INativeSchedulerView" />*/

$.ig.util.defType('INativeSchedulerView', 'Object', {
	$type: new $.ig.Type('INativeSchedulerView', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.INativeSchedulerView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.IRoleMetricsProvider" />*/

$.ig.util.defType('IRoleMetricsProvider', 'Object', {
	$type: new $.ig.Type('IRoleMetricsProvider', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.IRoleMetricsProvider" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerView" />*/

$.ig.util.defType('SchedulerView', 'ElementView', {
	__scheduler: null,
	__scrollingViews: null,
	__scrollingViewArray: null,
	__splitterView: null,
	__scrollingViewRects: null,
	__currWidth: 0,
	__currHeight: 0,
	__metricsCache: null,
	__refreshPending: false,
	staticInit: function () {
	},
	init: function (domElement, scheduler, cssObject) {
		this.__currWidth = -1;
		this.__currHeight = -1;
		$.ig.ElementView.prototype.init.call(this, domElement);
		this.__scheduler = scheduler;
		this.__metricsCache = new $.ig.SchedulerView_MetricsCache(this, cssObject);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerView Infragistics.Scheduler.Core.SchedulerView::Create(Infragistics.Scheduler.Core.Scheduler, System.Html.Element, System.Object)" />*/
	create: function (scheduler, parent, cssObject) {
		var div = document.createElement("div");
		var view = new $.ig.SchedulerView(div, scheduler, cssObject);
		div.style.position = "relative";
		div.style.width = "100%";
		div.style.height = "100%";
		parent.appendChild(div);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerView Infragistics.Scheduler.Core.SchedulerView::Create(Infragistics.Scheduler.Core.Scheduler, System.Html.Element, System.Object)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.SchedulerView::Scheduler()" />*/
	scheduler: function () {
		return this.__scheduler;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.SchedulerView::Scheduler()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerView::ShouldInteract(System.Windows.Point)" />*/
	shouldInteract: function (point) {
		for (var i = 0; i < this.__scrollingViewRects.length; i++) {
			var rect = this.__scrollingViewRects[i];
			if (rect.containsPoint(point)) {
				var scrollingView = this.__scrollingViewArray[i];
				point.__x -= rect.x();
				point.__y -= rect.y();
				return scrollingView.shouldInteract(point);
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerView::ShouldInteract(System.Windows.Point)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Dispose()" />*/
	dispose: function () {
		this.disposeAllViews();
		if (this.__scheduler != null) {
			this.__scheduler = null;
		}
		$.ig.ElementView.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::ClearCachedMetrics()" />*/
	clearCachedMetrics: function () {
		this.__metricsCache.clearMetrics();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::ClearCachedMetrics()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView::GetCachedFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	getCachedFontHeight: function (role, fontInfo) {
		return this.__metricsCache.item(role).getCachedFontHeight(fontInfo);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView::GetCachedFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	,
	/*<BeginMethod Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView::GetComputedStyle(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getComputedStyle: function (role) {
		return this.__metricsCache.getComputedStyle(role);
	}
	/*<EndMethod Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView::GetComputedStyle(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.SchedulerView::GetCssClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getCssClassName: function (role) {
		return this.__metricsCache.getCssClassName(role);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.SchedulerView::GetCssClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.SchedulerView::GetElementForActivity(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Int32)" />*/
	getElementForActivity: function (activity, viewMode, year, month, day) {
		if (this.__scrollingViews == null || !this.__scrollingViews.containsKey(viewMode)) {
			return null;
		}
		var scrview = this.__scrollingViews.item(viewMode);
		var vm = scrview.viewModeInfo().visualModel();
		var en = vm.getAllModels(false).getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			var path = model.path();
			if (activity == path.appointmentResolved() && day == path.day() && month == path.month() && year == path.year()) {
				var presenter = model.presenter();
				if (presenter != null) {
					var view = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
					if (view != null) {
						return view.domElement();
					}
				}
			}
		}
		return null;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.SchedulerView::GetElementForActivity(Infragistics.Scheduler.ActivityBase, Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.SchedulerView::GetElementForDay(System.Int32, System.Int32, System.Int32)" />*/
	getElementForDay: function (year, month, day) {
		var model = this.getModelForDay(year, month, day);
		if (model == null) {
			return null;
		}
		var presenter = model.presenter();
		if (presenter != null) {
			var view = $.ig.util.cast($.ig.ElementView.prototype.$type, presenter.nativeView());
			if (view != null) {
				return view.domElement();
			}
		}
		return null;
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.SchedulerView::GetElementForDay(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerView::GetModelForDay(System.Int32, System.Int32, System.Int32)" />*/
	getModelForDay: function (year, month, day) {
		if (this.__scrollingViews == null || !this.__scrollingViews.containsKey($.ig.scheduler.SchedulerViewMode.monthView)) {
			return null;
		}
		var scrview = this.__scrollingViews.item($.ig.scheduler.SchedulerViewMode.monthView);
		var vm = scrview.viewModeInfo().visualModel();
		var en = vm.getAllModels(false).getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			switch (model.role()) {
				case $.ig.scheduler.SchedulerElementRole.monthViewDay:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
				case $.ig.scheduler.SchedulerElementRole.monthViewDaySelected:
					{
						var path = model.path();
						if (day == path.day() && month == path.month() && year == path.year()) {
							return model;
						}
						break;
					}
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerView::GetModelForDay(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerView::GetRoleCache(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getRoleCache: function (role) {
		return this.__metricsCache.item(role);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerView::GetRoleCache(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::InitializeStyles()" />*/
	initializeStyles: function () {
		var origName = this.domElement().className;
		var classname = this.getCssClassName($.ig.scheduler.SchedulerElementRole.scheduler);
		this.domElement().className = classname;
		this.__scheduler.agendaViewBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaView, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewBackgroundBrush()));
		this.__scheduler.agendaViewMessageFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewMessage, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewMessageFontInfo()));
		this.__scheduler.agendaViewMessageTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewMessage, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewMessageTextBrush()));
		this.__scheduler.agendaViewAppointmentEndTimeBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptEndTime, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentEndTimeBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentEndTimeFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptEndTime, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewAppointmentEndTimeFontInfo()));
		this.__scheduler.agendaViewAppointmentEndTimeTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptEndTime, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentEndTimeTextBrush()));
		this.__scheduler.agendaViewAppointmentEndTimeSelectedBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptEndTimeSelected, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentEndTimeSelectedBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentEndTimeSelectedTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptEndTimeSelected, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentEndTimeSelectedTextBrush()));
		this.__scheduler.agendaViewAppointmentLocationBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptLocation, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentLocationBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentLocationFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptLocation, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewAppointmentLocationFontInfo()));
		this.__scheduler.agendaViewAppointmentLocationTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptLocation, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentLocationTextBrush()));
		this.__scheduler.agendaViewAppointmentLocationSelectedBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptLocationSelected, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentLocationSelectedBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentLocationSelectedTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptLocationSelected, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentLocationSelectedTextBrush()));
		this.__scheduler.agendaViewAppointmentStartTimeBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptStartTime, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentStartTimeBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentStartTimeFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptStartTime, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewAppointmentStartTimeFontInfo()));
		this.__scheduler.agendaViewAppointmentStartTimeTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptStartTime, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentStartTimeTextBrush()));
		this.__scheduler.agendaViewAppointmentStartTimeSelectedBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptStartTimeSelected, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentStartTimeSelectedBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentStartTimeSelectedTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptStartTimeSelected, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentStartTimeSelectedTextBrush()));
		this.__scheduler.agendaViewAppointmentSubjectBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptSubject, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentSubjectBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentSubjectFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptSubject, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewAppointmentSubjectFontInfo()));
		this.__scheduler.agendaViewAppointmentSubjectTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptSubject, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentSubjectTextBrush()));
		this.__scheduler.agendaViewAppointmentSubjectSelectedBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptSubjectSelected, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentSubjectSelectedBackgroundBrush()));
		this.__scheduler.agendaViewAppointmentSubjectSelectedTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptSubjectSelected, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewAppointmentSubjectSelectedTextBrush()));
		this.__scheduler.agendaViewDayHeaderBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewDayHeaderBackgroundBrush()));
		this.__scheduler.agendaViewDayHeaderFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.agendaViewDayHeaderFontInfo()));
		this.__scheduler.agendaViewDayHeaderTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.agendaViewDayHeaderTextBrush()));
		this.__scheduler.agendaViewDayHeaderMargin(this.initializeProperty$1($.ig.Thickness.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader, $.ig.SchedulerView_PropertyRole.prototype.margin, this.__scheduler.agendaViewDayHeaderMargin()));
		this.__scheduler.agendaViewAppointmentMargin(this.initializeProperty$1($.ig.Thickness.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptArea, $.ig.SchedulerView_PropertyRole.prototype.margin, this.__scheduler.agendaViewAppointmentMargin()));
		this.__scheduler.agendaViewInterDaySpacing(this.initializeInterItemSpacing($.ig.scheduler.SchedulerElementRole.agendaViewDayHeader, this.__scheduler.agendaViewInterDaySpacing()));
		this.__scheduler.agendaViewAppointmentSeparatorLineBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.agendaApptHorizontalSeparator, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.agendaViewAppointmentSeparatorLineBrush()));
		this.__scheduler.monthViewBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthView, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewBackgroundBrush()));
		this.__scheduler.monthViewDayActivityIndicatorBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewDayActivityIndicatorBrush()));
		this.__scheduler.monthViewDayBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDay, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewDayBackgroundBrush()));
		this.__scheduler.monthViewDayFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDay, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewDayFontInfo()));
		this.__scheduler.monthViewDayTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDay, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewDayTextBrush()));
		this.__scheduler.monthViewAppointmentFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewAppointmentFontInfo()));
		this.__scheduler.monthViewDayOfWeekHeaderBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewDayBackgroundBrush()));
		this.__scheduler.monthViewDayOfWeekHeaderFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewDayFontInfo()));
		this.__scheduler.monthViewDayOfWeekHeaderTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewDayTextBrush()));
		this.__scheduler.monthViewDayOfWeekHeaderMargin(this.initializeProperty$1($.ig.Thickness.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.margin, this.__scheduler.monthViewDayOfWeekHeaderMargin()));
		this.__scheduler.monthViewLeadingDayBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayLeading, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewLeadingDayBackgroundBrush()));
		this.__scheduler.monthViewLeadingDayFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayLeading, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewLeadingDayFontInfo()));
		this.__scheduler.monthViewLeadingDayTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayLeading, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewLeadingDayTextBrush()));
		this.__scheduler.monthViewNameBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewNameBackgroundBrush()));
		this.__scheduler.monthViewNameFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewNameFontInfo()));
		this.__scheduler.monthViewNameTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewNameTextBrush()));
		this.__scheduler.monthViewNameMargin(this.initializeProperty$1($.ig.Thickness.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader, $.ig.SchedulerView_PropertyRole.prototype.margin, this.__scheduler.monthViewNameMargin()));
		this.__scheduler.monthViewInterMonthSpacing(this.initializeInterItemSpacing($.ig.scheduler.SchedulerElementRole.monthViewMonthHeader, this.__scheduler.monthViewInterMonthSpacing()));
		this.__scheduler.monthViewSelectedDayBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDaySelected, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewSelectedDayBackgroundBrush()));
		this.__scheduler.monthViewSelectedDayTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDaySelected, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewSelectedDayTextBrush()));
		this.__scheduler.monthViewSeparatorLineBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayHorizontalSeparator, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewSeparatorLineBrush()));
		this.__scheduler.monthViewTodayHighlightBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayTodayIndicator, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewTodayHighlightBrush()));
		this.__scheduler.monthViewTodayTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayToday, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewTodayTextBrush()));
		this.__scheduler.monthViewTrailingDayBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewTrailingDayBackgroundBrush()));
		this.__scheduler.monthViewTrailingDayFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewTrailingDayFontInfo()));
		this.__scheduler.monthViewTrailingDayTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewTrailingDayTextBrush()));
		this.__scheduler.monthViewWeekNumberBackgroundBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.background, this.__scheduler.monthViewWeekNumberBackgroundBrush()));
		this.__scheduler.monthViewWeekNumberFontInfo(this.initializeProperty$1($.ig.FontInfo.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.font, this.__scheduler.monthViewWeekNumberFontInfo()));
		this.__scheduler.monthViewWeekNumberTextBrush(this.initializeProperty$1($.ig.Brush.prototype.$type, $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader, $.ig.SchedulerView_PropertyRole.prototype.foreground, this.__scheduler.monthViewWeekNumberTextBrush()));
		this.__metricsCache.clearLastDefaults();
		if (this.__scrollingViewArray != null) {
			var $t = this.__scrollingViewArray;
			for (var i = 0; i < $t.length; i++) {
				var sv = $t[i];
				sv.onStyleUpdated1();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::InitializeStyles()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerView.T Infragistics.Scheduler.Core.SchedulerView::InitializeProperty`1(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.Scheduler.Core.SchedulerView_PropertyRole, Infragistics.Scheduler.Core.SchedulerView.T)" />*/
	initializeProperty$1: function ($t, role, propRole, currentValue) {
		var cacheItem = this.__metricsCache.item(role);
		var lastDefaultValue = null;
		var currentDefaultValue = null;
		switch (propRole) {
			case $.ig.SchedulerView_PropertyRole.prototype.background:
				lastDefaultValue = $.ig.util.cast($t, cacheItem.lastDefaultBackground());
				currentDefaultValue = $.ig.util.cast($t, cacheItem.background());
				break;
			case $.ig.SchedulerView_PropertyRole.prototype.font:
				lastDefaultValue = $.ig.util.cast($t, cacheItem.lastDefaultFont());
				currentDefaultValue = $.ig.util.cast($t, cacheItem.font());
				break;
			case $.ig.SchedulerView_PropertyRole.prototype.foreground:
				lastDefaultValue = $.ig.util.cast($t, cacheItem.lastDefaultForeground());
				currentDefaultValue = $.ig.util.cast($t, cacheItem.foreground());
				break;
			case $.ig.SchedulerView_PropertyRole.prototype.margin:
				lastDefaultValue = $.ig.util.cast($t, cacheItem.lastDefaultMargin());
				currentDefaultValue = $.ig.util.cast($t, cacheItem.margin());
				break;
		}
		if (lastDefaultValue != null && currentValue != lastDefaultValue) {
			return currentValue;
		}
		if (currentDefaultValue != null) {
			return currentDefaultValue;
		}
		return currentValue;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerView.T Infragistics.Scheduler.Core.SchedulerView::InitializeProperty`1(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.Scheduler.Core.SchedulerView_PropertyRole, Infragistics.Scheduler.Core.SchedulerView.T)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView::InitializeInterItemSpacing(Infragistics.Scheduler.Core.SchedulerElementRole, System.Int32)" />*/
	initializeInterItemSpacing: function (role, currentValue) {
		var cacheItem = this.__metricsCache.item(role);
		var lastDefaultValue = cacheItem.lastInterItemSpacing();
		var currentDefaultValue = cacheItem.interItemSpacing();
		if ($.ig.util.nullableNotEquals(lastDefaultValue, null) && currentValue != lastDefaultValue.value()) {
			return currentValue;
		}
		return Math.max(0, currentDefaultValue);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView::InitializeInterItemSpacing(Infragistics.Scheduler.Core.SchedulerElementRole, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::OnScrollViewportChanged(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	onScrollViewportChanged: function (viewMode, left, top, width, height) {
		this.__scheduler._setViewport(viewMode, left, top, left + width, top + height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::OnScrollViewportChanged(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RefreshAllViews()" />*/
	refreshAllViews: function () {
		this.__refreshPending = false;
		if (this.__scrollingViews == null || this.__scrollingViews.count() == 0) {
			this.createScrollingViews();
		}
		var en = this.__scrollingViews.valueList().getEnumerator();
		while (en.moveNext()) {
			var view = en.current();
			view.refresh();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RefreshAllViews()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::SetCachedFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo, System.Int32)" />*/
	setCachedFontHeight: function (role, fontInfo, height) {
		this.__metricsCache.item(role).setCachedFontHeight(fontInfo, height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::SetCachedFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::SetSize(System.Int32, System.Int32)" />*/
	setSize: function (width, height) {
		this.__currWidth = width;
		this.__currHeight = height;
		this.updateScrollingViewRects(0, 0, width, height, true);
		this.refreshAllViews();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::SetSize(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::CreateScrollingViews()" />*/
	createScrollingViews: function () {
		this.disposeAllViews();
		if (this.__scrollingViews == null) {
			this.__scrollingViews = new $.ig.FastIterationDictionary$2($.ig.scheduler.SchedulerViewMode.prototype.$type, $.ig.SchedulerScrollingView.prototype.$type, 0);
		}
		var tempList = new $.ig.List$1($.ig.SchedulerScrollingView.prototype.$type, 0);
		var viewModes = this.__scheduler._viewModeManager().viewModeInfos();
		var en = viewModes.getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			var viewMode = viewModeInfo.viewMode();
			var scrollingView = $.ig.SchedulerScrollingView.prototype.create(this, viewModeInfo);
			this.__scrollingViews.add(viewModeInfo.viewMode(), scrollingView);
			tempList.add(scrollingView);
		}
		this.__scrollingViewArray = tempList.toArray();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::CreateScrollingViews()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::DisposeAllViews()" />*/
	disposeAllViews: function () {
		if (null != this.__splitterView) {
			this.__splitterView.dispose();
			this.__splitterView = null;
		}
		if (null != this.__scrollingViews) {
			var $t = this.__scrollingViewArray;
			for (var i = 0; i < $t.length; i++) {
				var scrollingView = $t[i];
				scrollingView.dispose();
			}
			this.__scrollingViews.clear();
			this.__scrollingViewArray = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::DisposeAllViews()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RecreateViewsAndEnsureMonthIsVisisble(System.Nullable)" />*/
	recreateViewsAndEnsureMonthIsVisisble: function (viewMode) {
		var $self = this;
		this.createScrollingViews();
		this.updateScrollingViewRects(0, 0, this.__currWidth, this.__currHeight, false);
		if ($.ig.util.nullableEquals(viewMode, null) && this.__scrollingViews.containsKey($.ig.scheduler.SchedulerViewMode.monthView)) {
			viewMode = $.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, $.ig.scheduler.SchedulerViewMode.monthView);
		}
		if ($.ig.util.nullableEquals(viewMode, $.ig.scheduler.SchedulerViewMode.monthView) && this.__scrollingViews.containsKey(viewMode.value())) {
			window.setTimeout(function () { $self.__scheduler.ensureMonthVisibleInMonthView($self.__scheduler.selectedDate(), false); }, 10);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RecreateViewsAndEnsureMonthIsVisisble(System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RefreshContentSize(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	refreshContentSize: function (viewMode) {
		this.__scrollingViews.item(viewMode).refresh();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::RefreshContentSize(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::ScheduleRefresh(System.Int32)" />*/
	scheduleRefresh: function (milliseconds) {
		if (milliseconds == 0) {
			this.refreshAllViews();
			return;
		}
		if (this.__refreshPending) {
			return;
		}
		this.__refreshPending = true;
		window.setTimeout(this.refreshAllViews.runOn(this), milliseconds);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::ScheduleRefresh(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::UpdateScrollingViewRects(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	updateScrollingViewRects: function (left, top, availableWidth, availableHeight, updateViewPort) {
		var firstTime = false;
		if (this.__scrollingViews == null || this.__scrollingViews.count() == 0) {
			this.createScrollingViews();
			if (this.__scrollingViews.count() == 0) {
				return;
			}
			firstTime = true;
		}
		var viewModes = this.__scheduler._viewModeManager().viewModeInfos();
		var isHorzSplit = this.__scheduler.viewSplitOrientation() == $.ig.scheduler.SchedulerViewSplitOrientation.horizontal;
		var isVertSplit = this.__scheduler.viewSplitOrientation() == $.ig.scheduler.SchedulerViewSplitOrientation.vertical;
		var remainingExtent = isHorzSplit ? this.__currHeight : this.__currWidth;
		var startPos = isHorzSplit ? top : left;
		var index = 0;
		var count = $.ig.Enumerable.prototype.count$1($.ig.SchedulerViewModeInfo.prototype.$type, viewModes);
		var isMultiView = count > 1;
		this.__scrollingViewRects = new Array(count);
		var en = viewModes.getEnumerator();
		while (en.moveNext()) {
			var viewModeInfo = en.current();
			var viewMode = viewModeInfo.viewMode();
			var scrollingView = this.__scrollingViews.item(viewMode);
			var extent = 0;
			if (index == count - 1) {
				extent = remainingExtent;
			} else {
				if (isHorzSplit) {
					extent = $.ig.truncate((remainingExtent * this.__scheduler._viewModeManager().primaryViewModeSizePctVertical()));
				} else {
					extent = $.ig.truncate((remainingExtent * this.__scheduler._viewModeManager().primaryViewModeSizePctHorizontal()));
				}
				remainingExtent -= extent;
			}
			var w = 0;
			var h = 0;
			if (isHorzSplit) {
				w = availableWidth;
				h = extent;
				this.__scrollingViewRects[index] = new $.ig.Rect(0, left, startPos, w, h);
			} else {
				w = extent;
				h = availableHeight;
				this.__scrollingViewRects[index] = new $.ig.Rect(0, startPos, top, w, h);
			}
			scrollingView.setLocation(this.__scrollingViewRects[index]);
			startPos += extent;
			var tempSize = scrollingView.panel().size();
			var viewportTop = 0;
			var viewportLeft = 0;
			var viewportWidth = this.__currWidth;
			var viewportHeight = this.__currHeight;
			if (scrollingView.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.horizontal) {
				viewportLeft = $.ig.truncate(scrollingView.horizontalOffset());
				viewportHeight = $.ig.truncate(tempSize.height());
				tempSize.width(w);
			} else {
				viewportTop = $.ig.truncate(scrollingView.verticalOffset());
				viewportWidth = $.ig.truncate(tempSize.width());
				tempSize.height(h);
			}
			this.__scheduler._sizeChanged(viewMode, tempSize.width(), tempSize.height());
			if (updateViewPort && !firstTime) {
				var panelSize = scrollingView.panel().size();
				this.onScrollViewportChanged(viewMode, viewportLeft, viewportTop, $.ig.truncate(panelSize.width()), $.ig.truncate(panelSize.height()));
			}
			if (isMultiView && index == 0) {
				var role = isHorzSplit ? $.ig.scheduler.SchedulerElementRole.horizontalViewSplitter : $.ig.scheduler.SchedulerElementRole.verticalViewSplitter;
				var roleCache = this.getRoleCache(role);
				var margin = roleCache.margin();
				var splitterTop = 0;
				var splitterLeft = 0;
				var splitterExtent = 0;
				var totalSplitterMargin;
				if (isHorzSplit) {
					splitterExtent = roleCache.styleHeight();
					totalSplitterMargin = $.ig.truncate((margin.top() + margin.bottom()));
					splitterTop = startPos;
				} else {
					splitterExtent = roleCache.styleWidth();
					totalSplitterMargin = $.ig.truncate((margin.left() + margin.right()));
					splitterLeft = startPos;
				}
				if (this.__splitterView == null) {
					this.__splitterView = $.ig.SplitterView.prototype.create(this);
				}
				this.__splitterView.positionSplitter(role, splitterLeft, splitterTop);
				var totalSplitterExtent = splitterExtent + totalSplitterMargin;
				remainingExtent -= totalSplitterExtent;
				startPos += totalSplitterExtent;
			} else if (false == isMultiView && null != this.__splitterView) {
				this.__splitterView.dispose();
				this.__splitterView = null;
			}
			index++;
		}
		this.scheduleRefresh(5);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::UpdateScrollingViewRects(System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)" />*/
	,
	measureString: function (stringToMeasure, font, role) {
		return $.ig.util.sizeToLiteral(this._measureString$i.apply(this, arguments));
	},
	/*<BeginMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.MeasureString(System.String, Infragistics.FontInfo, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	_measureString$i: function (stringToMeasure, font, role) {
		return this.__metricsCache.item(role).measureString(stringToMeasure, font, true);
	}
	/*<EndMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.MeasureString(System.String, Infragistics.FontInfo, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnContentSizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onContentSizeChanged: function (viewMode) {
		this.refreshContentSize(viewMode);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnContentSizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnPrimaryViewModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onPrimaryViewModeChanged: function (newViewMode) {
		this.recreateViewsAndEnsureMonthIsVisisble($.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, newViewMode));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnPrimaryViewModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollDirectionChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	onScrollDirectionChanged: function (viewMode, newScrollDirection) {
		if (this.__scrollingViews != null && this.__scrollingViews.containsKey(viewMode)) {
			this.__scrollingViews.item(viewMode).scrollDirection(newScrollDirection);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollDirectionChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.MonthViewScrollMode)" />*/
	onScrollModeChanged: function (viewMode, newScrollMode) {
		this.recreateViewsAndEnsureMonthIsVisisble($.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, viewMode));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.MonthViewScrollMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeAdded(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onSecondaryViewModeAdded: function (viewMode) {
		if (this.__scrollingViewArray != null) {
			var tempList = new $.ig.List$1($.ig.SchedulerScrollingView.prototype.$type, 1, this.__scrollingViewArray);
			var viewModes = this.__scheduler._viewModeManager().viewModeInfos();
			var en = viewModes.getEnumerator();
			while (en.moveNext()) {
				var viewModeInfo = en.current();
				if (viewMode == viewModeInfo.viewMode()) {
					if (!this.__scrollingViews.containsKey(viewMode)) {
						var scrollingView = $.ig.SchedulerScrollingView.prototype.create(this, viewModeInfo);
						this.__scrollingViews.item(viewMode, scrollingView);
						tempList.add(scrollingView);
					}
					break;
				}
			}
			this.__scrollingViewArray = tempList.toArray();
			this.updateScrollingViewRects(0, 0, this.__currWidth, this.__currHeight, false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeAdded(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeRemoved(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onSecondaryViewModeRemoved: function (viewMode) {
		if (this.__scrollingViewArray != null) {
			var oldView = null;
			var tempList = new $.ig.List$1($.ig.SchedulerScrollingView.prototype.$type, 1, this.__scrollingViewArray);
			for (var i = 0; i < tempList.count(); i++) {
				if (this.__scrollingViewArray[i].viewModeInfo().viewMode() == viewMode) {
					this.__scheduler._setLayoutEngine(null, viewMode);
					this.__scrollingViews.remove(viewMode);
					oldView = tempList.__inner[i];
					oldView.dispose();
					tempList.removeAt(i);
					i--;
					break;
				}
			}
			if (oldView != null) {
				this.__scrollingViewArray = tempList.toArray();
				this.updateScrollingViewRects(0, 0, this.__currWidth, this.__currHeight, false);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeRemoved(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnViewSplitOrientationChanged()" />*/
	onViewSplitOrientationChanged: function () {
		this.recreateViewsAndEnsureMonthIsVisisble($.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, null));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.OnViewSplitOrientationChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.ScrollViewTo(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Boolean)" />*/
	scrollViewTo: function (viewMode, x, y, animated) {
		this.__scrollingViews.item(viewMode).scrollTo(x, y, animated);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView::Infragistics.Scheduler.Core.INativeSchedulerView.ScrollViewTo(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBackground(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBackground: function (role) {
		var brush = null;
		var roleProcessed = false;
		switch (role) {
			case $.ig.scheduler.SchedulerElementRole.monthView:
				if (this.__scheduler.monthViewBackgroundBrush() != null) {
					brush = this.__scheduler.monthViewBackgroundBrush();
				}
				roleProcessed = true;
				break;
			case $.ig.scheduler.SchedulerElementRole.agendaView:
				if (this.__scheduler.agendaViewBackgroundBrush() != null) {
					brush = this.__scheduler.agendaViewBackgroundBrush();
				}
				roleProcessed = true;
				break;
		}
		if (roleProcessed) {
			return brush;
		}
		return this.__metricsCache.item(role).background();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBackground(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderLeft(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBorderLeft: function (role) {
		return this.__metricsCache.item(role).borderBrushLeft();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderLeft(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderTop(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBorderTop: function (role) {
		return this.__metricsCache.item(role).borderBrushTop();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderTop(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderRight(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBorderRight: function (role) {
		return this.__metricsCache.item(role).borderBrushRight();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderRight(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderBottom(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBorderBottom: function (role) {
		return this.__metricsCache.item(role).borderBrushBottom();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetBorderBottom(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView::GetBorderThickness(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getBorderThickness: function (role) {
		return this.__metricsCache.item(role).borderThickness();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView::GetBorderThickness(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView::GetFont(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getFont: function (role) {
		return this.__metricsCache.item(role).font();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView::GetFont(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.SchedulerView::GetFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	getFontHeight: function (role, font) {
		var height = this.getCachedFontHeight(role, font);
		if (height <= 0) {
			var size = this.__metricsCache.item(role).measureString("Wy", font, false);
			height = size.height();
			this.setCachedFontHeight(role, font, $.ig.truncate(height));
		}
		return height;
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.SchedulerView::GetFontHeight(Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView::GetPadding(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getPadding: function (role) {
		return this.__metricsCache.item(role).padding();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView::GetPadding(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetTextBrush(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getTextBrush: function (role) {
		return this.__metricsCache.item(role).foreground();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView::GetTextBrush(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	measureText: function (text, role, font) {
		return $.ig.util.sizeToLiteral(this._measureText$i.apply(this, arguments));
	},
	/*<BeginMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView::MeasureText(System.String, Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	_measureText$i: function (text, role, font) {
		return this.__metricsCache.item(role).measureString(text, font, false);
	}
	/*<EndMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView::MeasureText(System.String, Infragistics.Scheduler.Core.SchedulerElementRole, Infragistics.FontInfo)" />*/
	,
	$type: new $.ig.Type('SchedulerView', $.ig.ElementView.prototype.$type, [$.ig.INativeSchedulerView.prototype.$type, $.ig.IRoleMetricsProvider.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache" />*/

$.ig.util.defType('SchedulerView_MetricsCache', 'Object', {
	__view: null,
	__cssObject: null,
	__roleCache: null,
	__viewModeElements: null,
	__rootMeasureElement: null,
	init: function (view, cssObject) {
		$.ig.Object.prototype.init.call(this);
		this.__view = view;
		var offset = -10000 + "px";
		this.__rootMeasureElement = $.ig.SchedulerUtils.prototype.createDiv(null);
		this.__rootMeasureElement.style.position = "absolute";
		this.__rootMeasureElement.style.left = offset;
		this.__rootMeasureElement.style.top = offset;
		this.__rootMeasureElement.style.width = "5000px";
		this.__view.domElement().appendChild(this.__rootMeasureElement);
		this.__cssObject = cssObject;
		var roles = new $.ig.List$1($.ig.scheduler.SchedulerElementRole.prototype.$type, 0);
		var en = $.ig.Enum.prototype.getValues($.ig.scheduler.SchedulerElementRole.prototype.$type).getEnumerator();
		while (en.moveNext()) {
			var role = en.current();
			roles.add(role);
		}
		this.__roleCache = new Array(roles.count());
		this.__viewModeElements = new Array(roles.count());
		this.createViewElements(roles.count());
		var count = this.__roleCache.length;
		for (var i = 0; i < count; i++) {
			var role1 = roles.__inner[i];
			var element = $.ig.SchedulerUtils.prototype.createDiv(null);
			if (role1 == $.ig.scheduler.SchedulerElementRole.scheduler) {
				element = this.__viewModeElements[i];
			} else {
				element.style.position = "absolute";
				element.style.left = "0px";
				element.style.top = "0px";
				this.__viewModeElements[i].appendChild(element);
			}
			var item = new $.ig.SchedulerView_MetricsCache_MetricsCacheItem(role1, element);
			item.initializeClassName(this.__cssObject);
			this.__roleCache[role1] = item;
		}
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.agendaView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.dayView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.monthView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.weekView);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerView_MetricsCache::Item(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	item: function (role) {
		return this.__roleCache[role];
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem Infragistics.Scheduler.Core.SchedulerView_MetricsCache::Item(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::ClearLastDefaults()" />*/
	clearLastDefaults: function () {
		var count = this.__roleCache.length;
		for (var i = 0; i < count; i++) {
			var item = this.__roleCache[i];
			item.clearLastDefaults();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::ClearLastDefaults()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::ClearMetrics()" />*/
	clearMetrics: function () {
		var count = this.__roleCache.length;
		for (var i = 0; i < count; i++) {
			var item = this.__roleCache[i];
			item.initializeClassName(this.__cssObject);
		}
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.agendaView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.dayView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.monthView);
		this.initializeViewModeElementClassName($.ig.scheduler.SchedulerElementRole.weekView);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::ClearMetrics()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::CreateViewElements(System.Int32)" />*/
	createViewElements: function (roleCount) {
		var agendaViewElement = $.ig.SchedulerView_MetricsCache.prototype.createViewElement();
		var dayViewElement = $.ig.SchedulerView_MetricsCache.prototype.createViewElement();
		var monthViewElement = $.ig.SchedulerView_MetricsCache.prototype.createViewElement();
		var weekViewElement = $.ig.SchedulerView_MetricsCache.prototype.createViewElement();
		this.__rootMeasureElement.appendChild(agendaViewElement);
		this.__rootMeasureElement.appendChild(dayViewElement);
		this.__rootMeasureElement.appendChild(monthViewElement);
		this.__rootMeasureElement.appendChild(weekViewElement);
		var en = $.ig.Enum.prototype.getValues($.ig.scheduler.SchedulerElementRole.prototype.$type).getEnumerator();
		while (en.moveNext()) {
			var role = en.current();
			var index = role;
			switch (role) {
				case $.ig.scheduler.SchedulerElementRole.scheduler:
					this.__viewModeElements[index] = this.__view.domElement();
					break;
				case $.ig.scheduler.SchedulerElementRole.agendaView:
				case $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader:
				case $.ig.scheduler.SchedulerElementRole.agendaViewMessage:
				case $.ig.scheduler.SchedulerElementRole.agendaApptColorBar:
				case $.ig.scheduler.SchedulerElementRole.agendaApptSubject:
				case $.ig.scheduler.SchedulerElementRole.agendaApptSubjectSelected:
				case $.ig.scheduler.SchedulerElementRole.agendaApptEndTime:
				case $.ig.scheduler.SchedulerElementRole.agendaApptEndTimeSelected:
				case $.ig.scheduler.SchedulerElementRole.agendaApptHorizontalSeparator:
				case $.ig.scheduler.SchedulerElementRole.agendaApptLocation:
				case $.ig.scheduler.SchedulerElementRole.agendaApptLocationSelected:
				case $.ig.scheduler.SchedulerElementRole.agendaApptStartTime:
				case $.ig.scheduler.SchedulerElementRole.agendaApptStartTimeSelected:
				case $.ig.scheduler.SchedulerElementRole.agendaApptSelected:
				case $.ig.scheduler.SchedulerElementRole.agendaApptArea:
					this.__viewModeElements[index] = agendaViewElement;
					break;
				case $.ig.scheduler.SchedulerElementRole.dayView:
					this.__viewModeElements[index] = dayViewElement;
					break;
				case $.ig.scheduler.SchedulerElementRole.monthView:
				case $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator:
				case $.ig.scheduler.SchedulerElementRole.monthViewDay:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayHorizontalSeparator:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayLeading:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader:
				case $.ig.scheduler.SchedulerElementRole.monthViewDaySelected:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayToday:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayTodayIndicator:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing:
				case $.ig.scheduler.SchedulerElementRole.monthViewDayVerticalSeparator:
				case $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader:
				case $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader:
					this.__viewModeElements[index] = monthViewElement;
					break;
				case $.ig.scheduler.SchedulerElementRole.weekView:
					this.__viewModeElements[index] = weekViewElement;
					break;
				default:
					this.__viewModeElements[index] = this.__rootMeasureElement;
					break;
			}
			index++;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::CreateViewElements(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Html.DivElement Infragistics.Scheduler.Core.SchedulerView_MetricsCache::CreateViewElement()" />*/
	createViewElement: function () {
		var viewElement = $.ig.SchedulerUtils.prototype.createDiv(null);
		viewElement.style.position = "absolute";
		viewElement.style.left = "0px";
		viewElement.style.top = "0px";
		viewElement.style.width = "100%";
		return viewElement;
	}
	/*<EndMethod Name="System.Html.DivElement Infragistics.Scheduler.Core.SchedulerView_MetricsCache::CreateViewElement()" />*/
	,
	/*<BeginMethod Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView_MetricsCache::GetComputedStyle(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getComputedStyle: function (role) {
		return this.__roleCache[role].computedStyle();
	}
	/*<EndMethod Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView_MetricsCache::GetComputedStyle(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.SchedulerView_MetricsCache::GetCssClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getCssClassName: function (role) {
		return this.__roleCache[role].cssClassName();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.SchedulerView_MetricsCache::GetCssClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::InitializeViewModeElementClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	initializeViewModeElementClassName: function (role) {
		this.__viewModeElements[role].className = this.getCssClassName(role);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache::InitializeViewModeElementClassName(Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	$type: new $.ig.Type('SchedulerView_MetricsCache', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem" />*/

$.ig.util.defType('SchedulerView_MetricsCache_MetricsCacheItem', 'Object', {
	__role: 0,
	__element: null,
	__fontSizeMap: null,
	__cssClassName: null,
	__renderer: null,
	__computedStyle: null,
	__font: null,
	__lastFontString: null,
	__interItemSpacing: 0,
	__styleHeight: 0,
	__styleWidth: 0,
	__background: null,
	__foreground: null,
	__lastDefaultFont: null,
	__lastDefaultBackground: null,
	__lastDefaultForeground: null,
	__lastDefaultPadding: null,
	__lastDefaultMargin: null,
	__lastInterItemSpacing: $.ig.util.toNullable($.ig.Number.prototype.$type, null),
	__padding: $.ig.util.toNullable($.ig.Thickness.prototype.$type, null),
	__margin: $.ig.util.toNullable($.ig.Thickness.prototype.$type, null),
	__borderThickness: null,
	__borderBrushLeft: null,
	__borderBrushTop: null,
	__borderBrushRight: null,
	__borderBrushBottom: null,
	_defaultFontKey: null,
	init: function (role, element) {
		this.__fontSizeMap = new $.ig.FastIterationDictionary$2(String, $.ig.Size.prototype.$type, 0);
		this._defaultFontKey = "##defaultfont";
		$.ig.Object.prototype.init.call(this);
		this.__role = role;
		this.__element = element;
	},
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Background()" />*/
	background: function () {
		if (this.__background == null) {
			this.__background = $.ig.Brush.prototype.create(this.computedStyle().backgroundColor);
		}
		return this.__background;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Background()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushLeft()" />*/
	borderBrushLeft: function () {
		this.verifyPaddingAndBorders();
		return this.__borderBrushLeft;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushLeft()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushTop()" />*/
	borderBrushTop: function () {
		this.verifyPaddingAndBorders();
		return this.__borderBrushTop;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushTop()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushRight()" />*/
	borderBrushRight: function () {
		this.verifyPaddingAndBorders();
		return this.__borderBrushRight;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushRight()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushBottom()" />*/
	borderBrushBottom: function () {
		this.verifyPaddingAndBorders();
		return this.__borderBrushBottom;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderBrushBottom()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderThickness()" />*/
	borderThickness: function () {
		this.verifyPaddingAndBorders();
		return this.__borderThickness;
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::BorderThickness()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::CssClassName()" />*/
	cssClassName: function () {
		return this.__cssClassName;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::CssClassName()" />*/
	,
	/*<BeginProperty Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ComputedStyle()" />*/
	computedStyle: function () {
		if (this.__computedStyle == null) {
			this.__computedStyle = window.getComputedStyle(this.__element);
		}
		return this.__computedStyle;
	}
	/*<EndProperty Name="System.Html.WebStyle Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ComputedStyle()" />*/
	,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Font()" />*/
	font: function () {
		if (this.__font == null) {
			this.__font = $.ig.FontUtil.prototype.getFontInfoFromString(this.renderer(), this.computedStyle().font);
		}
		return this.__font;
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Font()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::InterItemSpacing()" />*/
	interItemSpacing: function () {
		this.verifyPaddingAndBorders();
		return this.__interItemSpacing;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::InterItemSpacing()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::IsPaddingFactoredIn()" />*/
	isPaddingFactoredIn: function () {
		switch (this.__role) {
			case $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader: return true;
		}
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::IsPaddingFactoredIn()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Foreground()" />*/
	foreground: function () {
		if (this.__foreground == null) {
			this.__foreground = $.ig.Brush.prototype.create(this.computedStyle().color);
		}
		return this.__foreground;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Foreground()" />*/
	,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultFont()" />*/
	lastDefaultFont: function () {
		return this.__lastDefaultFont;
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultFont()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultBackground()" />*/
	lastDefaultBackground: function () {
		return this.__lastDefaultBackground;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultBackground()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultForeground()" />*/
	lastDefaultForeground: function () {
		return this.__lastDefaultForeground;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultForeground()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultPadding()" />*/
	lastDefaultPadding: function () {
		return this.__lastDefaultPadding;
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultPadding()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultMargin()" />*/
	lastDefaultMargin: function () {
		return this.__lastDefaultMargin;
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastDefaultMargin()" />*/
	,
	/*<BeginProperty Name="System.Nullable Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastInterItemSpacing()" />*/
	lastInterItemSpacing: function () {
		return this.__lastInterItemSpacing;
	}
	/*<EndProperty Name="System.Nullable Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::LastInterItemSpacing()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Margin()" />*/
	margin: function () {
		this.verifyPaddingAndBorders();
		return this.__margin.value();
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Margin()" />*/
	,
	/*<BeginProperty Name="System.Html.IDomRenderer Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Renderer()" />*/
	renderer: function () {
		if (this.__renderer == null) {
			this.__renderer = new $.ig.JQueryDomRenderer(new $.ig.JQueryDomWrapper(this.__element, $(this.__element)));
		}
		return this.__renderer;
	}
	/*<EndProperty Name="System.Html.IDomRenderer Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Renderer()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Padding()" />*/
	padding: function () {
		this.verifyPaddingAndBorders();
		return this.__padding.value();
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::Padding()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::StyleHeight()" />*/
	styleHeight: function () {
		this.verifyPaddingAndBorders();
		return this.__styleHeight;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::StyleHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::StyleWidth()" />*/
	styleWidth: function () {
		this.verifyPaddingAndBorders();
		return this.__styleWidth;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::StyleWidth()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ClearLastDefaults()" />*/
	clearLastDefaults: function () {
		this.__lastDefaultFont = this.__font;
		this.__lastDefaultBackground = this.__background;
		this.__lastDefaultForeground = this.__foreground;
		this.__lastDefaultMargin = this.__margin.hasValue() ? this.__margin.value() : new $.ig.Thickness(0, -1);
		this.__lastDefaultPadding = this.__padding.hasValue() ? this.__padding.value() : new $.ig.Thickness(0, -1);
		this.__lastInterItemSpacing = $.ig.util.toNullable($.ig.Number.prototype.$type, this.__interItemSpacing);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ClearLastDefaults()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::GetCachedFontHeight(Infragistics.FontInfo)" />*/
	getCachedFontHeight: function (fontInfo) {
		if (fontInfo != null && fontInfo.fontString() == null) {
			$.ig.FontUtil.prototype.updateFontString(fontInfo);
		}
		var key = fontInfo == this.font() ? this._defaultFontKey : fontInfo.fontString();
		if (this.__fontSizeMap.containsKey(key)) {
			return $.ig.truncate(this.__fontSizeMap.item(key).height());
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::GetCachedFontHeight(Infragistics.FontInfo)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::InitializeClassName(System.Object)" />*/
	initializeClassName: function (cssObject) {
		var key = $.ig.scheduler.SchedulerElementRole.prototype.$getName(this.__role);
		key = key.substr(0, 1).toLowerCase() + key.substr(1);
		var className = cssObject[key];
		if (this.__cssClassName != className) {
			if (this.__cssClassName != null && className == null) {
				this.__element.className = null;
			}
			this.clearCachedMetrics();
			this.__cssClassName = className;
			if (this.__cssClassName != null) {
				this.__element.className = this.__cssClassName;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::InitializeClassName(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::MeasureString(System.String, Infragistics.FontInfo, System.Boolean)" />*/
	measureString: function (stringToMeasure, font, includeBorders) {
		var defaultFont = this.font();
		var updateElementFont = font.fontString() != this.__lastFontString;
		if (updateElementFont) {
			this.__lastFontString = font.fontString();
		}
		var isStringNumeric = false;
		var length = stringToMeasure != null ? stringToMeasure.length : 0;
		if (font != null && font.fontString() == null) {
			$.ig.FontUtil.prototype.updateFontString(font);
		}
		var key = font != defaultFont ? font.fontString() : this._defaultFontKey;
		var width = 0;
		var height = 0;
		var useCachedMetrics = false;
		if (length > 0 && length < 3) {
			if ($.ig.SchedulerUtils.prototype.isNumeric(stringToMeasure.charAt(0)) && (length == 1 || $.ig.SchedulerUtils.prototype.isNumeric(stringToMeasure.charAt(1)))) {
				isStringNumeric = true;
				if (this.__fontSizeMap.containsKey(key)) {
					var size = this.__fontSizeMap.item(key);
					var w = size.width();
					if (w > 0) {
						w *= length;
						width = w;
						height = size.height();
						useCachedMetrics = true;
					}
				}
			}
		}
		var padding = this.padding();
		if (!useCachedMetrics) {
			if (updateElementFont) {
				this.__element.style.font = font != defaultFont ? font.fontString() : null;
			}
			this.__element.innerText = stringToMeasure;
			width = this.__element.offsetWidth;
			height = this.__element.offsetHeight;
			width -= padding.left() + padding.right() + this.__borderThickness.left() + this.__borderThickness.right();
			height -= padding.top() + padding.bottom() + this.__borderThickness.top() + this.__borderThickness.bottom();
			if (font != null) {
				if (isStringNumeric) {
					this.__fontSizeMap.item(key, new $.ig.Size(1, width / length, height));
				} else {
					if (!this.__fontSizeMap.containsKey(key)) {
						this.__fontSizeMap.item(key, new $.ig.Size(1, 0, height));
					}
				}
			}
		}
		if (includeBorders) {
			width += this.__borderThickness.left() + this.__borderThickness.right();
			height += this.__borderThickness.top() + this.__borderThickness.bottom();
			if (!this.isPaddingFactoredIn()) {
				width += padding.left() + padding.right();
				height += padding.top() + padding.bottom();
			}
		}
		return new $.ig.Size(1, width + 1, height);
	}
	/*<EndMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::MeasureString(System.String, Infragistics.FontInfo, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::SetCachedFontHeight(Infragistics.FontInfo, System.Int32)" />*/
	setCachedFontHeight: function (fontInfo, height) {
		if (fontInfo != null && fontInfo.fontString() == null) {
			$.ig.FontUtil.prototype.updateFontString(fontInfo);
		}
		var key = fontInfo == this.font() ? this._defaultFontKey : fontInfo.fontString();
		var width = 0;
		if (this.__fontSizeMap.containsKey(key)) {
			width = this.__fontSizeMap.item(key).width();
		}
		this.__fontSizeMap.item(key, new $.ig.Size(1, width, height));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::SetCachedFontHeight(Infragistics.FontInfo, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ClearCachedMetrics()" />*/
	clearCachedMetrics: function () {
		this.__lastDefaultFont = this.__font;
		this.__lastDefaultBackground = this.__background;
		this.__lastDefaultForeground = this.__foreground;
		this.__padding = $.ig.util.toNullable($.ig.Thickness.prototype.$type, null);
		this.__font = null;
		this.__background = null;
		this.__foreground = null;
		this.__lastFontString = null;
		this.__computedStyle = null;
		this.__fontSizeMap.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::ClearCachedMetrics()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::VerifyPaddingAndBorders()" />*/
	verifyPaddingAndBorders: function () {
		if (this.__padding.hasValue()) {
			return;
		}
		var cs = this.computedStyle();
		this.__padding = $.ig.util.toNullable($.ig.Thickness.prototype.$type, new $.ig.Thickness(1, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.paddingLeft), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.paddingTop), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.paddingRight), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.paddingBottom)));
		this.__margin = $.ig.util.toNullable($.ig.Thickness.prototype.$type, new $.ig.Thickness(1, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.marginLeft), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.marginTop), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.marginRight), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.marginBottom)));
		this.__borderThickness = new $.ig.Thickness(1, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.borderLeftWidth), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.borderTopWidth), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.borderRightWidth), $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.borderBottomWidth));
		this.__interItemSpacing = $.ig.truncate(Math.max(0, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.marginTop)));
		this.__styleHeight = $.ig.truncate(Math.max(0, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.height)));
		this.__styleWidth = $.ig.truncate(Math.max(0, $.ig.SchedulerUtils.prototype.convertPixelvalueToDouble(cs.width)));
		var leftString = cs.borderLeftColor;
		this.__borderBrushLeft = $.ig.Brush.prototype.create(leftString);
		var testString = this.__computedStyle.borderTopColor;
		this.__borderBrushTop = testString == leftString ? this.__borderBrushLeft : $.ig.Brush.prototype.create(testString);
		testString = this.__computedStyle.borderRightColor;
		this.__borderBrushRight = testString == leftString ? this.__borderBrushLeft : $.ig.Brush.prototype.create(testString);
		testString = this.__computedStyle.borderBottomColor;
		this.__borderBrushBottom = testString == leftString ? this.__borderBrushLeft : $.ig.Brush.prototype.create(testString);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem::VerifyPaddingAndBorders()" />*/
	,
	$type: new $.ig.Type('SchedulerView_MetricsCache_MetricsCacheItem', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerView_MetricsCache_MetricsCacheItem" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeView" />*/

$.ig.util.defType('ShapeView', 'ElementView', {
	__lineElements: null,
	init: function (domElement) {
		this.__lineElements = new $.ig.List$1($.ig.Element.prototype.$type, 0);
		$.ig.ElementView.prototype.init.call(this, domElement);
		domElement.style.borderRadius = null;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeView Infragistics.Scheduler.Core.ShapeView::Create(Infragistics.Scheduler.Core.ShapeModel)" />*/
	create: function (model) {
		var element = document.createElement("div");
		var view = new $.ig.ShapeView(element);
		view.initialize(model);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeView Infragistics.Scheduler.Core.ShapeView::Create(Infragistics.Scheduler.Core.ShapeModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::Dispose()" />*/
	dispose: function () {
		var en = this.__lineElements.getEnumerator();
		while (en.moveNext()) {
			var element = en.current();
			$.ig.SchedulerUtils.prototype.remove(element);
		}
		this.__lineElements.clear();
		$.ig.ElementView.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPosition: function (model, left, top, width, height) {
		var smodel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, model);
		this.applyModelSettings(smodel);
		switch (smodel.shapeType()) {
			default:
			case $.ig.scheduler.ShapeType.rectangle:
				this.domElement().style.borderRadius = null;
				break;
			case $.ig.scheduler.ShapeType.ellipse:
				this.domElement().style.borderRadius = "50%";
				break;
		}
		$.ig.ElementView.prototype.setPosition.call(this, model, left, top, width, height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::ApplyModelSettings(Infragistics.Scheduler.Core.ShapeModel)" />*/
	applyModelSettings: function (model) {
		if (this.domElement() == null) {
			return;
		}
		this.setBackgroundBrush(model, model.fill());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::ApplyModelSettings(Infragistics.Scheduler.Core.ShapeModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::Initialize(Infragistics.Scheduler.Core.ShapeModel)" />*/
	initialize: function (model) {
		this.applyModelSettings(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeView::Initialize(Infragistics.Scheduler.Core.ShapeModel)" />*/
	,
	$type: new $.ig.Type('ShapeView', $.ig.ElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapeView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SplitterView" />*/

$.ig.util.defType('SplitterView', 'ElementView', {
	__schedulerView: null,
	init: function (domElement, schedulerView) {
		$.ig.ElementView.prototype.init.call(this, domElement);
		this.__schedulerView = schedulerView;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SplitterView Infragistics.Scheduler.Core.SplitterView::Create(Infragistics.Scheduler.Core.SchedulerView)" />*/
	create: function (schedulerView) {
		var div = document.createElement("div");
		var view = new $.ig.SplitterView(div, schedulerView);
		schedulerView.domElement().appendChild(div);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SplitterView Infragistics.Scheduler.Core.SplitterView::Create(Infragistics.Scheduler.Core.SchedulerView)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SplitterView::SuppressMargin()" />*/
	suppressMargin: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SplitterView::SuppressMargin()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SplitterView::PositionSplitter(Infragistics.Scheduler.Core.SchedulerElementRole, System.Int32, System.Int32)" />*/
	positionSplitter: function (role, left, top) {
		var div = this.domElement();
		if (div == null) {
			return;
		}
		div.style.position = "absolute";
		div.style.left = left + "px";
		div.style.top = top + "px";
		if (role == $.ig.scheduler.SchedulerElementRole.horizontalViewSplitter) {
			div.style.width = "100%";
		} else {
			div.style.height = "100%";
		}
		var className = this.__schedulerView.getCssClassName(role);
		if (className != null) {
			div.className = className;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SplitterView::PositionSplitter(Infragistics.Scheduler.Core.SchedulerElementRole, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('SplitterView', $.ig.ElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SplitterView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextContentView" />*/

$.ig.util.defType('TextContentView', 'SelectableViewBase', {
	__text: null,
	__vAlign: 0,
	__textElement: null,
	__lastFontString: null,
	init: function (domElement) {
		$.ig.SelectableViewBase.prototype.init.call(this, domElement);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TextContentView Infragistics.Scheduler.Core.TextContentView::Create(Infragistics.Scheduler.Core.TextModel)" />*/
	create: function (model) {
		var element = $.ig.TextContentView.prototype.createElement();
		var view = new $.ig.TextContentView(element);
		view.initialize(model);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TextContentView Infragistics.Scheduler.Core.TextContentView::Create(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	/*<BeginMethod Name="System.Html.Element Infragistics.Scheduler.Core.TextContentView::CreateElement()" />*/
	createElement: function () {
		return document.createElement("div");
	}
	/*<EndMethod Name="System.Html.Element Infragistics.Scheduler.Core.TextContentView::CreateElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::Dispose()" />*/
	dispose: function () {
		if (this.__textElement != null) {
			$.ig.SchedulerUtils.prototype.remove(this.__textElement);
			this.__textElement = null;
		}
		$.ig.SelectableViewBase.prototype.dispose.call(this);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::Dispose()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	onIsSelectedChanged: function (model) {
		$.ig.SelectableViewBase.prototype.onIsSelectedChanged.call(this, model);
		if (this.__textElement == null) {
			return;
		}
		this.__lastFontString = null;
		this.updateFont($.ig.util.cast($.ig.TextModel.prototype.$type, model));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::OnIsSelectedChanged(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	onRoleChanged: function (model, oldRole, newRole) {
		if (this.__textElement == null) {
			return;
		}
		this.__lastFontString = null;
		this.updateFont($.ig.util.cast($.ig.TextModel.prototype.$type, model));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::OnRoleChanged(Infragistics.Scheduler.Core.ModelBase, System.Nullable, System.Nullable)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	setPosition: function (model, left, top, width, height) {
		$.ig.SelectableViewBase.prototype.setPosition.call(this, model, left, top, width, height);
		if (this.__textElement == null) {
			return;
		}
		width -= model.paddingLeft() + model.paddingRight();
		height -= model.paddingTop() + model.paddingBottom();
		var texttop = 0;
		if (this.__vAlign != $.ig.scheduler.ContentVerticalAlignment.top) {
			var font = model.fontInfo();
			var textHeight = model.owner()._view().getCachedFontHeight(model.role(), font);
			if (textHeight == 0) {
				textHeight = this.__textElement.offsetHeight;
				model.owner()._view().setCachedFontHeight(model.role(), font, textHeight);
			}
			var extraHeight = height - textHeight;
			if (extraHeight > 0) {
				switch (this.__vAlign) {
					case $.ig.scheduler.ContentVerticalAlignment.bottom:
						texttop += extraHeight;
						break;
					case $.ig.scheduler.ContentVerticalAlignment.center:
					default:
						texttop += $.ig.intDivide(extraHeight, 2);
						break;
				}
			}
		}
		this.__textElement.style.top = texttop + "px";
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::SetPosition(Infragistics.Scheduler.Core.ModelBase, System.Int32, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.TextContentView::Text()" />*/
	text: function () {
		return this.__text;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.TextContentView::Text()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::ApplyModelSettings(Infragistics.Scheduler.Core.TextModel)" />*/
	applyModelSettings: function (model) {
		this.initializeText(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::ApplyModelSettings(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::Initialize(Infragistics.Scheduler.Core.TextModel)" />*/
	initialize: function (model) {
		this.applyModelSettings(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::Initialize(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::InitializeText(Infragistics.Scheduler.Core.TextModel)" />*/
	initializeText: function (model) {
		this.__propertiesEverSet |= $.ig.ElementView_PropertyIds.prototype.text;
		var value = model.text();
		if (value != this.text()) {
			this.__text = value;
			this.invalidate();
			if (this.__text != null) {
				if (this.__textElement == null) {
					this.__textElement = document.createElement("span");
					this.__textElement.style.position = "relative";
					this.__textElement.style.width = "100%";
					this.updateFont(model);
					this.domElement().appendChild(this.__textElement);
				}
				this.__textElement.innerText = this.__text;
			} else {
				if (this.__textElement != null) {
					$.ig.SchedulerUtils.prototype.remove(this.__textElement);
				}
				this.__textElement = null;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::InitializeText(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::UpdateFont(Infragistics.Scheduler.Core.TextModel)" />*/
	updateFont: function (model) {
		if (this.__textElement == null) {
			return;
		}
		this.__vAlign = model.verticalAlignment();
		var halign = null;
		switch (model.horizontalAlignment()) {
			case $.ig.scheduler.ContentHorizontalAlignment.left:
				halign = "left";
				break;
			case $.ig.scheduler.ContentHorizontalAlignment.right:
				halign = "right";
				break;
			case $.ig.scheduler.ContentHorizontalAlignment.stretch:
				halign = "justify";
				break;
			default:
			case $.ig.scheduler.ContentHorizontalAlignment.center:
				halign = "center";
				break;
		}
		this.domElement().style.textAlign = halign;
		var fontString = "";
		var roleCache = model.owner()._view().getRoleCache(model.role());
		if (this.isSelected() || roleCache.font() != model.fontInfo()) {
			var font = model.fontInfo();
			fontString = font != null ? font.fontString() : null;
		}
		var textOverflow = "ellipsis";
		switch (model.lineBreakStyle()) {
			case $.ig.LineBreakStyle.prototype.tailClip:
				textOverflow = "clip";
				break;
		}
		this.domElement().style.textOverflow = textOverflow;
		if (this.__lastFontString == fontString) {
			return;
		}
		this.__textElement.style.font = fontString;
		this.__lastFontString = fontString;
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextContentView::UpdateFont(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	$type: new $.ig.Type('TextContentView', $.ig.SelectableViewBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextContentView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextOnlyNoBackgroundView" />*/

$.ig.util.defType('TextOnlyNoBackgroundView', 'TextContentView', {
	init: function (domElement) {
		$.ig.TextContentView.prototype.init.call(this, domElement);
		domElement.style.backgroundColor = "transparent";
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TextOnlyNoBackgroundView Infragistics.Scheduler.Core.TextOnlyNoBackgroundView::CreateTextOnlyView(Infragistics.Scheduler.Core.TextModel)" />*/
	createTextOnlyView: function (model) {
		var element = $.ig.TextContentView.prototype.createElement();
		var view = new $.ig.TextOnlyNoBackgroundView(element);
		view.initialize(model);
		return view;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TextOnlyNoBackgroundView Infragistics.Scheduler.Core.TextOnlyNoBackgroundView::CreateTextOnlyView(Infragistics.Scheduler.Core.TextModel)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TextOnlyNoBackgroundView::DrawsBackground()" />*/
	drawsBackground: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TextOnlyNoBackgroundView::DrawsBackground()" />*/
	,
	$type: new $.ig.Type('TextOnlyNoBackgroundView', $.ig.TextContentView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextOnlyNoBackgroundView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaInfo" />*/

$.ig.util.defType('AgendaInfo', 'Object', {
	__scheduler: null,
	__agendaDateRange: null,
	__dayMetricsAsList: null,
	__daysAsList: null,
	__totalScrollExtentAllDays: 0,
	__activityCountQueryResult: null,
	__appointmentInfos: null,
	init: function (scheduler, dateRange) {
		$.ig.Object.prototype.init.call(this);
		this.__scheduler = scheduler;
		this.__agendaDateRange = dateRange;
		this.version(1);
	},
	_appointmentHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::AppointmentHeight()" />*/
	appointmentHeight: function (value) {
		if (arguments.length === 1) {
			this._appointmentHeight = value;
			return value;
		} else {
			return this._appointmentHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::AppointmentHeight()" />*/
	,
	_dayHeaderHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::DayHeaderHeight()" />*/
	dayHeaderHeight: function (value) {
		if (arguments.length === 1) {
			this._dayHeaderHeight = value;
			return value;
		} else {
			return this._dayHeaderHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::DayHeaderHeight()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.AgendaInfo::Days(System.DateTime)" />*/
	days: function (start) {
		var d__ = new $.ig.AgendaInfo___Days__IteratorClass(-2);
		d__.___4__this = this;
		d__.___3__start = start;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.AgendaInfo::Days(System.DateTime)" />*/
	,
	_interDaySpacing: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::InterDaySpacing()" />*/
	interDaySpacing: function (value) {
		if (arguments.length === 1) {
			this._interDaySpacing = value;
			return value;
		} else {
			return this._interDaySpacing;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::InterDaySpacing()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::TotalScrollExtentAllDays()" />*/
	totalScrollExtentAllDays: function () {
		this.ensureData();
		return this.__totalScrollExtentAllDays;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::TotalScrollExtentAllDays()" />*/
	,
	_version: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::Version()" />*/
	version: function (value) {
		if (arguments.length === 1) {
			this._version = value;
			return value;
		} else {
			return this._version;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::Version()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.Core.AgendaInfo::DataSource()" />*/
	dataSource: function () {
		return this.__scheduler.dataSource();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Data.ScheduleDataSource Infragistics.Scheduler.Core.AgendaInfo::DataSource()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo::DayMetricsCalculated()" />*/
	dayMetricsCalculated: function () {
		return null != this.__dayMetricsAsList && null != this.__daysAsList;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo::DayMetricsCalculated()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.AgendaInfo::DateTimeFormatProvider()" />*/
	dateTimeFormatProvider: function () {
		return this.__scheduler != null ? this.__scheduler._dateTimeFormatProvider() : $.ig.DateUtils.prototype.defaultDateTimeFormatProvider();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.AgendaInfo::DateTimeFormatProvider()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo::ContainsDate(System.DateTime)" />*/
	containsDate: function (date) {
		return this.__daysAsList.indexOf(date) > -1;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo::ContainsDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.AgendaInfo::FormatDayOfWeekAndAndDate(System.DateTime)" />*/
	formatDayOfWeekAndAndDate: function (date) {
		return this.dateTimeFormatProvider().formatLongDate(date);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.AgendaInfo::FormatDayOfWeekAndAndDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.AgendaInfo::FormatShortTime(System.DateTime)" />*/
	formatShortTime: function (date) {
		return this.dateTimeFormatProvider().formatShortTime(date);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.AgendaInfo::FormatShortTime(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.AgendaInfo::GetAppointmentInfos()" />*/
	getAppointmentInfos: function () {
		if (null != this.__appointmentInfos) {
			return this.__appointmentInfos;
		}
		this.__appointmentInfos = new $.ig.List$1($.ig.AgendaViewAppointmentInfo.prototype.$type, 0);
		var appointments = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type), 0);
		if (null == this.dataSource()) {
			return this.__appointmentInfos;
		}
		this.dataSource()._getAppointmentsInRange2(this.__agendaDateRange, null, function (queryResult, isAsync) {
			if (isAsync) {
			} else {
				appointments = $.ig.Utilities.prototype.dayAppointmentDictionaryFromQueryResult(queryResult);
			}
		});
		this.__appointmentInfos = this.appointmentInfoCollectionFromAppointments(appointments);
		return this.__appointmentInfos;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.AgendaInfo::GetAppointmentInfos()" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.AgendaInfo::GetDayContainingScrollOffset(System.Int32)" />*/
	getDayContainingScrollOffset: function (scrollOffset) {
		this.ensureData();
		var en = this.__dayMetricsAsList.getEnumerator();
		while (en.moveNext()) {
			var dayMetrics = en.current();
			if (scrollOffset < (dayMetrics.scrollOffset() + dayMetrics.scrollExtent())) {
				return $.ig.util.toNullable($.ig.Date.prototype.$type, dayMetrics.day());
			}
		}
		return $.ig.util.toNullable($.ig.Date.prototype.$type, null);
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.AgendaInfo::GetDayContainingScrollOffset(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaDayMetrics Infragistics.Scheduler.Core.AgendaInfo::GetDayMetrics(System.DateTime)" />*/
	getDayMetrics: function (date) {
		this.ensureData();
		return this.__dayMetricsAsList.__inner[this.__daysAsList.indexOf(date)];
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaDayMetrics Infragistics.Scheduler.Core.AgendaInfo::GetDayMetrics(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::GetScrollOffsetOfDay(System.DateTime)" />*/
	getScrollOffsetOfDay: function (day) {
		this.ensureData();
		var targetDate = $.ig.Date.prototype.getDate(day);
		var en = this.__dayMetricsAsList.getEnumerator();
		while (en.moveNext()) {
			var dayMetrics = en.current();
			if (targetDate <= dayMetrics.day()) {
				return dayMetrics.scrollOffset();
			}
		}
		return -1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.AgendaInfo::GetScrollOffsetOfDay(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnAppointmentsChanged()" />*/
	onAppointmentsChanged: function () {
		this.clearData();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnAppointmentsChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnDataSourceChanged()" />*/
	onDataSourceChanged: function () {
		this.clearData();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnDataSourceChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnDateRangeChanged(Infragistics.DateTimeRange)" />*/
	onDateRangeChanged: function (dateRange) {
		this.__agendaDateRange = dateRange;
		this.clearData();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnDateRangeChanged(Infragistics.DateTimeRange)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnMetricsRelatedPropertiesChanged(System.Int32, System.Int32, System.Int32)" />*/
	onMetricsRelatedPropertiesChanged: function (dayHeaderHeight, appointmentHeight, interDaySpacing) {
		if (dayHeaderHeight != this.dayHeaderHeight() || appointmentHeight != this.appointmentHeight() || interDaySpacing != this.interDaySpacing()) {
			this.dayHeaderHeight(dayHeaderHeight);
			this.appointmentHeight(appointmentHeight);
			this.interDaySpacing(interDaySpacing);
			this.refreshScrollOffsetsAndExtents();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::OnMetricsRelatedPropertiesChanged(System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::RefreshScrollOffsetsAndExtents()" />*/
	refreshScrollOffsetsAndExtents: function () {
		if (false == this.dayMetricsCalculated()) {
			this.refreshDayMetrics();
		} else {
			this.__totalScrollExtentAllDays = 0;
			var en = this.__dayMetricsAsList.getEnumerator();
			while (en.moveNext()) {
				var dayMetric = en.current();
				dayMetric.updateScrollOffsetAndExtent(this, this.__totalScrollExtentAllDays, dayMetric.totalAppointments());
				this.__totalScrollExtentAllDays += dayMetric.scrollExtent();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::RefreshScrollOffsetsAndExtents()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.AgendaInfo::AppointmentInfoCollectionFromAppointments(System.Collections.Generic.Dictionary)" />*/
	appointmentInfoCollectionFromAppointments: function (appointments) {
		var appointmentInfos = new $.ig.List$1($.ig.AgendaViewAppointmentInfo.prototype.$type, 0);
		var scrollOffset = 0;
		var en = appointments.keys().getEnumerator();
		while (en.moveNext()) {
			var key = en.current();
			var keyDate = $.ig.Utilities.prototype.dateFromDictionaryKey(key);
			if (keyDate < $.ig.Date.prototype.getDate(this.__agendaDateRange.start())) {
				continue;
			}
			if (keyDate > $.ig.Date.prototype.getDate(this.__agendaDateRange.end())) {
				break;
			}
			scrollOffset += this.dayHeaderHeight();
			var list = appointments.item(key);
			var en1 = list.getEnumerator();
			while (en1.moveNext()) {
				var appt = en1.current();
				appointmentInfos.add(new $.ig.AgendaViewAppointmentInfo(1, appt, scrollOffset, keyDate));
				scrollOffset += this.appointmentHeight();
			}
			scrollOffset += this.interDaySpacing();
		}
		return appointmentInfos;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.AgendaInfo::AppointmentInfoCollectionFromAppointments(System.Collections.Generic.Dictionary)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::ClearData()" />*/
	clearData: function () {
		if (null != this.__dayMetricsAsList) {
			this.__dayMetricsAsList.clear();
			this.__dayMetricsAsList = null;
		}
		if (null != this.__daysAsList) {
			this.__daysAsList.clear();
			this.__daysAsList = null;
		}
		if (null != this.__appointmentInfos) {
			this.__appointmentInfos.clear();
			this.__appointmentInfos = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::ClearData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::EnsureData()" />*/
	ensureData: function () {
		if (false == this.dayMetricsCalculated()) {
			this.refreshDayMetrics();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::EnsureData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::QueryAppointmentCount()" />*/
	queryAppointmentCount: function () {
		var $self = this;
		this.__activityCountQueryResult = null;
		if (null != this.dataSource()) {
			this.dataSource()._getAppointmentCounts1(this.__agendaDateRange, null, function (queryResult, isAsync) {
				if (isAsync) {
				} else {
					$self.__activityCountQueryResult = queryResult;
				}
			});
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::QueryAppointmentCount()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::RefreshDayMetrics()" />*/
	refreshDayMetrics: function () {
		this.__dayMetricsAsList = new $.ig.List$1($.ig.AgendaDayMetrics.prototype.$type, 0);
		this.__daysAsList = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		this.queryAppointmentCount();
		if (null == this.__activityCountQueryResult) {
			return;
		}
		this.__totalScrollExtentAllDays = 0;
		var en = this.__activityCountQueryResult.dates().getEnumerator();
		while (en.moveNext()) {
			var date = en.current();
			var dayAppointmentCount = this.__activityCountQueryResult._item(date);
			if (dayAppointmentCount.hasValue()) {
				var dayMetrics = new $.ig.AgendaDayMetrics(this, date, this.__totalScrollExtentAllDays, dayAppointmentCount.value());
				this.__dayMetricsAsList.add(dayMetrics);
				this.__daysAsList.add(date);
				this.__totalScrollExtentAllDays += dayMetrics.scrollExtent();
			}
		}
		(function ($obj) { var $value = $obj.version(); $obj.version($value + 1); return $value; }(this));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo::RefreshDayMetrics()" />*/
	,
	$type: new $.ig.Type('AgendaInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaDayMetrics" />*/

$.ig.util.defType('AgendaDayMetrics', 'Object', {
	init: function (agendaInfo, day, scrollOffset, totalAppointments) {
		$.ig.Object.prototype.init.call(this);
		this.day(day);
		this.updateScrollOffsetAndExtent(agendaInfo, scrollOffset, totalAppointments);
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.AgendaDayMetrics::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat1("Daay: {0}, ScrollOffset: {1}, ScrollExtent: {2}, TotalAppointments: {3}", [ this.day(), this.scrollOffset(), this.scrollExtent(), this.totalAppointments() ]);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.AgendaDayMetrics::ToString()" />*/
	,
	_day: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.AgendaDayMetrics::Day()" />*/
	day: function (value) {
		if (arguments.length === 1) {
			this._day = value;
			return value;
		} else {
			return this._day;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.AgendaDayMetrics::Day()" />*/
	,
	_scrollExtent: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::ScrollExtent()" />*/
	scrollExtent: function (value) {
		if (arguments.length === 1) {
			this._scrollExtent = value;
			return value;
		} else {
			return this._scrollExtent;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::ScrollExtent()" />*/
	,
	_scrollOffset: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::ScrollOffset()" />*/
	scrollOffset: function (value) {
		if (arguments.length === 1) {
			this._scrollOffset = value;
			return value;
		} else {
			return this._scrollOffset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::ScrollOffset()" />*/
	,
	_totalAppointments: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::TotalAppointments()" />*/
	totalAppointments: function (value) {
		if (arguments.length === 1) {
			this._totalAppointments = value;
			return value;
		} else {
			return this._totalAppointments;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.AgendaDayMetrics::TotalAppointments()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaDayMetrics::UpdateScrollOffsetAndExtent(Infragistics.Scheduler.Core.AgendaInfo, System.Int32, System.Int32)" />*/
	updateScrollOffsetAndExtent: function (agendaInfo, scrollOffset, totalAppointments) {
		this.totalAppointments(totalAppointments);
		this.scrollExtent(agendaInfo.dayHeaderHeight() + (this.totalAppointments() * agendaInfo.appointmentHeight()) + agendaInfo.interDaySpacing());
		this.scrollOffset(scrollOffset);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaDayMetrics::UpdateScrollOffsetAndExtent(Infragistics.Scheduler.Core.AgendaInfo, System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('AgendaDayMetrics', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaDayMetrics" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthInfo" />*/

$.ig.util.defType('MonthInfo', 'Object', {
	__monthMetrics: null,
	__monthMetricsAsList: null,
	__months: null,
	__minDate: new Date(),
	__minMonth: new Date(),
	__maxDate: new Date(),
	__maxMonth: new Date(),
	__monthNamesFull: null,
	__monthNamesAbbreviated: null,
	__dayOfWeekNamesFull: null,
	__dayOfWeekNamesAbbreviated: null,
	__dayOfWeekNamesShortest: null,
	__totalScrollExtentAllMonths: 0,
	__longestDayNameFull: null,
	__longestDayNameAbbreviated: null,
	__longestDayNameShortest: null,
	__daysOfWeek: null,
	__scheduler: null,
	init: function (scheduler, minDate, maxDate) {
		this._daySize = new $.ig.Size();
		$.ig.Object.prototype.init.call(this);
		this.__scheduler = scheduler;
		this.__minDate = minDate;
		this.__maxDate = maxDate;
		this.__minMonth = $.ig.Date.prototype.fromValues(minDate.getFullYear(), $.ig.Date.prototype.getMonth(minDate), 1, 0, 0, 0, 0);
		this.__maxMonth = $.ig.Date.prototype.fromValues(maxDate.getFullYear(), $.ig.Date.prototype.getMonth(maxDate), 1, 0, 0, 0, 0);
		this.scrollDirection($.ig.scheduler.SchedulerViewScrollDirection.vertical);
		this.version(1);
	},
	_dayOfWeekHeaderHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::DayOfWeekHeaderHeight()" />*/
	dayOfWeekHeaderHeight: function (value) {
		if (arguments.length === 1) {
			this._dayOfWeekHeaderHeight = value;
			return value;
		} else {
			return this._dayOfWeekHeaderHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::DayOfWeekHeaderHeight()" />*/
	,
	_daySize: null,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.MonthInfo::DaySize()" />*/
	daySize: function (value) {
		if (arguments.length === 1) {
			this._daySize = value;
			return value;
		} else {
			return this._daySize;
		}
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.MonthInfo::DaySize()" />*/
	,
	_fixedHorizontalWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::FixedHorizontalWidth()" />*/
	fixedHorizontalWidth: function (value) {
		if (arguments.length === 1) {
			this._fixedHorizontalWidth = value;
			return value;
		} else {
			return this._fixedHorizontalWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::FixedHorizontalWidth()" />*/
	,
	_fixedVerticalHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::FixedVerticalHeight()" />*/
	fixedVerticalHeight: function (value) {
		if (arguments.length === 1) {
			this._fixedVerticalHeight = value;
			return value;
		} else {
			return this._fixedVerticalHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::FixedVerticalHeight()" />*/
	,
	_interMonthSpacing: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::InterMonthSpacing()" />*/
	interMonthSpacing: function (value) {
		if (arguments.length === 1) {
			this._interMonthSpacing = value;
			return value;
		} else {
			return this._interMonthSpacing;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::InterMonthSpacing()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MaxDate()" />*/
	maxDate: function () {
		return this.__maxDate;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MaxDate()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MaxMonth()" />*/
	maxMonth: function () {
		return this.__maxMonth;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MaxMonth()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MinDate()" />*/
	minDate: function () {
		return this.__minDate;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MinDate()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MinMonth()" />*/
	minMonth: function () {
		return this.__minMonth;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::MinMonth()" />*/
	,
	_monthNameAreaHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::MonthNameAreaHeight()" />*/
	monthNameAreaHeight: function (value) {
		if (arguments.length === 1) {
			this._monthNameAreaHeight = value;
			return value;
		} else {
			return this._monthNameAreaHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::MonthNameAreaHeight()" />*/
	,
	_scrollDirection: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.MonthInfo::ScrollDirection()" />*/
	scrollDirection: function (value) {
		if (arguments.length === 1) {
			this._scrollDirection = value;
			return value;
		} else {
			return this._scrollDirection;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.MonthInfo::ScrollDirection()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::TotalScrollExtentAllMonths()" />*/
	totalScrollExtentAllMonths: function () {
		this.ensureData();
		return this.__totalScrollExtentAllMonths;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::TotalScrollExtentAllMonths()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::TotalMonths()" />*/
	totalMonths: function () {
		this.ensureData();
		return this.__months.count();
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::TotalMonths()" />*/
	,
	_version: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::Version()" />*/
	version: function (value) {
		if (arguments.length === 1) {
			this._version = value;
			return value;
		} else {
			return this._version;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::Version()" />*/
	,
	_weekHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekHeight()" />*/
	weekHeight: function (value) {
		if (arguments.length === 1) {
			this._weekHeight = value;
			return value;
		} else {
			return this._weekHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekHeight()" />*/
	,
	_weekWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekWidth()" />*/
	weekWidth: function (value) {
		if (arguments.length === 1) {
			this._weekWidth = value;
			return value;
		} else {
			return this._weekWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekWidth()" />*/
	,
	_weekNumberWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekNumberWidth()" />*/
	weekNumberWidth: function (value) {
		if (arguments.length === 1) {
			this._weekNumberWidth = value;
			return value;
		} else {
			return this._weekNumberWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::WeekNumberWidth()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthInfo::IsMonthDataPopulated()" />*/
	isMonthDataPopulated: function () {
		return null != this.__monthMetrics && null != this.__months && null != this.__monthMetricsAsList;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthInfo::IsMonthDataPopulated()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.MonthInfo::DateTimeFormatProvider()" />*/
	dateTimeFormatProvider: function () {
		return this.__scheduler != null ? this.__scheduler._dateTimeFormatProvider() : $.ig.DateUtils.prototype.defaultDateTimeFormatProvider();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.MonthInfo::DateTimeFormatProvider()" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.MonthInfo::GetDaysOfWeek()" />*/
	getDaysOfWeek: function () {
		if (null == this.__daysOfWeek) {
			this.__daysOfWeek = $.ig.DateUtils.prototype.getDaysOfWeek(this.dateTimeFormatProvider());
		}
		return this.__daysOfWeek;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.MonthInfo::GetDaysOfWeek()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetDayOfWeekIndex(System.DayOfWeek)" />*/
	getDayOfWeekIndex: function (dayOfWeek) {
		var daysOfWeek = this.getDaysOfWeek();
		var length = daysOfWeek.length;
		for (var i = 0; i < length; i++) {
			if (daysOfWeek[i] == dayOfWeek) {
				return i;
			}
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetDayOfWeekIndex(System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.MonthInfo::GetDayNames(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getDayNames: function (dayOfWeekFormat) {
		if (dayOfWeekFormat == $.ig.DayOfWeekFormat.prototype.full) {
			if (null == this.__dayOfWeekNamesFull) {
				this.__dayOfWeekNamesFull = this.dateTimeFormatProvider().getDayNames($.ig.DayOfWeekFormat.prototype.full);
			}
			return this.__dayOfWeekNamesFull;
		} else if (dayOfWeekFormat == $.ig.DayOfWeekFormat.prototype.shortest) {
			if (null == this.__dayOfWeekNamesShortest) {
				this.__dayOfWeekNamesShortest = this.dateTimeFormatProvider().getDayNames($.ig.DayOfWeekFormat.prototype.shortest);
			}
			return this.__dayOfWeekNamesShortest;
		} else {
			if (null == this.__dayOfWeekNamesAbbreviated) {
				this.__dayOfWeekNamesAbbreviated = this.dateTimeFormatProvider().getDayNames($.ig.DayOfWeekFormat.prototype.abbreviated);
			}
			return this.__dayOfWeekNamesAbbreviated;
		}
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.MonthInfo::GetDayNames(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetFormattedYearMonth(System.DateTime)" />*/
	getFormattedYearMonth: function (date) {
		return this.dateTimeFormatProvider().formatYearMonth(date);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetFormattedYearMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetFormattedYearMonth(System.Int32, System.Int32)" />*/
	getFormattedYearMonth1: function (year, month) {
		return this.getFormattedYearMonth($.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0));
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetFormattedYearMonth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetIndexOfWeekInMonthForDate(System.DateTime)" />*/
	getIndexOfWeekInMonthForDate: function (date) {
		this.ensureData();
		var leadingDays = $.ig.DateUtils.prototype.getLeadingDayCount(this.dateTimeFormatProvider(), date.getFullYear(), $.ig.Date.prototype.getMonth(date), 0, this.dateTimeFormatProvider().firstDayOfWeek());
		var day = date.getDate();
		var weekIndex = 0;
		for (var i = 0; i < 32; i += 7) {
			if (day <= i + (7 - leadingDays)) {
				return weekIndex;
			}
			weekIndex++;
		}
		return weekIndex;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetIndexOfWeekInMonthForDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetLongestDayName(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getLongestDayName: function (dayOfWeekFormat) {
		if (String.isNullOrEmpty(this.__longestDayNameFull)) {
			var dayNames = this.getDayNames(dayOfWeekFormat);
			var longestLength = 0;
			var longestDayName = "";
			for (var i = 0; i < dayNames.length; i++) {
				var dayName = dayNames[i];
				var length = dayName.length;
				if (length > longestLength) {
					longestLength = length;
					longestDayName = dayName;
				}
			}
			switch (dayOfWeekFormat) {
				case $.ig.DayOfWeekFormat.prototype.full:
					this.__longestDayNameFull = longestDayName;
					break;
				case $.ig.DayOfWeekFormat.prototype.abbreviated:
					this.__longestDayNameAbbreviated = longestDayName;
					break;
				case $.ig.DayOfWeekFormat.prototype.shortest:
					this.__longestDayNameShortest = longestDayName;
					break;
			}
		}
		switch (dayOfWeekFormat) {
			case $.ig.DayOfWeekFormat.prototype.full: return this.__longestDayNameFull;
			case $.ig.DayOfWeekFormat.prototype.abbreviated: return this.__longestDayNameAbbreviated;
			case $.ig.DayOfWeekFormat.prototype.shortest: return this.__longestDayNameShortest;
		}
		return this.__longestDayNameShortest;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetLongestDayName(Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthMetrics Infragistics.Scheduler.Core.MonthInfo::GetMonthMetrics(System.DateTime)" />*/
	getMonthMetrics: function (date) {
		return this.getMonthMetrics1(date.getFullYear(), $.ig.Date.prototype.getMonth(date));
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthMetrics Infragistics.Scheduler.Core.MonthInfo::GetMonthMetrics(System.DateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthMetrics Infragistics.Scheduler.Core.MonthInfo::GetMonthMetrics(System.Int32, System.Int32)" />*/
	getMonthMetrics1: function (year, month) {
		this.ensureData();
		var date = this.normalizeDate($.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0));
		return this.__monthMetrics.item(this.createMonthKey(date.getFullYear(), $.ig.Date.prototype.getMonth(date)));
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthMetrics Infragistics.Scheduler.Core.MonthInfo::GetMonthMetrics(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetMonthName(System.Int32, Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	getMonthName: function (month, monthNameFormat) {
		if (monthNameFormat == $.ig.MonthNameFormat.prototype.full) {
			if (null == this.__monthNamesFull) {
				this.__monthNamesFull = this.dateTimeFormatProvider().getMonthNames($.ig.MonthNameFormat.prototype.full);
			}
			return this.__monthNamesFull[month - 1];
		} else {
			if (null == this.__monthNamesAbbreviated) {
				this.__monthNamesAbbreviated = this.dateTimeFormatProvider().getMonthNames($.ig.MonthNameFormat.prototype.abbreviated);
			}
			return this.__monthNamesAbbreviated[month - 1];
		}
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::GetMonthName(System.Int32, Infragistics.Scheduler.Core.MonthNameFormat)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::GetMonthContainingScrollOffset(System.Int32)" />*/
	getMonthContainingScrollOffset: function (scrollOffset) {
		this.ensureData();
		var currentScrollOffset = 0;
		if (currentScrollOffset >= scrollOffset) {
			return this.dateTimeFromMonthKey(this.__months.__inner[0]);
		}
		var totalMonths = this.__months.count();
		for (var i = 0; i < totalMonths; i++) {
			currentScrollOffset += this.__monthMetrics.item(this.__months.__inner[i]).scrollExtent();
			if (currentScrollOffset >= scrollOffset) {
				return this.dateTimeFromMonthKey(this.__months.__inner[i]);
			}
		}
		return this.dateTimeFromMonthKey(this.__months.__inner[totalMonths - 1]);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::GetMonthContainingScrollOffset(System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetWeekNumberOfFirstWeekInMonth(System.DateTime)" />*/
	getWeekNumberOfFirstWeekInMonth: function (month) {
		return this.getWeekNumberOfFirstWeekInMonth1(month.getFullYear(), $.ig.Date.prototype.getMonth(month));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetWeekNumberOfFirstWeekInMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetWeekNumberOfFirstWeekInMonth(System.Int32, System.Int32)" />*/
	getWeekNumberOfFirstWeekInMonth1: function (year, month) {
		if (month == 1) {
			return 1;
		}
		var firstDayOfTargetMonthDate = $.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0);
		var firstDayOfFirstWeekDate = $.ig.Date.prototype.fromValues(year, 1, 1, 0, 0, 0, 0);
		var leadingDays = $.ig.DateUtils.prototype.getLeadingDayCount(this.dateTimeFormatProvider(), firstDayOfFirstWeekDate.getFullYear(), $.ig.Date.prototype.getMonth(firstDayOfFirstWeekDate), 0, this.dateTimeFormatProvider().firstDayOfWeek());
		try {
			firstDayOfFirstWeekDate = $.ig.Date.prototype.addDays(firstDayOfFirstWeekDate, -1 * leadingDays);
		}
		catch (e) {
		}
		var totalDays = $.ig.util.timeSpanTotalDays((firstDayOfTargetMonthDate - firstDayOfFirstWeekDate));
		return ($.ig.intDivide($.ig.truncate(totalDays), 7)) + 1;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::GetWeekNumberOfFirstWeekInMonth(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnDataSourceChanged()" />*/
	onDataSourceChanged: function () {
		this.clearData();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnDataSourceChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnMetricsRelatedPropertiesChanged(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.Int32, System.Windows.Size, System.Int32, System.Int32)" />*/
	onMetricsRelatedPropertiesChanged: function (monthNameAreaHeight, dayOfWeekHeaderHeight, weekHeight, weekWidth, weekNumberWidth, scrollDirection, interMonthSpacing, daySize, fixedVerticalHeight, fixedHorizontalWidth) {
		if (monthNameAreaHeight != this.monthNameAreaHeight() || dayOfWeekHeaderHeight != this.dayOfWeekHeaderHeight() || weekHeight != this.weekHeight() || weekWidth != this.weekWidth() || weekNumberWidth != this.weekNumberWidth() || scrollDirection != this.scrollDirection() || interMonthSpacing != this.interMonthSpacing() || $.ig.Size.prototype.l_op_Inequality(daySize, this.daySize()) || fixedVerticalHeight != this.fixedVerticalHeight() || fixedHorizontalWidth != this.fixedHorizontalWidth()) {
			this.monthNameAreaHeight(monthNameAreaHeight);
			this.dayOfWeekHeaderHeight(dayOfWeekHeaderHeight);
			this.weekHeight(weekHeight);
			this.weekWidth(weekWidth);
			this.weekNumberWidth(weekNumberWidth);
			this.scrollDirection(scrollDirection);
			this.interMonthSpacing(interMonthSpacing);
			this.daySize(daySize);
			this.fixedVerticalHeight(fixedVerticalHeight);
			this.fixedHorizontalWidth(fixedHorizontalWidth);
			this.refreshMonthScrollOffsetsAndExtents();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnMetricsRelatedPropertiesChanged(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.Int32, System.Windows.Size, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnMinMaxDateChanged(System.DateTime, System.DateTime)" />*/
	onMinMaxDateChanged: function (minDate, maxDate) {
		if (+(this.__minDate) != +minDate || +(this.__maxDate) != +maxDate) {
			this.__minDate = minDate;
			this.__maxDate = maxDate;
			this.__minMonth = $.ig.Date.prototype.fromValues(minDate.getFullYear(), $.ig.Date.prototype.getMonth(minDate), 1, 0, 0, 0, 0);
			this.__maxMonth = $.ig.Date.prototype.fromValues(maxDate.getFullYear(), $.ig.Date.prototype.getMonth(maxDate), 1, 0, 0, 0, 0);
			this.clearData();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::OnMinMaxDateChanged(System.DateTime, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::RefreshMonthScrollOffsetsAndExtents()" />*/
	refreshMonthScrollOffsetsAndExtents: function () {
		if (false == this.isMonthDataPopulated()) {
			this.refreshMonthData();
		} else {
			this.__totalScrollExtentAllMonths = 0;
			var en = this.__monthMetricsAsList.getEnumerator();
			while (en.moveNext()) {
				var monthMetric = en.current();
				monthMetric.updateScrollOffsetAndExtent(this, this.__totalScrollExtentAllMonths);
				this.__totalScrollExtentAllMonths += monthMetric.scrollExtent();
			}
			(function ($obj) { var $value = $obj.version(); $obj.version($value + 1); return $value; }(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::RefreshMonthScrollOffsetsAndExtents()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::ClearData()" />*/
	clearData: function () {
		if (null != this.__monthMetrics) {
			this.__monthMetrics.clear();
			this.__monthMetrics = null;
		}
		if (null != this.__months) {
			this.__months.clear();
			this.__months = null;
		}
		if (null != this.__monthMetricsAsList) {
			this.__monthMetricsAsList.clear();
			this.__monthMetricsAsList = null;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::ClearData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::CompareMonthKeys(System.String, System.String)" />*/
	compareMonthKeys: function (key1, key2) {
		var key1Year = $.ig.Number.prototype.parseInt(key1.substr(0, 4));
		var key1Month = $.ig.Number.prototype.parseInt(key1.substr(4, 2));
		var key2Year = $.ig.Number.prototype.parseInt(key2.substr(0, 4));
		var key2Month = $.ig.Number.prototype.parseInt(key2.substr(4, 2));
		if (key1Year < key2Year) {
			return -1;
		}
		if (key1Year > key2Year) {
			return 1;
		}
		if (key1Month < key2Month) {
			return -1;
		}
		if (key1Month > key2Month) {
			return 1;
		}
		return 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::CompareMonthKeys(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::CreateMonthKey(System.Int32, System.Int32)" />*/
	createMonthKey: function (year, month) {
		var monthString = month.toString();
		if (monthString.length == 1) {
			monthString = "0" + monthString;
		} else if (monthString.length == 0) {
			monthString = "00";
		}
		var yearString = year.toString();
		if (yearString.length == 1) {
			yearString = "000" + yearString;
		} else if (yearString.length == 2) {
			yearString = "00" + yearString;
		} else if (yearString.length == 3) {
			yearString = "0" + yearString;
		} else if (yearString.length == 0) {
			yearString = "0000";
		}
		return yearString + monthString;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.MonthInfo::CreateMonthKey(System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::DateTimeFromMonthKey(System.String)" />*/
	dateTimeFromMonthKey: function (key) {
		return $.ig.Date.prototype.fromValues(this.yearFromMonthKey(key), this.monthFromMonthKey(key), 1, 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::DateTimeFromMonthKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::EnsureData()" />*/
	ensureData: function () {
		if (false == this.isMonthDataPopulated()) {
			this.refreshMonthData();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::EnsureData()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::MonthFromMonthKey(System.String)" />*/
	monthFromMonthKey: function (key) {
		return $.ig.Number.prototype.parseInt(key.substr(4, 2));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::MonthFromMonthKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::NormalizeDate(System.DateTime)" />*/
	normalizeDate: function (date) {
		if (date < this.minDate()) {
			return this.minDate();
		}
		if (date > this.maxDate()) {
			return this.maxDate();
		}
		return date;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.MonthInfo::NormalizeDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::RefreshMonthData()" />*/
	refreshMonthData: function () {
		var totalMonths = 0;
		if (this.__minDate.getFullYear() == this.__maxDate.getFullYear()) {
			totalMonths = $.ig.Date.prototype.getMonth(this.__maxDate) - $.ig.Date.prototype.getMonth(this.__minDate);
		} else {
			totalMonths += 13 - $.ig.Date.prototype.getMonth(this.__minDate);
			if (this.__maxDate.getFullYear() - this.__minDate.getFullYear() > 1) {
				totalMonths += (this.__maxDate.getFullYear() - this.__minDate.getFullYear() - 1) * 12;
			}
			if (this.__maxDate.getFullYear() != this.__minDate.getFullYear()) {
				totalMonths += $.ig.Date.prototype.getMonth(this.__maxDate);
			}
		}
		this.__monthMetrics = new $.ig.Dictionary$2(String, $.ig.MonthMetrics.prototype.$type, 1, totalMonths);
		this.__months = new $.ig.List$1(String, 2, totalMonths);
		this.__monthMetricsAsList = new $.ig.List$1($.ig.MonthMetrics.prototype.$type, 2, totalMonths);
		this.__totalScrollExtentAllMonths = 0;
		var currentYear = this.__minDate.getFullYear();
		var currentMonth = $.ig.Date.prototype.getMonth(this.__minDate);
		var maxYear = this.__maxDate.getFullYear();
		var maxMonth = $.ig.Date.prototype.getMonth(this.__maxDate);
		var firstDayOfWeek = this.dateTimeFormatProvider().firstDayOfWeek();
		for (var year = currentYear; year <= maxYear; year++) {
			var isFinalYear = (year == maxYear);
			var endMonth = 12;
			if (isFinalYear) {
				endMonth = maxMonth;
			}
			for (var month = currentMonth; month <= endMonth; month++) {
				var monthKey = this.createMonthKey(year, month);
				var monthMetrics = new $.ig.MonthMetrics(this, $.ig.DateUtils.prototype.getDaysInMonth(this.dateTimeFormatProvider(), year, month, 0), $.ig.DateUtils.prototype.getWeekCount(this.dateTimeFormatProvider(), year, month, 0, firstDayOfWeek), this.__totalScrollExtentAllMonths, $.ig.DateUtils.prototype.getLeadingDayCount(this.dateTimeFormatProvider(), year, month, 0, firstDayOfWeek), $.ig.DateUtils.prototype.getTrailingDayCount(this.dateTimeFormatProvider(), year, month, 0, firstDayOfWeek));
				this.__monthMetrics.add(monthKey, monthMetrics);
				this.__months.add(monthKey);
				this.__monthMetricsAsList.add(monthMetrics);
				this.__totalScrollExtentAllMonths += monthMetrics.scrollExtent();
			}
			currentMonth = 1;
			currentYear++;
		}
		(function ($obj) { var $value = $obj.version(); $obj.version($value + 1); return $value; }(this));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::RefreshMonthData()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::LogTraceInfoForMonthMetrics()" />*/
	logTraceInfoForMonthMetrics: function () {
		var en = this.__monthMetricsAsList.getEnumerator();
		while (en.moveNext()) {
			var monthMetric = en.current();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthInfo::LogTraceInfoForMonthMetrics()" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::YearFromMonthKey(System.String)" />*/
	yearFromMonthKey: function (key) {
		return $.ig.Number.prototype.parseInt(key.substr(0, 4));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.MonthInfo::YearFromMonthKey(System.String)" />*/
	,
	$type: new $.ig.Type('MonthInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthMetrics" />*/

$.ig.util.defType('MonthMetrics', 'Object', {
	init: function (monthInfo, totalDaysInMonth, totalWeeks, scrollOffset, leadingDayCount, trailingDayCount) {
		$.ig.Object.prototype.init.call(this);
		this.totalDaysInMonth(totalDaysInMonth);
		this.totalWeeks(totalWeeks);
		this.leadingDayCount(leadingDayCount);
		this.trailingDayCount(trailingDayCount);
		this.updateScrollOffsetAndExtent(monthInfo, scrollOffset);
	},
	_leadingDayCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::LeadingDayCount()" />*/
	leadingDayCount: function (value) {
		if (arguments.length === 1) {
			this._leadingDayCount = value;
			return value;
		} else {
			return this._leadingDayCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::LeadingDayCount()" />*/
	,
	_totalDaysInMonth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TotalDaysInMonth()" />*/
	totalDaysInMonth: function (value) {
		if (arguments.length === 1) {
			this._totalDaysInMonth = value;
			return value;
		} else {
			return this._totalDaysInMonth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TotalDaysInMonth()" />*/
	,
	_totalWeeks: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TotalWeeks()" />*/
	totalWeeks: function (value) {
		if (arguments.length === 1) {
			this._totalWeeks = value;
			return value;
		} else {
			return this._totalWeeks;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TotalWeeks()" />*/
	,
	_scrollExtent: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::ScrollExtent()" />*/
	scrollExtent: function (value) {
		if (arguments.length === 1) {
			this._scrollExtent = value;
			return value;
		} else {
			return this._scrollExtent;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::ScrollExtent()" />*/
	,
	_trailingDayCount: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TrailingDayCount()" />*/
	trailingDayCount: function (value) {
		if (arguments.length === 1) {
			this._trailingDayCount = value;
			return value;
		} else {
			return this._trailingDayCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::TrailingDayCount()" />*/
	,
	_scrollOffset: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::ScrollOffset()" />*/
	scrollOffset: function (value) {
		if (arguments.length === 1) {
			this._scrollOffset = value;
			return value;
		} else {
			return this._scrollOffset;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthMetrics::ScrollOffset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthMetrics::UpdateScrollOffsetAndExtent(Infragistics.Scheduler.Core.MonthInfo, System.Int32)" />*/
	updateScrollOffsetAndExtent: function (monthInfo, scrollOffset) {
		if (monthInfo.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			if (monthInfo.fixedVerticalHeight() != -1) {
				this.scrollExtent(monthInfo.fixedVerticalHeight() + monthInfo.interMonthSpacing());
			} else {
				this.scrollExtent(monthInfo.monthNameAreaHeight() + monthInfo.dayOfWeekHeaderHeight() + (monthInfo.weekHeight() * this.totalWeeks()) + monthInfo.interMonthSpacing());
			}
		} else {
			if (monthInfo.fixedHorizontalWidth() != -1) {
				this.scrollExtent(monthInfo.fixedHorizontalWidth() + monthInfo.interMonthSpacing());
			} else {
				this.scrollExtent(monthInfo.weekWidth() + monthInfo.interMonthSpacing());
			}
		}
		this.scrollOffset(scrollOffset);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthMetrics::UpdateScrollOffsetAndExtent(Infragistics.Scheduler.Core.MonthInfo, System.Int32)" />*/
	,
	$type: new $.ig.Type('MonthMetrics', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthMetrics" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.Utilities" />*/

$.ig.util.defType('Utilities', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::DateFromDictionaryKey(System.String)" />*/
	dateFromDictionaryKey: function (key) {
		return $.ig.Utilities.prototype.dateFromFormattedString('.', key, true);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::DateFromDictionaryKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::DateFromFormattedString(System.Char, System.String, System.Boolean)" />*/
	dateFromFormattedString: function (separator, formattedDate, yearFirst) {
		var dateParts = formattedDate.split(separator);
		if (dateParts.length != 3) {
			throw new $.ig.InvalidOperationException(1, "Dictionary key does not contain valid date!");
		}
		var year, month, day;
		if (yearFirst) {
			if ((function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[0], year); year = $ret.p1; return $ret.ret; }()) && (function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[1], month); month = $ret.p1; return $ret.ret; }()) && (function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[2], day); day = $ret.p1; return $ret.ret; }())) {
				return $.ig.Date.prototype.fromValues(year, month, day, 0, 0, 0, 0);
			}
		} else {
			if ((function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[0], month); month = $ret.p1; return $ret.ret; }()) && (function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[1], day); day = $ret.p1; return $ret.ret; }()) && (function () { var $ret = $.ig.util.tryParseInt32_1(dateParts[2], year); year = $ret.p1; return $ret.ret; }())) {
				return $.ig.Date.prototype.fromValues(year, month, day, 0, 0, 0, 0);
			}
		}
		throw new $.ig.InvalidOperationException(1, "Dictionary key does not contain valid date!");
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::DateFromFormattedString(System.Char, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Core.Utilities::DayAppointmentDictionaryFromQueryResult(Infragistics.Scheduler.Data.AppointmentQueryResult)" />*/
	dayAppointmentDictionaryFromQueryResult: function (queryResult) {
		var appointments = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type), 0);
		var en = queryResult.appointments().getEnumerator();
		while (en.moveNext()) {
			var appt = en.current();
			var startDate = $.ig.Date.prototype.getDate(appt.start());
			var startDateKey = $.ig.Utilities.prototype.dictionaryKeyFromDate(startDate);
			if (false == appointments.containsKey(startDateKey)) {
				appointments.add(startDateKey, new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 0));
			}
			appointments.item(startDateKey).add(appt);
			var endDate = appt.end();
			endDate = $.ig.DateUtils.prototype.adjustEndForRangeComparison1(startDate, endDate);
			if (+($.ig.Date.prototype.getDate(endDate)) != +($.ig.Date.prototype.getDate(startDate))) {
				var days = $.ig.util.timeSpanDays((endDate - startDate));
				var nextDate = $.ig.Date.prototype.addDays(startDate, 1);
				var nextDateKey = $.ig.Utilities.prototype.dictionaryKeyFromDate($.ig.Date.prototype.getDate(nextDate));
				var queryEndDate = queryResult.range().end();
				for (var i = 0; i < days; i++) {
					if (nextDate > queryEndDate) {
						break;
					}
					if (false == appointments.containsKey(nextDateKey)) {
						appointments.add(nextDateKey, new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 0));
					}
					appointments.item(nextDateKey).add(appt);
					nextDate = $.ig.Date.prototype.addDays(nextDate, 1);
					nextDateKey = $.ig.Utilities.prototype.dictionaryKeyFromDate($.ig.Date.prototype.getDate(nextDate));
				}
			}
		}
		return appointments;
	}
	/*<EndMethod Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Core.Utilities::DayAppointmentDictionaryFromQueryResult(Infragistics.Scheduler.Data.AppointmentQueryResult)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Utilities::DictionaryKeyFromDate(System.DateTime)" />*/
	dictionaryKeyFromDate: function (date) {
		return $.ig.util.stringFormat("{0}.{1}.{2}", date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate());
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Utilities::DictionaryKeyFromDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::EndOfDayFromDate(System.DateTime)" />*/
	endOfDayFromDate: function (date) {
		date = $.ig.Date.prototype.addDays($.ig.Date.prototype.getDate(date), 1);
		return $.ig.DateUtils.prototype.adjustEndForRangeComparison(date);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::EndOfDayFromDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Utilities::FontInfoFromFontInfo(Infragistics.FontInfo, System.Boolean)" />*/
	fontInfoFromFontInfo: function (fontinfo, scaleFontSizeToFontPixelUnits) {
		return (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily(fontinfo.fontFamily());
			$ret.fontSize(scaleFontSizeToFontPixelUnits ? $.ig.Utilities.prototype.toFontPixelUnits(fontinfo.fontSize()) : fontinfo.fontSize());
			$ret.fontStretch(fontinfo.fontStretch());
			$ret.fontStyle(fontinfo.fontStyle());
			$ret.fontVariant(fontinfo.fontVariant());
			$ret.fontWeight(fontinfo.fontWeight());
			return $ret;
		}());
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.Utilities::FontInfoFromFontInfo(Infragistics.FontInfo, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utilities::FontInfosAreEqual(Infragistics.FontInfo, Infragistics.FontInfo)" />*/
	fontInfosAreEqual: function (fontinfo1, fontinfo2) {
		if (null == fontinfo1 && null == fontinfo2) {
			return true;
		}
		if (null == fontinfo1 || null == fontinfo2) {
			return false;
		}
		return fontinfo1.fontFamily() == fontinfo2.fontFamily() && fontinfo1.fontSize() == fontinfo2.fontSize() && fontinfo1.fontStretch() == fontinfo2.fontStretch() && fontinfo1.fontStyle() == fontinfo2.fontStyle() && fontinfo1.fontVariant() == fontinfo2.fontVariant() && fontinfo1.fontWeight() == fontinfo2.fontWeight();
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utilities::FontInfosAreEqual(Infragistics.FontInfo, Infragistics.FontInfo)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::GetFirstDateInMonth(System.DateTime)" />*/
	getFirstDateInMonth: function (date) {
		return $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), 1, 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::GetFirstDateInMonth(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::GetLastDateInMonth(System.DateTime, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	getLastDateInMonth: function (date, provider) {
		return $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), $.ig.DateUtils.prototype.getDaysInMonth(provider, date.getFullYear(), $.ig.Date.prototype.getMonth(date), 0), 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::GetLastDateInMonth(System.DateTime, Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::StartOfDayFromDate(System.DateTime)" />*/
	startOfDayFromDate: function (date) {
		return $.ig.Date.prototype.fromValues(date.getFullYear(), $.ig.Date.prototype.getMonth(date), date.getDate(), 0, 0, 0, 0);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utilities::StartOfDayFromDate(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.Utilities::ToFontPixelUnits(System.Double)" />*/
	toFontPixelUnits: function (value) {
		return $.ig.DeviceUtils.prototype.toFontPixelUnits(value);
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.Utilities::ToFontPixelUnits(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.Utilities::ToPixelUnits(System.Double)" />*/
	toPixelUnits: function (value) {
		return $.ig.DeviceUtils.prototype.toPixelUnits(value);
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.Utilities::ToPixelUnits(System.Double)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Utilities::ToPixelUnits(System.Windows.Thickness)" />*/
	toPixelUnits1: function (value) {
		return new $.ig.Thickness(1, $.ig.Utilities.prototype.toPixelUnits(value.left()), $.ig.Utilities.prototype.toPixelUnits(value.top()), $.ig.Utilities.prototype.toPixelUnits(value.right()), $.ig.Utilities.prototype.toPixelUnits(value.bottom()));
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.Utilities::ToPixelUnits(System.Windows.Thickness)" />*/
	,
	$type: new $.ig.Type('Utilities', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.Utilities" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.Brushes" />*/

$.ig.util.defType('Brushes', 'Object', {
	__transparent: null,
	__white: null,
	__black: null,
	__lightestGray: null,
	__lighterGray: null,
	__lightGray: null,
	__mediumGray: null,
	__darkGray: null,
	__darkerGray: null,
	__darkestGray: null,
	__blue: null,
	__lightBlue: null,
	__darkBlue: null,
	__orange: null,
	__red: null,
	__semiTransparentBlack: null,
	init: function () {
		this.__transparent = null;
		this.__white = null;
		this.__black = null;
		this.__lightestGray = null;
		this.__lighterGray = null;
		this.__lightGray = null;
		this.__mediumGray = null;
		this.__darkGray = null;
		this.__darkerGray = null;
		this.__darkestGray = null;
		this.__blue = null;
		this.__lightBlue = null;
		this.__darkBlue = null;
		this.__orange = null;
		this.__red = null;
		this.__semiTransparentBlack = null;
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Core.Brushes Infragistics.Scheduler.Core.Brushes::Instance()" />*/
	instance: function () {
		if ($.ig.Brushes.prototype.__instance == null) {
			$.ig.Brushes.prototype.__instance = new $.ig.Brushes();
		}
		return $.ig.Brushes.prototype.__instance;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.Brushes Infragistics.Scheduler.Core.Brushes::Instance()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Transparent()" />*/
	transparent: function () {
		if (this.__transparent == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(0);
				$ret.r(255);
				$ret.g(255);
				$ret.b(255);
				return $ret;
			}());
			this.__transparent = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__transparent;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Transparent()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::White()" />*/
	white: function () {
		if (this.__white == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(255);
				$ret.g(255);
				$ret.b(255);
				return $ret;
			}());
			this.__white = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__white;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::White()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Black()" />*/
	black: function () {
		if (this.__black == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(0);
				$ret.g(0);
				$ret.b(0);
				return $ret;
			}());
			this.__black = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__black;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Black()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightestGray()" />*/
	lightestGray: function () {
		if (this.__lightestGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(236);
				$ret.g(236);
				$ret.b(236);
				return $ret;
			}());
			this.__lightestGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__lightestGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightestGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LighterGray()" />*/
	lighterGray: function () {
		if (this.__lighterGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(222);
				$ret.g(222);
				$ret.b(222);
				return $ret;
			}());
			this.__lighterGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__lighterGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LighterGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightGray()" />*/
	lightGray: function () {
		if (this.__lightGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(192);
				$ret.g(192);
				$ret.b(192);
				return $ret;
			}());
			this.__lightGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__lightGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::MediumGray()" />*/
	mediumGray: function () {
		if (this.__mediumGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(128);
				$ret.g(128);
				$ret.b(128);
				return $ret;
			}());
			this.__mediumGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__mediumGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::MediumGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkGray()" />*/
	darkGray: function () {
		if (this.__darkGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(96);
				$ret.g(96);
				$ret.b(96);
				return $ret;
			}());
			this.__darkGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__darkGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkerGray()" />*/
	darkerGray: function () {
		if (this.__darkerGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(64);
				$ret.g(64);
				$ret.b(64);
				return $ret;
			}());
			this.__darkerGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__darkerGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkerGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkestGray()" />*/
	darkestGray: function () {
		if (this.__darkestGray == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(32);
				$ret.g(32);
				$ret.b(32);
				return $ret;
			}());
			this.__darkestGray = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__darkestGray;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkestGray()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::SemiTransparentBlack()" />*/
	semiTransparentBlack: function () {
		if (this.__semiTransparentBlack == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(128);
				$ret.r(0);
				$ret.g(0);
				$ret.b(0);
				return $ret;
			}());
			this.__semiTransparentBlack = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__semiTransparentBlack;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::SemiTransparentBlack()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Blue()" />*/
	blue: function () {
		if (this.__blue == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(0);
				$ret.g(128);
				$ret.b(192);
				return $ret;
			}());
			this.__blue = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__blue;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Blue()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightBlue()" />*/
	lightBlue: function () {
		if (this.__lightBlue == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(173);
				$ret.g(216);
				$ret.b(230);
				return $ret;
			}());
			this.__lightBlue = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__lightBlue;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::LightBlue()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkBlue()" />*/
	darkBlue: function () {
		if (this.__darkBlue == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(0);
				$ret.g(74);
				$ret.b(111);
				return $ret;
			}());
			this.__darkBlue = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__darkBlue;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::DarkBlue()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Orange()" />*/
	orange: function () {
		if (this.__orange == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(255);
				$ret.g(128);
				$ret.b(64);
				return $ret;
			}());
			this.__orange = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__orange;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Orange()" />*/
	,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Red()" />*/
	red: function () {
		if (this.__red == null) {
			var c = (function () {
				var $ret = new $.ig.Color();
				$ret.a(255);
				$ret.r(255);
				$ret.g(0);
				$ret.b(0);
				return $ret;
			}());
			this.__red = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(c.colorString());
				$ret.color(c);
				return $ret;
			}());
		}
		return this.__red;
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.Brushes::Red()" />*/
	,
	$type: new $.ig.Type('Brushes', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.Brushes" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.IModelActionManager" />*/

$.ig.util.defType('IModelActionManager', 'Object', {
	$type: new $.ig.Type('IModelActionManager', null)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.IModelActionManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DefaultModelActionManager" />*/

$.ig.util.defType('DefaultModelActionManager', 'Object', {
	__scheduler: null,
	__model: null,
	init: function (scheduler, model) {
		$.ig.Object.prototype.init.call(this);
		this.__scheduler = scheduler;
		this.__model = model;
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.DefaultModelActionManager::ClickCell()" />*/
	clickCell: function () {
		if (this.__scheduler != null && this.__model != null) {
			this.__scheduler._onModelClicked(this.__model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.DefaultModelActionManager::ClickCell()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.DefaultModelActionManager::IsClickActionDesired()" />*/
	isClickActionDesired: function () {
		return this.__scheduler._isClickActionDesired();
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.DefaultModelActionManager::IsClickActionDesired()" />*/
	,
	$type: new $.ig.Type('DefaultModelActionManager', $.ig.Object.prototype.$type, [$.ig.IModelActionManager.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DefaultModelActionManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelPath" />*/

$.ig.util.defType('ModelPath', 'Object', {
	__hashCode: 0,
	__month: 0,
	__dayOfWeek: 0,
	__year: 0,
	__day: 0,
	__week: 0,
	__isLeadingDay: false,
	__isTrailingDay: false,
	__appointment: null,
	__appointmentOriginalStartTicks: 0,
	__appointmentOriginalStart: $.ig.util.toNullable($.ig.Date.prototype.$type, null),
	__modelType: 0,
	__role: 0,
	init: function (initNumber, modelType, role) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
				case 5:
					this.init5.apply(this, arguments);
					break;
				case 6:
					this.init6.apply(this, arguments);
					break;
				case 7:
					this.init7.apply(this, arguments);
					break;
			}
			return;
		}
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.calculateHashCode();
	},
	init1: function (initNumber, modelType, role, year) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.calculateHashCode();
	},
	init2: function (initNumber, modelType, role, year, month) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.calculateHashCode();
	},
	init3: function (initNumber, modelType, role, year, month, week) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.__week = week;
		this.calculateHashCode();
	},
	init4: function (initNumber, modelType, role, year, month, day, isLeadingDay, isTrailingDay) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.__day = day;
		this.__isLeadingDay = isLeadingDay;
		this.__isTrailingDay = isTrailingDay;
		this.calculateHashCode();
	},
	init5: function (initNumber, modelType, role, year, month, day, isLeadingDay, isTrailingDay, appointment, appointmentOriginalStartTicks) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.__day = day;
		this.__isLeadingDay = isLeadingDay;
		this.__isTrailingDay = isTrailingDay;
		this.__appointment = appointment;
		this.__appointmentOriginalStartTicks = appointmentOriginalStartTicks;
		this.__appointmentOriginalStart = $.ig.util.toNullable($.ig.Date.prototype.$type, $.ig.Date.prototype.fromTicks(appointmentOriginalStartTicks));
		if (null != this.appointmentResolved()) {
			this.lastStartDate(this.appointmentResolved().start());
		}
		this.calculateHashCode();
	},
	init6: function (initNumber, modelType, role, year, month, dayOfWeek) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.__dayOfWeek = dayOfWeek;
		this.calculateHashCode();
	},
	init7: function (initNumber, modelType, role, year, month, dayOfWeek, week) {
		this.__hashCode = -1;
		this.__month = 0;
		this.__dayOfWeek = -1;
		this.__year = 0;
		this.__day = 0;
		this.__week = 0;
		this.__isLeadingDay = false;
		this.__isTrailingDay = false;
		$.ig.Object.prototype.init.call(this);
		this.__modelType = modelType;
		this.__role = role;
		this.__year = year;
		this.__month = month;
		this.__dayOfWeek = dayOfWeek;
		this.__week = week;
		this.calculateHashCode();
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::Equals(System.Object)" />*/
	equals: function (obj) {
		var other = obj;
		if (obj == null) {
			return false;
		}
		if (this.__modelType != other.__modelType) {
			return false;
		}
		if (this.__role != other.__role) {
			return false;
		}
		if (this.__day != other.__day) {
			return false;
		}
		if (this.__dayOfWeek != other.__dayOfWeek) {
			return false;
		}
		if (this.__month != other.__month) {
			return false;
		}
		if (this.__year != other.__year) {
			return false;
		}
		if (this.__week != other.__week) {
			return false;
		}
		if (this.__isLeadingDay != other.__isLeadingDay) {
			return false;
		}
		if (this.__isTrailingDay != other.__isTrailingDay) {
			return false;
		}
		if (false == $.ig.Object.prototype.referenceEquals(this.__appointment, other.__appointment)) {
			return false;
		}
		if (this.__appointmentOriginalStartTicks != other.__appointmentOriginalStartTicks) {
			return false;
		}
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::Equals(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::GetHashCode()" />*/
	getHashCode: function () {
		return this.__hashCode;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::GetHashCode()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.ModelPath::ToString()" />*/
	toString: function () {
		return $.ig.util.stringFormat1("Type:{0},Role:{1},Y{2}.M{3}.D{4}.DOW{5},WK{6},LEADING:{7},TRAILING:{8}", [ $.ig.Enum.prototype.getNames($.ig.ModelType.prototype.$type)[this.__modelType - 1], $.ig.Enum.prototype.getNames($.ig.scheduler.SchedulerElementRole.prototype.$type)[this.__role], this.__year, this.__month, this.__day, this.__dayOfWeek, this.__week, this.__isLeadingDay, this.__isTrailingDay ]);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.ModelPath::ToString()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.ModelPath::Appointment()" />*/
	appointment: function () {
		return this.__appointment;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.ModelPath::Appointment()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.ModelPath::AppointmentResolved()" />*/
	appointmentResolved: function () {
		if (null == this.appointment()) {
			return null;
		}
		if (this.appointment().isRecurrenceRoot()) {
			if (null == this.appointment()._dataSource()) {
				return null;
			}
			return $.ig.scheduler.Appointment.prototype._createOccurrence(this.appointment(), $.ig.Date.prototype.fromTicks(this.appointmentOriginalStartTicks()));
		}
		return this.appointment();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.ModelPath::AppointmentResolved()" />*/
	,
	/*<BeginProperty Name="System.Int64 Infragistics.Scheduler.Core.ModelPath::AppointmentOriginalStartTicks()" />*/
	appointmentOriginalStartTicks: function () {
		return this.__appointmentOriginalStartTicks;
	}
	/*<EndProperty Name="System.Int64 Infragistics.Scheduler.Core.ModelPath::AppointmentOriginalStartTicks()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Day()" />*/
	day: function () {
		return this.__day;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Day()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::DayOfWeek()" />*/
	dayOfWeek: function () {
		return this.__dayOfWeek;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::DayOfWeek()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsDayPath()" />*/
	isDayPath: function () {
		return this.__year > 0 && this.__month > 0 && this.__day > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsDayPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsDayOfWeekPath()" />*/
	isDayOfWeekPath: function () {
		return this.__year > 0 && this.__month > 0 && this.__day == 0 && this.__dayOfWeek > -1 && this.__week == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsDayOfWeekPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsHorzSeparatorPath()" />*/
	isHorzSeparatorPath: function () {
		return this.role() == $.ig.scheduler.SchedulerElementRole.monthViewDayHorizontalSeparator;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsHorzSeparatorPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsLeadingDay()" />*/
	isLeadingDay: function () {
		return this.__isLeadingDay;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsLeadingDay()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsMonthPath()" />*/
	isMonthPath: function () {
		return this.__year > 0 && this.__month > 0 && this.__day == 0 && this.__dayOfWeek < 0 && this.__week == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsMonthPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsNonDatePath()" />*/
	isNonDatePath: function () {
		return this.__year == 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsNonDatePath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsTrailingDay()" />*/
	isTrailingDay: function () {
		return this.__isTrailingDay;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsTrailingDay()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsVertSeparatorPath()" />*/
	isVertSeparatorPath: function () {
		return this.role() == $.ig.scheduler.SchedulerElementRole.monthViewDayVerticalSeparator;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsVertSeparatorPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsWeekPath()" />*/
	isWeekPath: function () {
		return this.__year > 0 && this.__month > 0 && this.__day == 0 && this.__dayOfWeek < 0 && this.__week > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsWeekPath()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsYearPath()" />*/
	isYearPath: function () {
		return this.__year > 0 && this.__month == 0 && this.__day == 0 && this.__dayOfWeek < 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelPath::IsYearPath()" />*/
	,
	_lastStartDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.ModelPath::LastStartDate()" />*/
	lastStartDate: function (value) {
		if (arguments.length === 1) {
			this._lastStartDate = value;
			return value;
		} else {
			return this._lastStartDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.ModelPath::LastStartDate()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelPath::ModelType()" />*/
	modelType: function () {
		return this.__modelType;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelPath::ModelType()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Month()" />*/
	month: function () {
		return this.__month;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Month()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelPath::Role()" />*/
	role: function () {
		return this.__role;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelPath::Role()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Week()" />*/
	week: function () {
		return this.__week;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Week()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Year()" />*/
	year: function () {
		return this.__year;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelPath::Year()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelPath::CalculateHashCode()" />*/
	calculateHashCode: function () {
		this.__hashCode = (1111111 * this.__day) + (2222222 * this.__dayOfWeek) + (3333333 * this.__month) + (4444444 * this.__year) + (5555555 * this.__modelType) + (6666666 * this.__role) + (7777777 * this.__week);
		if (this.__isLeadingDay) {
			this.__hashCode += 8888888;
		}
		if (this.__isTrailingDay) {
			this.__hashCode += 9999999;
		}
		if (null != this.__appointment) {
			this.__hashCode += this.__appointment.getHashCode();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelPath::CalculateHashCode()" />*/
	,
	$type: new $.ig.Type('ModelPath', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelPath" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelFactories" />*/

$.ig.util.defType('ModelFactories', 'Object', {
	__factories: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__factories = new $.ig.Dictionary$2(String, $.ig.ModelFactoryBase.prototype.$type, 1, 10);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ModelFactories::CreateModel(System.String, Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (modelKey, path) {
		if (String.isNullOrEmpty(modelKey)) {
			return null;
		}
		if (false == this.__factories.containsKey(modelKey)) {
			return null;
		}
		return this.__factories.item(modelKey).createModel(path);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ModelFactories::CreateModel(System.String, Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.ModelFactories::ModelTypeFromModelKey(System.String)" />*/
	modelTypeFromModelKey: function (modelKey) {
		var $self = this;
		var modelFactory;
		if ((function () { var $ret = $self.__factories.tryGetValue(modelKey, modelFactory); modelFactory = $ret.p1; return $ret.ret; }())) {
			return $.ig.util.toNullable($.ig.ModelType.prototype.$type, modelFactory.modelType());
		}
		return $.ig.util.toNullable($.ig.ModelType.prototype.$type, null);
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.ModelFactories::ModelTypeFromModelKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelFactories::RegisterModelFactory(Infragistics.Scheduler.Core.ModelFactoryBase, System.Boolean)" />*/
	registerModelFactory: function (modelFactory, replaceExisting) {
		if (String.isNullOrEmpty(modelFactory.modelKey())) {
			return false;
		}
		if (this.__factories.containsKey(modelFactory.modelKey())) {
			if (replaceExisting) {
				this.__factories.remove(modelFactory.modelKey());
			} else {
				return false;
			}
		}
		this.__factories.add(modelFactory.modelKey(), modelFactory);
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelFactories::RegisterModelFactory(Infragistics.Scheduler.Core.ModelFactoryBase, System.Boolean)" />*/
	,
	$type: new $.ig.Type('ModelFactories', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelFactories" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelFactoryBase" />*/

$.ig.util.defType('ModelFactoryBase', 'Object', {
	init: function (modelType, modelkey) {
		$.ig.Object.prototype.init.call(this);
		this.modelType(modelType);
		this.modelKey(modelkey);
	},
	_modelKey: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelFactoryBase::ModelKey()" />*/
	modelKey: function (value) {
		if (arguments.length === 1) {
			this._modelKey = value;
			return value;
		} else {
			return this._modelKey;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelFactoryBase::ModelKey()" />*/
	,
	_modelType: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelFactoryBase::ModelType()" />*/
	modelType: function (value) {
		if (arguments.length === 1) {
			this._modelType = value;
			return value;
		} else {
			return this._modelType;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelFactoryBase::ModelType()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ModelFactoryBase::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ModelFactoryBase::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('ModelFactoryBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelFactoryBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy" />*/

$.ig.util.defType('NativeSchedulerViewDummy', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Instance()" />*/
	instance: function () {
		if (null == $.ig.NativeSchedulerViewDummy.prototype._s_instance) {
			$.ig.NativeSchedulerViewDummy.prototype._s_instance = new $.ig.NativeSchedulerViewDummy();
		}
		return $.ig.NativeSchedulerViewDummy.prototype._s_instance;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Instance()" />*/
	,
	measureString: function (stringToMeasure, font, role) {
		return $.ig.util.sizeToLiteral(this._measureString$i.apply(this, arguments));
	},
	/*<BeginMethod Name="System.Windows.Size Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.MeasureString(System.String, Infragistics.FontInfo, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	_measureString$i: function (stringToMeasure, font, role) {
		return new $.ig.Size(1, 0, 0);
	}
	/*<EndMethod Name="System.Windows.Size Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.MeasureString(System.String, Infragistics.FontInfo, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::OnContentSizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onContentSizeChanged: function (viewMode) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::OnContentSizeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnPrimaryViewModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onPrimaryViewModeChanged: function (newViewMode) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnPrimaryViewModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollDirectionChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	onScrollDirectionChanged: function (viewMode, newScrollDirection) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollDirectionChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.MonthViewScrollMode)" />*/
	onScrollModeChanged: function (viewMode, newScrollMode) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnScrollModeChanged(Infragistics.Scheduler.Core.SchedulerViewMode, Infragistics.Scheduler.Core.MonthViewScrollMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeAdded(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onSecondaryViewModeAdded: function (viewMode) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeAdded(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeRemoved(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	onSecondaryViewModeRemoved: function (viewMode) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnSecondaryViewModeRemoved(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnViewSplitOrientationChanged()" />*/
	onViewSplitOrientationChanged: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.OnViewSplitOrientationChanged()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.ScrollViewTo(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Boolean)" />*/
	scrollViewTo: function (viewMode, x, y, animated) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.NativeSchedulerViewDummy::Infragistics.Scheduler.Core.INativeSchedulerView.ScrollViewTo(Infragistics.Scheduler.Core.SchedulerViewMode, System.Int32, System.Int32, System.Boolean)" />*/
	,
	$type: new $.ig.Type('NativeSchedulerViewDummy', $.ig.Object.prototype.$type, [$.ig.INativeSchedulerView.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.RecyclingManager" />*/

$.ig.util.defType('RecyclingManager', 'Object', {
	__modelCache: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__modelCache = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), 0);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.RecyclingManager::Dequeue(Infragistics.Scheduler.Core.SchedulerElementRole, System.String, System.Object)" />*/
	dequeue: function (modelRole, modelKey, modelReuseValue) {
		var key = this.makeKey(modelRole, modelKey);
		if (!this.__modelCache.containsKey(key)) {
			this.__modelCache.add(key, new $.ig.List$1($.ig.ModelBase.prototype.$type, 0));
			return null;
		}
		var pool = this.__modelCache.item(key);
		var poolCount = pool.count();
		if (poolCount > 0) {
			var model = null;
			if (null != modelReuseValue) {
				for (var i = 0; i < poolCount; i++) {
					var temp = pool.__inner[i];
					if (this.areReuseValuesEqual(temp.reuseValue(), modelReuseValue)) {
						model = temp;
						break;
					}
				}
				if (null == model) {
					return null;
				}
			} else {
				model = pool.__inner[poolCount - 1];
			}
			pool.remove(model);
			if (model.state() == $.ig.ModelStates.prototype.inview) {
				model.state($.ig.ModelStates.prototype.recycled);
			}
			return model;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.RecyclingManager::Dequeue(Infragistics.Scheduler.Core.SchedulerElementRole, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.RecyclingManager::Enqueue(Infragistics.Scheduler.Core.ModelBase)" />*/
	enqueue: function (model) {
		model.state($.ig.ModelStates.prototype.recycled);
		var key = this.makeKey(model.role(), model.modelKey());
		if (!this.__modelCache.containsKey(key)) {
			this.__modelCache.add(key, new $.ig.List$1($.ig.ModelBase.prototype.$type, 0));
		}
		this.__modelCache.item(key).add(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.RecyclingManager::Enqueue(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.RecyclingManager::MakeKey(Infragistics.Scheduler.Core.SchedulerElementRole, System.String)" />*/
	makeKey: function (role, modelKey) {
		return (role).toString() + modelKey;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.RecyclingManager::MakeKey(Infragistics.Scheduler.Core.SchedulerElementRole, System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.RecyclingManager::AreReuseValuesEqual(System.Object, System.Object)" />*/
	areReuseValuesEqual: function (value1, value2) {
		var value1Type = value1.getType();
		var value2Type = value2.getType();
		if (value1Type != value2Type) {
			return false;
		}
		if (value1Type == $.ig.Number.prototype.$type) {
			return $.ig.util.getValue(value1) == $.ig.util.getValue(value2);
		}
		if (value1Type == Number) {
			return value1 == value2;
		}
		if (value1Type == $.ig.Date.prototype.$type) {
			return +($.ig.Date.prototype.getDate((value1))) == +($.ig.Date.prototype.getDate((value2)));
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.RecyclingManager::AreReuseValuesEqual(System.Object, System.Object)" />*/
	,
	$type: new $.ig.Type('RecyclingManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.RecyclingManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AppointmentClickedEventArgs" />*/

$.ig.util.defType('AppointmentClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_allowSelection: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.AppointmentClickedEventArgs::AllowSelection()" />*/
	allowSelection: function (value) {
		if (arguments.length === 1) {
			this._allowSelection = value;
			return value;
		} else {
			return this._allowSelection;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.AppointmentClickedEventArgs::AllowSelection()" />*/
	,
	_clickedAppointment: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ClickedAppointment()" />*/
	clickedAppointment: function (value) {
		if (arguments.length === 1) {
			this._clickedAppointment = value;
			return value;
		} else {
			return this._clickedAppointment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ClickedAppointment()" />*/
	,
	_clickedInDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ClickedInDate()" />*/
	clickedInDate: function (value) {
		if (arguments.length === 1) {
			this._clickedInDate = value;
			return value;
		} else {
			return this._clickedInDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ClickedInDate()" />*/
	,
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentClickedEventArgs::ViewMode()" />*/
	,
	$type: new $.ig.Type('AppointmentClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AppointmentClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AppointmentSelectedEventArgs" />*/

$.ig.util.defType('AppointmentSelectedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_selectedAppointment: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::SelectedAppointment()" />*/
	selectedAppointment: function (value) {
		if (arguments.length === 1) {
			this._selectedAppointment = value;
			return value;
		} else {
			return this._selectedAppointment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Appointment Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::SelectedAppointment()" />*/
	,
	_selectedInDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::SelectedInDate()" />*/
	selectedInDate: function (value) {
		if (arguments.length === 1) {
			this._selectedInDate = value;
			return value;
		} else {
			return this._selectedInDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::SelectedInDate()" />*/
	,
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.AppointmentSelectedEventArgs::ViewMode()" />*/
	,
	$type: new $.ig.Type('AppointmentSelectedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AppointmentSelectedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayClickedEventArgs" />*/

$.ig.util.defType('DayClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_clickedDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.DayClickedEventArgs::ClickedDate()" />*/
	clickedDate: function (value) {
		if (arguments.length === 1) {
			this._clickedDate = value;
			return value;
		} else {
			return this._clickedDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.DayClickedEventArgs::ClickedDate()" />*/
	,
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.DayClickedEventArgs::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.DayClickedEventArgs::ViewMode()" />*/
	,
	$type: new $.ig.Type('DayClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs" />*/

$.ig.util.defType('DayOfWeekHeaderClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::Year()" />*/
	,
	_month: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			this._month = value;
			return value;
		} else {
			return this._month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::Month()" />*/
	,
	_dayOfWeek: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::DayOfWeek()" />*/
	dayOfWeek: function (value) {
		if (arguments.length === 1) {
			this._dayOfWeek = value;
			return value;
		} else {
			return this._dayOfWeek;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs::DayOfWeek()" />*/
	,
	$type: new $.ig.Type('DayOfWeekHeaderClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs" />*/

$.ig.util.defType('MonthHeaderClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs::Year()" />*/
	,
	_month: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			this._month = value;
			return value;
		} else {
			return this._month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs::Month()" />*/
	,
	$type: new $.ig.Type('MonthHeaderClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthHeaderClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SelectedDateChangedEventArgs" />*/

$.ig.util.defType('SelectedDateChangedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_selectedDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.SelectedDateChangedEventArgs::SelectedDate()" />*/
	selectedDate: function (value) {
		if (arguments.length === 1) {
			this._selectedDate = value;
			return value;
		} else {
			return this._selectedDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.SelectedDateChangedEventArgs::SelectedDate()" />*/
	,
	$type: new $.ig.Type('SelectedDateChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SelectedDateChangedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.WeekNumberClickedEventArgs" />*/

$.ig.util.defType('WeekNumberClickedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_year: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::Year()" />*/
	year: function (value) {
		if (arguments.length === 1) {
			this._year = value;
			return value;
		} else {
			return this._year;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::Year()" />*/
	,
	_month: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::Month()" />*/
	month: function (value) {
		if (arguments.length === 1) {
			this._month = value;
			return value;
		} else {
			return this._month;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::Month()" />*/
	,
	_weekNumber: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::WeekNumber()" />*/
	weekNumber: function (value) {
		if (arguments.length === 1) {
			this._weekNumber = value;
			return value;
		} else {
			return this._weekNumber;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.WeekNumberClickedEventArgs::WeekNumber()" />*/
	,
	$type: new $.ig.Type('WeekNumberClickedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.WeekNumberClickedEventArgs" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekIterator" />*/

$.ig.util.defType('DayOfWeekIterator', 'Object', {
	init: function (startAt) {
		$.ig.Object.prototype.init.call(this);
		this.startAt(startAt);
	},
	_startAt: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekIterator::StartAt()" />*/
	startAt: function (value) {
		if (arguments.length === 1) {
			this._startAt = value;
			return value;
		} else {
			return this._startAt;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.DayOfWeekIterator::StartAt()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.DayOfWeekIterator::Iterate(System.Action)" />*/
	iterate: function (callback) {
		var dow = this.startAt();
		for (var i = 0; i < $.ig.DateUtils.prototype.daysInWeek; i++) {
			callback(dow);
			dow += 1;
			if (dow >= $.ig.DateUtils.prototype.daysInWeek) {
				dow = 0;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.DayOfWeekIterator::Iterate(System.Action)" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Core.DayOfWeekIterator::Add(System.DayOfWeek, System.Int32)" />*/
	add: function (dayOfWeek, value) {
		return $.ig.DayOfWeekIterator.prototype.add1(dayOfWeek, value);
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Core.DayOfWeekIterator::Add(System.DayOfWeek, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.DayOfWeek Infragistics.Scheduler.Core.DayOfWeekIterator::Add(System.Int32, System.Int32)" />*/
	add1: function (dayOfWeek, value) {
		var intVal = dayOfWeek + value;
		if (intVal >= $.ig.DateUtils.prototype.daysInWeek) {
			intVal = (intVal % $.ig.DateUtils.prototype.daysInWeek);
		}
		return intVal;
	}
	/*<EndMethod Name="System.DayOfWeek Infragistics.Scheduler.Core.DayOfWeekIterator::Add(System.Int32, System.Int32)" />*/
	,
	$type: new $.ig.Type('DayOfWeekIterator', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekIterator" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.LayoutPassData" />*/

$.ig.util.defType('LayoutPassData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_top: 0,
	_bottom: 0,
	_left: 0,
	_right: 0,
	_runningScrollOffset: 0,
	_appointments: null,
	$type: new $.ig.Type('LayoutPassData', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.LayoutPassData" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.LayoutPassDataMonthView" />*/

$.ig.util.defType('LayoutPassDataMonthView', 'LayoutPassData', {
	init: function () {
		$.ig.LayoutPassData.prototype.init.call(this);
	},
	_firstVisibleDate: new Date(),
	_lastVisibleDate: new Date(),
	_lastDateInLastVisibleMonth: new Date(),
	_areLeadingDaysVisible: false,
	_areTrailingDaysVisible: false,
	_areDayOfWeekHeadersVisible: false,
	_areWeekNumbersVisible: false,
	_areAnySeparatorLinesVisible: false,
	_areVerticalSeparatorLinesVisible: false,
	_areHorizontalSeparatorLinesVisible: false,
	_isScrollingVertically: false,
	_isScrollingHorizontally: false,
	_isMonthSizeFixedVertically: false,
	_isMonthSizeFixedHorizontally: false,
	_forceSixWeekMonth: false,
	_dayNumberTextWidth: 0,
	_dayNumberPaddingTop: 0,
	_lastLayoutAppopintmentFontInfo: null,
	$type: new $.ig.Type('LayoutPassDataMonthView', $.ig.LayoutPassData.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.LayoutPassDataMonthView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.LayoutPassDataAgendaView" />*/

$.ig.util.defType('LayoutPassDataAgendaView', 'LayoutPassData', {
	init: function () {
		$.ig.LayoutPassData.prototype.init.call(this);
	},
	_areAnyDatesVisible: false,
	_agendaApptTimeFontInfo: null,
	_agendaApptTimeTextWidth: 0,
	$type: new $.ig.Type('LayoutPassDataAgendaView', $.ig.LayoutPassData.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.LayoutPassDataAgendaView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData" />*/

$.ig.util.defType('MonthViewCurrentMonthLayoutData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_currentMonth: new Date(),
	_isScrollingVertically: false,
	_isScrollingHorizontally: false,
	_headerLayer: null,
	_subContentLayer: null,
	_contentLayer: null,
	_superContentLayer: null,
	_decoratorLayer: null,
	_monthInfo: null,
	_currentMonthMetrics: null,
	_dayOfWeekNames: null,
	_monthLeft: 0,
	_monthTop: 0,
	_monthWidth: 0,
	_monthHeight: 0,
	_totalRows: 0,
	_totalCols: 0,
	_weekNumber: 0,
	_firstWeekRow: 0,
	_firstDayOfMonthCol: 0,
	_firstDayOfWeekCol: 0,
	_totalDayOfWeekCols: 0,
	_totalWeekRows: 0,
	_firstDateToDisplay: new Date(),
	_currentDate: new Date(),
	_lastDateOfMonth: new Date(),
	_lastDateToDisplay: new Date(),
	_gridLayout: null,
	_separatorBrush: null,
	_separatorLineLayer: null,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData::Create(System.DateTime, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.LayoutPassDataMonthView)" />*/
	create: function (currentMonth, visualModelMonthView, scheduler, layoutPassData) {
		var cmld = new $.ig.MonthViewCurrentMonthLayoutData();
		cmld._currentMonth = currentMonth;
		cmld._isScrollingVertically = layoutPassData._isScrollingVertically;
		cmld._isScrollingHorizontally = layoutPassData._isScrollingHorizontally;
		cmld._headerLayer = visualModelMonthView.headerLayer();
		cmld._contentLayer = visualModelMonthView.contentLayer();
		cmld._subContentLayer = visualModelMonthView.subContentLayer();
		cmld._superContentLayer = visualModelMonthView.superContentLayer();
		cmld._decoratorLayer = visualModelMonthView.decoratorLayer();
		cmld._monthInfo = visualModelMonthView.monthInfo();
		cmld._currentMonthMetrics = cmld._monthInfo.getMonthMetrics(currentMonth);
		cmld._dayOfWeekNames = cmld._monthInfo.getDayNames(visualModelMonthView.dayOfWeekFormat());
		cmld._monthLeft = 0;
		cmld._monthTop = 0;
		cmld._monthWidth = 0;
		cmld._monthHeight = 0;
		var monthSize = visualModelMonthView.monthSize();
		if (cmld._isScrollingVertically) {
			cmld._monthLeft = 0;
			cmld._monthTop = layoutPassData._runningScrollOffset;
			cmld._monthWidth = $.ig.truncate(visualModelMonthView.monthSize().width());
			if (layoutPassData._isMonthSizeFixedVertically) {
				cmld._monthHeight = $.ig.truncate(monthSize.height());
			} else {
				cmld._monthHeight = cmld._monthInfo.monthNameAreaHeight() + (cmld._monthInfo.weekHeight() * cmld._currentMonthMetrics.totalWeeks());
				if (layoutPassData._areDayOfWeekHeadersVisible) {
					cmld._monthHeight += cmld._monthInfo.dayOfWeekHeaderHeight();
				}
			}
		} else {
			cmld._monthLeft = layoutPassData._runningScrollOffset;
			cmld._monthTop = 0;
			if (layoutPassData._isMonthSizeFixedHorizontally) {
				cmld._monthWidth = $.ig.truncate(monthSize.width());
			} else {
				cmld._monthWidth = cmld._monthInfo.weekWidth();
			}
			if (layoutPassData._isMonthSizeFixedVertically) {
				cmld._monthHeight = $.ig.truncate(monthSize.height());
			} else {
				cmld._monthHeight = cmld._monthInfo.monthNameAreaHeight() + (cmld._monthInfo.weekHeight() * cmld._currentMonthMetrics.totalWeeks());
				if (layoutPassData._areDayOfWeekHeadersVisible) {
					cmld._monthHeight += cmld._monthInfo.dayOfWeekHeaderHeight();
				}
			}
		}
		var totalWeeks = layoutPassData._forceSixWeekMonth ? 6 : cmld._currentMonthMetrics.totalWeeks();
		cmld._totalRows = 1 + totalWeeks + (layoutPassData._areDayOfWeekHeadersVisible ? 1 : 0);
		cmld._totalCols = layoutPassData._areWeekNumbersVisible ? 8 : 7;
		cmld._weekNumber = layoutPassData._areWeekNumbersVisible ? cmld._monthInfo.getWeekNumberOfFirstWeekInMonth(currentMonth) : 0;
		cmld._firstWeekRow = layoutPassData._areDayOfWeekHeadersVisible ? 2 : 1;
		cmld._firstDayOfMonthCol = cmld._currentMonthMetrics.leadingDayCount();
		if (layoutPassData._areWeekNumbersVisible) {
			cmld._firstDayOfMonthCol += 1;
		}
		cmld._firstDayOfWeekCol = layoutPassData._areWeekNumbersVisible ? 1 : 0;
		cmld._totalDayOfWeekCols = cmld._totalCols - cmld._firstDayOfWeekCol;
		cmld._totalWeekRows = totalWeeks;
		try {
			cmld._firstDateToDisplay = layoutPassData._areLeadingDaysVisible ? $.ig.Date.prototype.addDays(currentMonth, -1 * cmld._currentMonthMetrics.leadingDayCount()) : currentMonth;
		}
		catch (e) {
			cmld._firstDateToDisplay = currentMonth;
		}
		cmld._currentDate = cmld._firstDateToDisplay;
		cmld._lastDateOfMonth = $.ig.Date.prototype.fromValues(currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth), cmld._currentMonthMetrics.totalDaysInMonth(), 0, 0, 0, 0);
		if (layoutPassData._areTrailingDaysVisible) {
			var trailingDayCount = cmld._currentMonthMetrics.trailingDayCount();
			if (layoutPassData._forceSixWeekMonth) {
				trailingDayCount += (6 - cmld._currentMonthMetrics.totalWeeks()) * 7;
			}
			cmld._lastDateToDisplay = $.ig.Date.prototype.addDays(cmld._lastDateOfMonth, trailingDayCount);
		} else {
			cmld._lastDateToDisplay = cmld._lastDateOfMonth;
		}
		cmld._gridLayout = $.ig.GridLayout.prototype.createStarGrid(new $.ig.Size(1, cmld._monthWidth, cmld._monthHeight), cmld._totalRows, cmld._totalCols);
		cmld._gridLayout.rowDefinitions().__inner[0]._height(new $.ig.GridLength(2, cmld._monthInfo.monthNameAreaHeight(), $.ig.GridUnitType.prototype.pixel));
		if (layoutPassData._areWeekNumbersVisible) {
			cmld._gridLayout.columnDefinitions().__inner[0]._width(new $.ig.GridLength(2, cmld._monthInfo.weekNumberWidth(), $.ig.GridUnitType.prototype.pixel));
		}
		if (layoutPassData._areDayOfWeekHeadersVisible) {
			cmld._gridLayout.rowDefinitions().__inner[1]._height(new $.ig.GridLength(2, cmld._monthInfo.dayOfWeekHeaderHeight(), $.ig.GridUnitType.prototype.pixel));
		}
		if (layoutPassData._isMonthSizeFixedVertically) {
			for (var r = cmld._firstWeekRow; r < cmld._totalRows; r++) {
				cmld._gridLayout.rowDefinitions().__inner[r]._height(new $.ig.GridLength(2, cmld._monthInfo.weekHeight(), $.ig.GridUnitType.prototype.pixel));
			}
		}
		cmld._gridLayout.recalculateGridLayoutItemRectsIfNecessary1(true);
		cmld._separatorBrush = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewSeparatorLineBrushResolved(scheduler);
		cmld._separatorLineLayer = visualModelMonthView.headerDecoratorLayer();
		return cmld;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData::Create(System.DateTime, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.LayoutPassDataMonthView)" />*/
	,
	$type: new $.ig.Type('MonthViewCurrentMonthLayoutData', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerLayerController" />*/

$.ig.util.defType('SchedulerLayerController', 'Object', {
	__recyclingManager: null,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__recyclingManager = new $.ig.RecyclingManager();
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::EnsureModelReady(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer, System.String, System.Object)" />*/
	ensureModelReady: function (path, scheduler, visualModel, desiredLayer, modelKey, modelReuseValue) {
		var $self = this;
		var currentLayer = null;
		var model = (function () { var $ret = $self.getModel1(path, visualModel, currentLayer); currentLayer = $ret.p2; return $ret.ret; }());
		if (null == model) {
			model = this.__recyclingManager.dequeue(path.role(), modelKey, modelReuseValue);
			if (model == null) {
				model = scheduler._createModel(modelKey, path);
			} else {
				model.reset();
			}
			if (visualModel.hiddenLayer().containsKey(path)) {
				visualModel.hiddenLayer().item(path).remove(model);
				if (visualModel.hiddenLayer().item(path).count() == 0) {
					visualModel.hiddenLayer().remove(path);
				}
			}
			desiredLayer.add(path, model);
			model.currentLayer(desiredLayer);
			model.path(path);
			model.modelType(path.modelType());
		} else {
			this.moveToLayer(path, visualModel, desiredLayer, currentLayer);
			model.modelType(path.modelType());
		}
		return model;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::EnsureModelReady(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.SchedulerLayerController::GetLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	getLayer: function (path, visualModel) {
		var layers = visualModel.schedulerLayers();
		var en = layers.getEnumerator();
		while (en.moveNext()) {
			var layer = en.current();
			if (layer.containsKey(path)) {
				return layer;
			}
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.SchedulerLayerController::GetLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::GetModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	getModel: function (path, visualModel) {
		var $self = this;
		var layer = null;
		return (function () { var $ret = $self.getModel1(path, visualModel, layer); layer = $ret.p2; return $ret.ret; }());
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::GetModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::GetModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	getModel1: function (path, visualModel, layer) {
		var layers = visualModel.schedulerLayers();
		var en = layers.getEnumerator();
		while (en.moveNext()) {
			var l = en.current();
			if (l.containsKey(path)) {
				layer = l;
				return {
					ret: l.item(path),
					p2: layer
				};
			}
		}
		layer = null;
		return {
			ret: null,
			p2: layer
		};
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.SchedulerLayerController::GetModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::MoveToLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	moveToLayer: function (path, visualModel, desiredLayer, currentLayer) {
		if (currentLayer == null || currentLayer == desiredLayer) {
			return;
		}
		var model = currentLayer.item(path);
		currentLayer.remove(path);
		desiredLayer.add(path, model);
		model.currentLayer(desiredLayer);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::MoveToLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::MoveToHiddenLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	moveToHiddenLayer: function (path, visualModel, currentLayer) {
		var model = currentLayer.item(path);
		currentLayer.remove(path);
		var models = null;
		if (visualModel.hiddenLayer().containsKey(path)) {
			models = visualModel.hiddenLayer().item(path);
		} else {
			models = new $.ig.List$1($.ig.ModelBase.prototype.$type, 0);
			visualModel.hiddenLayer().add(path, models);
		}
		models.add(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::MoveToHiddenLayer(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::PositionModel(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.VisualModel, System.Double, System.Double, System.Double, System.Double)" />*/
	positionModel: function (model, visualModel, left, top, width, height) {
		model.x($.ig.truncate(Math.ceil(left + model.leftOffset() + (model.leftPercentOffset() * model.width()))));
		model.y($.ig.truncate(Math.ceil(top + model.topOffset() + (model.topPercentOffset() * model.height()))));
		model.width($.ig.truncate(Math.ceil(width)));
		model.height($.ig.truncate(Math.ceil(height)));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::PositionModel(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.VisualModel, System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::RemoveModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	removeModel: function (path, visualModel) {
		var $self = this;
		var currLayer;
		var model = (function () { var $ret = $self.getModel1(path, visualModel, currLayer); currLayer = $ret.p2; return $ret.ret; }());
		if (null == model) {
			return;
		}
		this.moveToHiddenLayer(path, visualModel, currLayer);
		this.__recyclingManager.enqueue(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerController::RemoveModel(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	$type: new $.ig.Type('SchedulerLayerController', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerLayerController" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SpatialEngine" />*/

$.ig.util.defType('SpatialEngine', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__currDataSource: null,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngine::InvalidateLayoutData(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	invalidateLayoutData: function (scheduler, visualModel) {
		if (scheduler._viewModeManager().getViewModeInfo(this.viewMode()).scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			visualModel.absoluteHeight(0);
			visualModel.absoluteWidth($.ig.truncate(visualModel.availableWidth()));
		} else {
			visualModel.absoluteHeight($.ig.truncate(visualModel.availableHeight()));
			visualModel.absoluteWidth(0);
		}
		if (scheduler.dataSource() != this.__currDataSource) {
			this.__currDataSource = scheduler.dataSource();
			visualModel.onDataSourceChanged(this.__currDataSource);
		}
		this.invalidateLayoutDataOverride(scheduler, visualModel);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngine::InvalidateLayoutData(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngine::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	invalidateLayoutDataOverride: function (scheduler, visualModel) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngine::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngine::ViewMode()" />*/
	viewMode: function () {
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngine::ViewMode()" />*/
	,
	$type: new $.ig.Type('SpatialEngine', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SpatialEngine" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SpatialEngineAgendaView" />*/

$.ig.util.defType('SpatialEngineAgendaView', 'SpatialEngine', {
	__currAgendaViewDateRange: null,
	__currDayHeaderFontInfo: null,
	__currStartTimeFontInfo: null,
	__currEndTimeFontInfo: null,
	__currSubjectFontInfo: null,
	__currLocationFontInfo: null,
	__currDayHeaderHeight: 0,
	__currStartTimeHeight: 0,
	__currStartTimeWidth: 0,
	__currEndTimeHeight: 0,
	__currEndTimeWidth: 0,
	__currSubjectHeight: 0,
	__currLocationHeight: 0,
	__currInterDaySpacing: 0,
	__currAppointmentMargin: null,
	__currDayHeaderMargin: null,
	__currAgendaAppointmentScope: 0,
	init: function () {
		$.ig.SpatialEngine.prototype.init.call(this);
		this.appointmentSeparatorLineHeight($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineAgendaView.prototype.aGENDA_APPOINTMENT_SEPARATORLINE_HEIGHT)));
		this.dayHeaderSeparatorLineHeight($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineAgendaView.prototype.aGENDA_DAYHEADER_SEPARATORLINE_HEIGHT)));
		this.appointmentRowVerticalPadding($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineAgendaView.prototype.aGENDA_ROW_VERTICAL_SPACING)));
		this.colorBarHorzSpacing($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineAgendaView.prototype.aGENDA_COLORBAR_HORZ_SPACING)));
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngineAgendaView::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	invalidateLayoutDataOverride: function (scheduler, visualModel) {
		var visualModelAgendaView = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, visualModel);
		var agendaInfo = visualModelAgendaView.agendaInfo();
		var refreshAgendaScrollOffsetsAndExtents = false;
		var nativeView = scheduler._nativeView();
		var agendaViewDateRange = scheduler._agendaViewDateRangeResolved();
		if (agendaViewDateRange != this.__currAgendaViewDateRange) {
			this.__currAgendaViewDateRange = agendaViewDateRange;
			visualModelAgendaView.agendaDateRange(agendaViewDateRange);
			agendaInfo.onDateRangeChanged(agendaViewDateRange);
		}
		if (scheduler.agendaViewInterDaySpacing() != this.__currInterDaySpacing) {
			this.__currInterDaySpacing = scheduler.agendaViewInterDaySpacing();
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		var appointmentMargin = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentMarginResolved(scheduler);
		if (appointmentMargin != this.__currAppointmentMargin) {
			this.__currAppointmentMargin = appointmentMargin;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		var dayHeaderFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderFontInfoResolved(scheduler);
		var agendaAppointmentScope = scheduler.agendaViewAppointmentScope();
		var dayHeaderMargin = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderMarginResolved(scheduler);
		if (dayHeaderFontInfo != this.__currDayHeaderFontInfo || (agendaAppointmentScope != this.__currAgendaAppointmentScope && scheduler._isDisplayingMonthViewAndAgendaView()) || dayHeaderMargin != this.__currDayHeaderMargin) {
			if (agendaAppointmentScope == $.ig.scheduler.AgendaViewAppointmentScope.allAppointments || false == scheduler._isDisplayingMonthViewAndAgendaView()) {
				var nameHeaderText = agendaInfo.formatDayOfWeekAndAndDate(visualModel.minimumDate());
				var nameHeaderSize = nativeView._measureString$i(nameHeaderText, dayHeaderFontInfo, $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader);
				this.__currDayHeaderMargin = dayHeaderMargin;
				this.__currDayHeaderHeight = $.ig.truncate(nameHeaderSize.height()) + $.ig.truncate(dayHeaderMargin.top()) + $.ig.truncate(dayHeaderMargin.bottom()) + this.dayHeaderSeparatorLineHeight();
			} else {
				this.__currDayHeaderHeight = 0;
			}
			this.__currDayHeaderFontInfo = dayHeaderFontInfo;
			this.__currAgendaAppointmentScope = agendaAppointmentScope;
			this.__currDayHeaderMargin = dayHeaderMargin;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		var allDayLit = $.ig.schedulerCore.locale.getString("LIT_AgendaStartTime_AllDay", null);
		var timeString = agendaInfo.formatShortTime($.ig.Date.prototype.now());
		var startTimeFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeFontInfoResolved(scheduler);
		if (startTimeFontInfo != this.__currStartTimeFontInfo) {
			var startTimeSize = nativeView._measureString$i(timeString, startTimeFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptStartTime);
			var allDayLitSize = nativeView._measureString$i(allDayLit, startTimeFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptStartTime);
			this.__currStartTimeHeight = $.ig.truncate(startTimeSize.height());
			this.__currStartTimeWidth = Math.max($.ig.truncate(allDayLitSize.width()), $.ig.truncate(startTimeSize.width()));
			this.__currStartTimeFontInfo = startTimeFontInfo;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		var endTimeFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeFontInfoResolved(scheduler);
		if (endTimeFontInfo != this.__currEndTimeFontInfo) {
			var endTimeSize = nativeView._measureString$i(timeString, endTimeFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptEndTime);
			var allDayLitSize1 = nativeView._measureString$i(allDayLit, endTimeFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptEndTime);
			this.__currEndTimeHeight = $.ig.truncate(endTimeSize.height());
			this.__currEndTimeWidth = Math.max($.ig.truncate(allDayLitSize1.width()), $.ig.truncate(endTimeSize.width()));
			this.__currEndTimeFontInfo = endTimeFontInfo;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		this.timeAreaWidth(Math.max(this.__currStartTimeWidth, this.__currEndTimeWidth) + this.colorBarHorzSpacing() + $.ig.truncate($.ig.Utilities.prototype.toPixelUnits(25)));
		var subjectFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectFontInfoResolved(scheduler);
		if (subjectFontInfo != this.__currSubjectFontInfo) {
			var subjectSize = nativeView._measureString$i("Subject", subjectFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptSubject);
			this.__currSubjectHeight = $.ig.truncate(subjectSize.height());
			this.__currSubjectFontInfo = subjectFontInfo;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		var locationFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationFontInfoResolved(scheduler);
		if (locationFontInfo != this.__currLocationFontInfo) {
			var locationSize = nativeView._measureString$i("Location", locationFontInfo, $.ig.scheduler.SchedulerElementRole.agendaApptLocation);
			this.__currLocationHeight = $.ig.truncate(locationSize.height());
			this.__currLocationFontInfo = locationFontInfo;
			refreshAgendaScrollOffsetsAndExtents = true;
		}
		this.appointmentRow1Height(Math.max(this.__currStartTimeHeight, this.__currSubjectHeight) + (this.appointmentRowVerticalPadding() * 2));
		this.appointmentRow2Height(Math.max(this.__currEndTimeHeight, this.__currLocationHeight) + (this.appointmentRowVerticalPadding() * 2));
		this.appointmentMargin(this.__currAppointmentMargin);
		var apptHeight = this.appointmentRow1Height() + this.appointmentRow2Height() + $.ig.truncate(this.appointmentMargin().top()) + $.ig.truncate(this.appointmentMargin().bottom()) + this.appointmentSeparatorLineHeight();
		if (refreshAgendaScrollOffsetsAndExtents) {
			agendaInfo.onMetricsRelatedPropertiesChanged(this.__currDayHeaderHeight, apptHeight, this.__currInterDaySpacing);
		}
		var totalScrollExtentAllDays = agendaInfo.totalScrollExtentAllDays();
		if (totalScrollExtentAllDays == 0) {
			visualModelAgendaView.absoluteHeight($.ig.truncate(visualModelAgendaView.availableHeight()));
		} else {
			visualModelAgendaView.absoluteHeight(agendaInfo.totalScrollExtentAllDays());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngineAgendaView::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngineAgendaView::ViewMode()" />*/
	viewMode: function () {
		return $.ig.scheduler.SchedulerViewMode.agendaView;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngineAgendaView::ViewMode()" />*/
	,
	_appointmentMargin: null,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentMargin()" />*/
	appointmentMargin: function (value) {
		if (arguments.length === 1) {
			this._appointmentMargin = value;
			return value;
		} else {
			return this._appointmentMargin;
		}
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentMargin()" />*/
	,
	_appointmentRow1Height: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRow1Height()" />*/
	appointmentRow1Height: function (value) {
		if (arguments.length === 1) {
			this._appointmentRow1Height = value;
			return value;
		} else {
			return this._appointmentRow1Height;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRow1Height()" />*/
	,
	_appointmentRow2Height: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRow2Height()" />*/
	appointmentRow2Height: function (value) {
		if (arguments.length === 1) {
			this._appointmentRow2Height = value;
			return value;
		} else {
			return this._appointmentRow2Height;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRow2Height()" />*/
	,
	_appointmentRowVerticalPadding: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRowVerticalPadding()" />*/
	appointmentRowVerticalPadding: function (value) {
		if (arguments.length === 1) {
			this._appointmentRowVerticalPadding = value;
			return value;
		} else {
			return this._appointmentRowVerticalPadding;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentRowVerticalPadding()" />*/
	,
	_appointmentSeparatorLineHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentSeparatorLineHeight()" />*/
	appointmentSeparatorLineHeight: function (value) {
		if (arguments.length === 1) {
			this._appointmentSeparatorLineHeight = value;
			return value;
		} else {
			return this._appointmentSeparatorLineHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::AppointmentSeparatorLineHeight()" />*/
	,
	_colorBarHorzSpacing: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::ColorBarHorzSpacing()" />*/
	colorBarHorzSpacing: function (value) {
		if (arguments.length === 1) {
			this._colorBarHorzSpacing = value;
			return value;
		} else {
			return this._colorBarHorzSpacing;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::ColorBarHorzSpacing()" />*/
	,
	/*<BeginProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SpatialEngineAgendaView::DayHeaderMargin()" />*/
	dayHeaderMargin: function () {
		return this.__currDayHeaderMargin;
	}
	/*<EndProperty Name="System.Windows.Thickness Infragistics.Scheduler.Core.SpatialEngineAgendaView::DayHeaderMargin()" />*/
	,
	_dayHeaderSeparatorLineHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::DayHeaderSeparatorLineHeight()" />*/
	dayHeaderSeparatorLineHeight: function (value) {
		if (arguments.length === 1) {
			this._dayHeaderSeparatorLineHeight = value;
			return value;
		} else {
			return this._dayHeaderSeparatorLineHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::DayHeaderSeparatorLineHeight()" />*/
	,
	_timeAreaWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::TimeAreaWidth()" />*/
	timeAreaWidth: function (value) {
		if (arguments.length === 1) {
			this._timeAreaWidth = value;
			return value;
		} else {
			return this._timeAreaWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineAgendaView::TimeAreaWidth()" />*/
	,
	$type: new $.ig.Type('SpatialEngineAgendaView', $.ig.SpatialEngine.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SpatialEngineAgendaView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SpatialEngineMonthView" />*/

$.ig.util.defType('SpatialEngineMonthView', 'SpatialEngine', {
	__currMonthNameFontInfo: null,
	__currWeekNumberFontInfo: null,
	__currDayAppointmentFontInfo: null,
	__currDayNumberFontInfo: null,
	__currLeadingDayNumberFontInfo: null,
	__currTrailingDayNumberFontInfo: null,
	__currMonthNameAreaHeight: 0,
	__currMonthNameTextHeight: 0,
	__currMonthNameSeparatorHeight: 0,
	__currMonthNameMargin: null,
	__currDayOfWeekHeaderFontInfo: null,
	__currDayOfWeekHeaderSizeShortest: null,
	__currDayOfWeekHeaderSizeAbbreviated: null,
	__currDayOfWeekHeaderSizeFull: null,
	__currDayOfWeekHeaderHeight: 0,
	__currDayOfWeekHeaderMargin: null,
	__currDaySize: null,
	__currDayNumberSize: null,
	__currLeadingDayNumberSize: null,
	__currTrailingDayNumberSize: null,
	__currDayOfWeekHeaderSize: null,
	__currWeekNumberSize: null,
	__currDayAppointmentSize: null,
	__currDayOfWeekHeaderVisibility: 0,
	__currVerticalSeparatorVisibility: 0,
	__currHorizontalSeparatorVisibility: 0,
	__currWeekNumberVisibility: 0,
	__currMonthNameVisibility: 0,
	__currScrollDirection: 0,
	__currScrollMode: 0,
	__currMinimumDate: new Date(),
	__currMaximumDate: new Date(),
	__currInterMonthSpacing: 0,
	__currDayContentDisplayMode: 0,
	init: function () {
		this.__currDayOfWeekHeaderSizeShortest = new $.ig.Size();
		this.__currDayOfWeekHeaderSizeAbbreviated = new $.ig.Size();
		this.__currDayOfWeekHeaderSizeFull = new $.ig.Size();
		this.__currDaySize = new $.ig.Size();
		this.__currDayNumberSize = new $.ig.Size();
		this.__currLeadingDayNumberSize = new $.ig.Size();
		this.__currTrailingDayNumberSize = new $.ig.Size();
		this.__currDayOfWeekHeaderSize = new $.ig.Size();
		this.__currWeekNumberSize = new $.ig.Size();
		this.__currDayAppointmentSize = new $.ig.Size();
		this.__currDayOfWeekHeaderVisibility = 0;
		this.__currVerticalSeparatorVisibility = 0;
		this.__currHorizontalSeparatorVisibility = 0;
		this.__currWeekNumberVisibility = 0;
		this.__currMonthNameVisibility = 0;
		this.__currScrollDirection = 0;
		this.__currScrollMode = 0;
		$.ig.SpatialEngine.prototype.init.call(this);
		this.monthNameSeparatorLineHeight($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_HEIGHT)));
		this.monthNameSeparatorLineMarginTop($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_MARGIN_TOP)));
		this.monthNameSeparatorLineMarginBottom($.ig.truncate($.ig.Utilities.prototype.toPixelUnits($.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_MARGIN_BOTTOM)));
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngineMonthView::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	invalidateLayoutDataOverride: function (scheduler, visualModel) {
		var monthInfo = visualModel.monthInfo();
		var refreshMonthScrollOffsetsAndExtents = false;
		var nativeView = scheduler._nativeView();
		var visualModelMonthView = $.ig.util.cast($.ig.VisualModelMonthView.prototype.$type, visualModel);
		if (scheduler.monthViewScrollDirection() != this.__currScrollDirection) {
			this.__currScrollDirection = scheduler.monthViewScrollDirection();
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if (scheduler._monthViewScrollMode() != this.__currScrollMode) {
			this.__currScrollMode = scheduler._monthViewScrollMode();
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if (scheduler.monthViewVerticalSeparatorVisibility() != this.__currVerticalSeparatorVisibility) {
			this.__currVerticalSeparatorVisibility = scheduler.monthViewVerticalSeparatorVisibility();
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if (scheduler.monthViewHorizontalSeparatorVisibility() != this.__currHorizontalSeparatorVisibility) {
			this.__currHorizontalSeparatorVisibility = scheduler.monthViewHorizontalSeparatorVisibility();
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if (scheduler.monthViewInterMonthSpacing() != this.__currInterMonthSpacing) {
			this.__currInterMonthSpacing = scheduler.monthViewInterMonthSpacing();
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var schedulerMinDate = scheduler._minMaxDateResolved().start();
		var schedulerMaxDate = scheduler._minMaxDateResolved().end();
		if (+schedulerMaxDate != +(this.__currMaximumDate) || +schedulerMinDate != +(this.__currMinimumDate)) {
			this.__currMaximumDate = schedulerMaxDate;
			this.__currMinimumDate = schedulerMinDate;
			visualModel.minimumDate(this.__currMinimumDate);
			visualModel.maximumDate(this.__currMaximumDate);
			monthInfo.onMinMaxDateChanged(this.__currMinimumDate, this.__currMaximumDate);
		}
		var monthNameFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameFontInfoResolved(scheduler);
		var monthNameMargin = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameMarginResolved(scheduler);
		var monthNameVisibility = scheduler.monthViewNameVisibility();
		if (monthNameFontInfo != this.__currMonthNameFontInfo || monthNameMargin != this.__currMonthNameMargin || monthNameVisibility != this.__currMonthNameVisibility) {
			this.__currMonthNameFontInfo = monthNameFontInfo;
			this.__currMonthNameVisibility = monthNameVisibility;
			this.__currMonthNameMargin = monthNameMargin;
			if (monthNameVisibility == $.ig.Visibility.prototype.visible) {
				var nameHeaderText = monthInfo.getFormattedYearMonth(visualModel.minimumDate());
				var nameHeaderTextSize = nativeView._measureString$i(nameHeaderText, monthNameFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader);
				this.__currMonthNameTextHeight = $.ig.truncate(nameHeaderTextSize.height()) + $.ig.truncate(monthNameMargin.top()) + $.ig.truncate(monthNameMargin.bottom());
				this.__currMonthNameSeparatorHeight = this.monthNameSeparatorLineHeight() + this.monthNameSeparatorLineMarginTop() + this.monthNameSeparatorLineMarginBottom();
				this.__currMonthNameAreaHeight = this.__currMonthNameTextHeight + this.__currMonthNameSeparatorHeight;
			} else {
				this.__currMonthNameAreaHeight = 0;
			}
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var dayOfWeekHeaderFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayOfWeekHeaderFontInfoResolved(scheduler);
		var dayOfWeekHeaderMargin = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayOfWeekHeaderMarginResolved(scheduler);
		var dayOfWeekHeaderVisibility = scheduler.monthViewDayOfWeekHeaderVisibility();
		if (dayOfWeekHeaderFontInfo != this.__currDayOfWeekHeaderFontInfo || dayOfWeekHeaderMargin != this.__currDayOfWeekHeaderMargin || dayOfWeekHeaderVisibility != this.__currDayOfWeekHeaderVisibility) {
			this.__currDayOfWeekHeaderFontInfo = dayOfWeekHeaderFontInfo;
			this.__currDayOfWeekHeaderMargin = dayOfWeekHeaderMargin;
			this.__currDayOfWeekHeaderVisibility = dayOfWeekHeaderVisibility;
			if (dayOfWeekHeaderVisibility == $.ig.Visibility.prototype.visible) {
				this.__currDayOfWeekHeaderSizeShortest = nativeView._measureString$i(monthInfo.getLongestDayName($.ig.DayOfWeekFormat.prototype.shortest) + "  ", dayOfWeekHeaderFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader);
				this.__currDayOfWeekHeaderSizeAbbreviated = nativeView._measureString$i(monthInfo.getLongestDayName($.ig.DayOfWeekFormat.prototype.abbreviated) + "  ", dayOfWeekHeaderFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader);
				this.__currDayOfWeekHeaderSizeFull = nativeView._measureString$i(monthInfo.getLongestDayName($.ig.DayOfWeekFormat.prototype.full) + "  ", dayOfWeekHeaderFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader);
				this.__currDayOfWeekHeaderHeight = $.ig.truncate(this.__currDayOfWeekHeaderSizeFull.height()) + $.ig.truncate(dayOfWeekHeaderMargin.top()) + $.ig.truncate(dayOfWeekHeaderMargin.bottom());
			} else {
				this.__currDayOfWeekHeaderHeight = 0;
			}
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var weekNumberFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewWeekNumberFontInfoResolved(scheduler);
		var weekNumberVisibility = scheduler.monthViewWeekNumberVisibility();
		if (weekNumberFontInfo != this.__currWeekNumberFontInfo || weekNumberVisibility != this.__currWeekNumberVisibility) {
			this.__currWeekNumberFontInfo = weekNumberFontInfo;
			this.__currWeekNumberVisibility = weekNumberVisibility;
			if (weekNumberVisibility == $.ig.Visibility.prototype.visible) {
				this.__currWeekNumberSize = nativeView._measureString$i(" 53 ", weekNumberFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader);
			} else {
				this.__currWeekNumberSize = new $.ig.Size(1, 0, 0);
			}
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var dayNumberFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayFontInfoResolved(scheduler);
		if (dayNumberFontInfo != this.__currDayNumberFontInfo) {
			this.__currDayNumberSize = nativeView._measureString$i("31", dayNumberFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDay);
			this.__currDayNumberFontInfo = dayNumberFontInfo;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var leadingDayNumberFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewLeadingDayFontInfoResolved(scheduler);
		if (leadingDayNumberFontInfo != this.__currDayNumberFontInfo) {
			this.__currLeadingDayNumberSize = nativeView._measureString$i("31", leadingDayNumberFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayLeading);
			this.__currLeadingDayNumberFontInfo = leadingDayNumberFontInfo;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var trailingDayNumberFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTrailingDayFontInfoResolved(scheduler);
		if (trailingDayNumberFontInfo != this.__currDayNumberFontInfo) {
			this.__currTrailingDayNumberSize = nativeView._measureString$i("31", trailingDayNumberFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing);
			this.__currTrailingDayNumberFontInfo = trailingDayNumberFontInfo;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var dayAppointmentFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewAppointmentFontInfoResolved(scheduler);
		var dayContentDisplayMode = scheduler.monthViewDayContentDisplayMode();
		if (dayAppointmentFontInfo != this.__currDayAppointmentFontInfo || dayContentDisplayMode != this.__currDayContentDisplayMode) {
			if (dayContentDisplayMode != $.ig.scheduler.MonthViewDayContentDisplayMode.activitySubject) {
				this.__currDayAppointmentSize = $.ig.Size.prototype.empty();
			} else {
				this.__currDayAppointmentSize = nativeView._measureString$i("Wy", dayAppointmentFontInfo, $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment);
			}
			this.__currDayAppointmentFontInfo = dayAppointmentFontInfo;
			this.__currDayContentDisplayMode = dayContentDisplayMode;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var monthSize = this.calculateMonthSize(this.__currScrollMode, this.__currScrollDirection, visualModelMonthView);
		if ($.ig.Size.prototype.l_op_Inequality(monthSize, visualModelMonthView.monthSize())) {
			refreshMonthScrollOffsetsAndExtents = true;
		}
		var sizes = this.calculateDaySize(scheduler, visualModel, monthSize);
		if ($.ig.Size.prototype.l_op_Inequality(sizes._daySize, this.__currDaySize)) {
			this.__currDaySize = sizes._daySize;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if ($.ig.Size.prototype.l_op_Inequality(sizes._dayOfWeekHeaderSize, this.__currDayOfWeekHeaderSize)) {
			this.__currDayOfWeekHeaderSize = sizes._dayOfWeekHeaderSize;
			refreshMonthScrollOffsetsAndExtents = true;
		}
		if (refreshMonthScrollOffsetsAndExtents) {
			var weekHeight = $.ig.truncate(this.__currDaySize.height());
			var weekWidth = ($.ig.truncate(this.__currDaySize.width()) * 7) + $.ig.truncate(this.__currWeekNumberSize.width());
			var isNumberOfWeeksFixed = monthSize.height() != -1;
			var interMonthSpacing = this.__currScrollMode == $.ig.MonthViewScrollMode.prototype.paged ? 0 : this.__currInterMonthSpacing;
			monthInfo.onMetricsRelatedPropertiesChanged(this.__currMonthNameAreaHeight, this.__currDayOfWeekHeaderHeight, weekHeight, weekWidth, $.ig.truncate(this.__currWeekNumberSize.width()), this.__currScrollDirection, interMonthSpacing, this.__currDaySize, $.ig.truncate(monthSize.height()), $.ig.truncate(monthSize.width()));
		}
		var availableDayOfWeekHeaderWidth = $.ig.truncate(this.__currDayOfWeekHeaderSize.width());
		if (this.__currDayOfWeekHeaderSizeFull.width() <= availableDayOfWeekHeaderWidth) {
			visualModelMonthView.dayOfWeekFormat($.ig.DayOfWeekFormat.prototype.abbreviated);
		} else if (this.__currDayOfWeekHeaderSizeAbbreviated.width() <= availableDayOfWeekHeaderWidth) {
			visualModelMonthView.dayOfWeekFormat($.ig.DayOfWeekFormat.prototype.shortest);
		} else {
			visualModelMonthView.dayOfWeekFormat($.ig.DayOfWeekFormat.prototype.shortest);
		}
		if (this.__currScrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			visualModel.absoluteHeight(monthInfo.totalScrollExtentAllMonths());
		} else {
			visualModel.absoluteWidth(monthInfo.totalScrollExtentAllMonths());
		}
		visualModelMonthView.monthSize(monthSize);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SpatialEngineMonthView::InvalidateLayoutDataOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngineMonthView::ViewMode()" />*/
	viewMode: function () {
		return $.ig.scheduler.SchedulerViewMode.monthView;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SpatialEngineMonthView::ViewMode()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SpatialEngineMonthView_SizeInfo Infragistics.Scheduler.Core.SpatialEngineMonthView::CalculateDaySize(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, System.Windows.Size)" />*/
	calculateDaySize: function (scheduler, visualModel, monthSize) {
		var areDayOfWeekHeadersVisible = scheduler.monthViewDayOfWeekHeaderVisibility() == $.ig.Visibility.prototype.visible;
		var areWeekNumbersVisible = scheduler.monthViewWeekNumberVisibility() == $.ig.Visibility.prototype.visible;
		var dayWidth = 0;
		var dayHeight = 0;
		var totalRows = 1 + (areDayOfWeekHeadersVisible ? 7 : 6);
		var totalCols = areWeekNumbersVisible ? 8 : 7;
		var gridLayout;
		var constrainedHorizontally = monthSize.width() != -1;
		var constrainedVertically = monthSize.height() != -1;
		var gridSize = new $.ig.Size(1, constrainedHorizontally ? monthSize.width() : 200, constrainedVertically ? monthSize.height() : 200);
		if (scheduler.monthViewScrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			gridLayout = $.ig.GridLayout.prototype.createStarGrid(gridSize, totalRows, totalCols);
			gridLayout.rowDefinitions().__inner[0]._height(new $.ig.GridLength(2, this.__currMonthNameAreaHeight, $.ig.GridUnitType.prototype.pixel));
			if (areDayOfWeekHeadersVisible) {
				gridLayout.rowDefinitions().__inner[1]._height(new $.ig.GridLength(2, this.__currDayOfWeekHeaderHeight, $.ig.GridUnitType.prototype.pixel));
			}
			if (areWeekNumbersVisible) {
				gridLayout.columnDefinitions().__inner[0]._width(new $.ig.GridLength(2, this.__currWeekNumberSize.width(), $.ig.GridUnitType.prototype.pixel));
			}
			gridLayout.recalculateGridLayoutItemRectsIfNecessary1(true);
			dayWidth = $.ig.truncate(gridLayout.getCellRect(2, 1).width());
			dayHeight = constrainedVertically ? $.ig.truncate(gridLayout.getCellRect(2, 1).height()) : dayWidth;
		} else {
			gridLayout = $.ig.GridLayout.prototype.createStarGrid(gridSize, totalRows, totalCols);
			gridLayout.rowDefinitions().__inner[0]._height(new $.ig.GridLength(2, this.__currMonthNameAreaHeight, $.ig.GridUnitType.prototype.pixel));
			if (areDayOfWeekHeadersVisible) {
				gridLayout.rowDefinitions().__inner[1]._height(new $.ig.GridLength(2, this.__currDayOfWeekHeaderHeight, $.ig.GridUnitType.prototype.pixel));
			}
			if (areWeekNumbersVisible) {
				gridLayout.columnDefinitions().__inner[0]._width(new $.ig.GridLength(2, this.__currWeekNumberSize.width(), $.ig.GridUnitType.prototype.pixel));
			}
			gridLayout.recalculateGridLayoutItemRectsIfNecessary1(true);
			dayHeight = $.ig.truncate(gridLayout.getCellRect(2, 1).height());
			dayWidth = constrainedHorizontally ? $.ig.truncate(gridLayout.getCellRect(2, 1).width()) : dayHeight;
		}
		var daySize = new $.ig.Size(1, dayWidth, dayHeight);
		var dayOfWeekHeaderSize = new $.ig.Size();
		if (areDayOfWeekHeadersVisible) {
			dayOfWeekHeaderSize = new $.ig.Size(1, dayWidth, gridLayout.getCellRect(1, 1).height());
		} else {
			dayOfWeekHeaderSize = new $.ig.Size(1, 0, 0);
		}
		return new $.ig.SpatialEngineMonthView_SizeInfo(1, daySize, dayOfWeekHeaderSize);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SpatialEngineMonthView_SizeInfo Infragistics.Scheduler.Core.SpatialEngineMonthView::CalculateDaySize(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, System.Windows.Size)" />*/
	,
	/*<BeginMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::CalculateMonthSize(Infragistics.Scheduler.Core.MonthViewScrollMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	calculateMonthSize: function (scrollMode, scrollDirection, visualModel) {
		switch (scrollMode) {
			case $.ig.MonthViewScrollMode.prototype.infiniteAndSizedToFill:
			case $.ig.MonthViewScrollMode.prototype.paged:
				return new $.ig.Size(1, visualModel.availableWidth(), visualModel.availableHeight());
			case $.ig.MonthViewScrollMode.prototype.infinite:
			default:
				{
					if (scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
						return new $.ig.Size(1, visualModel.availableWidth(), -1);
					} else {
						return new $.ig.Size(1, visualModel.availableWidth(), visualModel.availableHeight());
					}
				}
		}
	}
	/*<EndMethod Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::CalculateMonthSize(Infragistics.Scheduler.Core.MonthViewScrollMode, Infragistics.Scheduler.Core.SchedulerViewScrollDirection, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::DayAppointmentSize()" />*/
	dayAppointmentSize: function () {
		return this.__currDayAppointmentSize;
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::DayAppointmentSize()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::DayNumberSize()" />*/
	dayNumberSize: function () {
		return this.__currDayNumberSize;
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::DayNumberSize()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::LeadingDayNumberSize()" />*/
	leadingDayNumberSize: function () {
		return this.__currLeadingDayNumberSize;
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::LeadingDayNumberSize()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameTextHeight()" />*/
	monthNameTextHeight: function () {
		return this.__currMonthNameTextHeight;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameTextHeight()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorHeight()" />*/
	monthNameSeparatorHeight: function () {
		return this.__currMonthNameSeparatorHeight;
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorHeight()" />*/
	,
	_monthNameSeparatorLineHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineHeight()" />*/
	monthNameSeparatorLineHeight: function (value) {
		if (arguments.length === 1) {
			this._monthNameSeparatorLineHeight = value;
			return value;
		} else {
			return this._monthNameSeparatorLineHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineHeight()" />*/
	,
	_monthNameSeparatorLineMarginTop: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineMarginTop()" />*/
	monthNameSeparatorLineMarginTop: function (value) {
		if (arguments.length === 1) {
			this._monthNameSeparatorLineMarginTop = value;
			return value;
		} else {
			return this._monthNameSeparatorLineMarginTop;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineMarginTop()" />*/
	,
	_monthNameSeparatorLineMarginBottom: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineMarginBottom()" />*/
	monthNameSeparatorLineMarginBottom: function (value) {
		if (arguments.length === 1) {
			this._monthNameSeparatorLineMarginBottom = value;
			return value;
		} else {
			return this._monthNameSeparatorLineMarginBottom;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SpatialEngineMonthView::MonthNameSeparatorLineMarginBottom()" />*/
	,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::TrailingDayNumberSize()" />*/
	trailingDayNumberSize: function () {
		return this.__currTrailingDayNumberSize;
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.SpatialEngineMonthView::TrailingDayNumberSize()" />*/
	,
	$type: new $.ig.Type('SpatialEngineMonthView', $.ig.SpatialEngine.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SpatialEngineMonthView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SpatialEngineMonthView_SizeInfo" />*/

$.ig.util.defType('SpatialEngineMonthView_SizeInfo', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this._daySize = new $.ig.Size();
		this._dayOfWeekHeaderSize = new $.ig.Size();
		$.ig.ValueType.prototype.init.call(this);
	},
	_daySize: null,
	_dayOfWeekHeaderSize: null,
	init1: function (initNumber, daySize, dayOfWeekHeaderSize) {
		this._daySize = new $.ig.Size();
		this._dayOfWeekHeaderSize = new $.ig.Size();
		$.ig.ValueType.prototype.init.call(this);
		this._daySize = daySize;
		this._dayOfWeekHeaderSize = dayOfWeekHeaderSize;
	},
	$type: new $.ig.Type('SpatialEngineMonthView_SizeInfo', $.ig.ValueType.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SpatialEngineMonthView_SizeInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisibilityEngine" />*/

$.ig.util.defType('VisibilityEngine', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	__schedulerLayerController: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerController Infragistics.Scheduler.Core.VisibilityEngine::SchedulerLayerController()" />*/
	schedulerLayerController: function () {
		if (null == this.__schedulerLayerController) {
			this.__schedulerLayerController = new $.ig.SchedulerLayerController();
		}
		return this.__schedulerLayerController;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerController Infragistics.Scheduler.Core.VisibilityEngine::SchedulerLayerController()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::Calculate(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, System.Boolean)" />*/
	calculate: function (scheduler, visualModel, spatialEngine, forceRefresh) {
		var actualVisibleRegion = visualModel.actualVisibleRegion();
		if (actualVisibleRegion.isEmpty()) {
			return;
		}
		if (actualVisibleRegion.width() == 0 || actualVisibleRegion.height() == 0) {
			return;
		}
		this.layoutPassData(this.createLayoutPassData());
		this.layoutPassData()._top = $.ig.truncate(actualVisibleRegion.top());
		this.layoutPassData()._bottom = $.ig.truncate(actualVisibleRegion.bottom());
		this.layoutPassData()._left = $.ig.truncate(actualVisibleRegion.left());
		this.layoutPassData()._right = $.ig.truncate(actualVisibleRegion.right());
		var viewModeInfo = scheduler._viewModeManager().getViewModeInfo(this.viewMode());
		if (null == viewModeInfo) {
			return;
		}
		if (viewModeInfo.scrollDirection() == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			this.layoutPassData()._runningScrollOffset = Math.max(0, $.ig.truncate(actualVisibleRegion.top()));
		} else {
			this.layoutPassData()._runningScrollOffset = Math.max(0, $.ig.truncate(actualVisibleRegion.left()));
		}
		scheduler._onVisibleRangeChanged();
		this.calculateOverride(scheduler, visualModel, spatialEngine, this.layoutPassData(), forceRefresh);
		scheduler._onVisibilityEngineCalculationComplete(this.viewMode());
		(function ($obj) { var $value = $obj.bypassLayoutOptimizationsRefCount(); $obj.bypassLayoutOptimizationsRefCount($value - 1); return $value; }(visualModel));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::Calculate(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Action Infragistics.Scheduler.Core.VisibilityEngine::CreateCalculateAction(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, System.Boolean)" />*/
	createCalculateAction: function (scheduler, visualModel, spatialEngine, forceRefresh) {
		var $self = this;
		return function () { $self.calculate(scheduler, visualModel, spatialEngine, forceRefresh); };
	}
	/*<EndMethod Name="System.Action Infragistics.Scheduler.Core.VisibilityEngine::CreateCalculateAction(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	calculateOverride: function (scheduler, visualModel, spatialEngine, layoutCalculationParameters, forceRefresh) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngine::CreateLayoutPassData()" />*/
	createLayoutPassData: function () {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngine::CreateLayoutPassData()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisibilityEngine::PrepareModel(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.SchedulerLayer, System.String, System.Object)" />*/
	prepareModel: function (scheduler, visualModel, path, desiredLayer, modelKey, modelReuseValue) {
		return this.schedulerLayerController().ensureModelReady(path, scheduler, visualModel, desiredLayer, modelKey, modelReuseValue);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisibilityEngine::PrepareModel(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.SchedulerLayer, System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::PositionModel(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, System.Double, System.Double, System.Double, System.Double)" />*/
	positionModel: function (model, scheduler, visualModel, left, top, width, height) {
		this.schedulerLayerController().positionModel(model, visualModel, left, top, width, height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::PositionModel(Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, System.Double, System.Double, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisibilityEngine::GetIsAppointmentInList(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Core.Scheduler)" />*/
	getIsAppointmentInList: function (appointment, scheduler) {
		var $self = this;
		var apptExists = false;
		var nextDate = $.ig.Date.prototype.getDate(appointment.start());
		while (true) {
			if (nextDate > scheduler._agendaViewDateRangeResolved().end()) {
				break;
			}
			var key = $.ig.Utilities.prototype.dictionaryKeyFromDate(nextDate);
			var appts;
			if ((function () { var $ret = $self.layoutPassData()._appointments.tryGetValue(key, appts); appts = $ret.p1; return $ret.ret; }())) {
				var en = appts.getEnumerator();
				while (en.moveNext()) {
					var appt = en.current();
					if (appt == appointment) {
						apptExists = true;
						break;
					}
				}
			}
			if (apptExists) {
				break;
			}
			nextDate = $.ig.Date.prototype.addDays(nextDate, 1);
		}
		return apptExists;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisibilityEngine::GetIsAppointmentInList(Infragistics.Scheduler.Appointment, Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::PrepareShapeModelForControlBackground(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.LayoutPassData, Infragistics.Scheduler.Core.Scheduler, System.Windows.Media.Brush, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	prepareShapeModelForControlBackground: function (path, visualModel, layoutCalculationParameters, scheduler, backgroundBrush, scrollDirection) {
		var desiredLayer = visualModel.subContentLayer();
		var reuseValue = null;
		var left = scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical ? 0 : layoutCalculationParameters._runningScrollOffset;
		var top = scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical ? layoutCalculationParameters._runningScrollOffset : 0;
		var width = $.ig.truncate(visualModel.actualVisibleRegion().width());
		var height = $.ig.truncate(visualModel.actualVisibleRegion().height());
		var backgroundShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModel, path, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		backgroundShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		backgroundShapeModel.fill(backgroundBrush);
		backgroundShapeModel.role(path.role());
		backgroundShapeModel.reuseValue(reuseValue);
		this.positionModel(backgroundShapeModel, scheduler, visualModel, left, top, width, height);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::PrepareShapeModelForControlBackground(Infragistics.Scheduler.Core.ModelPath, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.LayoutPassData, Infragistics.Scheduler.Core.Scheduler, System.Windows.Media.Brush, Infragistics.Scheduler.Core.SchedulerViewScrollDirection)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::ProcessAppointmentQueryResult(Infragistics.Scheduler.Data.AppointmentQueryResult, System.Boolean)" />*/
	processAppointmentQueryResult: function (queryResult, isAsync) {
		var appointments = this.layoutPassData()._appointments;
		appointments.clear();
		if (isAsync) {
		} else {
			this.layoutPassData()._appointments = $.ig.Utilities.prototype.dayAppointmentDictionaryFromQueryResult(queryResult);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngine::ProcessAppointmentQueryResult(Infragistics.Scheduler.Data.AppointmentQueryResult, System.Boolean)" />*/
	,
	_layoutPassData: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngine::LayoutPassData()" />*/
	layoutPassData: function (value) {
		if (arguments.length === 1) {
			this._layoutPassData = value;
			return value;
		} else {
			return this._layoutPassData;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngine::LayoutPassData()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngine::ViewMode()" />*/
	viewMode: function () {
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngine::ViewMode()" />*/
	,
	$type: new $.ig.Type('VisibilityEngine', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisibilityEngine" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisibilityEngineAgendaView" />*/

$.ig.util.defType('VisibilityEngineAgendaView', 'VisibilityEngine', {
	init: function () {
		$.ig.VisibilityEngine.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	calculateOverride: function (scheduler, visualModel, spatialEngine, layoutpassData, forceRefresh) {
		var visualModelAgendaView = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, visualModel);
		this.layoutPassDataAgendaView($.ig.util.cast($.ig.LayoutPassDataAgendaView.prototype.$type, layoutpassData));
		var agendaInfo = visualModelAgendaView.agendaInfo();
		var lastLayoutAgendaInfoVersion = visualModelAgendaView.lastLayoutAgendaInfoVersion();
		visualModelAgendaView.lastLayoutAgendaInfoVersion(agendaInfo.version());
		var path = new $.ig.ModelPath(0, $.ig.ModelType.prototype.shape, $.ig.scheduler.SchedulerElementRole.agendaView);
		this.prepareShapeModelForControlBackground(path, visualModelAgendaView, this.layoutPassDataAgendaView(), scheduler, $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewBackgroundBrushResolved(scheduler), $.ig.scheduler.SchedulerViewScrollDirection.vertical);
		try {
			scheduler._refreshSuspended(true);
			var firstDayNullable = agendaInfo.getDayContainingScrollOffset(this.layoutPassDataAgendaView()._runningScrollOffset);
			var firstDay = $.ig.Date.prototype.now();
			var firstDayScrollOffset;
			var visibleDays = null;
			if (firstDayNullable.hasValue()) {
				this.layoutPassDataAgendaView()._areAnyDatesVisible = true;
				firstDay = firstDayNullable.value();
				firstDayScrollOffset = agendaInfo.getScrollOffsetOfDay(firstDay);
				if (firstDayScrollOffset < this.layoutPassDataAgendaView()._runningScrollOffset) {
					this.layoutPassDataAgendaView()._runningScrollOffset = firstDayScrollOffset;
				}
				visibleDays = this.updateVisibleDays(firstDay, firstDayScrollOffset, agendaInfo, visualModelAgendaView);
			} else {
				this.layoutPassDataAgendaView()._areAnyDatesVisible = false;
			}
			var existingDays = new $.ig.List$1($.ig.Date.prototype.$type, 0);
			if (this.layoutPassDataAgendaView()._areAnyDatesVisible) {
				visualModelAgendaView.lastLayoutFirstVisibleDay(visualModelAgendaView.firstVisibleDay());
				visualModelAgendaView.lastLayoutLastVisibleDay(visualModelAgendaView.lastVisibleDay());
				visualModelAgendaView.lastLayoutVisibleDays().clear();
				visualModelAgendaView.lastLayoutVisibleDays().addRange(visibleDays);
			} else {
				visualModelAgendaView.lastLayoutFirstVisibleDay($.ig.Date.prototype.minValue());
				visualModelAgendaView.lastLayoutLastVisibleDay($.ig.Date.prototype.minValue());
				visualModelAgendaView.lastLayoutVisibleDays().clear();
			}
			if (this.layoutPassDataAgendaView()._areAnyDatesVisible) {
				this.queryAppointmentsInCurrentDateRange(scheduler, visualModelAgendaView);
			}
			this.hideNonVisibleModels(scheduler, visualModelAgendaView, this.schedulerLayerController(), lastLayoutAgendaInfoVersion);
			if (null != visibleDays) {
				var en = visibleDays.getEnumerator();
				while (en.moveNext()) {
					var day = en.current();
					var dayMetrics = agendaInfo.getDayMetrics(day);
					if (existingDays.indexOf(day) < 0) {
						this.createAndPositionModelsForDay(day, dayMetrics, visualModelAgendaView, scheduler, $.ig.util.cast($.ig.SpatialEngineAgendaView.prototype.$type, spatialEngine));
					}
					this.layoutPassDataAgendaView()._runningScrollOffset += dayMetrics.scrollExtent();
				}
			} else {
				this.displayNoEventsMessage(visualModelAgendaView, scheduler);
			}
		}
		finally {
			scheduler._refreshSuspended(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CreateLayoutPassData()" />*/
	createLayoutPassData: function () {
		return new $.ig.LayoutPassDataAgendaView();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CreateLayoutPassData()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngineAgendaView::ViewMode()" />*/
	viewMode: function () {
		return $.ig.scheduler.SchedulerViewMode.agendaView;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngineAgendaView::ViewMode()" />*/
	,
	_layoutPassDataAgendaView: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.LayoutPassDataAgendaView Infragistics.Scheduler.Core.VisibilityEngineAgendaView::LayoutPassDataAgendaView()" />*/
	layoutPassDataAgendaView: function (value) {
		if (arguments.length === 1) {
			this._layoutPassDataAgendaView = value;
			return value;
		} else {
			return this._layoutPassDataAgendaView;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.LayoutPassDataAgendaView Infragistics.Scheduler.Core.VisibilityEngineAgendaView::LayoutPassDataAgendaView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CreateAndPositionModelsForDay(System.DateTime, Infragistics.Scheduler.Core.AgendaDayMetrics, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	createAndPositionModelsForDay: function (currentDay, dayMetrics, visualModel, scheduler, spatialEngine) {
		var $self = this;
		var dayWidth = $.ig.truncate(visualModel.actualVisibleWidth());
		var agendaInfo = visualModel.agendaInfo();
		var appointments;
		if (false == (function () { var $ret = $self.layoutPassDataAgendaView()._appointments.tryGetValue($.ig.Utilities.prototype.dictionaryKeyFromDate(currentDay), appointments); appointments = $ret.p1; return $ret.ret; }())) {
			return;
		}
		var appointmentCount = Math.min(appointments.count(), dayMetrics.totalAppointments());
		var appointmentAreaHeight = appointmentCount * agendaInfo.appointmentHeight();
		if (agendaInfo.dayHeaderHeight() > 0) {
			var top = this.layoutPassDataAgendaView()._runningScrollOffset;
			var dayHeaderModel = this.prepareAgendaDayHeaderModel(currentDay, scheduler, visualModel, visualModel.headerLayer(), spatialEngine);
			this.positionModel(dayHeaderModel, scheduler, visualModel, 0, top, dayWidth, agendaInfo.dayHeaderHeight());
			top += agendaInfo.dayHeaderHeight();
			var horzSeparatorShapeModel = this.prepareShapeModelForHorizontalSeparator(currentDay, null, false, scheduler, visualModel, visualModel.headerDecoratorLayer(), $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderSeparatorLineBrushResolved(scheduler), $.ig.scheduler.SchedulerElementRole.agendaDayHeaderHorizontalSeparator);
			var separatorHeight = spatialEngine.dayHeaderSeparatorLineHeight();
			top -= separatorHeight;
			this.positionModel(horzSeparatorShapeModel, scheduler, visualModel, 0, top, dayWidth, separatorHeight);
		}
		var appointmentGridOffset = this.layoutPassDataAgendaView()._runningScrollOffset + agendaInfo.dayHeaderHeight();
		var rowsPerAppointment = 5;
		var totalRows = rowsPerAppointment * appointmentCount;
		var totalCols = 3;
		var gridLayout = $.ig.GridLayout.prototype.createStarGrid(new $.ig.Size(1, dayWidth, appointmentAreaHeight), totalRows, totalCols);
		gridLayout.columnDefinitions().__inner[0]._width(new $.ig.GridLength(2, spatialEngine.timeAreaWidth(), $.ig.GridUnitType.prototype.pixel));
		gridLayout.columnDefinitions().__inner[1]._width(new $.ig.GridLength(2, $.ig.Utilities.prototype.toPixelUnits(4), $.ig.GridUnitType.prototype.pixel));
		for (var i = 0; i < totalRows; i += rowsPerAppointment) {
			gridLayout.rowDefinitions().__inner[i]._height(new $.ig.GridLength(2, spatialEngine.appointmentMargin().top(), $.ig.GridUnitType.prototype.pixel));
			gridLayout.rowDefinitions().__inner[i + 1]._height(new $.ig.GridLength(2, spatialEngine.appointmentRow1Height(), $.ig.GridUnitType.prototype.pixel));
			gridLayout.rowDefinitions().__inner[i + 2]._height(new $.ig.GridLength(2, spatialEngine.appointmentRow2Height(), $.ig.GridUnitType.prototype.pixel));
			gridLayout.rowDefinitions().__inner[i + 3]._height(new $.ig.GridLength(2, spatialEngine.appointmentMargin().bottom(), $.ig.GridUnitType.prototype.pixel));
			gridLayout.rowDefinitions().__inner[i + 4]._height(new $.ig.GridLength(2, spatialEngine.appointmentSeparatorLineHeight(), $.ig.GridUnitType.prototype.pixel));
		}
		for (var i1 = 0; i1 < appointmentCount; i1++) {
			var appointment = appointments.__inner[i1];
			var appointmentSpansDays = +($.ig.Date.prototype.getDate(appointment.start())) != +($.ig.Date.prototype.getDate(currentDay)) || +($.ig.Date.prototype.getDate(appointment.end())) != +($.ig.Date.prototype.getDate(currentDay));
			var isLastRow = i1 == (appointmentCount - 1);
			var isAppointmentSelected = appointment.isSameAs(scheduler.selectedAppointment());
			if (isAppointmentSelected) {
				if (+($.ig.Date.prototype.getDate(currentDay)) != +($.ig.Date.prototype.getDate(scheduler.selectedDate()))) {
					isAppointmentSelected = false;
				}
			}
			var apptAreaShapeModel = this.prepareShapeModelForApptArea(currentDay, appointment, isAppointmentSelected, scheduler, visualModel, visualModel.contentLayer());
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(apptAreaShapeModel).inGridLocation(i1 * rowsPerAppointment, 0, rowsPerAppointment, totalCols));
			var startTimeModel = this.prepareAgendaApptStartTimeModel(currentDay, appointment, isAppointmentSelected, appointmentSpansDays, scheduler, visualModel, visualModel.decoratorLayer(), spatialEngine);
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(startTimeModel).inGridLocation((i1 * rowsPerAppointment) + 1, 0, 1, 1));
			var endTimeModel = this.prepareAgendaApptEndTimeModel(currentDay, appointment, isAppointmentSelected, appointmentSpansDays, scheduler, visualModel, visualModel.decoratorLayer(), spatialEngine);
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(endTimeModel).inGridLocation((i1 * rowsPerAppointment) + 2, 0, 1, 1));
			var subjectModel = this.prepareAgendaApptSubjectModel(currentDay, appointment, isAppointmentSelected, scheduler, visualModel, visualModel.decoratorLayer(), spatialEngine);
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(subjectModel).inGridLocation((i1 * rowsPerAppointment) + 1, 3, 1, 1));
			var locationModel = this.prepareAgendaApptLocationModel(currentDay, appointment, isAppointmentSelected, scheduler, visualModel, visualModel.decoratorLayer(), spatialEngine);
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(locationModel).inGridLocation((i1 * rowsPerAppointment) + 2, 2, 1, 1));
			var colorBarShapeModel = this.prepareShapeModelForColorBar(currentDay, appointment, isAppointmentSelected, scheduler, visualModel, visualModel.headerDecoratorLayer());
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(colorBarShapeModel).inGridLocation((i1 * rowsPerAppointment) + 1, 1, 2, 1));
			var horzSeparatorShapeModel1 = this.prepareShapeModelForHorizontalSeparator(currentDay, appointment, isAppointmentSelected, scheduler, visualModel, visualModel.headerDecoratorLayer(), $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSeparatorLineBrushResolved(scheduler), $.ig.scheduler.SchedulerElementRole.agendaApptHorizontalSeparator);
			gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(horzSeparatorShapeModel1).inGridLocation((i1 * rowsPerAppointment) + 4, 0, 1, 3));
		}
		gridLayout.recalculateGridLayoutItemRectsIfNecessary1(true);
		var layoutItems = gridLayout.layoutItems();
		var en = layoutItems.getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			var layoutRect = layoutItem.layoutRect();
			var left = layoutRect.left();
			var top1 = layoutRect.top() + appointmentGridOffset;
			var model = $.ig.util.cast($.ig.ModelBase.prototype.$type, layoutItem.item());
			this.positionModel(model, scheduler, visualModel, left, top1, layoutRect.width(), layoutRect.height());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::CreateAndPositionModelsForDay(System.DateTime, Infragistics.Scheduler.Core.AgendaDayMetrics, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::DisplayNoEventsMessage(Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.Scheduler)" />*/
	displayNoEventsMessage: function (visualModel, scheduler) {
		var noEventsTextModel = this.prepareTextModelForNoEventsMessage($.ig.Date.prototype.getDate($.ig.Date.prototype.now()), scheduler, visualModel, visualModel.contentLayer());
		var textSize = scheduler._nativeView()._measureString$i(noEventsTextModel.text(), $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewMessageFontInfoResolved(scheduler), $.ig.scheduler.SchedulerElementRole.agendaViewMessage);
		var left = $.ig.intDivide(($.ig.truncate(visualModel.availableWidth()) - ($.ig.truncate(textSize.width()) + 5)), 2);
		var top = $.ig.intDivide(($.ig.truncate(visualModel.availableHeight()) - $.ig.truncate(textSize.height())), 2);
		this.positionModel(noEventsTextModel, scheduler, visualModel, left, top, textSize.width(), textSize.height());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::DisplayNoEventsMessage(Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::HideNonVisibleModels(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayerController, System.Int32)" />*/
	hideNonVisibleModels: function (scheduler, visualModelAgendaView, schedulerLayerController, lastLayoutAgendaInfoVersion) {
		var layers = visualModelAgendaView.schedulerLayers();
		var en = layers.getEnumerator();
		while (en.moveNext()) {
			var layer = en.current();
			layer.suspendCleaning(true);
			var layerKeyListCount = layer.keyList().count();
			for (var i = 0; i < layerKeyListCount; i++) {
				if (layer.removedList().__inner[i]) {
					continue;
				}
				var modelPath = layer.keyList().__inner[i];
				if (modelPath.isNonDatePath()) {
					continue;
				}
				var isVisible = true;
				if (false == this.layoutPassDataAgendaView()._areAnyDatesVisible) {
					if (modelPath.role() == $.ig.scheduler.SchedulerElementRole.agendaViewMessage) {
						continue;
					} else {
						isVisible = false;
					}
				} else {
					if (modelPath.role() == $.ig.scheduler.SchedulerElementRole.agendaViewMessage) {
						isVisible = false;
					}
				}
				if (isVisible) {
					if (lastLayoutAgendaInfoVersion != visualModelAgendaView.agendaInfo().version()) {
						isVisible = false;
					}
				}
				if (isVisible) {
					if (null != modelPath.appointment() && null == modelPath.appointmentResolved()) {
						isVisible = false;
					} else {
						var appt = modelPath.appointmentResolved();
						if (null != appt) {
							if (null == appt._dataSource() || appt._dataSource() != scheduler.dataSource()) {
								isVisible = false;
							} else if (appt._isOccurrence() && appt._isVariance()) {
								if (+(appt.start()) != +(modelPath.lastStartDate())) {
									isVisible = false;
									modelPath.lastStartDate(appt.start());
								}
							}
						}
					}
				}
				if (isVisible) {
					var modelDate = $.ig.Date.prototype.fromValues(modelPath.year(), modelPath.month(), modelPath.day(), 0, 0, 0, 0);
					if (modelPath.role() == $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader || modelPath.role() == $.ig.scheduler.SchedulerElementRole.agendaDayHeaderHorizontalSeparator) {
						if (visualModelAgendaView.agendaInfo().dayHeaderHeight() == 0) {
							isVisible = false;
						} else {
							if (false == visualModelAgendaView.agendaInfo().containsDate(modelDate)) {
								isVisible = false;
							}
						}
					}
				}
				if (isVisible) {
					var modelDate1 = $.ig.Date.prototype.fromValues(modelPath.year(), modelPath.month(), modelPath.day(), 0, 0, 0, 0);
					if (modelDate1 < visualModelAgendaView.firstVisibleDay()) {
						isVisible = false;
					} else if (modelDate1 > visualModelAgendaView.lastVisibleDay()) {
						isVisible = false;
					}
				}
				if (false == isVisible) {
					schedulerLayerController.removeModel(modelPath, visualModelAgendaView);
				} else {
				}
			}
			layer.suspendCleaning(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::HideNonVisibleModels(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayerController, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaDayHeaderModel(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	prepareAgendaDayHeaderModel: function (currentDay, scheduler, visualModelAgendaView, desiredLayer, spatialEngine) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaViewDayHeader;
		var reuseValue = currentDay;
		var dayHeaderPath = new $.ig.ModelPath(4, $.ig.ModelType.prototype.header, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false);
		var dayHeaderModel = $.ig.util.cast($.ig.AgendaDayHeaderModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, dayHeaderPath, desiredLayer, $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_KEY, reuseValue));
		dayHeaderModel.text(visualModelAgendaView.agendaInfo().formatDayOfWeekAndAndDate(currentDay));
		dayHeaderModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderFontInfoResolved(scheduler));
		dayHeaderModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		dayHeaderModel.paddingLeft($.ig.truncate(spatialEngine.dayHeaderMargin().left()));
		dayHeaderModel.paddingRight($.ig.truncate(spatialEngine.dayHeaderMargin().right()));
		dayHeaderModel.paddingTop($.ig.truncate(spatialEngine.dayHeaderMargin().top()));
		dayHeaderModel.paddingBottom($.ig.truncate(spatialEngine.dayHeaderMargin().bottom()));
		dayHeaderModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderBackgroundBrushResolved(scheduler));
		dayHeaderModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewDayHeaderTextBrushResolved(scheduler));
		dayHeaderModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		dayHeaderModel.role(role);
		dayHeaderModel.reuseValue(reuseValue);
		return dayHeaderModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaDayHeaderModel(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptEndTimeModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	prepareAgendaApptEndTimeModel: function (currentDay, appointment, isAppointmentSelected, appointmentSpansDays, scheduler, visualModelAgendaView, desiredLayer, spatialEngine) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptEndTime;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var endTimePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.time, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var endTimeModel = $.ig.util.cast($.ig.AgendaApptEndTimeModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, endTimePath, desiredLayer, $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_KEY, reuseValue));
		if (false == appointmentSpansDays || +($.ig.Date.prototype.getDate($.ig.DateUtils.prototype.adjustEndForRangeComparison1($.ig.Date.prototype.getDate(appointment.start()), appointment.end()))) == +($.ig.Date.prototype.getDate(currentDay))) {
			endTimeModel.text(visualModelAgendaView.agendaInfo().formatShortTime(appointment.end()));
		} else {
			endTimeModel.text("");
		}
		endTimeModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeFontInfoResolved(scheduler));
		endTimeModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.right);
		endTimeModel.paddingRight(spatialEngine.colorBarHorzSpacing());
		endTimeModel.isSelected(isAppointmentSelected);
		endTimeModel.background(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeSelectedBackgroundBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeBackgroundBrushResolved(scheduler));
		endTimeModel.textBrush(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeSelectedTextBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentEndTimeTextBrushResolved(scheduler));
		endTimeModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		endTimeModel.role(role);
		endTimeModel.reuseValue(reuseValue);
		return endTimeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptEndTimeModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaApptLocationModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptLocationModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	prepareAgendaApptLocationModel: function (currentDay, appointment, isAppointmentSelected, scheduler, visualModelAgendaView, desiredLayer, spatialEngine) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptLocation;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var locationPath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.text, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var locationModel = $.ig.util.cast($.ig.AgendaApptLocationModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, locationPath, desiredLayer, $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_KEY, reuseValue));
		locationModel.text(appointment.location());
		locationModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationFontInfoResolved(scheduler));
		locationModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		locationModel.paddingLeft(spatialEngine.colorBarHorzSpacing());
		locationModel.paddingRight($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(6)));
		locationModel.isSelected(isAppointmentSelected);
		locationModel.background(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationSelectedBackgroundBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationBackgroundBrushResolved(scheduler));
		locationModel.textBrush(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationSelectedTextBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentLocationTextBrushResolved(scheduler));
		locationModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		locationModel.role(role);
		locationModel.reuseValue(reuseValue);
		return locationModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaApptLocationModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptLocationModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptStartTimeModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	prepareAgendaApptStartTimeModel: function (currentDay, appointment, isAppointmentSelected, appointmentSpansDays, scheduler, visualModelAgendaView, desiredLayer, spatialEngine) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptStartTime;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var startTimePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.time, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var startTimeModel = $.ig.util.cast($.ig.AgendaApptStartTimeModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, startTimePath, desiredLayer, $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_KEY, reuseValue));
		if (false == appointmentSpansDays || +($.ig.Date.prototype.getDate(appointment.start())) == +($.ig.Date.prototype.getDate(currentDay))) {
			startTimeModel.text(visualModelAgendaView.agendaInfo().formatShortTime(appointment.start()));
		} else if (+($.ig.Date.prototype.getDate(appointment.start())) != +($.ig.Date.prototype.getDate(currentDay)) && +($.ig.Date.prototype.getDate($.ig.DateUtils.prototype.adjustEndForRangeComparison1($.ig.Date.prototype.getDate(appointment.start()), appointment.end()))) != +($.ig.Date.prototype.getDate(currentDay))) {
			startTimeModel.text($.ig.schedulerCore.locale.getString("LIT_AgendaStartTime_AllDay", null));
		} else if (+($.ig.Date.prototype.getDate(appointment.start())) != +($.ig.Date.prototype.getDate(currentDay))) {
			startTimeModel.text($.ig.schedulerCore.locale.getString("LIT_AgendaStartTime_Ends", null));
		}
		startTimeModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeFontInfoResolved(scheduler));
		startTimeModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.right);
		startTimeModel.paddingRight(spatialEngine.colorBarHorzSpacing());
		startTimeModel.isSelected(isAppointmentSelected);
		startTimeModel.background(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeSelectedBackgroundBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeBackgroundBrushResolved(scheduler));
		startTimeModel.textBrush(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeSelectedTextBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentStartTimeTextBrushResolved(scheduler));
		startTimeModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		startTimeModel.role(role);
		startTimeModel.reuseValue(reuseValue);
		return startTimeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptStartTimeModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptSubjectModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	prepareAgendaApptSubjectModel: function (currentDay, appointment, isAppointmentSelected, scheduler, visualModelAgendaView, desiredLayer, spatialEngine) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptSubject;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var descriptionPath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.time, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var subjectModel = $.ig.util.cast($.ig.AgendaApptSubjectModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, descriptionPath, desiredLayer, $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_KEY, reuseValue));
		subjectModel.text(appointment.subject());
		subjectModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectFontInfoResolved(scheduler));
		subjectModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		subjectModel.isSelected(isAppointmentSelected);
		subjectModel.background(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectSelectedBackgroundBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectBackgroundBrushResolved(scheduler));
		subjectModel.textBrush(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectSelectedTextBrushResolved(scheduler) : $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectTextBrushResolved(scheduler));
		subjectModel.paddingLeft(spatialEngine.colorBarHorzSpacing());
		subjectModel.paddingRight($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(6)));
		subjectModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		subjectModel.role(role);
		subjectModel.reuseValue(reuseValue);
		return subjectModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareAgendaApptSubjectModel(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Core.SpatialEngineAgendaView)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForApptArea(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareShapeModelForApptArea: function (currentDay, appointment, isAppointmentSelected, scheduler, visualModelAgendaView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptArea;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var apptAreaShapePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.area, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var apptAreaShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, apptAreaShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		apptAreaShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		apptAreaShapeModel.fill(isAppointmentSelected ? $.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewAppointmentSubjectBackgroundBrushResolved(scheduler) : $.ig.Brushes.prototype.instance().transparent());
		apptAreaShapeModel.role(role);
		apptAreaShapeModel.isSelected(isAppointmentSelected);
		apptAreaShapeModel.reuseValue(reuseValue);
		return apptAreaShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForApptArea(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForColorBar(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareShapeModelForColorBar: function (currentDay, appointment, isAppointmentSelected, scheduler, visualModelAgendaView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaApptColorBar;
		var reuseValue = null;
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var colorBarShapePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.shape, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var colorBarShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, colorBarShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		colorBarShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		colorBarShapeModel.fill(appointment._backgroundBrush());
		colorBarShapeModel.isSelected(isAppointmentSelected);
		colorBarShapeModel.role(role);
		colorBarShapeModel.reuseValue(reuseValue);
		return colorBarShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForColorBar(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForHorizontalSeparator(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, System.Windows.Media.Brush, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	prepareShapeModelForHorizontalSeparator: function (currentDay, appointment, isAppointmentSelected, scheduler, visualModelAgendaView, desiredLayer, brush, role) {
		var reuseValue = null;
		var apptForPath = null == appointment ? null : appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var apptStartTicks = null == appointment ? 0 : appointment.originalStart().getTime();
		var horzSeparatorShapePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.shape, role, currentDay.getFullYear(), $.ig.Date.prototype.getMonth(currentDay), currentDay.getDate(), false, false, apptForPath, apptStartTicks);
		var horzSeparatorShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, horzSeparatorShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		horzSeparatorShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		horzSeparatorShapeModel.isSelected(isAppointmentSelected);
		horzSeparatorShapeModel.fill(brush);
		horzSeparatorShapeModel.role(role);
		horzSeparatorShapeModel.reuseValue(reuseValue);
		return horzSeparatorShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareShapeModelForHorizontalSeparator(System.DateTime, Infragistics.Scheduler.Appointment, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer, System.Windows.Media.Brush, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareTextModelForNoEventsMessage(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareTextModelForNoEventsMessage: function (currentDate, scheduler, visualModelAgendaView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.agendaViewMessage;
		var reuseValue = null;
		var noEventsMessageTextPath = new $.ig.ModelPath(4, $.ig.ModelType.prototype.text, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), false, false);
		var noEventsMessageTextModel = $.ig.util.cast($.ig.TextModel.prototype.$type, this.prepareModel(scheduler, visualModelAgendaView, noEventsMessageTextPath, desiredLayer, $.ig.TextModel.prototype.tEXT_MODEL_KEY, reuseValue));
		noEventsMessageTextModel.text($.ig.schedulerCore.locale.getString("LIT_AgendaNoEventsMessage", null));
		noEventsMessageTextModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		noEventsMessageTextModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.center);
		noEventsMessageTextModel.background($.ig.Brushes.prototype.instance().transparent());
		noEventsMessageTextModel.role(role);
		noEventsMessageTextModel.reuseValue(reuseValue);
		noEventsMessageTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewMessageTextBrushResolved(scheduler));
		noEventsMessageTextModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getAgendaViewMessageFontInfoResolved(scheduler));
		return noEventsMessageTextModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineAgendaView::PrepareTextModelForNoEventsMessage(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::QueryAppointmentsInCurrentDateRange(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView)" />*/
	queryAppointmentsInCurrentDateRange: function (scheduler, visualModel) {
		this.layoutPassDataAgendaView()._appointments = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type), 0);
		if (null != scheduler.dataSource()) {
			var fvd = visualModel.firstVisibleDay();
			var lvd = visualModel.lastVisibleDay();
			var start = $.ig.Utilities.prototype.startOfDayFromDate(fvd);
			var end = $.ig.Utilities.prototype.endOfDayFromDate(lvd);
			scheduler.dataSource()._getAppointmentsInRange2(new $.ig.scheduler.DateTimeRange(start, end), null, this.processAppointmentQueryResult.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineAgendaView::QueryAppointmentsInCurrentDateRange(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelAgendaView)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisibilityEngineAgendaView::UpdateVisibleDays(System.DateTime, System.Int32, Infragistics.Scheduler.Core.AgendaInfo, Infragistics.Scheduler.Core.VisualModelAgendaView)" />*/
	updateVisibleDays: function (firstDay, firstDayScrollOffset, agendaInfo, visualModel) {
		visualModel.firstVisibleDay(firstDay);
		visualModel.firstVisibleDayScrollOffsetStart(firstDayScrollOffset);
		visualModel.lastVisibleDay(firstDay);
		visualModel.lastVisibleDayScrollOffsetEnd(firstDayScrollOffset + agendaInfo.getDayMetrics(firstDay).scrollExtent());
		visualModel.totalVisibleDays(0);
		var scrollOffsetTemp = firstDayScrollOffset;
		var scrollOffsetLimit = this.layoutPassDataAgendaView()._bottom;
		var days = new $.ig.List$1($.ig.Date.prototype.$type, 0);
		var en = agendaInfo.days(firstDay).getEnumerator();
		while (en.moveNext()) {
			var day = en.current();
			if (scrollOffsetTemp < scrollOffsetLimit && day <= visualModel.agendaDateRange().end()) {
				(function ($obj) { var $value = $obj.totalVisibleDays(); $obj.totalVisibleDays($value + 1); return $value; }(visualModel));
				visualModel.lastVisibleDay(day);
				visualModel.lastVisibleDayScrollOffsetEnd(scrollOffsetTemp + agendaInfo.getDayMetrics(day).scrollExtent());
				scrollOffsetTemp = visualModel.lastVisibleDayScrollOffsetEnd();
				days.add(day);
			} else {
				break;
			}
		}
		return days;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisibilityEngineAgendaView::UpdateVisibleDays(System.DateTime, System.Int32, Infragistics.Scheduler.Core.AgendaInfo, Infragistics.Scheduler.Core.VisualModelAgendaView)" />*/
	,
	$type: new $.ig.Type('VisibilityEngineAgendaView', $.ig.VisibilityEngine.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisibilityEngineAgendaView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisibilityEngineMonthView" />*/

$.ig.util.defType('VisibilityEngineMonthView', 'VisibilityEngine', {
	init: function () {
		$.ig.VisibilityEngine.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	calculateOverride: function (scheduler, visualModel, spatialEngine, layoutpassData, forceRefresh) {
		try {
			var visualModelMonthView = $.ig.util.cast($.ig.VisualModelMonthView.prototype.$type, visualModel);
			this.layoutPassDataMonthView($.ig.util.cast($.ig.LayoutPassDataMonthView.prototype.$type, layoutpassData));
			scheduler._refreshSuspended(true);
			var monthInfo = visualModel.monthInfo();
			var lastLayoutMonthInfoVersion = visualModelMonthView.lastLayoutMonthInfoVersion();
			visualModelMonthView.lastLayoutMonthInfoVersion(monthInfo.version());
			this.layoutPassDataMonthView()._areDayOfWeekHeadersVisible = scheduler.monthViewDayOfWeekHeaderVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areLeadingDaysVisible = scheduler.monthViewLeadingDayVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areTrailingDaysVisible = scheduler.monthViewTrailingDayVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areWeekNumbersVisible = scheduler.monthViewWeekNumberVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areVerticalSeparatorLinesVisible = scheduler.monthViewVerticalSeparatorVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areHorizontalSeparatorLinesVisible = scheduler.monthViewHorizontalSeparatorVisibility() == $.ig.Visibility.prototype.visible;
			this.layoutPassDataMonthView()._areAnySeparatorLinesVisible = this.layoutPassDataMonthView()._areHorizontalSeparatorLinesVisible || this.layoutPassDataMonthView()._areVerticalSeparatorLinesVisible;
			var scrollDirection = scheduler.monthViewScrollDirection();
			this.layoutPassDataMonthView()._isScrollingHorizontally = scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.horizontal;
			this.layoutPassDataMonthView()._isScrollingVertically = scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical;
			var monthSize = visualModelMonthView.monthSize();
			this.layoutPassDataMonthView()._isMonthSizeFixedVertically = monthSize.height() != -1;
			this.layoutPassDataMonthView()._isMonthSizeFixedHorizontally = monthSize.width() != -1;
			this.layoutPassDataMonthView()._forceSixWeekMonth = this.layoutPassDataMonthView()._isMonthSizeFixedVertically;
			var path = new $.ig.ModelPath(0, $.ig.ModelType.prototype.shape, $.ig.scheduler.SchedulerElementRole.monthView);
			this.prepareShapeModelForControlBackground(path, visualModelMonthView, this.layoutPassDataMonthView(), scheduler, $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewBackgroundBrushResolved(scheduler), scheduler.monthViewScrollDirection());
			var firstMonth = monthInfo.getMonthContainingScrollOffset(this.layoutPassDataMonthView()._runningScrollOffset + 1);
			var firstMonthMetrics = monthInfo.getMonthMetrics(firstMonth);
			var firstMonthScrollOffset = firstMonthMetrics.scrollOffset();
			if (firstMonthScrollOffset < this.layoutPassDataMonthView()._runningScrollOffset) {
				this.layoutPassDataMonthView()._runningScrollOffset = firstMonthScrollOffset;
			}
			this.updateVisibleMonths(firstMonth, firstMonthScrollOffset, monthInfo, visualModelMonthView);
			if (this.layoutPassDataMonthView()._areLeadingDaysVisible) {
				try {
					this.layoutPassDataMonthView()._firstVisibleDate = $.ig.Date.prototype.addDays(visualModelMonthView.firstVisibleMonth(), -1 * firstMonthMetrics.leadingDayCount());
				}
				catch (e) {
					this.layoutPassDataMonthView()._firstVisibleDate = visualModelMonthView.firstVisibleMonth();
				}
			} else {
				this.layoutPassDataMonthView()._firstVisibleDate = visualModelMonthView.firstVisibleMonth();
			}
			var lastVisibleMonth = visualModelMonthView.lastVisibleMonth();
			var lastVisibleMonthMetrics = monthInfo.getMonthMetrics(lastVisibleMonth);
			this.layoutPassDataMonthView()._lastDateInLastVisibleMonth = $.ig.Date.prototype.fromValues(lastVisibleMonth.getFullYear(), $.ig.Date.prototype.getMonth(lastVisibleMonth), lastVisibleMonthMetrics.totalDaysInMonth(), 0, 0, 0, 0);
			if (this.layoutPassDataMonthView()._areTrailingDaysVisible) {
				var trailingDayCount = lastVisibleMonthMetrics.trailingDayCount();
				if (this.layoutPassDataMonthView()._forceSixWeekMonth) {
					trailingDayCount += (6 - lastVisibleMonthMetrics.totalWeeks()) * 7;
				}
				this.layoutPassDataMonthView()._lastVisibleDate = $.ig.Date.prototype.addDays(this.layoutPassDataMonthView()._lastDateInLastVisibleMonth, trailingDayCount);
			} else {
				this.layoutPassDataMonthView()._lastVisibleDate = this.layoutPassDataMonthView()._lastDateInLastVisibleMonth;
			}
			var existingMonths = new $.ig.List$1($.ig.Date.prototype.$type, 0);
			if (false == visualModelMonthView.bypassLayoutOptimizationsOnNextLayoutPass()) {
				if (+($.ig.Date.prototype.getDate(this.layoutPassDataMonthView()._firstVisibleDate)) == +(visualModelMonthView.lastLayoutFirstVisibleDate()) && +($.ig.Date.prototype.getDate(this.layoutPassDataMonthView()._lastVisibleDate)) == +(visualModelMonthView.lastLayoutLastVisibleDate())) {
					return;
				}
				var monthToTest = visualModelMonthView.lastLayoutFirstVisibleMonth();
				while (true) {
					if (monthToTest >= firstMonth && monthToTest <= lastVisibleMonth) {
						existingMonths.add(monthToTest);
					}
					monthToTest = $.ig.Date.prototype.addMonths(monthToTest, 1);
					if (monthToTest > visualModelMonthView.lastLayoutLastVisibleMonth()) {
						break;
					}
				}
			}
			visualModelMonthView.lastLayoutFirstVisibleDate($.ig.Date.prototype.getDate(this.layoutPassDataMonthView()._firstVisibleDate));
			visualModelMonthView.lastLayoutLastVisibleDate($.ig.Date.prototype.getDate(this.layoutPassDataMonthView()._lastVisibleDate));
			visualModelMonthView.lastLayoutFirstVisibleMonth(firstMonth);
			visualModelMonthView.lastLayoutLastVisibleMonth(lastVisibleMonth);
			this.queryAppointmentsInCurrentDateRange(scheduler);
			this.hideNonVisibleModels(scheduler, visualModelMonthView, this.schedulerLayerController(), lastLayoutMonthInfoVersion);
			this.layoutPassDataMonthView()._lastLayoutAppopintmentFontInfo = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewAppointmentFontInfoResolved(scheduler);
			visualModelMonthView.lastLayoutDaySize(monthInfo.daySize());
			var scrollOffsetLimit = 0;
			if (this.layoutPassDataMonthView()._isScrollingVertically) {
				scrollOffsetLimit = this.layoutPassDataMonthView()._bottom;
			} else {
				scrollOffsetLimit = this.layoutPassDataMonthView()._right;
			}
			var currentMonth = firstMonth;
			while (this.layoutPassDataMonthView()._runningScrollOffset < scrollOffsetLimit && currentMonth <= visualModel.maximumDate()) {
				var cmld = $.ig.MonthViewCurrentMonthLayoutData.prototype.create(currentMonth, visualModelMonthView, scheduler, this.layoutPassDataMonthView());
				if (existingMonths.indexOf(currentMonth) < 0) {
					this.createAndPositionModelsForMonth(currentMonth, visualModelMonthView, scheduler, cmld, $.ig.util.cast($.ig.SpatialEngineMonthView.prototype.$type, spatialEngine));
				}
				this.updateRunningScrollOffset(cmld);
				currentMonth = $.ig.Date.prototype.addMonths(currentMonth, 1);
			}
		}
		finally {
			scheduler._refreshSuspended(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::CalculateOverride(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModel, Infragistics.Scheduler.Core.SpatialEngine, Infragistics.Scheduler.Core.LayoutPassData, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngineMonthView::CreateLayoutPassData()" />*/
	createLayoutPassData: function () {
		return new $.ig.LayoutPassDataMonthView();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.LayoutPassData Infragistics.Scheduler.Core.VisibilityEngineMonthView::CreateLayoutPassData()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngineMonthView::ViewMode()" />*/
	viewMode: function () {
		return $.ig.scheduler.SchedulerViewMode.monthView;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.VisibilityEngineMonthView::ViewMode()" />*/
	,
	_layoutPassDataMonthView: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.LayoutPassDataMonthView Infragistics.Scheduler.Core.VisibilityEngineMonthView::LayoutPassDataMonthView()" />*/
	layoutPassDataMonthView: function (value) {
		if (arguments.length === 1) {
			this._layoutPassDataMonthView = value;
			return value;
		} else {
			return this._layoutPassDataMonthView;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.LayoutPassDataMonthView Infragistics.Scheduler.Core.VisibilityEngineMonthView::LayoutPassDataMonthView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddHorizontalSeparatorLines(System.Boolean, System.Boolean, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	addHorizontalSeparatorLines: function (isWeekRow, isFirstWeekRow, row, scheduler, visualModelMonthView, cmld) {
		if (this.layoutPassDataMonthView()._areHorizontalSeparatorLinesVisible) {
			var horzSeparatorModel;
			var layoutItem;
			if (isWeekRow) {
				if (isFirstWeekRow) {
					horzSeparatorModel = this.prepareShapeModelForSeparatorLine(cmld._currentMonth, row, -1, cmld._separatorBrush, scheduler, visualModelMonthView, cmld._separatorLineLayer, false);
					layoutItem = $.ig.GridLayoutItem.prototype.createForItem(horzSeparatorModel).inGridLocation(row, cmld._firstDayOfWeekCol, 1, cmld._totalDayOfWeekCols);
					layoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.top);
					layoutItem.height($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(1)));
					cmld._gridLayout.layoutItems().add(layoutItem);
				}
				horzSeparatorModel = this.prepareShapeModelForSeparatorLine(cmld._currentMonth, row + 1, -1, cmld._separatorBrush, scheduler, visualModelMonthView, cmld._separatorLineLayer, false);
				layoutItem = $.ig.GridLayoutItem.prototype.createForItem(horzSeparatorModel).inGridLocation(row, cmld._firstDayOfWeekCol, 1, cmld._totalDayOfWeekCols);
				layoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.bottom);
				layoutItem.height($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(1)));
				cmld._gridLayout.layoutItems().add(layoutItem);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddHorizontalSeparatorLines(System.Boolean, System.Boolean, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddTimeSlotModels(System.Int32, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData, Infragistics.Scheduler.Core.SpatialEngineMonthView)" />*/
	addTimeSlotModels: function (row, col, scheduler, visualModelMonthView, cmld, spatialEngine) {
		var $self = this;
		var currentDate = $.ig.Date.prototype.getDate(cmld._currentDate);
		var isSelectedDay = +($.ig.Date.prototype.getDate(scheduler.selectedDate())) != +null && +currentDate == +($.ig.Date.prototype.getDate(scheduler.selectedDate()));
		var isToday = +currentDate == +($.ig.Date.prototype.getDate($.ig.Date.prototype.now()));
		var isLeadingDay = currentDate < cmld._currentMonth && this.layoutPassDataMonthView()._areLeadingDaysVisible;
		var isTrailingDay = currentDate > cmld._lastDateOfMonth && this.layoutPassDataMonthView()._areTrailingDaysVisible;
		var dayNumberSize = isLeadingDay ? spatialEngine.leadingDayNumberSize() : isTrailingDay ? spatialEngine.trailingDayNumberSize() : spatialEngine.dayNumberSize();
		var hasActivity = false;
		var appts = new $.ig.List$1($.ig.scheduler.Appointment.prototype.$type, 0);
		if (false == isLeadingDay && false == isTrailingDay) {
			hasActivity = (function () { var $ret = $self.layoutPassDataMonthView()._appointments.tryGetValue($.ig.Utilities.prototype.dictionaryKeyFromDate(currentDate), appts); appts = $ret.p1; return $ret.ret; }());
		}
		var timeSlotModel = this.prepareTimeSlotModel(currentDate, isLeadingDay, isTrailingDay, isSelectedDay, isToday, hasActivity, scheduler, visualModelMonthView, cmld._contentLayer);
		cmld._gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(timeSlotModel).inGridLocation(row, col, 1, 1));
		var isDisplayingActivityText = scheduler.monthViewDayContentDisplayMode() == $.ig.scheduler.MonthViewDayContentDisplayMode.activitySubject;
		var isDisplayingActivityIndicators = scheduler.monthViewDayContentDisplayMode() == $.ig.scheduler.MonthViewDayContentDisplayMode.squareIndicator;
		var gridLayoutTimeSlotContent = null;
		if (isDisplayingActivityIndicators) {
			var timeslotCellRect = cmld._gridLayout.getCellRect(row, col);
			var dayNumberHeight = spatialEngine.dayNumberSize().height();
			var dayNumberMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 2, 0, 2, 1));
			var dayNumberHeightWithMargin = dayNumberHeight + dayNumberMargin.top() + dayNumberMargin.bottom();
			var dayNumberAreaHeight = Math.max(dayNumberHeightWithMargin, timeslotCellRect.height() * 0.65);
			var spacerColWidth = $.ig.Utilities.prototype.toPixelUnits(4);
			var indicatorMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 1.5, 0, 1.5, 0));
			var indicatorHeight = $.ig.Utilities.prototype.toPixelUnits(6);
			var indicatorWidth = $.ig.Utilities.prototype.toPixelUnits(6);
			var indicatorHeightWithMargin = indicatorHeight + indicatorMargin.top() + indicatorMargin.bottom();
			var indicatorWidthWithMargin = indicatorWidth + indicatorMargin.left() + indicatorMargin.right();
			var indicatorAreaHeight = timeslotCellRect.height() - dayNumberAreaHeight;
			var indicatorAreaWidth = timeslotCellRect.width() - (2 * spacerColWidth);
			var indicatorSlotsNeeded = hasActivity ? Math.min(3, appts.count()) : 0;
			var indicatorRowsAvailable = Math.min(1, $.ig.truncate(Math.floor(indicatorAreaHeight / indicatorHeightWithMargin)));
			var indicatorColsAvailable = $.ig.truncate(Math.floor(indicatorAreaWidth / indicatorWidthWithMargin));
			var indicatorSlotsAvailable = indicatorRowsAvailable * indicatorColsAvailable;
			var indicatorAreaGridRowsNeeded = Math.max(1, indicatorRowsAvailable);
			var gridColsNeeded = Math.max(1, indicatorSlotsNeeded) + 2;
			gridLayoutTimeSlotContent = $.ig.GridLayout.prototype.createStarGrid($.ig.RectUtil.prototype.size(timeslotCellRect), 1 + indicatorAreaGridRowsNeeded, gridColsNeeded);
			gridLayoutTimeSlotContent.rowDefinitions().__inner[0]._height(new $.ig.GridLength(2, dayNumberAreaHeight, $.ig.GridUnitType.prototype.pixel));
			for (var i = 0; i < gridColsNeeded; i++) {
				if (i != 0 && i != gridColsNeeded - 1) {
					gridLayoutTimeSlotContent.columnDefinitions().__inner[i]._width(new $.ig.GridLength(2, indicatorWidthWithMargin, $.ig.GridUnitType.prototype.pixel));
				}
			}
			gridLayoutTimeSlotContent.recalculateGridLayoutItemRectsIfNecessary1(true);
			var dayTextModel = this.prepareTextModelForDayNumber(currentDate, isLeadingDay, isTrailingDay, isSelectedDay, isToday, scheduler, visualModelMonthView, cmld._decoratorLayer);
			dayTextModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.bottom);
			var dayTextLayoutItem = $.ig.GridLayoutItem.prototype.createForItem(dayTextModel).inGridLocation(0, 0, 1, gridColsNeeded);
			dayTextLayoutItem.width(dayNumberSize.width());
			dayTextLayoutItem.height(dayNumberSize.height());
			dayTextLayoutItem.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
			dayTextLayoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.bottom);
			dayTextLayoutItem.margin(dayNumberMargin);
			gridLayoutTimeSlotContent.layoutItems().add(dayTextLayoutItem);
			if (isToday && false == isLeadingDay && false == isTrailingDay) {
				var currentDayHighlightShapeModel = this.prepareShapeModelForTodayHighlight(currentDate, scheduler, visualModelMonthView, cmld._superContentLayer);
				currentDayHighlightShapeModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.bottom);
				var dayHighlightLayoutItem = $.ig.GridLayoutItem.prototype.createForItem(currentDayHighlightShapeModel).inGridLocation(0, 0, 1, gridColsNeeded);
				dayHighlightLayoutItem.height(dayNumberSize.width() + $.ig.Utilities.prototype.toPixelUnits(4));
				dayHighlightLayoutItem.width(dayHighlightLayoutItem.height());
				dayHighlightLayoutItem.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
				dayHighlightLayoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.bottom);
				dayHighlightLayoutItem.margin(dayNumberMargin);
				gridLayoutTimeSlotContent.layoutItems().add(dayHighlightLayoutItem);
			}
			if (hasActivity && indicatorRowsAvailable > 0) {
				var activityIndicatorShapeModel;
				var minColIndex = 1;
				var maxColIndex = gridColsNeeded - 2;
				var gridColIndex = minColIndex;
				var gridRowIndex = 1;
				var en = appts.getEnumerator();
				while (en.moveNext()) {
					var appt = en.current();
					activityIndicatorShapeModel = this.prepareShapeModelForDayActivityIndicator(currentDate, scheduler, visualModelMonthView, cmld._superContentLayer, appt);
					activityIndicatorShapeModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.top);
					var layoutItem = $.ig.GridLayoutItem.prototype.createForItem(activityIndicatorShapeModel).inGridLocation(gridRowIndex, gridColIndex, 1, 1);
					layoutItem.height(indicatorHeight);
					layoutItem.width(indicatorWidth);
					layoutItem.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
					layoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.top);
					layoutItem.margin(indicatorMargin);
					gridLayoutTimeSlotContent.layoutItems().add(layoutItem);
					gridColIndex++;
					if (gridColIndex > maxColIndex) {
						gridColIndex = minColIndex;
						gridRowIndex++;
						if (gridRowIndex >= indicatorRowsAvailable) {
							break;
						}
					}
				}
			}
		} else if (isDisplayingActivityText) {
			var timeslotCellRect1 = cmld._gridLayout.getCellRect(row, col);
			var dayNumberHeight1 = spatialEngine.dayNumberSize().height();
			var dayNumberMargin1 = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 4, 2, 4, 2));
			var dayNumberHeightWithMargin1 = dayNumberHeight1 + dayNumberMargin1.top() + dayNumberMargin1.bottom();
			var activityPadding = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(0, 1));
			var activityMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 3, 1, 3, 1));
			var activityHeight = spatialEngine.dayAppointmentSize().height() + activityPadding.top() + activityPadding.bottom();
			var activityHeightWithMargin = activityHeight + activityMargin.top() + activityMargin.bottom();
			var activityAreaHeight = timeslotCellRect1.height() - dayNumberHeightWithMargin1;
			var activitySlotsNeeded = hasActivity ? appts.count() : 0;
			var activitySlotsAvailable = $.ig.truncate(Math.floor(activityAreaHeight / activityHeightWithMargin));
			var activityAreaRowsNeeded = Math.max(1, activitySlotsAvailable);
			gridLayoutTimeSlotContent = $.ig.GridLayout.prototype.createStarGrid($.ig.RectUtil.prototype.size(timeslotCellRect1), 1 + activityAreaRowsNeeded, 1);
			gridLayoutTimeSlotContent.rowDefinitions().__inner[0]._height(new $.ig.GridLength(2, dayNumberHeightWithMargin1, $.ig.GridUnitType.prototype.pixel));
			gridLayoutTimeSlotContent.recalculateGridLayoutItemRectsIfNecessary1(true);
			var dayTextModel1 = this.prepareTextModelForDayNumber(currentDate, isLeadingDay, isTrailingDay, isSelectedDay, isToday, scheduler, visualModelMonthView, cmld._decoratorLayer);
			gridLayoutTimeSlotContent.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(dayTextModel1).inGridLocation(0, 0, 1, 1).withHeight(dayNumberHeight1));
			if (isToday && false == isLeadingDay && false == isTrailingDay) {
				var currentDayHighlightShapeModel1 = this.prepareShapeModelForTodayHighlight(currentDate, scheduler, visualModelMonthView, cmld._superContentLayer);
				var dayHighlightLayoutItem1 = $.ig.GridLayoutItem.prototype.createForItem(currentDayHighlightShapeModel1).inGridLocation(0, 0, 1, 1);
				dayHighlightLayoutItem1.height(dayNumberSize.width() + $.ig.Utilities.prototype.toPixelUnits(4));
				dayHighlightLayoutItem1.width(dayHighlightLayoutItem1.height());
				dayHighlightLayoutItem1.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
				dayHighlightLayoutItem1.verticalAlignment($.ig.VerticalAlignment.prototype.center);
				gridLayoutTimeSlotContent.layoutItems().add(dayHighlightLayoutItem1);
			}
			if (activitySlotsNeeded > 0 && activitySlotsAvailable > 0) {
				var currGridRow = 1;
				var slots = Math.min(activitySlotsAvailable, activitySlotsNeeded);
				for (var i1 = 0; i1 < slots; i1++) {
					var activityTextModel = this.prepareTextModelForActivity(appts.__inner[i1], currentDate, scheduler, visualModelMonthView, cmld._decoratorLayer, activityPadding);
					gridLayoutTimeSlotContent.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(activityTextModel).inGridLocation(currGridRow, 0, 1, 1).withMargins3(activityMargin).withHeight(activityHeight).withVerticalAlignment($.ig.VerticalAlignment.prototype.center));
					currGridRow++;
				}
			}
		}
		gridLayoutTimeSlotContent.recalculateGridLayoutItemRectsIfNecessary1(true);
		cmld._gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(gridLayoutTimeSlotContent).inGridLocation(row, col, 1, 1));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddTimeSlotModels(System.Int32, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData, Infragistics.Scheduler.Core.SpatialEngineMonthView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddVerticalSeparatorLines(System.Boolean, System.Boolean, System.Boolean, System.Int32, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	addVerticalSeparatorLines: function (isWeekRow, isDayOfWeekCol, isFirstDayOfWeekCol, dayOfWeek, col, scheduler, visualModelMonthView, cmld) {
		if (this.layoutPassDataMonthView()._areVerticalSeparatorLinesVisible) {
			var vertSeparatorModel;
			var layoutItem;
			if (isWeekRow && isDayOfWeekCol) {
				if (isFirstDayOfWeekCol) {
					vertSeparatorModel = this.prepareShapeModelForSeparatorLine(cmld._currentMonth, 0, dayOfWeek, cmld._separatorBrush, scheduler, visualModelMonthView, cmld._separatorLineLayer, true);
					layoutItem = $.ig.GridLayoutItem.prototype.createForItem(vertSeparatorModel).inGridLocation(cmld._firstWeekRow, col, cmld._totalWeekRows, 1);
					layoutItem.horizontalAlignment($.ig.HorizontalAlignment.prototype.left);
					layoutItem.width($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(1)));
					cmld._gridLayout.layoutItems().add(layoutItem);
				}
				vertSeparatorModel = this.prepareShapeModelForSeparatorLine(cmld._currentMonth, 0, dayOfWeek + 1, cmld._separatorBrush, scheduler, visualModelMonthView, cmld._separatorLineLayer, true);
				layoutItem = $.ig.GridLayoutItem.prototype.createForItem(vertSeparatorModel).inGridLocation(cmld._firstWeekRow, col, cmld._totalWeekRows, 1);
				layoutItem.horizontalAlignment($.ig.HorizontalAlignment.prototype.right);
				layoutItem.width($.ig.truncate($.ig.Utilities.prototype.toPixelUnits(1)));
				cmld._gridLayout.layoutItems().add(layoutItem);
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::AddVerticalSeparatorLines(System.Boolean, System.Boolean, System.Boolean, System.Int32, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.VisibilityEngineMonthView::AdjustModelDateForLeadingAndTrailingDays(Infragistics.Scheduler.Core.ModelPath, System.DateTime)" />*/
	adjustModelDateForLeadingAndTrailingDays: function (modelPath, modelDate) {
		if (modelPath.isLeadingDay()) {
			return $.ig.Date.prototype.addDays(modelDate, 7);
		} else if (modelPath.isTrailingDay()) {
			return $.ig.Date.prototype.addDays(modelDate, -7);
		} else {
			return modelDate;
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.VisibilityEngineMonthView::AdjustModelDateForLeadingAndTrailingDays(Infragistics.Scheduler.Core.ModelPath, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::CreateAndPositionModelsForMonth(System.DateTime, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData, Infragistics.Scheduler.Core.SpatialEngineMonthView)" />*/
	createAndPositionModelsForMonth: function (currentMonth, visualModelMonthView, scheduler, cmld, spatialEngine) {
		for (var row = 0; row < cmld._totalRows; row++) {
			if (false == this.layoutPassDataMonthView()._areTrailingDaysVisible && cmld._currentDate > cmld._lastDateToDisplay) {
				break;
			}
			var isMonthNameRow = row == 0;
			var isDayOfWeekHeaderRow = (true == this.layoutPassDataMonthView()._areDayOfWeekHeadersVisible) && (row == 1);
			var isFirstWeekRow = row == cmld._firstWeekRow;
			var isLastWeekRow = row == (cmld._totalRows - 1);
			var isWeekRow = row >= cmld._firstWeekRow;
			this.addHorizontalSeparatorLines(isWeekRow, isFirstWeekRow, row, scheduler, visualModelMonthView, cmld);
			var firstDayOfWeek = scheduler._dateTimeFormatProvider().firstDayOfWeek();
			for (var col = 0; col < cmld._totalCols; col++) {
				var isWeekNumberCol = this.layoutPassDataMonthView()._areWeekNumbersVisible && col == 0;
				var dayOfWeekCol = this.layoutPassDataMonthView()._areWeekNumbersVisible ? col - 1 : col;
				var dayOfWeek = $.ig.DayOfWeekIterator.prototype.add1(firstDayOfWeek, dayOfWeekCol);
				var isFirstDayOfWeekCol = col == cmld._firstDayOfWeekCol;
				var isDayOfWeekCol = col >= cmld._firstDayOfWeekCol;
				this.addVerticalSeparatorLines(isWeekRow, isDayOfWeekCol, isFirstDayOfWeekCol, dayOfWeek, col, scheduler, visualModelMonthView, cmld);
				if (isMonthNameRow) {
					if (col == 0 && cmld._monthInfo.monthNameAreaHeight() > 0) {
						var monthNameModel = this.prepareMonthNameModel(cmld._currentMonth, scheduler, visualModelMonthView, cmld._headerLayer);
						var monthNameLayoutItem = $.ig.GridLayoutItem.prototype.createForItem(monthNameModel).inGridLocation(row, col, 1, cmld._totalCols);
						monthNameLayoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.top);
						monthNameLayoutItem.height(spatialEngine.monthNameTextHeight());
						cmld._gridLayout.layoutItems().add(monthNameLayoutItem);
						var monthNameSeparatorModel = this.prepareShapeModelForNameHeaderSeparatorLine(cmld._currentMonth, scheduler, visualModelMonthView, cmld._headerLayer);
						var monthNameSeparatorLayoutItem = $.ig.GridLayoutItem.prototype.createForItem(monthNameSeparatorModel).inGridLocation(row, col, 1, cmld._totalCols);
						monthNameSeparatorLayoutItem.withBottomMargin(spatialEngine.monthNameSeparatorLineMarginBottom());
						monthNameSeparatorLayoutItem.height(spatialEngine.monthNameSeparatorLineHeight());
						monthNameSeparatorLayoutItem.verticalAlignment($.ig.VerticalAlignment.prototype.bottom);
						cmld._gridLayout.layoutItems().add(monthNameSeparatorLayoutItem);
					}
					col += cmld._totalCols;
					continue;
				}
				if (isDayOfWeekHeaderRow) {
					if (isWeekNumberCol) {
						continue;
					}
					var dayOfWeekHeaderModel = this.prepareDayOfWeekHeaderModel(cmld._currentMonth, dayOfWeek, cmld._dayOfWeekNames, scheduler, visualModelMonthView, cmld._headerLayer);
					cmld._gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(dayOfWeekHeaderModel).inGridLocation(row, col, 1, 1));
				} else {
					if (isWeekNumberCol) {
						var weekNumberCellRect = cmld._gridLayout.getCellRect(row, col);
						var weekNumberModel = this.prepareMonthWeekNumberModel(cmld._currentMonth, cmld._weekNumber, scheduler, visualModelMonthView, cmld._headerLayer, weekNumberCellRect.width(), weekNumberCellRect.height());
						cmld._gridLayout.layoutItems().add($.ig.GridLayoutItem.prototype.createForItem(weekNumberModel).inGridLocation(row, col, 1, 1));
						cmld._weekNumber++;
						continue;
					}
					if (isFirstWeekRow && col < cmld._firstDayOfMonthCol && false == this.layoutPassDataMonthView()._areLeadingDaysVisible) {
						continue;
					}
					this.addTimeSlotModels(row, col, scheduler, visualModelMonthView, cmld, spatialEngine);
					cmld._currentDate = $.ig.Date.prototype.addDays(cmld._currentDate, 1);
					if (false == this.layoutPassDataMonthView()._areTrailingDaysVisible) {
						if (cmld._currentDate > cmld._lastDateToDisplay) {
							break;
						}
					}
				}
			}
		}
		cmld._gridLayout.recalculateGridLayoutItemRectsIfNecessary1(true);
		var gridLayoutOverallRect;
		if (cmld._isScrollingVertically) {
			gridLayoutOverallRect = new $.ig.Rect(1, 0, cmld._monthTop, cmld._gridLayout.constraint());
		} else {
			gridLayoutOverallRect = new $.ig.Rect(1, cmld._monthLeft, 0, cmld._gridLayout.constraint());
		}
		this.processGridLayout(cmld._gridLayout, gridLayoutOverallRect, scheduler, visualModelMonthView);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::CreateAndPositionModelsForMonth(System.DateTime, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData, Infragistics.Scheduler.Core.SpatialEngineMonthView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::HideNonVisibleModels(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayerController, System.Int32)" />*/
	hideNonVisibleModels: function (scheduler, visualModelMonthView, schedulerLayerController, lastLayoutMonthInfoVersion) {
		var layers = visualModelMonthView.schedulerLayers();
		var en = layers.getEnumerator();
		while (en.moveNext()) {
			var layer = en.current();
			layer.suspendCleaning(true);
			var layerKeyListCount = layer.keyList().count();
			for (var i = 0; i < layerKeyListCount; i++) {
				if (layer.removedList().__inner[i]) {
					continue;
				}
				var modelPath = layer.keyList().__inner[i];
				if (modelPath.isNonDatePath()) {
					continue;
				}
				var isVisible = true;
				if (lastLayoutMonthInfoVersion != visualModelMonthView.monthInfo().version()) {
					isVisible = false;
				} else if (modelPath.isHorzSeparatorPath() && false == this.layoutPassDataMonthView()._areHorizontalSeparatorLinesVisible) {
					isVisible = false;
				} else if (modelPath.isVertSeparatorPath() && false == this.layoutPassDataMonthView()._areVerticalSeparatorLinesVisible) {
					isVisible = false;
				} else if (modelPath.isLeadingDay() && false == this.layoutPassDataMonthView()._areLeadingDaysVisible) {
					isVisible = false;
				} else if (modelPath.isTrailingDay() && false == this.layoutPassDataMonthView()._areTrailingDaysVisible) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.weekNumber && false == this.layoutPassDataMonthView()._areWeekNumbersVisible) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.header && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader && false == this.layoutPassDataMonthView()._areDayOfWeekHeadersVisible) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.header && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader && scheduler.monthViewNameVisibility() == $.ig.Visibility.prototype.collapsed) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.shape && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewMonthHeaderHorizontalSeparator && scheduler.monthViewNameVisibility() == $.ig.Visibility.prototype.collapsed) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.text && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment && scheduler.monthViewDayContentDisplayMode() != $.ig.scheduler.MonthViewDayContentDisplayMode.activitySubject) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.text && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment && false == $.ig.Utilities.prototype.fontInfosAreEqual($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewAppointmentFontInfoResolved(scheduler), this.layoutPassDataMonthView()._lastLayoutAppopintmentFontInfo)) {
					isVisible = false;
				} else if (modelPath.modelType() == $.ig.ModelType.prototype.shape && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator && scheduler.monthViewDayContentDisplayMode() != $.ig.scheduler.MonthViewDayContentDisplayMode.squareIndicator) {
					isVisible = false;
				}
				if (isVisible) {
					var appt = modelPath.appointmentResolved();
					if (null != modelPath.appointment() && null == modelPath.appointmentResolved()) {
						isVisible = false;
					} else if (null != appt) {
						if (null == appt._dataSource() || appt._dataSource() != scheduler.dataSource()) {
							isVisible = false;
						}
					}
				}
				if (isVisible) {
					if (null != modelPath.appointmentResolved() && $.ig.Size.prototype.l_op_Inequality(visualModelMonthView.lastLayoutDaySize(), visualModelMonthView.monthInfo().daySize())) {
						isVisible = false;
					}
				}
				if (isVisible) {
					var modelDate;
					if (modelPath.day() == 0) {
						modelDate = $.ig.Date.prototype.fromValues(modelPath.year(), modelPath.month(), 1, 0, 0, 0, 0);
					} else {
						modelDate = $.ig.Date.prototype.fromValues(modelPath.year(), modelPath.month(), modelPath.day(), 0, 0, 0, 0);
					}
					modelDate = this.adjustModelDateForLeadingAndTrailingDays(modelPath, modelDate);
					if (modelDate < this.layoutPassDataMonthView()._firstVisibleDate) {
						isVisible = false;
					} else if (modelDate > this.layoutPassDataMonthView()._lastVisibleDate) {
						isVisible = false;
					} else if (false == modelPath.isLeadingDay() && false == modelPath.isTrailingDay() && (modelDate > this.layoutPassDataMonthView()._lastDateInLastVisibleMonth || modelDate < visualModelMonthView.firstVisibleMonth())) {
						isVisible = false;
					} else if (modelPath.isMonthPath() || modelPath.isWeekPath() || modelPath.isDayOfWeekPath()) {
						isVisible = modelDate <= visualModelMonthView.lastVisibleMonth();
					} else if (modelPath.modelType() == $.ig.ModelType.prototype.shape && modelPath.role() == $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator) {
						if (null != this.layoutPassDataMonthView()._appointments && this.layoutPassDataMonthView()._appointments.count() > 0) {
							if (false == this.layoutPassDataMonthView()._appointments.containsKey($.ig.Utilities.prototype.dictionaryKeyFromDate(modelDate))) {
								isVisible = false;
							}
						} else {
							isVisible = false;
						}
					}
				}
				if (false == isVisible) {
					schedulerLayerController.removeModel(modelPath, visualModelMonthView);
				} else {
				}
			}
			layer.suspendCleaning(false);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::HideNonVisibleModels(Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayerController, System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareDayOfWeekHeaderModel(System.DateTime, System.Int32, , Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareDayOfWeekHeaderModel: function (currentMonth, dayOfWeek, dayOfWeekNames, scheduler, visualModelMonthView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewDayOfWeekHeader;
		var reuseValue = dayOfWeek;
		var dayOfWeekHeaderPath = new $.ig.ModelPath(6, $.ig.ModelType.prototype.header, role, currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth), dayOfWeek);
		var model = $.ig.util.cast($.ig.DayOfWeekHeaderModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, dayOfWeekHeaderPath, desiredLayer, $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_KEY, reuseValue));
		model.text(dayOfWeekNames[dayOfWeek].toUpperCase());
		model.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		model.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayOfWeekHeaderBackgroundBrushResolved(scheduler));
		model.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayOfWeekHeaderTextBrushResolved(scheduler));
		model.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayOfWeekHeaderFontInfoResolved(scheduler));
		model.role(role);
		model.reuseValue(reuseValue);
		return model;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareDayOfWeekHeaderModel(System.DateTime, System.Int32, , Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthNameModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareMonthNameModel(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareMonthNameModel: function (currentMonth, scheduler, visualModelMonthView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewMonthHeader;
		var reuseValue = null;
		var monthNamePath = new $.ig.ModelPath(2, $.ig.ModelType.prototype.header, role, currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth));
		var monthNameModel = $.ig.util.cast($.ig.MonthNameModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, monthNamePath, desiredLayer, $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_KEY, reuseValue));
		monthNameModel.text(visualModelMonthView.monthInfo().getFormattedYearMonth(currentMonth));
		monthNameModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameFontInfoResolved(scheduler));
		monthNameModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		monthNameModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.top);
		var margin = $.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameMarginResolved(scheduler);
		monthNameModel.paddingLeft($.ig.truncate(margin.left()));
		monthNameModel.paddingTop($.ig.truncate(margin.top()));
		monthNameModel.paddingRight($.ig.truncate(margin.right()));
		monthNameModel.paddingBottom($.ig.truncate(margin.bottom()));
		monthNameModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameBackgroundBrushResolved(scheduler));
		monthNameModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameTextBrushResolved(scheduler));
		monthNameModel.role(role);
		monthNameModel.reuseValue(reuseValue);
		return monthNameModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthNameModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareMonthNameModel(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.MonthWeekNumberModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareMonthWeekNumberModel(System.DateTime, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Double, System.Double)" />*/
	prepareMonthWeekNumberModel: function (currentMonth, weekNumber, scheduler, visualModelMonthView, desiredLayer, availableWidth, availableHeight) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewWeekHeader;
		var reuseValue = weekNumber;
		var weekNumberPath = new $.ig.ModelPath(3, $.ig.ModelType.prototype.weekNumber, role, currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth), weekNumber);
		var weekNumberModel = $.ig.util.cast($.ig.MonthWeekNumberModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, weekNumberPath, desiredLayer, $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_KEY, reuseValue));
		weekNumberModel.text(weekNumber.toString());
		weekNumberModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.center);
		weekNumberModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		weekNumberModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewWeekNumberBackgroundBrushResolved(scheduler));
		weekNumberModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewWeekNumberTextBrushResolved(scheduler));
		weekNumberModel.role(role);
		weekNumberModel.reuseValue(reuseValue);
		weekNumberModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewWeekNumberFontInfoResolved(scheduler));
		return weekNumberModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.MonthWeekNumberModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareMonthWeekNumberModel(System.DateTime, System.Int32, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Double, System.Double)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForDayActivityIndicator(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Appointment)" />*/
	prepareShapeModelForDayActivityIndicator: function (currentDate, scheduler, visualModelMonthView, desiredLayer, appointment) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator;
		var reuseValue = currentDate.getDate();
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var dayActivityIndicatorShapePath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.shape, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var dayActivityIndicatorShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, dayActivityIndicatorShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		dayActivityIndicatorShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		dayActivityIndicatorShapeModel.fill(appointment._backgroundBrush());
		dayActivityIndicatorShapeModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		dayActivityIndicatorShapeModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.center);
		dayActivityIndicatorShapeModel.role(role);
		dayActivityIndicatorShapeModel.reuseValue(reuseValue);
		return dayActivityIndicatorShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForDayActivityIndicator(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, Infragistics.Scheduler.Appointment)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForNameHeaderSeparatorLine(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareShapeModelForNameHeaderSeparatorLine: function (currentMonth, scheduler, visualModelMonthView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewMonthHeaderHorizontalSeparator;
		var reuseValue = null;
		var separatorShapePath = new $.ig.ModelPath(2, $.ig.ModelType.prototype.shape, role, currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth));
		var separatorShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, separatorShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		separatorShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		separatorShapeModel.fill($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewNameSeparatorLineBrushResolved(scheduler));
		separatorShapeModel.role(role);
		separatorShapeModel.reuseValue(null);
		return separatorShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForNameHeaderSeparatorLine(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForSeparatorLine(System.DateTime, System.Int32, System.Int32, System.Windows.Media.Brush, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Boolean)" />*/
	prepareShapeModelForSeparatorLine: function (currentMonth, weekNumber, dayOfWeek, fill, scheduler, visualModelMonthView, desiredLayer, isVertical) {
		var role = isVertical ? $.ig.scheduler.SchedulerElementRole.monthViewDayVerticalSeparator : $.ig.scheduler.SchedulerElementRole.monthViewDayHorizontalSeparator;
		var reuseValue = null;
		var separatorShapePath = new $.ig.ModelPath(7, $.ig.ModelType.prototype.shape, role, currentMonth.getFullYear(), $.ig.Date.prototype.getMonth(currentMonth), dayOfWeek, weekNumber);
		var separatorShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, separatorShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		separatorShapeModel.shapeType($.ig.scheduler.ShapeType.rectangle);
		separatorShapeModel.fill(fill);
		separatorShapeModel.role(role);
		separatorShapeModel.reuseValue(null);
		return separatorShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForSeparatorLine(System.DateTime, System.Int32, System.Int32, System.Windows.Media.Brush, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForTodayHighlight(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareShapeModelForTodayHighlight: function (currentDate, scheduler, visualModelMonthView, desiredLayer) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewDayTodayIndicator;
		var reuseValue = null;
		var todayHighlightShapePath = new $.ig.ModelPath(4, $.ig.ModelType.prototype.shape, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), false, false);
		var todayHighlightShapeModel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, todayHighlightShapePath, desiredLayer, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY, reuseValue));
		todayHighlightShapeModel.shapeType($.ig.scheduler.ShapeType.ellipse);
		todayHighlightShapeModel.fill($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTodayHighlightBrushResolved(scheduler));
		todayHighlightShapeModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		todayHighlightShapeModel.role(role);
		todayHighlightShapeModel.reuseValue(reuseValue);
		return todayHighlightShapeModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ShapeModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareShapeModelForTodayHighlight(System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTextModelForActivity(Infragistics.Scheduler.Appointment, System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Windows.Thickness)" />*/
	prepareTextModelForActivity: function (appointment, currentDate, scheduler, visualModelMonthView, desiredLayer, activityInnerPadding) {
		var role = $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment;
		var reuseValue = currentDate.getDate();
		var apptForPath = appointment._isNonModifiedOccurrence() ? appointment.recurrenceRoot() : appointment;
		var activityTextPath = new $.ig.ModelPath(5, $.ig.ModelType.prototype.text, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), false, false, apptForPath, appointment.originalStart().getTime());
		var activityTextModel = $.ig.util.cast($.ig.TextModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, activityTextPath, desiredLayer, $.ig.TextModel.prototype.tEXT_MODEL_KEY, reuseValue));
		activityTextModel.text(appointment.subject());
		activityTextModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.left);
		activityTextModel.paddingLeft($.ig.truncate(activityInnerPadding.left()));
		activityTextModel.paddingTop($.ig.truncate(activityInnerPadding.top()));
		activityTextModel.paddingRight($.ig.truncate(activityInnerPadding.right()));
		activityTextModel.paddingBottom($.ig.truncate(activityInnerPadding.bottom()));
		activityTextModel.background(appointment._backgroundBrush());
		activityTextModel.textBrush(appointment._textBrush());
		activityTextModel.role(role);
		activityTextModel.reuseValue(reuseValue);
		activityTextModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewAppointmentFontInfoResolved(scheduler));
		activityTextModel.lineBreakStyle($.ig.LineBreakStyle.prototype.tailClipWithEllipsis);
		return activityTextModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTextModelForActivity(Infragistics.Scheduler.Appointment, System.DateTime, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer, System.Windows.Thickness)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTextModelForDayNumber(System.DateTime, System.Boolean, System.Boolean, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareTextModelForDayNumber: function (currentDate, isLeadingDay, isTrailingDay, isSelectedDay, isToday, scheduler, visualModelMonthView, desiredLayer) {
		var role = isLeadingDay ? $.ig.scheduler.SchedulerElementRole.monthViewDayLeading : isTrailingDay ? $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing : isToday ? $.ig.scheduler.SchedulerElementRole.monthViewDayToday : $.ig.scheduler.SchedulerElementRole.monthViewDay;
		var reuseValue = currentDate.getDate();
		var dayNumberTextPath = new $.ig.ModelPath(4, $.ig.ModelType.prototype.text, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), isLeadingDay, isTrailingDay);
		var dayNumberTextModel = $.ig.util.cast($.ig.TextModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, dayNumberTextPath, desiredLayer, $.ig.TextModel.prototype.tEXT_MODEL_KEY, reuseValue));
		dayNumberTextModel.text(currentDate.getDate().toString());
		dayNumberTextModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		dayNumberTextModel.background($.ig.Brushes.prototype.instance().transparent());
		dayNumberTextModel.role(role);
		dayNumberTextModel.reuseValue(reuseValue);
		dayNumberTextModel.isSelected(isSelectedDay);
		if (isLeadingDay) {
			dayNumberTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewLeadingDayTextBrushResolved(scheduler));
			dayNumberTextModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewLeadingDayFontInfoResolved(scheduler));
		} else if (isTrailingDay) {
			dayNumberTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTrailingDayTextBrushResolved(scheduler));
			dayNumberTextModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTrailingDayFontInfoResolved(scheduler));
		} else {
			if (isToday) {
				dayNumberTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTodayTextBrushResolved(scheduler));
			} else if (isSelectedDay) {
				dayNumberTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewSelectedDayTextBrushResolved(scheduler));
			} else {
				dayNumberTextModel.textBrush($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayTextBrushResolved(scheduler));
			}
			dayNumberTextModel.fontInfo($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayFontInfoResolved(scheduler));
		}
		return dayNumberTextModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TextModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTextModelForDayNumber(System.DateTime, System.Boolean, System.Boolean, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.TimeSlotModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTimeSlotModel(System.DateTime, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	prepareTimeSlotModel: function (currentDate, isLeadingDay, isTrailingDay, isSelectedDay, isToday, hasActivity, scheduler, visualModelMonthView, desiredLayer) {
		var role = isLeadingDay ? $.ig.scheduler.SchedulerElementRole.monthViewDayLeading : isTrailingDay ? $.ig.scheduler.SchedulerElementRole.monthViewDayTrailing : isToday ? $.ig.scheduler.SchedulerElementRole.monthViewDayToday : $.ig.scheduler.SchedulerElementRole.monthViewDay;
		var reuseValue = currentDate.getDate();
		var timeSlotPath = new $.ig.ModelPath(4, $.ig.ModelType.prototype.timeSlot, role, currentDate.getFullYear(), $.ig.Date.prototype.getMonth(currentDate), currentDate.getDate(), isLeadingDay, isTrailingDay);
		var timeSlotModel = $.ig.util.cast($.ig.TimeSlotModel.prototype.$type, this.prepareModel(scheduler, visualModelMonthView, timeSlotPath, desiredLayer, $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_KEY, reuseValue));
		timeSlotModel.verticalAlignment($.ig.scheduler.ContentVerticalAlignment.center);
		timeSlotModel.horizontalAlignment($.ig.scheduler.ContentHorizontalAlignment.center);
		timeSlotModel.start($.ig.Utilities.prototype.startOfDayFromDate(currentDate));
		timeSlotModel.end($.ig.Utilities.prototype.endOfDayFromDate(currentDate));
		timeSlotModel.hasActivity(hasActivity);
		timeSlotModel.isLeadingDay(isLeadingDay);
		timeSlotModel.isToday(isToday);
		timeSlotModel.isTrailingDay(isTrailingDay);
		timeSlotModel.isSelected((isLeadingDay || isTrailingDay) ? false : isSelectedDay);
		timeSlotModel.role(role);
		timeSlotModel.reuseValue(reuseValue);
		if (isLeadingDay) {
			timeSlotModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewLeadingDayBackgroundBrushResolved(scheduler));
		} else if (isTrailingDay) {
			timeSlotModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewTrailingDayBackgroundBrushResolved(scheduler));
		} else if (isSelectedDay) {
			timeSlotModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewSelectedDayBackgroundBrushResolved(scheduler));
		} else {
			timeSlotModel.background($.ig.SchedulerDefaultThemeInfo.prototype.getMonthViewDayBackgroundBrushResolved(scheduler));
		}
		return timeSlotModel;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.TimeSlotModel Infragistics.Scheduler.Core.VisibilityEngineMonthView::PrepareTimeSlotModel(System.DateTime, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView, Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::ProcessGridLayout(Infragistics.Layout.GridLayout, System.Windows.Rect, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	processGridLayout: function (gridLayout, overallGridLayoutRect, scheduler, visualModelMonthView) {
		var layoutItems = gridLayout.layoutItems();
		var en = layoutItems.getEnumerator();
		while (en.moveNext()) {
			var layoutItem = en.current();
			var layoutRect = layoutItem.layoutRect();
			var left = layoutRect.left() + overallGridLayoutRect.left();
			var top = layoutRect.top() + overallGridLayoutRect.top();
			if ($.ig.util.cast($.ig.GridLayout.prototype.$type, layoutItem.item()) !== null) {
				this.processGridLayout($.ig.util.cast($.ig.GridLayout.prototype.$type, layoutItem.item()), new $.ig.Rect(1, left, top, $.ig.RectUtil.prototype.size(layoutRect)), scheduler, visualModelMonthView);
				continue;
			}
			var model = $.ig.util.cast($.ig.ModelBase.prototype.$type, layoutItem.item());
			this.positionModel(model, scheduler, visualModelMonthView, left, top, layoutRect.width(), layoutRect.height());
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::ProcessGridLayout(Infragistics.Layout.GridLayout, System.Windows.Rect, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::QueryAppointmentsInCurrentDateRange(Infragistics.Scheduler.Core.Scheduler)" />*/
	queryAppointmentsInCurrentDateRange: function (scheduler) {
		this.layoutPassDataMonthView()._appointments = new $.ig.Dictionary$2(String, $.ig.List$1.prototype.$type.specialize($.ig.scheduler.Appointment.prototype.$type), 0);
		if (null != scheduler.dataSource()) {
			scheduler.dataSource()._getAppointmentsInRange2(new $.ig.scheduler.DateTimeRange(this.layoutPassDataMonthView()._firstVisibleDate, this.layoutPassDataMonthView()._lastVisibleDate), null, this.processAppointmentQueryResult.runOn(this));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::QueryAppointmentsInCurrentDateRange(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::UpdateRunningScrollOffset(Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	updateRunningScrollOffset: function (cmld) {
		this.layoutPassDataMonthView()._runningScrollOffset += cmld._currentMonthMetrics.scrollExtent();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::UpdateRunningScrollOffset(Infragistics.Scheduler.Core.MonthViewCurrentMonthLayoutData)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::UpdateVisibleMonths(System.DateTime, System.Int32, Infragistics.Scheduler.Core.MonthInfo, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	updateVisibleMonths: function (firstMonth, firstMonthScrollOffset, monthInfo, visualModel) {
		visualModel.firstVisibleMonth(firstMonth);
		visualModel.firstVisibleMonthScrollOffsetStart(firstMonthScrollOffset);
		visualModel.lastVisibleMonth(firstMonth);
		visualModel.lastVisibleMonthScrollOffsetEnd(firstMonthScrollOffset + monthInfo.getMonthMetrics(firstMonth).scrollExtent());
		visualModel.totalVisibleMonths(0);
		var scrollOffsetTemp = firstMonthScrollOffset;
		var monthTemp = firstMonth;
		var scrollOffsetLimit = 0;
		if (this.layoutPassDataMonthView()._isScrollingVertically) {
			scrollOffsetLimit = this.layoutPassDataMonthView()._bottom;
		} else {
			scrollOffsetLimit = this.layoutPassDataMonthView()._right;
		}
		while (scrollOffsetTemp < scrollOffsetLimit && monthTemp <= visualModel.maximumDate()) {
			(function ($obj) { var $value = $obj.totalVisibleMonths(); $obj.totalVisibleMonths($value + 1); return $value; }(visualModel));
			visualModel.lastVisibleMonth(monthTemp);
			visualModel.lastVisibleMonthScrollOffsetEnd(scrollOffsetTemp + monthInfo.getMonthMetrics(monthTemp).scrollExtent());
			scrollOffsetTemp = visualModel.lastVisibleMonthScrollOffsetEnd();
			monthTemp = $.ig.Date.prototype.addMonths(monthTemp, 1);
			if (monthTemp > monthInfo.maxMonth()) {
				break;
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisibilityEngineMonthView::UpdateVisibleMonths(System.DateTime, System.Int32, Infragistics.Scheduler.Core.MonthInfo, Infragistics.Scheduler.Core.VisualModelMonthView)" />*/
	,
	$type: new $.ig.Type('VisibilityEngineMonthView', $.ig.VisibilityEngine.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisibilityEngineMonthView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo" />*/

$.ig.util.defType('SchedulerDefaultThemeInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::Initialize()" />*/
	initialize: function () {
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewAppointmentFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewAppointmentFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewAppointmentFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayOfWeekHeaderFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayOfWeekHeaderFontSize));
			$ret.fontWeight("Bold");
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewNameFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewNameFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewWeekNumberFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewWeekNumberFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewLeadingDayFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewLeadingDayFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.monthViewTrailingDayFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.monthViewTrailingDayFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewDayHeaderFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewDayHeaderFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentEndTimeFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentEndTimeFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentStartTimeFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentStartTimeFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentSubjectFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentSubjectFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentLocationFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentLocationFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageFontInfo = (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontFamily($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewMessageFontName);
			$ret.fontSize($.ig.Utilities.prototype.toFontPixelUnits($.ig.SchedulerDefaultThemeInfo.prototype.agendaViewMessageFontSize));
			return $ret;
		}());
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_999999;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_BBBBBB;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSeparatorLineBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayActivityIndicatorBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_C0C0C0;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayHighlightBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_0099FF;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameSeparatorLineBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_DDDDDD;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_888888;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_888888;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_444444;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_444444;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_444444;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_444444;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_888888;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_888888;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSeparatorLineBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_EEEEEE;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderSeparatorLineBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_DDDDDD;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewBackgroundBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent;
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageTextBrush = $.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_50PctOpacity;
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 15, 6, 3, 2));
		$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 0, 0, 0, 8));
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 0, 8, 0, 8));
		$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderMargin = $.ig.Utilities.prototype.toPixelUnits1(new $.ig.Thickness(1, 15, 4, 3, 14));
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::Initialize()" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewDayBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayBackgroundBrush : scheduler.monthViewDayBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewDayTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayTextBrush : scheduler.monthViewDayTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayOfWeekHeaderBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewDayOfWeekHeaderBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderBackgroundBrush : scheduler.monthViewDayOfWeekHeaderBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayOfWeekHeaderTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewDayOfWeekHeaderTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderTextBrush : scheduler.monthViewDayOfWeekHeaderTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewNameBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewNameBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameBackgroundBrush : scheduler.monthViewNameBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewNameTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewNameTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameTextBrush : scheduler.monthViewNameTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSelectedDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewSelectedDayBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewSelectedDayBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayBackgroundBrush : scheduler.monthViewSelectedDayBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSelectedDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSelectedDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewSelectedDayTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewSelectedDayTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayTextBrush : scheduler.monthViewSelectedDayTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSelectedDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewWeekNumberBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewWeekNumberBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberBackgroundBrush : scheduler.monthViewWeekNumberBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewWeekNumberTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewWeekNumberTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberTextBrush : scheduler.monthViewWeekNumberTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewLeadingDayBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewLeadingDayBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayBackgroundBrush : scheduler.monthViewLeadingDayBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewLeadingDayTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewLeadingDayTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayTextBrush : scheduler.monthViewLeadingDayTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewTrailingDayBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewTrailingDayBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayBackgroundBrush : scheduler.monthViewTrailingDayBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewTrailingDayTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewTrailingDayTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayTextBrush : scheduler.monthViewTrailingDayTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewSeparatorLineBrushResolved: function (scheduler) {
		return null == scheduler.monthViewSeparatorLineBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewSeparatorLineBrush : scheduler.monthViewSeparatorLineBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayActivityIndicatorBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayActivityIndicatorBrushResolved: function (scheduler) {
		return null == scheduler.monthViewDayActivityIndicatorBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayActivityIndicatorBrush : scheduler.monthViewDayActivityIndicatorBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayActivityIndicatorBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTodayHighlightBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewTodayHighlightBrushResolved: function (scheduler) {
		return null == scheduler.monthViewTodayHighlightBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayHighlightBrush : scheduler.monthViewTodayHighlightBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTodayHighlightBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTodayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewTodayTextBrushResolved: function (scheduler) {
		return null == scheduler.monthViewTodayTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayTextBrush : scheduler.monthViewTodayTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTodayTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.monthViewBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewBackgroundBrush : scheduler.monthViewBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewNameSeparatorLineBrushResolved: function (scheduler) {
		return null == scheduler.monthViewNameSeparatorLineBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameSeparatorLineBrush : scheduler.monthViewNameSeparatorLineBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewDayHeaderBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewDayHeaderBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderBackgroundBrush : scheduler.agendaViewDayHeaderBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewDayHeaderTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewDayHeaderTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderTextBrush : scheduler.agendaViewDayHeaderTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentEndTimeBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentEndTimeBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeBackgroundBrush : scheduler.agendaViewAppointmentEndTimeBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentEndTimeTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentEndTimeTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeTextBrush : scheduler.agendaViewAppointmentEndTimeTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentEndTimeSelectedBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentEndTimeSelectedBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrush : scheduler.agendaViewAppointmentEndTimeSelectedBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentEndTimeSelectedTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentEndTimeSelectedTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedTextBrush : scheduler.agendaViewAppointmentEndTimeSelectedTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentStartTimeBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentStartTimeBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeBackgroundBrush : scheduler.agendaViewAppointmentStartTimeBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentStartTimeTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentStartTimeTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeTextBrush : scheduler.agendaViewAppointmentStartTimeTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentStartTimeSelectedBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentStartTimeSelectedBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrush : scheduler.agendaViewAppointmentStartTimeSelectedBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentStartTimeSelectedTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentStartTimeSelectedTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedTextBrush : scheduler.agendaViewAppointmentStartTimeSelectedTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSubjectBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSubjectBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectBackgroundBrush : scheduler.agendaViewAppointmentSubjectBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSubjectTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSubjectTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectTextBrush : scheduler.agendaViewAppointmentSubjectTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSubjectSelectedBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSubjectSelectedBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrush : scheduler.agendaViewAppointmentSubjectSelectedBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSubjectSelectedTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSubjectSelectedTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedTextBrush : scheduler.agendaViewAppointmentSubjectSelectedTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentLocationBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentLocationBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationBackgroundBrush : scheduler.agendaViewAppointmentLocationBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentLocationTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentLocationTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationTextBrush : scheduler.agendaViewAppointmentLocationTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentLocationSelectedBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentLocationSelectedBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedBackgroundBrush : scheduler.agendaViewAppointmentLocationSelectedBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationSelectedBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentLocationSelectedTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentLocationSelectedTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedTextBrush : scheduler.agendaViewAppointmentLocationSelectedTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationSelectedTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSeparatorLineBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSeparatorLineBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSeparatorLineBrush : scheduler.agendaViewAppointmentSeparatorLineBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewDayHeaderSeparatorLineBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewDayHeaderSeparatorLineBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderSeparatorLineBrush : scheduler.agendaViewDayHeaderSeparatorLineBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderSeparatorLineBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewBackgroundBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewBackgroundBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewBackgroundBrush : scheduler.agendaViewBackgroundBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewBackgroundBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewMessageTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewMessageTextBrushResolved: function (scheduler) {
		return null == scheduler.agendaViewMessageTextBrush() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageTextBrush : scheduler.agendaViewMessageTextBrush();
	}
	/*<EndMethod Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewMessageTextBrushResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewDayFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayFontInfo : scheduler.monthViewDayFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayOfWeekHeaderFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewDayOfWeekHeaderFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderFontInfo : scheduler.monthViewDayOfWeekHeaderFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewNameFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewNameFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameFontInfo : scheduler.monthViewNameFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewWeekNumberFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewWeekNumberFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberFontInfo : scheduler.monthViewWeekNumberFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewWeekNumberFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewLeadingDayFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewLeadingDayFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayFontInfo : scheduler.monthViewLeadingDayFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewLeadingDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewTrailingDayFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewTrailingDayFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayFontInfo : scheduler.monthViewTrailingDayFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewTrailingDayFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewAppointmentFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewAppointmentFontInfoResolved: function (scheduler) {
		return null == scheduler.monthViewAppointmentFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewAppointmentFontInfo : scheduler.monthViewAppointmentFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewAppointmentFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewDayHeaderFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewDayHeaderFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderFontInfo : scheduler.agendaViewDayHeaderFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentEndTimeFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentEndTimeFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeFontInfo : scheduler.agendaViewAppointmentEndTimeFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentEndTimeFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentStartTimeFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentStartTimeFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeFontInfo : scheduler.agendaViewAppointmentStartTimeFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentStartTimeFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentSubjectFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentSubjectFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectFontInfo : scheduler.agendaViewAppointmentSubjectFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentSubjectFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentLocationFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentLocationFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationFontInfo : scheduler.agendaViewAppointmentLocationFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentLocationFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewMessageFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewMessageFontInfoResolved: function (scheduler) {
		return null == scheduler.agendaViewMessageFontInfo() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageFontInfo : scheduler.agendaViewMessageFontInfo();
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewMessageFontInfoResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewNameMarginResolved: function (scheduler) {
		return null == scheduler.monthViewNameMargin() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameMargin : scheduler.monthViewNameMargin();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewNameMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getMonthViewDayOfWeekHeaderMarginResolved: function (scheduler) {
		return null == scheduler.monthViewDayOfWeekHeaderMargin() ? $.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderMargin : scheduler.monthViewDayOfWeekHeaderMargin();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetMonthViewDayOfWeekHeaderMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewAppointmentMarginResolved: function (scheduler) {
		return null == scheduler.agendaViewAppointmentMargin() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentMargin : scheduler.agendaViewAppointmentMargin();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewAppointmentMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	/*<BeginMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	getAgendaViewDayHeaderMarginResolved: function (scheduler) {
		return null == scheduler.agendaViewDayHeaderMargin() ? $.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderMargin : scheduler.agendaViewDayHeaderMargin();
	}
	/*<EndMethod Name="System.Windows.Thickness Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo::GetAgendaViewDayHeaderMarginResolved(Infragistics.Scheduler.Core.Scheduler)" />*/
	,
	$type: new $.ig.Type('SchedulerDefaultThemeInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaViewAppointmentInfo" />*/

$.ig.util.defType('AgendaViewAppointmentInfo', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	_appointment: null,
	_scrollOffset: 0,
	_inDate: new Date(),
	init1: function (initNumber, appointment, scrollOffset, inDate) {
		$.ig.ValueType.prototype.init.call(this);
		this._appointment = appointment;
		this._scrollOffset = scrollOffset;
		this._inDate = inDate;
	},
	$type: new $.ig.Type('AgendaViewAppointmentInfo', $.ig.ValueType.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaViewAppointmentInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelBase" />*/

$.ig.util.defType('ModelBase', 'Object', {
	__dirtyFields: null,
	__namedValues: null,
	init: function (modelType, modelKey) {
		this.__dirtyFields = new $.ig.Dictionary$2(String, $.ig.Boolean.prototype.$type, 0);
		this.__namedValues = null;
		this.__contentOpacity = 1;
		this.__currentLayer = null;
		this.__horizontalAlignment = $.ig.scheduler.ContentHorizontalAlignment.left;
		this.__leftOffset = 0;
		this.__leftPercentOffset = 0;
		this.__lineBreakStyle = $.ig.LineBreakStyle.prototype.$default;
		this.__opacity = 1;
		this.__originalValue = null;
		this.__paddingLeft = 0;
		this.__paddingTop = 0;
		this.__paddingRight = 0;
		this.__paddingBottom = 0;
		this.__renderValue = "";
		this.__topOffset = 0;
		this.__topPercentOffset = 0;
		this.__verticalAlignment = $.ig.scheduler.ContentVerticalAlignment.center;
		$.ig.Object.prototype.init.call(this);
		this.state($.ig.ModelStates.prototype.$new);
		this.modelType(modelType);
		this.modelKey(modelKey);
		this.reset();
		this.background($.ig.Brushes.prototype.instance().white());
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::CleanDirtyFlags()" />*/
	cleanDirtyFlags: function () {
		this.cleanDirtyFlagsOverride();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::CleanDirtyFlags()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::CleanDirtyFlagsOverride()" />*/
	cleanDirtyFlagsOverride: function () {
		this.isPositionDirty(false);
		this.isSizeDirty(false);
		this.isContentDirty(false);
		this.isLayerDirty(false);
		this.isDataDirty(false);
		this.__dirtyFields.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::CleanDirtyFlagsOverride()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.ModelBase::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if (null == $export) {
			$export = new $.ig.scheduler.ModelBaseExport();
		}
		$export.x(this.x());
		$export.y(this.y());
		$export.height(this.height());
		$export.width(this.width());
		$export.selectedStatus(this.selectedStatus());
		$export.isSelected(this.isSelected());
		$export.horizontalAlignment(this.horizontalAlignment());
		$export.verticalAlignment(this.verticalAlignment());
		$export.renderValue(this.renderValue());
		$export.virtualizationPercentage(this.virtualizationPercentage());
		$export.role(this.role());
		if (this.fontInfo() != null) {
			if (this.fontInfo().fontFamily() != null) {
				$export.fontFamily(this.fontInfo().fontFamily());
			}
			if (!$.ig.util.isNaN(this.fontInfo().fontSize())) {
				$export.fontSize(this.fontInfo().fontSize());
			}
			if (this.fontInfo().fontWeight() != null) {
				$export.fontWeight(this.fontInfo().fontWeight());
			}
			if (this.fontInfo().fontStyle() != null) {
				$export.fontStyle(this.fontInfo().fontStyle());
			}
			if (this.fontInfo().fontStretch() != null) {
				$export.fontStretch(this.fontInfo().fontStyle());
			}
		}
		return $export;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.ModelBase::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::EnsureSetterMap()" />*/
	ensureSetterMap: function () {
		if ($.ig.ModelBase.prototype.__setterMap == null) {
			$.ig.ModelBase.prototype.__setterMap = new $.ig.Dictionary$2(String, $.ig.Action$2.prototype.$type.specialize($.ig.ModelBase.prototype.$type, $.ig.Object.prototype.$type), 0);
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.xPropertyName, function (c, o) { c.x($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.yPropertyName, function (c, o) { c.y($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.contentOpacityPropertyName, function (c, o) { c.contentOpacity(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.opacityPropertyName, function (c, o) { c.opacity(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.leftOffsetPropertyName, function (c, o) { c.leftOffset(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.leftPercentOffsetPropertyName, function (c, o) { c.leftPercentOffset(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.topOffsetPropertyName, function (c, o) { c.topOffset(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.topPercentOffsetPropertyName, function (c, o) { c.topPercentOffset(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.heightPropertyName, function (c, o) { c.height($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.widthPropertyName, function (c, o) { c.width($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.modelTypePropertyName, function (c, o) { c.modelType($.ig.util.getEnumValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.rolePropertyName, function (c, o) { c.role($.ig.util.getEnumValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.lineBreakStylePropertyName, function (c, o) { c.lineBreakStyle($.ig.util.getEnumValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.horizontalAlignmentPropertyName, function (c, o) { c.horizontalAlignment($.ig.util.getEnumValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.verticalAlignmentPropertyName, function (c, o) { c.verticalAlignment($.ig.util.getEnumValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.backgroundPropertyName, function (c, o) { c.background(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.selectedBackgroundPropertyName, function (c, o) { c.selectedBackground(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.renderValuePropertyName, function (c, o) { c.renderValue(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.originalValuePropertyName, function (c, o) { c.originalValue(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.textBrushPropertyName, function (c, o) { c.textBrush(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.fontInfoPropertyName, function (c, o) { c.fontInfo(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.virtualizationPercentagePropertyName, function (c, o) { c.virtualizationPercentage(o); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.paddingLeftPropertyName, function (c, o) { c.paddingLeft($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.paddingTopPropertyName, function (c, o) { c.paddingTop($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.paddingRightPropertyName, function (c, o) { c.paddingRight($.ig.util.getValue(o)); });
			$.ig.ModelBase.prototype.__setterMap.add($.ig.ModelBase.prototype.paddingBottomPropertyName, function (c, o) { c.paddingBottom($.ig.util.getValue(o)); });
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::EnsureSetterMap()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::EnsureGetterMap()" />*/
	ensureGetterMap: function () {
		if ($.ig.ModelBase.prototype.__getterMap == null) {
			$.ig.ModelBase.prototype.__getterMap = new $.ig.Dictionary$2(String, $.ig.Func$2.prototype.$type.specialize($.ig.ModelBase.prototype.$type, $.ig.Object.prototype.$type), 0);
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.xPropertyName, function (c) { return c.x(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.yPropertyName, function (c) { return c.y(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.contentOpacityPropertyName, function (c) { return c.contentOpacity(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.opacityPropertyName, function (c) { return c.opacity(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.leftOffsetPropertyName, function (c) { return c.leftOffset(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.leftPercentOffsetPropertyName, function (c) { return c.leftPercentOffset(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.topOffsetPropertyName, function (c) { return c.topOffset(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.topPercentOffsetPropertyName, function (c) { return c.topPercentOffset(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.heightPropertyName, function (c) { return c.height(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.widthPropertyName, function (c) { return c.width(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.modelTypePropertyName, function (c) { return $.ig.ModelType.prototype.getBox(c.modelType()); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.rolePropertyName, function (c) { return $.ig.scheduler.SchedulerElementRole.prototype.getBox(c.role()); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.lineBreakStylePropertyName, function (c) { return $.ig.LineBreakStyle.prototype.getBox(c.lineBreakStyle()); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.horizontalAlignmentPropertyName, function (c) { return $.ig.scheduler.ContentHorizontalAlignment.prototype.getBox(c.horizontalAlignment()); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.verticalAlignmentPropertyName, function (c) { return $.ig.scheduler.ContentVerticalAlignment.prototype.getBox(c.verticalAlignment()); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.backgroundPropertyName, function (c) { return c.background(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.selectedBackgroundPropertyName, function (c) { return c.selectedBackground(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.renderValuePropertyName, function (c) { return c.renderValue(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.originalValuePropertyName, function (c) { return c.originalValue(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.textBrushPropertyName, function (c) { return c.textBrush(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.fontInfoPropertyName, function (c) { return c.fontInfo(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.virtualizationPercentagePropertyName, function (c) { return c.virtualizationPercentage(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.paddingLeftPropertyName, function (c) { return c.paddingLeft(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.paddingTopPropertyName, function (c) { return c.paddingTop(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.paddingRightPropertyName, function (c) { return c.paddingRight(); });
			$.ig.ModelBase.prototype.__getterMap.add($.ig.ModelBase.prototype.paddingBottomPropertyName, function (c) { return c.paddingBottom(); });
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::EnsureGetterMap()" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.ModelBase::GetNamedValue(System.String)" />*/
	getNamedValue: function (valueName) {
		if (this.namedValues().containsKey(valueName)) {
			return this.namedValues().item(valueName);
		}
		return null;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.ModelBase::GetNamedValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.ModelBase::GetPropertyValue(System.String)" />*/
	getPropertyValue: function (propertyName) {
		this.ensureGetterMap();
		if ($.ig.ModelBase.prototype.__getterMap.containsKey(propertyName)) {
			return $.ig.ModelBase.prototype.__getterMap.item(propertyName)(this);
		}
		if (this.hasNamedValue(propertyName)) {
			return this.getNamedValue(propertyName);
		}
		return null;
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.ModelBase::GetPropertyValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::HasNamedValue(System.String)" />*/
	hasNamedValue: function (valueName) {
		return this.namedValues().containsKey(valueName);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::HasNamedValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsBuiltInModelKey(System.String)" />*/
	isBuiltInModelKey: function (modelKey) {
		return modelKey.startsWith($.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsBuiltInModelKey(System.String)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsDirty(System.String)" />*/
	isDirty: function (propertyName) {
		var $self = this;
		var isDirty = false;
		if ((function () { var $ret = $self.__dirtyFields.tryGetValue(propertyName, isDirty); isDirty = $ret.p1; return $ret.ret; }())) {
			return isDirty;
		}
		return isDirty;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsDirty(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::MarkDirty(System.String)" />*/
	markDirty: function (propertyName) {
		this.__dirtyFields.item(propertyName, true);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::MarkDirty(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::OnPropertyChanged(System.String, System.Object, System.Object)" />*/
	onPropertyChanged: function (propertyName, oldValue, newValue) {
		this.markDirty(propertyName);
		this.propertyChangedOverride(propertyName, oldValue, newValue);
		if (this.owner() != null) {
			this.owner().refresh();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::OnPropertyChanged(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	propertyChangedOverride: function (propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.ModelBase.prototype.statePropertyName:
				this.isPositionDirty(true);
				this.isSizeDirty(true);
				this.isContentDirty(true);
				break;
			case $.ig.ModelBase.prototype.leftOffsetPropertyName:
			case $.ig.ModelBase.prototype.topOffsetPropertyName:
			case $.ig.ModelBase.prototype.leftPercentOffsetPropertyName:
			case $.ig.ModelBase.prototype.topPercentOffsetPropertyName:
			case $.ig.ModelBase.prototype.xPropertyName:
			case $.ig.ModelBase.prototype.yPropertyName:
				this.isPositionDirty(true);
				break;
			case $.ig.ModelBase.prototype.widthPropertyName:
			case $.ig.ModelBase.prototype.heightPropertyName:
				this.isSizeDirty(true);
				break;
			default:
				this.isContentDirty(true);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::RemoveNamedValue(System.String)" />*/
	removeNamedValue: function (valueName) {
		if (this.namedValues().containsKey(valueName)) {
			this.namedValues().remove(valueName);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::RemoveNamedValue(System.String)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::Reset()" />*/
	reset: function () {
		this.resetOverride();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::ResetOverride()" />*/
	resetOverride: function () {
		this.__dirtyFields.clear();
		if (this.namedValues() != null) {
			this.namedValues().clear();
		}
		this.isContentDirty(true);
		this.isPositionDirty(true);
		this.isSizeDirty(true);
		this.isLayerDirty(false);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::ResetOverride()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::SetNamedValue(System.String, System.Object)" />*/
	setNamedValue: function (valueName, value) {
		var oldValue = null;
		if (this.namedValues().containsKey(valueName)) {
			oldValue = this.namedValues().item(valueName);
		}
		this.namedValues().item(valueName, value);
		var changed = false;
		if (oldValue == null && value != null) {
			changed = true;
		}
		if (oldValue != null) {
			if (!oldValue.equals(value)) {
				changed = true;
			}
		}
		if (changed) {
			this.markDirty(valueName);
			this.isContentDirty(true);
			if (this.owner() != null) {
				this.owner().refresh();
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::SetNamedValue(System.String, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::SetPropertyValue(System.String, System.Object)" />*/
	setPropertyValue: function (propertyName, value) {
		this.ensureSetterMap();
		if ($.ig.ModelBase.prototype.__setterMap.containsKey(propertyName)) {
			$.ig.ModelBase.prototype.__setterMap.item(propertyName)(this, value);
		} else {
			this.setNamedValue(propertyName, value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBase::SetPropertyValue(System.String, System.Object)" />*/
	,
	_actionMananager: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.IModelActionManager Infragistics.Scheduler.Core.ModelBase::ActionMananager()" />*/
	actionMananager: function (value) {
		if (arguments.length === 1) {
			this._actionMananager = value;
			return value;
		} else {
			return this._actionMananager;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.IModelActionManager Infragistics.Scheduler.Core.ModelBase::ActionMananager()" />*/
	,
	__background: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::Background()" />*/
	background: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__background;
			this.__background = value;
			if (this.__background != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.backgroundPropertyName, oldValue, this.__background);
			}
			return value;
		} else {
			return this.__background;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::Background()" />*/
	,
	__contentOpacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::ContentOpacity()" />*/
	contentOpacity: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__contentOpacity;
			this.__contentOpacity = value;
			if (this.__contentOpacity != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.contentOpacityPropertyName, oldValue, this.__contentOpacity);
			}
			return value;
		} else {
			return this.__contentOpacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::ContentOpacity()" />*/
	,
	__currentLayer: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.ModelBase::CurrentLayer()" />*/
	currentLayer: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__currentLayer;
			this.__currentLayer = value;
			if (this.__currentLayer != oldValue) {
				this.isLayerDirty(true);
			}
			return value;
		} else {
			return this.__currentLayer;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.ModelBase::CurrentLayer()" />*/
	,
	__fontInfo: null,
	/*<BeginProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.ModelBase::FontInfo()" />*/
	fontInfo: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__fontInfo;
			this.__fontInfo = value;
			if (this.__fontInfo != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.fontInfoPropertyName, oldValue, this.__fontInfo);
			}
			return value;
		} else {
			return this.__fontInfo;
		}
	}
	/*<EndProperty Name="Infragistics.FontInfo Infragistics.Scheduler.Core.ModelBase::FontInfo()" />*/
	,
	__height: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Height()" />*/
	height: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__height;
			this.__height = value;
			if (this.__height != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.heightPropertyName, oldValue, this.__height);
			}
			return value;
		} else {
			return this.__height;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Height()" />*/
	,
	__horizontalAlignment: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment Infragistics.Scheduler.Core.ModelBase::HorizontalAlignment()" />*/
	horizontalAlignment: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__horizontalAlignment;
			this.__horizontalAlignment = value;
			if (this.__horizontalAlignment != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.horizontalAlignmentPropertyName, $.ig.scheduler.ContentHorizontalAlignment.prototype.getBox(oldValue), $.ig.scheduler.ContentHorizontalAlignment.prototype.getBox(this.__horizontalAlignment));
			}
			return value;
		} else {
			return this.__horizontalAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment Infragistics.Scheduler.Core.ModelBase::HorizontalAlignment()" />*/
	,
	_isContentDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsContentDirty()" />*/
	isContentDirty: function (value) {
		if (arguments.length === 1) {
			this._isContentDirty = value;
			return value;
		} else {
			return this._isContentDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsContentDirty()" />*/
	,
	_isDataDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsDataDirty()" />*/
	isDataDirty: function (value) {
		if (arguments.length === 1) {
			this._isDataDirty = value;
			return value;
		} else {
			return this._isDataDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsDataDirty()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsHitTestVisible()" />*/
	,
	_isLayerDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsLayerDirty()" />*/
	isLayerDirty: function (value) {
		if (arguments.length === 1) {
			this._isLayerDirty = value;
			return value;
		} else {
			return this._isLayerDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsLayerDirty()" />*/
	,
	_isPlaceholdContentNeeded: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsPlaceholdContentNeeded()" />*/
	isPlaceholdContentNeeded: function (value) {
		if (arguments.length === 1) {
			this._isPlaceholdContentNeeded = value;
			return value;
		} else {
			return this._isPlaceholdContentNeeded;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsPlaceholdContentNeeded()" />*/
	,
	_isPositionDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsPositionDirty()" />*/
	isPositionDirty: function (value) {
		if (arguments.length === 1) {
			this._isPositionDirty = value;
			return value;
		} else {
			return this._isPositionDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsPositionDirty()" />*/
	,
	__isSelected: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsSelected()" />*/
	isSelected: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__isSelected;
			this.__isSelected = value;
			if (this.__isSelected != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.isSelectedPropertyName, oldValue, this.__isSelected);
			}
			return value;
		} else {
			return this.__isSelected;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsSelected()" />*/
	,
	_isSizeDirty: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsSizeDirty()" />*/
	isSizeDirty: function (value) {
		if (arguments.length === 1) {
			this._isSizeDirty = value;
			return value;
		} else {
			return this._isSizeDirty;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBase::IsSizeDirty()" />*/
	,
	__leftOffset: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::LeftOffset()" />*/
	leftOffset: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__leftOffset;
			this.__leftOffset = value;
			if (this.__leftOffset != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.leftOffsetPropertyName, oldValue, this.__leftOffset);
			}
			return value;
		} else {
			return this.__leftOffset;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::LeftOffset()" />*/
	,
	__leftPercentOffset: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::LeftPercentOffset()" />*/
	leftPercentOffset: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__leftPercentOffset;
			this.__leftPercentOffset = value;
			if (this.__leftPercentOffset != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.leftPercentOffsetPropertyName, oldValue, this.__leftPercentOffset);
			}
			return value;
		} else {
			return this.__leftPercentOffset;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::LeftPercentOffset()" />*/
	,
	__lineBreakStyle: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.LineBreakStyle Infragistics.Scheduler.Core.ModelBase::LineBreakStyle()" />*/
	lineBreakStyle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__lineBreakStyle;
			this.__lineBreakStyle = value;
			if (this.__lineBreakStyle != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.lineBreakStylePropertyName, $.ig.LineBreakStyle.prototype.getBox(oldValue), $.ig.LineBreakStyle.prototype.getBox(this.__lineBreakStyle));
			}
			return value;
		} else {
			return this.__lineBreakStyle;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.LineBreakStyle Infragistics.Scheduler.Core.ModelBase::LineBreakStyle()" />*/
	,
	__modelKey: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBase::ModelKey()" />*/
	modelKey: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__modelKey;
			this.__modelKey = value;
			if (this.__modelKey != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.modelKeyPropertyName, oldValue, this.__modelKey);
			}
			return value;
		} else {
			return this.__modelKey;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBase::ModelKey()" />*/
	,
	__modelType: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelBase::ModelType()" />*/
	modelType: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__modelType;
			this.__modelType = value;
			if (this.__modelType != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.modelTypePropertyName, $.ig.ModelType.prototype.getBox(oldValue), $.ig.ModelType.prototype.getBox(this.__modelType));
			}
			return value;
		} else {
			return this.__modelType;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelType Infragistics.Scheduler.Core.ModelBase::ModelType()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Core.ModelBase::NamedValues()" />*/
	namedValues: function () {
		if (null == this.__namedValues) {
			this.__namedValues = new $.ig.Dictionary$2(String, $.ig.Object.prototype.$type, 0);
		}
		return this.__namedValues;
	}
	/*<EndProperty Name="System.Collections.Generic.Dictionary Infragistics.Scheduler.Core.ModelBase::NamedValues()" />*/
	,
	__opacity: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::Opacity()" />*/
	opacity: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__opacity;
			this.__opacity = value;
			if (this.__opacity != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.opacityPropertyName, oldValue, this.__opacity);
			}
			return value;
		} else {
			return this.__opacity;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::Opacity()" />*/
	,
	__originalValue: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Core.ModelBase::OriginalValue()" />*/
	originalValue: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__originalValue;
			this.__originalValue = value;
			if (this.__originalValue != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.originalValuePropertyName, oldValue, this.__originalValue);
			}
			return value;
		} else {
			return this.__originalValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Core.ModelBase::OriginalValue()" />*/
	,
	_owner: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.ModelBase::Owner()" />*/
	owner: function (value) {
		if (arguments.length === 1) {
			this._owner = value;
			return value;
		} else {
			return this._owner;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.ModelBase::Owner()" />*/
	,
	__paddingLeft: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingLeft()" />*/
	paddingLeft: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__paddingLeft;
			this.__paddingLeft = value;
			if (this.__paddingLeft != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.paddingLeftPropertyName, oldValue, this.__paddingLeft);
			}
			return value;
		} else {
			return this.__paddingLeft;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingLeft()" />*/
	,
	__paddingTop: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingTop()" />*/
	paddingTop: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__paddingTop;
			this.__paddingTop = value;
			if (this.__paddingTop != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.paddingTopPropertyName, oldValue, this.__paddingTop);
			}
			return value;
		} else {
			return this.__paddingTop;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingTop()" />*/
	,
	__paddingRight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingRight()" />*/
	paddingRight: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__paddingRight;
			this.__paddingRight = value;
			if (this.__paddingRight != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.paddingRightPropertyName, oldValue, this.__paddingRight);
			}
			return value;
		} else {
			return this.__paddingRight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingRight()" />*/
	,
	__paddingBottom: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingBottom()" />*/
	paddingBottom: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__paddingBottom;
			this.__paddingBottom = value;
			if (this.__paddingBottom != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.paddingBottomPropertyName, oldValue, this.__paddingBottom);
			}
			return value;
		} else {
			return this.__paddingBottom;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::PaddingBottom()" />*/
	,
	_path: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelPath Infragistics.Scheduler.Core.ModelBase::Path()" />*/
	path: function (value) {
		if (arguments.length === 1) {
			this._path = value;
			return value;
		} else {
			return this._path;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelPath Infragistics.Scheduler.Core.ModelBase::Path()" />*/
	,
	_presenter: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.ModelBase::Presenter()" />*/
	presenter: function (value) {
		if (arguments.length === 1) {
			this._presenter = value;
			return value;
		} else {
			return this._presenter;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.ModelBase::Presenter()" />*/
	,
	__renderValue: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBase::RenderValue()" />*/
	renderValue: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__renderValue;
			this.__renderValue = value;
			if (this.__renderValue != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.renderValuePropertyName, oldValue, this.__renderValue);
			}
			return value;
		} else {
			return this.__renderValue;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBase::RenderValue()" />*/
	,
	_reuseValue: null,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Core.ModelBase::ReuseValue()" />*/
	reuseValue: function (value) {
		if (arguments.length === 1) {
			this._reuseValue = value;
			return value;
		} else {
			return this._reuseValue;
		}
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Core.ModelBase::ReuseValue()" />*/
	,
	__role: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelBase::Role()" />*/
	role: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__role;
			this.__role = value;
			if (this.__role != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.rolePropertyName, $.ig.scheduler.SchedulerElementRole.prototype.getBox(oldValue), $.ig.scheduler.SchedulerElementRole.prototype.getBox(this.__role));
			}
			return value;
		} else {
			return this.__role;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelBase::Role()" />*/
	,
	__selectedBackground: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::SelectedBackground()" />*/
	selectedBackground: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__selectedBackground;
			this.__selectedBackground = value;
			if (this.__selectedBackground != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.selectedBackgroundPropertyName, oldValue, this.__selectedBackground);
			}
			return value;
		} else {
			return this.__selectedBackground;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::SelectedBackground()" />*/
	,
	__selectedStatus: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::SelectedStatus()" />*/
	selectedStatus: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__selectedStatus;
			this.__selectedStatus = value;
			if (this.__selectedStatus != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.selectedStatusPropertyName, oldValue, this.__selectedStatus);
			}
			return value;
		} else {
			return this.__selectedStatus;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::SelectedStatus()" />*/
	,
	__state: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelStates Infragistics.Scheduler.Core.ModelBase::State()" />*/
	state: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__state;
			this.__state = value;
			if (this.__state != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.statePropertyName, $.ig.ModelStates.prototype.getBox(oldValue), $.ig.ModelStates.prototype.getBox(this.__state));
			}
			return value;
		} else {
			return this.__state;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelStates Infragistics.Scheduler.Core.ModelBase::State()" />*/
	,
	__textBrush: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::TextBrush()" />*/
	textBrush: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__textBrush;
			this.__textBrush = value;
			if (this.__textBrush != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.textBrushPropertyName, oldValue, this.__textBrush);
			}
			return value;
		} else {
			return this.__textBrush;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ModelBase::TextBrush()" />*/
	,
	__topOffset: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::TopOffset()" />*/
	topOffset: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__topOffset;
			this.__topOffset = value;
			if (this.__topOffset != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.topOffsetPropertyName, oldValue, this.__topOffset);
			}
			return value;
		} else {
			return this.__topOffset;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::TopOffset()" />*/
	,
	__topPercentOffset: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::TopPercentOffset()" />*/
	topPercentOffset: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__topPercentOffset;
			this.__topPercentOffset = value;
			if (this.__topPercentOffset != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.topPercentOffsetPropertyName, oldValue, this.__topPercentOffset);
			}
			return value;
		} else {
			return this.__topPercentOffset;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::TopPercentOffset()" />*/
	,
	__verticalAlignment: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ContentVerticalAlignment Infragistics.Scheduler.Core.ModelBase::VerticalAlignment()" />*/
	verticalAlignment: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__verticalAlignment;
			this.__verticalAlignment = value;
			if (this.__verticalAlignment != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.verticalAlignmentPropertyName, $.ig.scheduler.ContentVerticalAlignment.prototype.getBox(oldValue), $.ig.scheduler.ContentVerticalAlignment.prototype.getBox(this.__verticalAlignment));
			}
			return value;
		} else {
			return this.__verticalAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ContentVerticalAlignment Infragistics.Scheduler.Core.ModelBase::VerticalAlignment()" />*/
	,
	__virtualizationPercentage: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::VirtualizationPercentage()" />*/
	virtualizationPercentage: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__virtualizationPercentage;
			this.__virtualizationPercentage = value;
			if (this.__virtualizationPercentage != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.virtualizationPercentagePropertyName, oldValue, this.__virtualizationPercentage);
			}
			return value;
		} else {
			return this.__virtualizationPercentage;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBase::VirtualizationPercentage()" />*/
	,
	__width: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__width;
			this.__width = value;
			if (this.__width != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.widthPropertyName, oldValue, this.__width);
			}
			return value;
		} else {
			return this.__width;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Width()" />*/
	,
	__x: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::X()" />*/
	x: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__x;
			this.__x = value;
			if (this.__x != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.xPropertyName, oldValue, this.__x);
			}
			return value;
		} else {
			return this.__x;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::X()" />*/
	,
	__y: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Y()" />*/
	y: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__y;
			this.__y = value;
			if (this.__y != oldValue) {
				this.onPropertyChanged($.ig.ModelBase.prototype.yPropertyName, oldValue, this.__y);
			}
			return value;
		} else {
			return this.__y;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ModelBase::Y()" />*/
	,
	_zVersion: 0,
	/*<BeginProperty Name="System.Int64 Infragistics.Scheduler.Core.ModelBase::ZVersion()" />*/
	zVersion: function (value) {
		if (arguments.length === 1) {
			this._zVersion = value;
			return value;
		} else {
			return this._zVersion;
		}
	}
	/*<EndProperty Name="System.Int64 Infragistics.Scheduler.Core.ModelBase::ZVersion()" />*/
	,
	$type: new $.ig.Type('ModelBase', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextModel" />*/

$.ig.util.defType('TextModel', 'ModelBase', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__text = "";
		$.ig.ModelBase.prototype.init.call(this, $.ig.TextModel.prototype.tEXT_MODEL_TYPE, $.ig.TextModel.prototype.tEXT_MODEL_KEY);
	},
	init1: function (initNumber, modelType, modelKey) {
		this.__text = "";
		$.ig.ModelBase.prototype.init.call(this, modelType, modelKey);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.TextModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.TextModelExport();
		}
		$export = $.ig.ModelBase.prototype.createModelExport.call(this, $export);
		var textModelExport = $export;
		textModelExport.text(this.text());
		return textModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.TextModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.TextModel::GetPropertyValue(System.String)" />*/
	getPropertyValue: function (propertyName) {
		if (propertyName == $.ig.TextModel.prototype.textPropertyName) {
			return this.text();
		}
		return $.ig.ModelBase.prototype.getPropertyValue.call(this, propertyName);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.TextModel::GetPropertyValue(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TextModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		switch (this.role()) {
			case $.ig.scheduler.SchedulerElementRole.agendaViewMessage:
			case $.ig.scheduler.SchedulerElementRole.monthViewDayAppointment:
				return true;
		}
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TextModel::IsHitTestVisible()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextModel::SetPropertyValue(System.String, System.Object)" />*/
	setPropertyValue: function (propertyName, value) {
		$.ig.ModelBase.prototype.setPropertyValue.call(this, propertyName, value);
		if (propertyName == $.ig.TextModel.prototype.textPropertyName) {
			this.text(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextModel::SetPropertyValue(System.String, System.Object)" />*/
	,
	__text: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.TextModel::Text()" />*/
	text: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__text;
			this.__text = value;
			if (this.__text != oldValue) {
				this.onPropertyChanged($.ig.TextModel.prototype.textPropertyName, oldValue, this.__text);
			}
			return value;
		} else {
			return this.__text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.TextModel::Text()" />*/
	,
	$type: new $.ig.Type('TextModel', $.ig.ModelBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel" />*/

$.ig.util.defType('AgendaDayHeaderModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_TYPE, $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaDayHeaderModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.AgendaDayHeaderModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var agendaDayHeaderModelExport = $export;
		return agendaDayHeaderModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaDayHeaderModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.AgendaDayHeaderModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.AgendaDayHeaderModel::IsHitTestVisible()" />*/
	,
	$type: new $.ig.Type('AgendaDayHeaderModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelBaseExport" />*/

$.ig.scheduler.ModelBaseExport = $.ig.util.defType('scheduler.ModelBaseExport', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::Serialize()" />*/
	_serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.append5("{ ");
		sb.append5("type : \"" + this.type() + "\", ");
		sb.append5("x : " + this.x() + ", ");
		sb.append5("y : " + this.y() + ", ");
		sb.append5("height : " + this.height() + ", ");
		sb.append5("width : " + this.width() + ", ");
		sb.append5("selectedStatus : " + this.selectedStatus() + ", ");
		sb.append5("isSelected : '" + this.isSelected() + "', ");
		sb.append5("virtualizationPercentage : " + this.virtualizationPercentage() + ", ");
		sb.append5("backgroundBrushData : " + this.backgroundBrushData().serialize() + ", ");
		sb.append5("horizontalAlignment : " + this.horizontalAlignment() + ", ");
		sb.append5("verticalAlignment : " + this.verticalAlignment() + ", ");
		sb.append5("role : " + this.role() + ", ");
		sb.append5("renderValue : \"" + this.renderValue() + "\", ");
		if (this.textColor() != null) {
			sb.append5("textColor : " + this.textColor().serialize() + ", ");
		}
		if (!String.isNullOrEmpty(this.fontStyle())) {
			sb.append5("fontStyle : \"" + this.fontStyle() + "\", ");
		}
		if (!String.isNullOrEmpty(this.fontVariant())) {
			sb.append5("fontVariant : \"" + this.fontVariant() + "\", ");
		}
		if (!String.isNullOrEmpty(this.fontWeight())) {
			sb.append5("fontWeight : \"" + this.fontWeight() + "\", ");
		}
		if (!String.isNullOrEmpty(this.fontFamily())) {
			sb.append5("fontFamily : \"" + this.fontFamily() + "\", ");
		}
		if (!String.isNullOrEmpty(this.fontStretch())) {
			sb.append5("fontStretch : \"" + this.fontStretch() + "\", ");
		}
		if (!$.ig.util.isNaN(this.fontSize())) {
			sb.append5("fontSize : " + this.fontSize() + ", ");
		}
		this.serializeOverride(sb);
		var result = sb.toString();
		if (result.endsWith(", ", 0)) {
			result = result.substr(0, result.length - 2);
		}
		result += "} ";
		return result;
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::Serialize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ModelBaseExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ModelBaseExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	_backgroundBrushData: null,
	/*<BeginProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ModelBaseExport::BackgroundBrushData()" />*/
	backgroundBrushData: function (value) {
		if (arguments.length === 1) {
			this._backgroundBrushData = value;
			return value;
		} else {
			return this._backgroundBrushData;
		}
	}
	/*<EndProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ModelBaseExport::BackgroundBrushData()" />*/
	,
	_fontStyle: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontStyle()" />*/
	fontStyle: function (value) {
		if (arguments.length === 1) {
			this._fontStyle = value;
			return value;
		} else {
			return this._fontStyle;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontStyle()" />*/
	,
	_fontVariant: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontVariant()" />*/
	fontVariant: function (value) {
		if (arguments.length === 1) {
			this._fontVariant = value;
			return value;
		} else {
			return this._fontVariant;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontVariant()" />*/
	,
	_fontWeight: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontWeight()" />*/
	fontWeight: function (value) {
		if (arguments.length === 1) {
			this._fontWeight = value;
			return value;
		} else {
			return this._fontWeight;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontWeight()" />*/
	,
	_fontSize: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::FontSize()" />*/
	fontSize: function (value) {
		if (arguments.length === 1) {
			this._fontSize = value;
			return value;
		} else {
			return this._fontSize;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::FontSize()" />*/
	,
	_fontFamily: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontFamily()" />*/
	fontFamily: function (value) {
		if (arguments.length === 1) {
			this._fontFamily = value;
			return value;
		} else {
			return this._fontFamily;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontFamily()" />*/
	,
	_fontStretch: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontStretch()" />*/
	fontStretch: function (value) {
		if (arguments.length === 1) {
			this._fontStretch = value;
			return value;
		} else {
			return this._fontStretch;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::FontStretch()" />*/
	,
	_height: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Height()" />*/
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Height()" />*/
	,
	_horizontalAlignment: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment Infragistics.Scheduler.Core.ModelBaseExport::HorizontalAlignment()" />*/
	horizontalAlignment: function (value) {
		if (arguments.length === 1) {
			this._horizontalAlignment = value;
			return value;
		} else {
			return this._horizontalAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ContentHorizontalAlignment Infragistics.Scheduler.Core.ModelBaseExport::HorizontalAlignment()" />*/
	,
	_isSelected: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBaseExport::IsSelected()" />*/
	isSelected: function (value) {
		if (arguments.length === 1) {
			this._isSelected = value;
			return value;
		} else {
			return this._isSelected;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ModelBaseExport::IsSelected()" />*/
	,
	_renderValue: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::RenderValue()" />*/
	renderValue: function (value) {
		if (arguments.length === 1) {
			this._renderValue = value;
			return value;
		} else {
			return this._renderValue;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::RenderValue()" />*/
	,
	_role: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelBaseExport::Role()" />*/
	role: function (value) {
		if (arguments.length === 1) {
			this._role = value;
			return value;
		} else {
			return this._role;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.ModelBaseExport::Role()" />*/
	,
	_selectedStatus: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::SelectedStatus()" />*/
	selectedStatus: function (value) {
		if (arguments.length === 1) {
			this._selectedStatus = value;
			return value;
		} else {
			return this._selectedStatus;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::SelectedStatus()" />*/
	,
	_textColor: null,
	/*<BeginProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ModelBaseExport::TextColor()" />*/
	textColor: function (value) {
		if (arguments.length === 1) {
			this._textColor = value;
			return value;
		} else {
			return this._textColor;
		}
	}
	/*<EndProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ModelBaseExport::TextColor()" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::Type()" />*/
	type: function () {
		return "Model";
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ModelBaseExport::Type()" />*/
	,
	_verticalAlignment: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ContentVerticalAlignment Infragistics.Scheduler.Core.ModelBaseExport::VerticalAlignment()" />*/
	verticalAlignment: function (value) {
		if (arguments.length === 1) {
			this._verticalAlignment = value;
			return value;
		} else {
			return this._verticalAlignment;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ContentVerticalAlignment Infragistics.Scheduler.Core.ModelBaseExport::VerticalAlignment()" />*/
	,
	_virtualizationPercentage: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::VirtualizationPercentage()" />*/
	virtualizationPercentage: function (value) {
		if (arguments.length === 1) {
			this._virtualizationPercentage = value;
			return value;
		} else {
			return this._virtualizationPercentage;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::VirtualizationPercentage()" />*/
	,
	_width: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Width()" />*/
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Width()" />*/
	,
	_x: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::X()" />*/
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::X()" />*/
	,
	_y: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Y()" />*/
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.ModelBaseExport::Y()" />*/
	,
	$type: new $.ig.Type('scheduler.ModelBaseExport', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelBaseExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextModelExport" />*/

$.ig.scheduler.TextModelExport = $.ig.util.defType('scheduler.TextModelExport', 'scheduler.ModelBaseExport', {
	init: function () {
		$.ig.scheduler.ModelBaseExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TextModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.ModelBaseExport.prototype.serializeOverride.call(this, sb);
		sb.append5("text : \"" + this.text() + "\", ");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TextModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.TextModelExport::Type()" />*/
	type: function () {
		return $.ig.TextModel.prototype.tEXT_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.TextModelExport::Type()" />*/
	,
	_text: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.TextModelExport::Text()" />*/
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.TextModelExport::Text()" />*/
	,
	$type: new $.ig.Type('scheduler.TextModelExport', $.ig.scheduler.ModelBaseExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModelExport" />*/

$.ig.scheduler.AgendaDayHeaderModelExport = $.ig.util.defType('scheduler.AgendaDayHeaderModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaDayHeaderModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaDayHeaderModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.AgendaDayHeaderModelExport::Type()" />*/
	type: function () {
		return $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.AgendaDayHeaderModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.AgendaDayHeaderModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModelFactory" />*/

$.ig.util.defType('AgendaDayHeaderModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_TYPE, $.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaDayHeaderModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.AgendaDayHeaderModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaDayHeaderModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('AgendaDayHeaderModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaDayHeaderModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel" />*/

$.ig.util.defType('AgendaApptEndTimeModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_TYPE, $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptEndTimeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.AgendaApptEndTimeModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var agendaEndTimeModelExport = $export;
		return agendaEndTimeModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptEndTimeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	$type: new $.ig.Type('AgendaApptEndTimeModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport" />*/

$.ig.scheduler.AgendaApptEndTimeModelExport = $.ig.util.defType('scheduler.AgendaApptEndTimeModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport::Type()" />*/
	type: function () {
		return $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.AgendaApptEndTimeModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModelFactory" />*/

$.ig.util.defType('AgendaApptEndTimeModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_TYPE, $.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptEndTimeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.AgendaApptEndTimeModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptEndTimeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('AgendaApptEndTimeModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel" />*/

$.ig.util.defType('AgendaApptSubjectModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_TYPE, $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptSubjectModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.AgendaApptSubjectModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var monthNameModelExport = $export;
		return monthNameModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptSubjectModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	$type: new $.ig.Type('AgendaApptSubjectModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModelExport" />*/

$.ig.scheduler.AgendaApptSubjectModelExport = $.ig.util.defType('scheduler.AgendaApptSubjectModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptSubjectModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptSubjectModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptSubjectModelExport::Type()" />*/
	type: function () {
		return $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptSubjectModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.AgendaApptSubjectModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModelFactory" />*/

$.ig.util.defType('AgendaApptSubjectModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_TYPE, $.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptSubjectModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.AgendaApptSubjectModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptSubjectModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('AgendaApptSubjectModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptSubjectModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptLocationModel" />*/

$.ig.util.defType('AgendaApptLocationModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_TYPE, $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptLocationModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.AgendaApptLocationModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var monthNameModelExport = $export;
		return monthNameModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptLocationModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	$type: new $.ig.Type('AgendaApptLocationModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptLocationModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptLocationModelExport" />*/

$.ig.scheduler.AgendaApptLocationModelExport = $.ig.util.defType('scheduler.AgendaApptLocationModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptLocationModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptLocationModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptLocationModelExport::Type()" />*/
	type: function () {
		return $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptLocationModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.AgendaApptLocationModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptLocationModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptLocationModelFactory" />*/

$.ig.util.defType('AgendaApptLocationModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_TYPE, $.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptLocationModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.AgendaApptLocationModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptLocationModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('AgendaApptLocationModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptLocationModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel" />*/

$.ig.util.defType('AgendaApptStartTimeModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_TYPE, $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptStartTimeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.AgendaApptStartTimeModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var agendaStartTimeModelExport = $export;
		return agendaStartTimeModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.AgendaApptStartTimeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	$type: new $.ig.Type('AgendaApptStartTimeModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport" />*/

$.ig.scheduler.AgendaApptStartTimeModelExport = $.ig.util.defType('scheduler.AgendaApptStartTimeModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport::Type()" />*/
	type: function () {
		return $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.AgendaApptStartTimeModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModelFactory" />*/

$.ig.util.defType('AgendaApptStartTimeModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_TYPE, $.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptStartTimeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.AgendaApptStartTimeModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.AgendaApptStartTimeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('AgendaApptStartTimeModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModel" />*/

$.ig.util.defType('VisualModel', 'Object', {
	__schedulerLayers: null,
	__subContentLayer: null,
	__contentLayer: null,
	__superContentLayer: null,
	__decoratorLayer: null,
	__fixedLayer: null,
	__subHeaderLayer: null,
	__headerLayer: null,
	__headerDecoratorLayer: null,
	__superHeaderLayer: null,
	__fixedHeaderLayer: null,
	__monthInfo: null,
	__currentDate: new Date(),
	__availableWidth: 0,
	__availableHeight: 0,
	__bypassLayoutOptimizationsRefCount: 0,
	__cachedScaledFontInfos: null,
	__hiddenLayer: null,
	init: function (scheduler) {
		$.ig.Object.prototype.init.call(this);
		this.scheduler(scheduler);
		this.actualVisibleRegion($.ig.Rect.prototype.empty());
		this.__cachedScaledFontInfos = new $.ig.Dictionary$2(String, $.ig.CachedFontInfo.prototype.$type, 1, 4);
		this.updateLayerOrder();
	},
	_absoluteHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::AbsoluteHeight()" />*/
	absoluteHeight: function (value) {
		if (arguments.length === 1) {
			this._absoluteHeight = value;
			return value;
		} else {
			return this._absoluteHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::AbsoluteHeight()" />*/
	,
	_absoluteWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::AbsoluteWidth()" />*/
	absoluteWidth: function (value) {
		if (arguments.length === 1) {
			this._absoluteWidth = value;
			return value;
		} else {
			return this._absoluteWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::AbsoluteWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleBottom()" />*/
	actualVisibleBottom: function () {
		return $.ig.truncate(this.actualVisibleRegion().bottom());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleBottom()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleHeight()" />*/
	actualVisibleHeight: function () {
		return $.ig.truncate(this.actualVisibleRegion().height());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleHeight()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleLeft()" />*/
	actualVisibleLeft: function () {
		return $.ig.truncate(this.actualVisibleRegion().left());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleLeft()" />*/
	,
	_actualVisibleRegion: null,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Scheduler.Core.VisualModel::ActualVisibleRegion()" />*/
	actualVisibleRegion: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleRegion = value;
			return value;
		} else {
			return this._actualVisibleRegion;
		}
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Scheduler.Core.VisualModel::ActualVisibleRegion()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleRight()" />*/
	actualVisibleRight: function () {
		return $.ig.truncate(this.actualVisibleRegion().right());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleRight()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleTop()" />*/
	actualVisibleTop: function () {
		return $.ig.truncate(this.actualVisibleRegion().top());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleTop()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleWidth()" />*/
	actualVisibleWidth: function () {
		return $.ig.truncate(this.actualVisibleRegion().width());
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::ActualVisibleWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::AvailableWidth()" />*/
	availableWidth: function (value) {
		if (arguments.length === 1) {
			this.__availableWidth = value;
			return value;
		} else {
			return this.__availableWidth;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::AvailableWidth()" />*/
	,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::AvailableHeight()" />*/
	availableHeight: function (value) {
		if (arguments.length === 1) {
			this.__availableHeight = value;
			return value;
		} else {
			return this.__availableHeight;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModel::AvailableHeight()" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::BypassLayoutOptimizationsOnNextLayoutPass()" />*/
	bypassLayoutOptimizationsOnNextLayoutPass: function () {
		return this.bypassLayoutOptimizationsRefCount() > 0;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::BypassLayoutOptimizationsOnNextLayoutPass()" />*/
	,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::BypassLayoutOptimizationsRefCount()" />*/
	bypassLayoutOptimizationsRefCount: function (value) {
		if (arguments.length === 1) {
			this.__bypassLayoutOptimizationsRefCount = Math.max(0, value);
			return value;
		} else {
			return this.__bypassLayoutOptimizationsRefCount;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModel::BypassLayoutOptimizationsRefCount()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::ContentLayer()" />*/
	contentLayer: function () {
		if (null == this.__contentLayer) {
			this.__contentLayer = new $.ig.SchedulerLayer("ContentLayer");
		}
		return this.__contentLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::ContentLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::DecoratorLayer()" />*/
	decoratorLayer: function () {
		if (null == this.__decoratorLayer) {
			this.__decoratorLayer = new $.ig.SchedulerLayer("DecoratorLayer");
		}
		return this.__decoratorLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::DecoratorLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::FixedHeaderLayer()" />*/
	fixedHeaderLayer: function () {
		if (null == this.__fixedHeaderLayer) {
			this.__fixedHeaderLayer = new $.ig.SchedulerLayer("FixedHeaderLayer");
		}
		return this.__fixedHeaderLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::FixedHeaderLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::FixedLayer()" />*/
	fixedLayer: function () {
		if (null == this.__fixedLayer) {
			this.__fixedLayer = new $.ig.SchedulerLayer("FixedLayer");
		}
		return this.__fixedLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::FixedLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::HeaderLayer()" />*/
	headerLayer: function () {
		if (null == this.__headerLayer) {
			this.__headerLayer = new $.ig.SchedulerLayer("HeaderLayer");
		}
		return this.__headerLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::HeaderLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::HeaderDecoratorLayer()" />*/
	headerDecoratorLayer: function () {
		if (null == this.__headerDecoratorLayer) {
			this.__headerDecoratorLayer = new $.ig.SchedulerLayer("HeaderDecoratorLayer");
		}
		return this.__headerDecoratorLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::HeaderDecoratorLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.FastIterationDictionary Infragistics.Scheduler.Core.VisualModel::HiddenLayer()" />*/
	hiddenLayer: function () {
		if (null == this.__hiddenLayer) {
			this.__hiddenLayer = new $.ig.FastIterationDictionary$2($.ig.ModelPath.prototype.$type, $.ig.List$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), 0);
		}
		return this.__hiddenLayer;
	}
	/*<EndProperty Name="Infragistics.FastIterationDictionary Infragistics.Scheduler.Core.VisualModel::HiddenLayer()" />*/
	,
	_maximumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModel::MaximumDate()" />*/
	maximumDate: function (value) {
		if (arguments.length === 1) {
			this._maximumDate = value;
			return value;
		} else {
			return this._maximumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModel::MaximumDate()" />*/
	,
	_minimumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModel::MinimumDate()" />*/
	minimumDate: function (value) {
		if (arguments.length === 1) {
			this._minimumDate = value;
			return value;
		} else {
			return this._minimumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModel::MinimumDate()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.MonthInfo Infragistics.Scheduler.Core.VisualModel::MonthInfo()" />*/
	monthInfo: function () {
		if (null == this.__monthInfo) {
			var now = $.ig.Date.prototype.getDate($.ig.Date.prototype.now());
			this.__monthInfo = new $.ig.MonthInfo(this.scheduler(), now, now);
		}
		return this.__monthInfo;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.MonthInfo Infragistics.Scheduler.Core.VisualModel::MonthInfo()" />*/
	,
	_scheduler: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.VisualModel::Scheduler()" />*/
	scheduler: function (value) {
		if (arguments.length === 1) {
			this._scheduler = value;
			return value;
		} else {
			return this._scheduler;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.Scheduler Infragistics.Scheduler.Core.VisualModel::Scheduler()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModel::SchedulerLayers()" />*/
	schedulerLayers: function () {
		return this.__schedulerLayers;
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModel::SchedulerLayers()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SubContentLayer()" />*/
	subContentLayer: function () {
		if (null == this.__subContentLayer) {
			this.__subContentLayer = new $.ig.SchedulerLayer("SubContentLayer");
		}
		return this.__subContentLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SubContentLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SubHeaderLayer()" />*/
	subHeaderLayer: function () {
		if (null == this.__subHeaderLayer) {
			this.__subHeaderLayer = new $.ig.SchedulerLayer("SubHeaderLayer");
		}
		return this.__subHeaderLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SubHeaderLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SuperContentLayer()" />*/
	superContentLayer: function () {
		if (null == this.__superContentLayer) {
			this.__superContentLayer = new $.ig.SchedulerLayer("SuperContentLayer");
		}
		return this.__superContentLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SuperContentLayer()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SuperHeaderLayer()" />*/
	superHeaderLayer: function () {
		if (null == this.__superHeaderLayer) {
			this.__superHeaderLayer = new $.ig.SchedulerLayer("SuperHeaderLayer");
		}
		return this.__superHeaderLayer;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayer Infragistics.Scheduler.Core.VisualModel::SuperHeaderLayer()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::ClearCachedScaledFontInfo()" />*/
	clearCachedScaledFontInfo: function () {
		this.__cachedScaledFontInfos.clear();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::ClearCachedScaledFontInfo()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModel::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	createExportOverride: function (visualModel) {
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModel::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModel::Export()" />*/
	$export: function () {
		var $export = this.createExportOverride(this);
		$export.actualVisibleRegion(new $.ig.RectData(this.actualVisibleRegion().x(), this.actualVisibleRegion().y(), this.actualVisibleRegion().width(), this.actualVisibleRegion().height()));
		$export.absoluteWidth(this.absoluteWidth());
		$export.absoluteHeight(this.absoluteHeight());
		$export.actualVisibleTop(this.actualVisibleTop());
		$export.actualVisibleLeft(this.actualVisibleLeft());
		$export.actualVisibleHeight(this.actualVisibleHeight());
		$export.actualVisibleWidth(this.actualVisibleWidth());
		$export.minimumDate(this.minimumDate());
		$export.maximumDate(this.maximumDate());
		$export.subContentLayerExport(this.createSchedulerLayerExport(this.subContentLayer()));
		$export.contentLayerExport(this.createSchedulerLayerExport(this.contentLayer()));
		$export.superContentLayerExport(this.createSchedulerLayerExport(this.superContentLayer()));
		$export.decoratorLayerExport(this.createSchedulerLayerExport(this.decoratorLayer()));
		$export.fixedLayerExport(this.createSchedulerLayerExport(this.fixedLayer()));
		$export.subHeaderLayerExport(this.createSchedulerLayerExport(this.subHeaderLayer()));
		$export.headerLayerExport(this.createSchedulerLayerExport(this.headerLayer()));
		$export.headerDecoratorLayerExport(this.createSchedulerLayerExport(this.headerDecoratorLayer()));
		$export.superHeaderLayerExport(this.createSchedulerLayerExport(this.superHeaderLayer()));
		$export.fixedHeaderLayerExport(this.createSchedulerLayerExport(this.fixedHeaderLayer()));
		$export._updateLayerOrder();
		return $export;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModel::Export()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.VisualModel::GetAllModels(System.Boolean)" />*/
	getAllModels: function (backwards) {
		var d__ = new $.ig.VisualModel___GetAllModels__IteratorClass(-2);
		d__.___4__this = this;
		d__.___3__backwards = backwards;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.VisualModel::GetAllModels(System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.VisualModel::GetCachedScaledFontInfo(System.String, Infragistics.FontInfo, System.Double, System.Double, System.Double, System.String, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	getCachedScaledFontInfo: function (cacheKey, desiredFont, availableWidth, availableHeight, maxFontSize, text, scheduler, role) {
		var $self = this;
		var cachedFontInfo;
		if ((function () { var $ret = $self.__cachedScaledFontInfos.tryGetValue(cacheKey, cachedFontInfo); cachedFontInfo = $ret.p1; return $ret.ret; }())) {
			if ($.ig.Utilities.prototype.fontInfosAreEqual(desiredFont, cachedFontInfo._calculatedBasedOnDesiredFontInfo) && null != cachedFontInfo._calculatedFontInfo && availableWidth == cachedFontInfo._calculatedBasedOnAvailableWidth && availableHeight == cachedFontInfo._calculatedBasedOnAvailableHeight && maxFontSize == cachedFontInfo._calculatedBasedOnMaxFontSize && text == cachedFontInfo._calculatedBasedOnText) {
				return cachedFontInfo._calculatedFontInfo;
			}
		} else {
			cachedFontInfo = (function () {
				var $ret = new $.ig.CachedFontInfo();
				$ret._calculatedBasedOnDesiredFontInfo = $.ig.Utilities.prototype.fontInfoFromFontInfo(desiredFont, false);
				$ret._calculatedBasedOnAvailableWidth = availableWidth;
				$ret._calculatedBasedOnAvailableHeight = availableHeight;
				$ret._calculatedBasedOnMaxFontSize = maxFontSize;
				$ret._calculatedBasedOnText = text;
				return $ret;
			}());
			this.__cachedScaledFontInfos.add(cacheKey, cachedFontInfo);
		}
		return cachedFontInfo._calculatedFontInfo = scheduler._getLargestFontThatFits(text, desiredFont, availableWidth, availableHeight, maxFontSize, role);
	}
	/*<EndMethod Name="Infragistics.FontInfo Infragistics.Scheduler.Core.VisualModel::GetCachedScaledFontInfo(System.String, Infragistics.FontInfo, System.Double, System.Double, System.Double, System.String, Infragistics.Scheduler.Core.Scheduler, Infragistics.Scheduler.Core.SchedulerElementRole)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.VisualModel::GetHiddenModels()" />*/
	getHiddenModels: function () {
		var d__ = new $.ig.VisualModel___GetHiddenModels__IteratorClass(-2);
		d__.___4__this = this;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.VisualModel::GetHiddenModels()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentPropertyChanged: function (e) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentsChanged: function (e) {
		return true;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Windows.Point Infragistics.Scheduler.Core.VisualModel::GetScrollOffsetOfDate(Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.DateTime)" />*/
	getScrollOffsetOfDate: function (scrollDirection, date) {
		var monthMetrics = this.monthInfo().getMonthMetrics(date);
		var scrollOffset = monthMetrics.scrollOffset();
		if (scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			scrollOffset += this.monthInfo().monthNameAreaHeight();
			scrollOffset += this.monthInfo().dayOfWeekHeaderHeight();
			scrollOffset += this.monthInfo().weekHeight() * this.monthInfo().getIndexOfWeekInMonthForDate(date);
			return { __x: 0, __y: scrollOffset, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else {
			scrollOffset += this.monthInfo().weekNumberWidth();
			scrollOffset += (this.monthInfo().getDayOfWeekIndex(date.getDay()) * $.ig.truncate(this.monthInfo().daySize().width()));
			return { __x: scrollOffset, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	/*<EndMethod Name="System.Windows.Point Infragistics.Scheduler.Core.VisualModel::GetScrollOffsetOfDate(Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Windows.Point Infragistics.Scheduler.Core.VisualModel::GetScrollOffsetOfMonthContainingDate(Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.DateTime)" />*/
	getScrollOffsetOfMonthContainingDate: function (scrollDirection, date) {
		var monthMetrics = this.monthInfo().getMonthMetrics(date);
		if (scrollDirection == $.ig.scheduler.SchedulerViewScrollDirection.vertical) {
			return { __x: 0, __y: monthMetrics.scrollOffset(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else {
			return { __x: monthMetrics.scrollOffset(), __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	/*<EndMethod Name="System.Windows.Point Infragistics.Scheduler.Core.VisualModel::GetScrollOffsetOfMonthContainingDate(Infragistics.Scheduler.Core.SchedulerViewScrollDirection, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	onAppointmentPropertyChanged: function (e) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	onAppointmentsChanged: function (e) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	onDataSourceChanged: function (dataSource) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModel::CreateSchedulerLayerExport(Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	createSchedulerLayerExport: function (schedulerLayer) {
		var $export = new $.ig.scheduler.SchedulerLayerExport(schedulerLayer._name());
		var isHeader = schedulerLayer == this.headerLayer();
		var en = schedulerLayer.values().getEnumerator();
		while (en.moveNext()) {
			var model = en.current();
			$export._addModelExport(model.createModelExport(null));
		}
		return $export;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModel::CreateSchedulerLayerExport(Infragistics.Scheduler.Core.SchedulerLayer)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::Reset()" />*/
	reset: function () {
		var en = this.schedulerLayers().getEnumerator();
		while (en.moveNext()) {
			var layer = en.current();
			layer.clear();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::UpdateLayerOrder()" />*/
	updateLayerOrder: function () {
		this.__schedulerLayers = new $.ig.List$1($.ig.SchedulerLayer.prototype.$type, 0);
		this.__schedulerLayers.add(this.subContentLayer());
		this.__schedulerLayers.add(this.contentLayer());
		this.__schedulerLayers.add(this.superContentLayer());
		this.__schedulerLayers.add(this.decoratorLayer());
		this.__schedulerLayers.add(this.fixedLayer());
		this.__schedulerLayers.add(this.subHeaderLayer());
		this.__schedulerLayers.add(this.headerLayer());
		this.__schedulerLayers.add(this.headerDecoratorLayer());
		this.__schedulerLayers.add(this.superHeaderLayer());
		this.__schedulerLayers.add(this.fixedHeaderLayer());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel::UpdateLayerOrder()" />*/
	,
	$type: new $.ig.Type('VisualModel', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModelAgendaView" />*/

$.ig.util.defType('VisualModelAgendaView', 'VisualModel', {
	__agendaInfo: null,
	init: function (scheduler) {
		$.ig.VisualModel.prototype.init.call(this, scheduler);
		this.lastLayoutVisibleDays(new $.ig.List$1($.ig.Date.prototype.$type, 0));
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModelAgendaView::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	createExportOverride: function (visualModel) {
		var visualModelAgendaView = $.ig.util.cast($.ig.VisualModelAgendaView.prototype.$type, visualModel);
		$.ig.Debug.prototype.assert1(null != visualModelAgendaView, "Unexpected VisualModel type!");
		var $export = new $.ig.scheduler.VisualModelAgendaViewExport();
		if (null != visualModelAgendaView) {
			$export.firstVisibleDay(visualModelAgendaView.firstVisibleDay());
			$export.firstVisibleDayScrollOffsetStart(visualModelAgendaView.firstVisibleDayScrollOffsetStart());
			$export.lastVisibleDay(visualModelAgendaView.lastVisibleDay());
			$export.lastVisibleDayScrollOffsetEnd(visualModelAgendaView.lastVisibleDayScrollOffsetEnd());
			$export.totalVisibleDays(visualModelAgendaView.totalVisibleDays());
		}
		return $export;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModelAgendaView::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelAgendaView::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentPropertyChanged: function (e) {
		if (e.property() == $.ig.scheduler.AppointmentProperty.start || e.property() == $.ig.scheduler.AppointmentProperty.end) {
			return true;
		}
		var appointment = e.activity();
		if (appointment != null && appointment.isRecurrenceRoot()) {
			return true;
		}
		var affectedApptDateRange = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		var rangeOfVisibleAppointments = new $.ig.scheduler.DateTimeRange(this.lastLayoutFirstVisibleDay(), this.lastLayoutLastVisibleDay());
		if (+(this.lastLayoutFirstVisibleDay()) == +($.ig.Date.prototype.minValue()) || +(this.lastLayoutLastVisibleDay()) == +($.ig.Date.prototype.minValue())) {
			return true;
		}
		return affectedApptDateRange._intersectsWith(rangeOfVisibleAppointments, false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelAgendaView::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelAgendaView::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentsChanged: function (e) {
		if (null == e.affectedRange()) {
			return true;
		}
		if (+(this.lastLayoutFirstVisibleDay()) == +($.ig.Date.prototype.minValue()) || +(this.lastLayoutLastVisibleDay()) == +($.ig.Date.prototype.minValue())) {
			return true;
		}
		return e.affectedRange()._intersectsWith(this.scheduler()._agendaViewDateRangeResolved(), false);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelAgendaView::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	onAppointmentPropertyChanged: function (e) {
		this.agendaInfo().onAppointmentsChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	onAppointmentsChanged: function (e) {
		this.agendaInfo().onAppointmentsChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	onDataSourceChanged: function (dataSource) {
		$.ig.VisualModel.prototype.onDataSourceChanged.call(this, dataSource);
		this.agendaInfo().onDataSourceChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaView::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.AgendaInfo Infragistics.Scheduler.Core.VisualModelAgendaView::AgendaInfo()" />*/
	agendaInfo: function () {
		if (null == this.__agendaInfo) {
			var now = $.ig.Date.prototype.now();
			this.__agendaInfo = new $.ig.AgendaInfo(this.scheduler(), this.scheduler()._agendaViewDateRangeResolved());
		}
		return this.__agendaInfo;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.AgendaInfo Infragistics.Scheduler.Core.VisualModelAgendaView::AgendaInfo()" />*/
	,
	_agendaDateRange: null,
	/*<BeginProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.VisualModelAgendaView::AgendaDateRange()" />*/
	agendaDateRange: function (value) {
		if (arguments.length === 1) {
			this._agendaDateRange = value;
			return value;
		} else {
			return this._agendaDateRange;
		}
	}
	/*<EndProperty Name="Infragistics.DateTimeRange Infragistics.Scheduler.Core.VisualModelAgendaView::AgendaDateRange()" />*/
	,
	_firstVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::FirstVisibleDay()" />*/
	firstVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleDay = value;
			return value;
		} else {
			return this._firstVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::FirstVisibleDay()" />*/
	,
	_firstVisibleDayScrollOffsetStart: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::FirstVisibleDayScrollOffsetStart()" />*/
	firstVisibleDayScrollOffsetStart: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleDayScrollOffsetStart = value;
			return value;
		} else {
			return this._firstVisibleDayScrollOffsetStart;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::FirstVisibleDayScrollOffsetStart()" />*/
	,
	_lastLayoutAgendaInfoVersion: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutAgendaInfoVersion()" />*/
	lastLayoutAgendaInfoVersion: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutAgendaInfoVersion = value;
			return value;
		} else {
			return this._lastLayoutAgendaInfoVersion;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutAgendaInfoVersion()" />*/
	,
	_lastLayoutFirstVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutFirstVisibleDay()" />*/
	lastLayoutFirstVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutFirstVisibleDay = value;
			return value;
		} else {
			return this._lastLayoutFirstVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutFirstVisibleDay()" />*/
	,
	_lastLayoutLastVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutLastVisibleDay()" />*/
	lastLayoutLastVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutLastVisibleDay = value;
			return value;
		} else {
			return this._lastLayoutLastVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutLastVisibleDay()" />*/
	,
	_lastLayoutVisibleDays: null,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutVisibleDays()" />*/
	lastLayoutVisibleDays: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutVisibleDays = value;
			return value;
		} else {
			return this._lastLayoutVisibleDays;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModelAgendaView::LastLayoutVisibleDays()" />*/
	,
	_lastVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastVisibleDay()" />*/
	lastVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleDay = value;
			return value;
		} else {
			return this._lastVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaView::LastVisibleDay()" />*/
	,
	_lastVisibleDayScrollOffsetEnd: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::LastVisibleDayScrollOffsetEnd()" />*/
	lastVisibleDayScrollOffsetEnd: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleDayScrollOffsetEnd = value;
			return value;
		} else {
			return this._lastVisibleDayScrollOffsetEnd;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::LastVisibleDayScrollOffsetEnd()" />*/
	,
	_totalVisibleDays: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::TotalVisibleDays()" />*/
	totalVisibleDays: function (value) {
		if (arguments.length === 1) {
			this._totalVisibleDays = value;
			return value;
		} else {
			return this._totalVisibleDays;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaView::TotalVisibleDays()" />*/
	,
	$type: new $.ig.Type('VisualModelAgendaView', $.ig.VisualModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModelAgendaView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModelExport" />*/

$.ig.scheduler.VisualModelExport = $.ig.util.defType('scheduler.VisualModelExport', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.subContentLayerExport(new $.ig.scheduler.SchedulerLayerExport("SubContentLayer"));
		this.contentLayerExport(new $.ig.scheduler.SchedulerLayerExport("ContentLayer"));
		this.superContentLayerExport(new $.ig.scheduler.SchedulerLayerExport("SuperContentLayer"));
		this.decoratorLayerExport(new $.ig.scheduler.SchedulerLayerExport("DecoratorLayer"));
		this.fixedLayerExport(new $.ig.scheduler.SchedulerLayerExport("FixedLayer"));
		this.subHeaderLayerExport(new $.ig.scheduler.SchedulerLayerExport("SubHeaderLayer"));
		this.headerLayerExport(new $.ig.scheduler.SchedulerLayerExport("HeaderLayer"));
		this.headerDecoratorLayerExport(new $.ig.scheduler.SchedulerLayerExport("HeaderDecoratorLayer"));
		this.superHeaderLayerExport(new $.ig.scheduler.SchedulerLayerExport("SuperHeaderLayer"));
		this.fixedHeaderLayerExport(new $.ig.scheduler.SchedulerLayerExport("FixedHeaderLayer"));
		this._updateLayerOrder();
	},
	_absoluteHeight: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelExport::AbsoluteHeight()" />*/
	absoluteHeight: function (value) {
		if (arguments.length === 1) {
			this._absoluteHeight = value;
			return value;
		} else {
			return this._absoluteHeight;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelExport::AbsoluteHeight()" />*/
	,
	_absoluteWidth: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelExport::AbsoluteWidth()" />*/
	absoluteWidth: function (value) {
		if (arguments.length === 1) {
			this._absoluteWidth = value;
			return value;
		} else {
			return this._absoluteWidth;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelExport::AbsoluteWidth()" />*/
	,
	_actualVisibleHeight: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleHeight()" />*/
	actualVisibleHeight: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleHeight = value;
			return value;
		} else {
			return this._actualVisibleHeight;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleHeight()" />*/
	,
	_actualVisibleLeft: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleLeft()" />*/
	actualVisibleLeft: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleLeft = value;
			return value;
		} else {
			return this._actualVisibleLeft;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleLeft()" />*/
	,
	_actualVisibleRegion: null,
	/*<BeginProperty Name="Infragistics.RectData Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleRegion()" />*/
	actualVisibleRegion: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleRegion = value;
			return value;
		} else {
			return this._actualVisibleRegion;
		}
	}
	/*<EndProperty Name="Infragistics.RectData Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleRegion()" />*/
	,
	_actualVisibleRight: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleRight()" />*/
	actualVisibleRight: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleRight = value;
			return value;
		} else {
			return this._actualVisibleRight;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleRight()" />*/
	,
	_actualVisibleTop: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleTop()" />*/
	actualVisibleTop: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleTop = value;
			return value;
		} else {
			return this._actualVisibleTop;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleTop()" />*/
	,
	_actualVisibleWidth: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleWidth()" />*/
	actualVisibleWidth: function (value) {
		if (arguments.length === 1) {
			this._actualVisibleWidth = value;
			return value;
		} else {
			return this._actualVisibleWidth;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.VisualModelExport::ActualVisibleWidth()" />*/
	,
	_contentLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::ContentLayerExport()" />*/
	contentLayerExport: function (value) {
		if (arguments.length === 1) {
			this._contentLayerExport = value;
			return value;
		} else {
			return this._contentLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::ContentLayerExport()" />*/
	,
	_decoratorLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::DecoratorLayerExport()" />*/
	decoratorLayerExport: function (value) {
		if (arguments.length === 1) {
			this._decoratorLayerExport = value;
			return value;
		} else {
			return this._decoratorLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::DecoratorLayerExport()" />*/
	,
	_fixedHeaderLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::FixedHeaderLayerExport()" />*/
	fixedHeaderLayerExport: function (value) {
		if (arguments.length === 1) {
			this._fixedHeaderLayerExport = value;
			return value;
		} else {
			return this._fixedHeaderLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::FixedHeaderLayerExport()" />*/
	,
	_fixedLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::FixedLayerExport()" />*/
	fixedLayerExport: function (value) {
		if (arguments.length === 1) {
			this._fixedLayerExport = value;
			return value;
		} else {
			return this._fixedLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::FixedLayerExport()" />*/
	,
	_headerLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::HeaderLayerExport()" />*/
	headerLayerExport: function (value) {
		if (arguments.length === 1) {
			this._headerLayerExport = value;
			return value;
		} else {
			return this._headerLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::HeaderLayerExport()" />*/
	,
	_headerDecoratorLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::HeaderDecoratorLayerExport()" />*/
	headerDecoratorLayerExport: function (value) {
		if (arguments.length === 1) {
			this._headerDecoratorLayerExport = value;
			return value;
		} else {
			return this._headerDecoratorLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::HeaderDecoratorLayerExport()" />*/
	,
	_layerExports: null,
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModelExport::LayerExports()" />*/
	layerExports: function (value) {
		if (arguments.length === 1) {
			this._layerExports = value;
			return value;
		} else {
			return this._layerExports;
		}
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.VisualModelExport::LayerExports()" />*/
	,
	_minimumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelExport::MinimumDate()" />*/
	minimumDate: function (value) {
		if (arguments.length === 1) {
			this._minimumDate = value;
			return value;
		} else {
			return this._minimumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelExport::MinimumDate()" />*/
	,
	_maximumDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelExport::MaximumDate()" />*/
	maximumDate: function (value) {
		if (arguments.length === 1) {
			this._maximumDate = value;
			return value;
		} else {
			return this._maximumDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelExport::MaximumDate()" />*/
	,
	_subContentLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SubContentLayerExport()" />*/
	subContentLayerExport: function (value) {
		if (arguments.length === 1) {
			this._subContentLayerExport = value;
			return value;
		} else {
			return this._subContentLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SubContentLayerExport()" />*/
	,
	_subHeaderLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SubHeaderLayerExport()" />*/
	subHeaderLayerExport: function (value) {
		if (arguments.length === 1) {
			this._subHeaderLayerExport = value;
			return value;
		} else {
			return this._subHeaderLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SubHeaderLayerExport()" />*/
	,
	_superContentLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SuperContentLayerExport()" />*/
	superContentLayerExport: function (value) {
		if (arguments.length === 1) {
			this._superContentLayerExport = value;
			return value;
		} else {
			return this._superContentLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SuperContentLayerExport()" />*/
	,
	_superHeaderLayerExport: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SuperHeaderLayerExport()" />*/
	superHeaderLayerExport: function (value) {
		if (arguments.length === 1) {
			this._superHeaderLayerExport = value;
			return value;
		} else {
			return this._superHeaderLayerExport;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerLayerExport Infragistics.Scheduler.Core.VisualModelExport::SuperHeaderLayerExport()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.VisualModelExport::Serialize()" />*/
	_serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.append5("{");
		sb.append5("actualVisibleTop : " + this.actualVisibleTop() + ", ");
		sb.append5("actualVisibleLeft : " + this.actualVisibleLeft() + ", ");
		sb.append5("actualVisibleHeight : " + this.actualVisibleHeight() + ", ");
		sb.append5("actualVisibleWidth : " + this.actualVisibleWidth() + ", ");
		sb.append5("absoluteWidth : " + this.absoluteWidth() + ", ");
		sb.append5("absoluteHeight : " + this.absoluteHeight() + ", ");
		sb.append5("minimumDate : '" + $.ig.Date.prototype.toStringFormat(this.minimumDate(), "MM-dd-yyyy", null) + "', ");
		sb.append5("maximumDate : '" + $.ig.Date.prototype.toStringFormat(this.maximumDate(), "MM-dd-yyyy", null) + "', ");
		sb.append5("actualVisibleRegion: { left: " + this.actualVisibleRegion().left() + ", top: " + this.actualVisibleRegion().top() + ", width: " + this.actualVisibleRegion().width() + ", height: " + this.actualVisibleRegion().height() + "}, ");
		this.serializeOverride(sb);
		sb.append5("subContentLayerExport : " + this.subContentLayerExport()._serialize() + ", ");
		sb.append5("contentLayerExport : " + this.contentLayerExport()._serialize() + ", ");
		sb.append5("superContentLayerExport : " + this.superContentLayerExport()._serialize() + ", ");
		sb.append5("decoratorLayerExport : " + this.decoratorLayerExport()._serialize() + ", ");
		sb.append5("fixedLayerExport : " + this.fixedLayerExport()._serialize() + ", ");
		sb.append5("subHeaderLayerExport : " + this.subHeaderLayerExport()._serialize() + ", ");
		sb.append5("headerLayerExport : " + this.headerLayerExport()._serialize() + ", ");
		sb.append5("headerDecoratorLayerExport : " + this.headerDecoratorLayerExport()._serialize() + ", ");
		sb.append5("superHeaderLayerExport : " + this.superHeaderLayerExport()._serialize() + ", ");
		sb.append5("fixedHeaderLayerExport : " + this.fixedHeaderLayerExport()._serialize() + ", ");
		sb.append5("}");
		return sb.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.VisualModelExport::Serialize()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelExport::UpdateLayerOrder()" />*/
	_updateLayerOrder: function () {
		this.layerExports(new $.ig.List$1($.ig.scheduler.SchedulerLayerExport.prototype.$type, 0));
		this.layerExports().add(this.subContentLayerExport());
		this.layerExports().add(this.contentLayerExport());
		this.layerExports().add(this.superContentLayerExport());
		this.layerExports().add(this.decoratorLayerExport());
		this.layerExports().add(this.fixedLayerExport());
		this.layerExports().add(this.subHeaderLayerExport());
		this.layerExports().add(this.headerLayerExport());
		this.layerExports().add(this.headerDecoratorLayerExport());
		this.layerExports().add(this.superHeaderLayerExport());
		this.layerExports().add(this.fixedHeaderLayerExport());
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelExport::UpdateLayerOrder()" />*/
	,
	$type: new $.ig.Type('scheduler.VisualModelExport', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModelAgendaViewExport" />*/

$.ig.scheduler.VisualModelAgendaViewExport = $.ig.util.defType('scheduler.VisualModelAgendaViewExport', 'scheduler.VisualModelExport', {
	init: function () {
		$.ig.scheduler.VisualModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaViewExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		sb.append5("firstVisibleDay : '" + $.ig.Date.prototype.toStringFormat(this.firstVisibleDay(), "MM-dd-yyyy", null) + "', ");
		sb.append5("firstVisibleDayScrollOffsetStart : " + this.firstVisibleDayScrollOffsetStart() + ", ");
		sb.append5("lastVisibleDay : '" + $.ig.Date.prototype.toStringFormat(this.lastVisibleDay(), "MM-dd-yyyy", null) + "', ");
		sb.append5("lastVisibleDayScrollOffsetEnd : " + this.lastVisibleDayScrollOffsetEnd() + ", ");
		sb.append5("totalVisibleDays : " + this.totalVisibleDays() + ", ");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelAgendaViewExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	_firstVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaViewExport::FirstVisibleDay()" />*/
	firstVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleDay = value;
			return value;
		} else {
			return this._firstVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaViewExport::FirstVisibleDay()" />*/
	,
	_firstVisibleDayScrollOffsetStart: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::FirstVisibleDayScrollOffsetStart()" />*/
	firstVisibleDayScrollOffsetStart: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleDayScrollOffsetStart = value;
			return value;
		} else {
			return this._firstVisibleDayScrollOffsetStart;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::FirstVisibleDayScrollOffsetStart()" />*/
	,
	_lastVisibleDay: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaViewExport::LastVisibleDay()" />*/
	lastVisibleDay: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleDay = value;
			return value;
		} else {
			return this._lastVisibleDay;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelAgendaViewExport::LastVisibleDay()" />*/
	,
	_lastVisibleDayScrollOffsetEnd: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::LastVisibleDayScrollOffsetEnd()" />*/
	lastVisibleDayScrollOffsetEnd: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleDayScrollOffsetEnd = value;
			return value;
		} else {
			return this._lastVisibleDayScrollOffsetEnd;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::LastVisibleDayScrollOffsetEnd()" />*/
	,
	_totalVisibleDays: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::TotalVisibleDays()" />*/
	totalVisibleDays: function (value) {
		if (arguments.length === 1) {
			this._totalVisibleDays = value;
			return value;
		} else {
			return this._totalVisibleDays;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelAgendaViewExport::TotalVisibleDays()" />*/
	,
	$type: new $.ig.Type('scheduler.VisualModelAgendaViewExport', $.ig.scheduler.VisualModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModelAgendaViewExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TimeSlotModelExport" />*/

$.ig.scheduler.TimeSlotModelExport = $.ig.util.defType('scheduler.TimeSlotModelExport', 'scheduler.ModelBaseExport', {
	init: function () {
		$.ig.scheduler.ModelBaseExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.ModelBaseExport.prototype.serializeOverride.call(this, sb);
		sb.append5("end : '" + $.ig.Date.prototype.toStringFormat(this.end(), "s", null) + "', ");
		sb.append5("hasActivity : '" + this.hasActivity() + "', ");
		sb.append5("isLeadingDay : '" + this.isLeadingDay() + "', ");
		sb.append5("isToday : '" + this.isToday() + "', ");
		sb.append5("isTrailingDay : '" + this.isTrailingDay() + "', ");
		sb.append5("start : '" + $.ig.Date.prototype.toStringFormat(this.start(), "s", null) + "', ");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.TimeSlotModelExport::Type()" />*/
	type: function () {
		return $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.TimeSlotModelExport::Type()" />*/
	,
	_end: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModelExport::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this._end = value;
			return value;
		} else {
			return this._end;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModelExport::End()" />*/
	,
	_hasActivity: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::HasActivity()" />*/
	hasActivity: function (value) {
		if (arguments.length === 1) {
			this._hasActivity = value;
			return value;
		} else {
			return this._hasActivity;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::HasActivity()" />*/
	,
	_isLeadingDay: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsLeadingDay()" />*/
	isLeadingDay: function (value) {
		if (arguments.length === 1) {
			this._isLeadingDay = value;
			return value;
		} else {
			return this._isLeadingDay;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsLeadingDay()" />*/
	,
	_isToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsToday()" />*/
	isToday: function (value) {
		if (arguments.length === 1) {
			this._isToday = value;
			return value;
		} else {
			return this._isToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsToday()" />*/
	,
	_isTrailingDay: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsTrailingDay()" />*/
	isTrailingDay: function (value) {
		if (arguments.length === 1) {
			this._isTrailingDay = value;
			return value;
		} else {
			return this._isTrailingDay;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModelExport::IsTrailingDay()" />*/
	,
	_start: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModelExport::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this._start = value;
			return value;
		} else {
			return this._start;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModelExport::Start()" />*/
	,
	$type: new $.ig.Type('scheduler.TimeSlotModelExport', $.ig.scheduler.ModelBaseExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TimeSlotModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport" />*/

$.ig.scheduler.DayOfWeekHeaderModelExport = $.ig.util.defType('scheduler.DayOfWeekHeaderModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport::Type()" />*/
	type: function () {
		return $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.DayOfWeekHeaderModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthNameModelExport" />*/

$.ig.scheduler.MonthNameModelExport = $.ig.util.defType('scheduler.MonthNameModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthNameModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthNameModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.MonthNameModelExport::Type()" />*/
	type: function () {
		return $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.MonthNameModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.MonthNameModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthNameModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthWeekNumberModelExport" />*/

$.ig.scheduler.MonthWeekNumberModelExport = $.ig.util.defType('scheduler.MonthWeekNumberModelExport', 'scheduler.TextModelExport', {
	init: function () {
		$.ig.scheduler.TextModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.MonthWeekNumberModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.TextModelExport.prototype.serializeOverride.call(this, sb);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.MonthWeekNumberModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.MonthWeekNumberModelExport::Type()" />*/
	type: function () {
		return $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.MonthWeekNumberModelExport::Type()" />*/
	,
	$type: new $.ig.Type('scheduler.MonthWeekNumberModelExport', $.ig.scheduler.TextModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthWeekNumberModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeModelExport" />*/

$.ig.scheduler.ShapeModelExport = $.ig.util.defType('scheduler.ShapeModelExport', 'scheduler.ModelBaseExport', {
	init: function () {
		$.ig.scheduler.ModelBaseExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		$.ig.scheduler.ModelBaseExport.prototype.serializeOverride.call(this, sb);
		sb.append5("shapeType : \"" + $.ig.scheduler.ShapeType.prototype.$getName(this.shapeType()) + "\", ");
		if (null != this.fill()) {
			sb.append5("fill : " + this.fill().serialize() + ", ");
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModelExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.ShapeModelExport::Type()" />*/
	type: function () {
		return $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY;
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.ShapeModelExport::Type()" />*/
	,
	_fill: null,
	/*<BeginProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ShapeModelExport::Fill()" />*/
	fill: function (value) {
		if (arguments.length === 1) {
			this._fill = value;
			return value;
		} else {
			return this._fill;
		}
	}
	/*<EndProperty Name="Infragistics.BrushAppearanceData Infragistics.Scheduler.Core.ShapeModelExport::Fill()" />*/
	,
	_shapeType: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ShapeType Infragistics.Scheduler.Core.ShapeModelExport::ShapeType()" />*/
	shapeType: function (value) {
		if (arguments.length === 1) {
			this._shapeType = value;
			return value;
		} else {
			return this._shapeType;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ShapeType Infragistics.Scheduler.Core.ShapeModelExport::ShapeType()" />*/
	,
	$type: new $.ig.Type('scheduler.ShapeModelExport', $.ig.scheduler.ModelBaseExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapeModelExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ModelTypeToExportClassMap" />*/

$.ig.scheduler.ModelTypeToExportClassMap = $.ig.util.defType('scheduler.ModelTypeToExportClassMap', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_staticInit: function () {
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings = new $.ig.Dictionary$2(String, $.ig.Type.prototype.$type, 0);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("timeslot", $.ig.scheduler.TimeSlotModelExport.prototype.$type);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("dayofweekheader", $.ig.scheduler.DayOfWeekHeaderModelExport.prototype.$type);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("monthname", $.ig.scheduler.MonthNameModelExport.prototype.$type);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("monthweeknumber", $.ig.scheduler.MonthWeekNumberModelExport.prototype.$type);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("text", $.ig.scheduler.TextModelExport.prototype.$type);
		$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings.add("shape", $.ig.scheduler.ShapeModelExport.prototype.$type);
	},
	$type: new $.ig.Type('scheduler.ModelTypeToExportClassMap', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ModelTypeToExportClassMap" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthNameModel" />*/

$.ig.util.defType('MonthNameModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_TYPE, $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.MonthNameModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.MonthNameModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var monthNameModelExport = $export;
		return monthNameModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.MonthNameModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthNameModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthNameModel::IsHitTestVisible()" />*/
	,
	$type: new $.ig.Type('MonthNameModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthNameModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthNameModelFactory" />*/

$.ig.util.defType('MonthNameModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_TYPE, $.ig.MonthNameModel.prototype.mONTHNAME_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.MonthNameModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.MonthNameModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.MonthNameModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('MonthNameModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthNameModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthWeekNumberModel" />*/

$.ig.util.defType('MonthWeekNumberModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_TYPE, $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.MonthWeekNumberModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.MonthWeekNumberModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var monthNameModelExport = $export;
		return monthNameModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.MonthWeekNumberModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthWeekNumberModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.MonthWeekNumberModel::IsHitTestVisible()" />*/
	,
	$type: new $.ig.Type('MonthWeekNumberModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthWeekNumberModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.MonthWeekNumberModelFactory" />*/

$.ig.util.defType('MonthWeekNumberModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_TYPE, $.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.MonthWeekNumberModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.MonthWeekNumberModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.MonthWeekNumberModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('MonthWeekNumberModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.MonthWeekNumberModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModelMonthView" />*/

$.ig.util.defType('VisualModelMonthView', 'VisualModel', {
	init: function (scheduler) {
		this._lastLayoutDaySize = new $.ig.Size();
		this._monthSize = new $.ig.Size();
		$.ig.VisualModel.prototype.init.call(this, scheduler);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModelMonthView::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	createExportOverride: function (visualModel) {
		var visualModelMonthView = $.ig.util.cast($.ig.VisualModelMonthView.prototype.$type, visualModel);
		$.ig.Debug.prototype.assert1(null != visualModelMonthView, "Unexpected VisualModel type!");
		var $export = new $.ig.scheduler.VisualModelMonthViewExport();
		if (null != visualModelMonthView) {
			$export.firstVisibleMonth(visualModelMonthView.firstVisibleMonth());
			$export.firstVisibleMonthScrollOffsetStart(visualModelMonthView.firstVisibleMonthScrollOffsetStart());
			$export.lastVisibleMonth(visualModelMonthView.lastVisibleMonth());
			$export.lastVisibleMonthScrollOffsetEnd(visualModelMonthView.lastVisibleMonthScrollOffsetEnd());
			$export.totalVisibleMonths(visualModelMonthView.totalVisibleMonths());
		}
		return $export;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.VisualModelExport Infragistics.Scheduler.Core.VisualModelMonthView::CreateExportOverride(Infragistics.Scheduler.Core.VisualModel)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelMonthView::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentPropertyChanged: function (e) {
		if (e.property() == $.ig.scheduler.AppointmentProperty.start || e.property() == $.ig.scheduler.AppointmentProperty.end) {
			return true;
		}
		var appointment = e.activity();
		if (appointment != null && appointment.isRecurrenceRoot()) {
			return true;
		}
		var affectedApptDateRange = new $.ig.scheduler.DateTimeRange(appointment.start(), appointment.end());
		var rangeOfVisibleAppointments = new $.ig.scheduler.DateTimeRange(this.lastLayoutFirstVisibleDate(), this.lastLayoutLastVisibleDate());
		return affectedApptDateRange._intersectsWith(rangeOfVisibleAppointments, true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelMonthView::GetIsRefreshLayoutRequiredForAppointmentPropertyChanged(Infragistics.Scheduler.Data.AppointmentPropertyChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelMonthView::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	getIsRefreshLayoutRequiredForAppointmentsChanged: function (e) {
		if (null == e.affectedRange()) {
			return true;
		}
		return e.affectedRange()._intersectsWith(new $.ig.scheduler.DateTimeRange(this.lastLayoutFirstVisibleDate(), this.lastLayoutLastVisibleDate()), true);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModelMonthView::GetIsRefreshLayoutRequiredForAppointmentsChanged(Infragistics.Scheduler.Data.AppointmentsChangedEventArgs)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelMonthView::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	onDataSourceChanged: function (dataSource) {
		$.ig.VisualModel.prototype.onDataSourceChanged.call(this, dataSource);
		this.monthInfo().onDataSourceChanged();
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelMonthView::OnDataSourceChanged(Infragistics.Scheduler.Data.ScheduleDataSource)" />*/
	,
	_dayOfWeekFormat: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DayOfWeekFormat Infragistics.Scheduler.Core.VisualModelMonthView::DayOfWeekFormat()" />*/
	dayOfWeekFormat: function (value) {
		if (arguments.length === 1) {
			this._dayOfWeekFormat = value;
			return value;
		} else {
			return this._dayOfWeekFormat;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DayOfWeekFormat Infragistics.Scheduler.Core.VisualModelMonthView::DayOfWeekFormat()" />*/
	,
	_firstVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::FirstVisibleMonth()" />*/
	firstVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleMonth = value;
			return value;
		} else {
			return this._firstVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::FirstVisibleMonth()" />*/
	,
	_firstVisibleMonthScrollOffsetStart: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::FirstVisibleMonthScrollOffsetStart()" />*/
	firstVisibleMonthScrollOffsetStart: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleMonthScrollOffsetStart = value;
			return value;
		} else {
			return this._firstVisibleMonthScrollOffsetStart;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::FirstVisibleMonthScrollOffsetStart()" />*/
	,
	_lastLayoutDaySize: null,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutDaySize()" />*/
	lastLayoutDaySize: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutDaySize = value;
			return value;
		} else {
			return this._lastLayoutDaySize;
		}
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutDaySize()" />*/
	,
	_lastLayoutFirstVisibleDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutFirstVisibleDate()" />*/
	lastLayoutFirstVisibleDate: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutFirstVisibleDate = value;
			return value;
		} else {
			return this._lastLayoutFirstVisibleDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutFirstVisibleDate()" />*/
	,
	_lastLayoutLastVisibleDate: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutLastVisibleDate()" />*/
	lastLayoutLastVisibleDate: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutLastVisibleDate = value;
			return value;
		} else {
			return this._lastLayoutLastVisibleDate;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutLastVisibleDate()" />*/
	,
	_lastLayoutFirstVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutFirstVisibleMonth()" />*/
	lastLayoutFirstVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutFirstVisibleMonth = value;
			return value;
		} else {
			return this._lastLayoutFirstVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutFirstVisibleMonth()" />*/
	,
	_lastLayoutLastVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutLastVisibleMonth()" />*/
	lastLayoutLastVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutLastVisibleMonth = value;
			return value;
		} else {
			return this._lastLayoutLastVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutLastVisibleMonth()" />*/
	,
	_lastLayoutMonthInfoVersion: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutMonthInfoVersion()" />*/
	lastLayoutMonthInfoVersion: function (value) {
		if (arguments.length === 1) {
			this._lastLayoutMonthInfoVersion = value;
			return value;
		} else {
			return this._lastLayoutMonthInfoVersion;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::LastLayoutMonthInfoVersion()" />*/
	,
	_lastVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastVisibleMonth()" />*/
	lastVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleMonth = value;
			return value;
		} else {
			return this._lastVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthView::LastVisibleMonth()" />*/
	,
	_lastVisibleMonthScrollOffsetEnd: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::LastVisibleMonthScrollOffsetEnd()" />*/
	lastVisibleMonthScrollOffsetEnd: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleMonthScrollOffsetEnd = value;
			return value;
		} else {
			return this._lastVisibleMonthScrollOffsetEnd;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::LastVisibleMonthScrollOffsetEnd()" />*/
	,
	_monthSize: null,
	/*<BeginProperty Name="System.Windows.Size Infragistics.Scheduler.Core.VisualModelMonthView::MonthSize()" />*/
	monthSize: function (value) {
		if (arguments.length === 1) {
			this._monthSize = value;
			return value;
		} else {
			return this._monthSize;
		}
	}
	/*<EndProperty Name="System.Windows.Size Infragistics.Scheduler.Core.VisualModelMonthView::MonthSize()" />*/
	,
	_totalVisibleMonths: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::TotalVisibleMonths()" />*/
	totalVisibleMonths: function (value) {
		if (arguments.length === 1) {
			this._totalVisibleMonths = value;
			return value;
		} else {
			return this._totalVisibleMonths;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthView::TotalVisibleMonths()" />*/
	,
	$type: new $.ig.Type('VisualModelMonthView', $.ig.VisualModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModelMonthView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModelMonthViewExport" />*/

$.ig.scheduler.VisualModelMonthViewExport = $.ig.util.defType('scheduler.VisualModelMonthViewExport', 'scheduler.VisualModelExport', {
	init: function () {
		$.ig.scheduler.VisualModelExport.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelMonthViewExport::SerializeOverride(System.Text.StringBuilder)" />*/
	serializeOverride: function (sb) {
		sb.append5("firstVisibleMonth : '" + $.ig.Date.prototype.toStringFormat(this.firstVisibleMonth(), "MM-dd-yyyy", null) + "', ");
		sb.append5("firstVisibleMonthScrollOffsetStart : " + this.firstVisibleMonthScrollOffsetStart() + ", ");
		sb.append5("lastVisibleMonth : '" + $.ig.Date.prototype.toStringFormat(this.lastVisibleMonth(), "MM-dd-yyyy", null) + "', ");
		sb.append5("lastVisibleMonthScrollOffsetEnd : " + this.lastVisibleMonthScrollOffsetEnd() + ", ");
		sb.append5("totalVisibleMonths : " + this.totalVisibleMonths() + ", ");
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModelMonthViewExport::SerializeOverride(System.Text.StringBuilder)" />*/
	,
	_firstVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthViewExport::FirstVisibleMonth()" />*/
	firstVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleMonth = value;
			return value;
		} else {
			return this._firstVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthViewExport::FirstVisibleMonth()" />*/
	,
	_firstVisibleMonthScrollOffsetStart: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::FirstVisibleMonthScrollOffsetStart()" />*/
	firstVisibleMonthScrollOffsetStart: function (value) {
		if (arguments.length === 1) {
			this._firstVisibleMonthScrollOffsetStart = value;
			return value;
		} else {
			return this._firstVisibleMonthScrollOffsetStart;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::FirstVisibleMonthScrollOffsetStart()" />*/
	,
	_lastVisibleMonth: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthViewExport::LastVisibleMonth()" />*/
	lastVisibleMonth: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleMonth = value;
			return value;
		} else {
			return this._lastVisibleMonth;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.VisualModelMonthViewExport::LastVisibleMonth()" />*/
	,
	_lastVisibleMonthScrollOffsetEnd: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::LastVisibleMonthScrollOffsetEnd()" />*/
	lastVisibleMonthScrollOffsetEnd: function (value) {
		if (arguments.length === 1) {
			this._lastVisibleMonthScrollOffsetEnd = value;
			return value;
		} else {
			return this._lastVisibleMonthScrollOffsetEnd;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::LastVisibleMonthScrollOffsetEnd()" />*/
	,
	_totalVisibleMonths: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::TotalVisibleMonths()" />*/
	totalVisibleMonths: function (value) {
		if (arguments.length === 1) {
			this._totalVisibleMonths = value;
			return value;
		} else {
			return this._totalVisibleMonths;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.VisualModelMonthViewExport::TotalVisibleMonths()" />*/
	,
	$type: new $.ig.Type('scheduler.VisualModelMonthViewExport', $.ig.scheduler.VisualModelExport.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModelMonthViewExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo" />*/

$.ig.util.defType('SchedulerViewModeInfo', 'Object', {
	init: function (viewMode, visualModel, visibilityEngine, spatialEngine, scrollDirection, isPagingEnabled, suppressPlatformViewportUpdatesOnResize) {
		$.ig.Object.prototype.init.call(this);
		this.viewMode(viewMode);
		this.visualModel(visualModel);
		this.visibilityEngine(visibilityEngine);
		this.spatialEngine(spatialEngine);
		this.scrollDirection(scrollDirection);
		this.isPagingEnabled(isPagingEnabled);
		this.suppressPlatformViewportUpdatesOnResize(suppressPlatformViewportUpdatesOnResize);
		this.isInitialScrollPositionSet(false);
	},
	_viewMode: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SchedulerViewModeInfo::ViewMode()" />*/
	viewMode: function (value) {
		if (arguments.length === 1) {
			this._viewMode = value;
			return value;
		} else {
			return this._viewMode;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewMode Infragistics.Scheduler.Core.SchedulerViewModeInfo::ViewMode()" />*/
	,
	_visualModel: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.VisualModel Infragistics.Scheduler.Core.SchedulerViewModeInfo::VisualModel()" />*/
	visualModel: function (value) {
		if (arguments.length === 1) {
			this._visualModel = value;
			return value;
		} else {
			return this._visualModel;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.VisualModel Infragistics.Scheduler.Core.SchedulerViewModeInfo::VisualModel()" />*/
	,
	_visibilityEngine: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.VisibilityEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::VisibilityEngine()" />*/
	visibilityEngine: function (value) {
		if (arguments.length === 1) {
			this._visibilityEngine = value;
			return value;
		} else {
			return this._visibilityEngine;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.VisibilityEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::VisibilityEngine()" />*/
	,
	_spatialEngine: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SpatialEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::SpatialEngine()" />*/
	spatialEngine: function (value) {
		if (arguments.length === 1) {
			this._spatialEngine = value;
			return value;
		} else {
			return this._spatialEngine;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SpatialEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::SpatialEngine()" />*/
	,
	_layoutEngine: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ILayoutEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::LayoutEngine()" />*/
	layoutEngine: function (value) {
		if (arguments.length === 1) {
			this._layoutEngine = value;
			return value;
		} else {
			return this._layoutEngine;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ILayoutEngine Infragistics.Scheduler.Core.SchedulerViewModeInfo::LayoutEngine()" />*/
	,
	_scrollDirection: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.SchedulerViewModeInfo::ScrollDirection()" />*/
	scrollDirection: function (value) {
		if (arguments.length === 1) {
			this._scrollDirection = value;
			return value;
		} else {
			return this._scrollDirection;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.SchedulerViewScrollDirection Infragistics.Scheduler.Core.SchedulerViewModeInfo::ScrollDirection()" />*/
	,
	_isPagingEnabled: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::IsPagingEnabled()" />*/
	isPagingEnabled: function (value) {
		if (arguments.length === 1) {
			this._isPagingEnabled = value;
			return value;
		} else {
			return this._isPagingEnabled;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::IsPagingEnabled()" />*/
	,
	_suppressPlatformViewportUpdatesOnResize: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::SuppressPlatformViewportUpdatesOnResize()" />*/
	suppressPlatformViewportUpdatesOnResize: function (value) {
		if (arguments.length === 1) {
			this._suppressPlatformViewportUpdatesOnResize = value;
			return value;
		} else {
			return this._suppressPlatformViewportUpdatesOnResize;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::SuppressPlatformViewportUpdatesOnResize()" />*/
	,
	_isInitialScrollPositionSet: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::IsInitialScrollPositionSet()" />*/
	isInitialScrollPositionSet: function (value) {
		if (arguments.length === 1) {
			this._isInitialScrollPositionSet = value;
			return value;
		} else {
			return this._isInitialScrollPositionSet;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeInfo::IsInitialScrollPositionSet()" />*/
	,
	$type: new $.ig.Type('SchedulerViewModeInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerViewModeManager" />*/

$.ig.util.defType('SchedulerViewModeManager', 'Object', {
	__scheduler: null,
	__viewModes: null,
	init: function (scheduler) {
		this.__viewModes = new $.ig.Dictionary$2($.ig.scheduler.SchedulerViewMode.prototype.$type, $.ig.SchedulerViewModeInfo.prototype.$type, 1, 2);
		$.ig.Object.prototype.init.call(this);
		this.__scheduler = scheduler;
		this.primaryViewModeSizePctHorizontal(0.6);
		this.primaryViewModeSizePctVertical(0.6);
	},
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModeCount()" />*/
	viewModeCount: function () {
		return this.__viewModes.count();
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModeCount()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::AddViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	addViewMode: function (viewMode) {
		switch (viewMode) {
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				this.__viewModes.add($.ig.scheduler.SchedulerViewMode.agendaView, this.createViewModeInfoForAgendaView());
				return true;
			case $.ig.scheduler.SchedulerViewMode.monthView:
				this.__viewModes.add($.ig.scheduler.SchedulerViewMode.monthView, this.createViewModeInfoForMonthView());
				return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::AddViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::ContainsViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	containsViewMode: function (viewMode) {
		return this.__viewModes.containsKey(viewMode);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::ContainsViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIndexOfViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	getIndexOfViewMode: function (viewMode) {
		if (this.__viewModes.count() < 1) {
			return -1;
		}
		return $.ig.Enumerable.prototype.toList$1($.ig.scheduler.SchedulerViewMode.prototype.$type, this.__viewModes.keys()).indexOf(viewMode);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIndexOfViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIsPrimaryViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	getIsPrimaryViewMode: function (viewMode) {
		if (this.__viewModes.count() < 1) {
			return false;
		}
		var viewModes = $.ig.Enumerable.prototype.toList$1($.ig.scheduler.SchedulerViewMode.prototype.$type, this.__viewModes.keys());
		return viewModes.__inner[0] == viewMode;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIsPrimaryViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIsSecondaryViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	getIsSecondaryViewMode: function (viewMode) {
		if (this.__viewModes.count() < 2) {
			return false;
		}
		var viewModes = $.ig.Enumerable.prototype.toList$1($.ig.scheduler.SchedulerViewMode.prototype.$type, this.__viewModes.keys());
		return viewModes.__inner[1] == viewMode;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::GetIsSecondaryViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.SchedulerViewModeManager::GetViewModeAtIndex(System.Int32)" />*/
	getViewModeAtIndex: function (index) {
		if (this.__viewModes.count() < 1) {
			return $.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, null);
		}
		if (index > this.__viewModes.count() - 1) {
			return $.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, null);
		}
		return $.ig.util.toNullable($.ig.scheduler.SchedulerViewMode.prototype.$type, $.ig.Enumerable.prototype.toArray$1($.ig.scheduler.SchedulerViewMode.prototype.$type, this.__viewModes.keys())[index]);
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.SchedulerViewModeManager::GetViewModeAtIndex(System.Int32)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::GetViewModeInfo(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	getViewModeInfo: function (viewMode) {
		var $self = this;
		var viewModeInfo = null;
		if ((function () { var $ret = $self.__viewModes.tryGetValue(viewMode, viewModeInfo); viewModeInfo = $ret.p1; return $ret.ret; }())) {
			return viewModeInfo;
		}
		return null;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::GetViewModeInfo(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::RemoveViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	removeViewMode: function (viewMode) {
		if (this.__viewModes.containsKey(viewMode)) {
			this.__viewModes.remove(viewMode);
			return true;
		}
		$.ig.Debug.prototype.assert1(false, "Request to remove viewMode '{0}' cannot be completed - viewMode does not exist!");
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::RemoveViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::SetLayoutEngineForViewMode(Infragistics.Scheduler.Core.ILayoutEngine, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	setLayoutEngineForViewMode: function (layoutEngine, viewMode) {
		var viewModeInfo = this.getViewModeInfo(viewMode);
		if (null != viewModeInfo) {
			viewModeInfo.layoutEngine(layoutEngine);
			layoutEngine.refresh(viewModeInfo.visualModel(), false);
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::SetLayoutEngineForViewMode(Infragistics.Scheduler.Core.ILayoutEngine, Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::SetViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	setViewMode: function (viewMode) {
		this.__viewModes.clear();
		return this.addViewMode(viewMode);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.SchedulerViewModeManager::SetViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::CreateViewModeInfoForAgendaView()" />*/
	createViewModeInfoForAgendaView: function () {
		return new $.ig.SchedulerViewModeInfo($.ig.scheduler.SchedulerViewMode.agendaView, new $.ig.VisualModelAgendaView(this.__scheduler), new $.ig.VisibilityEngineAgendaView(), new $.ig.SpatialEngineAgendaView(), $.ig.scheduler.SchedulerViewScrollDirection.vertical, false, false);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::CreateViewModeInfoForAgendaView()" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::CreateViewModeInfoForMonthView()" />*/
	createViewModeInfoForMonthView: function () {
		return new $.ig.SchedulerViewModeInfo($.ig.scheduler.SchedulerViewMode.monthView, new $.ig.VisualModelMonthView(this.__scheduler), new $.ig.VisibilityEngineMonthView(), new $.ig.SpatialEngineMonthView(), this.__scheduler.monthViewScrollDirection(), this.__scheduler._monthViewScrollMode() == $.ig.MonthViewScrollMode.prototype.paged, true);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerViewModeInfo Infragistics.Scheduler.Core.SchedulerViewModeManager::CreateViewModeInfoForMonthView()" />*/
	,
	_primaryViewModeSizePctVertical: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerViewModeManager::PrimaryViewModeSizePctVertical()" />*/
	primaryViewModeSizePctVertical: function (value) {
		if (arguments.length === 1) {
			this._primaryViewModeSizePctVertical = value;
			return value;
		} else {
			return this._primaryViewModeSizePctVertical;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerViewModeManager::PrimaryViewModeSizePctVertical()" />*/
	,
	_primaryViewModeSizePctHorizontal: 0,
	/*<BeginProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerViewModeManager::PrimaryViewModeSizePctHorizontal()" />*/
	primaryViewModeSizePctHorizontal: function (value) {
		if (arguments.length === 1) {
			this._primaryViewModeSizePctHorizontal = value;
			return value;
		} else {
			return this._primaryViewModeSizePctHorizontal;
		}
	}
	/*<EndProperty Name="System.Double Infragistics.Scheduler.Core.SchedulerViewModeManager::PrimaryViewModeSizePctHorizontal()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModeInfos()" />*/
	viewModeInfos: function () {
		return this.__viewModes.values();
	}
	/*<EndProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModeInfos()" />*/
	,
	/*<BeginProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModes()" />*/
	viewModes: function () {
		return this.__viewModes.keys();
	}
	/*<EndProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.SchedulerViewModeManager::ViewModes()" />*/
	,
	$type: new $.ig.Type('SchedulerViewModeManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerViewModeManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModelFactory" />*/

$.ig.util.defType('DayOfWeekHeaderModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_TYPE, $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.DayOfWeekHeaderModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.DayOfWeekHeaderModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.DayOfWeekHeaderModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('DayOfWeekHeaderModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeModel" />*/

$.ig.util.defType('ShapeModel', 'ModelBase', {
	init: function () {
		this.__fill = null;
		this.__lines = null;
		this.__shapeType = $.ig.scheduler.ShapeType.rectangle;
		this.__stroke = null;
		$.ig.ModelBase.prototype.init.call(this, $.ig.ShapeModel.prototype.sHAPE_MODEL_TYPE, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.ShapeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.ShapeModelExport();
		}
		$export = $.ig.ModelBase.prototype.createModelExport.call(this, $export);
		var shapeModelExport = $export;
		shapeModelExport.shapeType(this.shapeType());
		return shapeModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.ShapeModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.ShapeModel::GetPropertyValue(System.String)" />*/
	getPropertyValue: function (propertyName) {
		if (propertyName == $.ig.ShapeModel.prototype.shapeTypePropertyName) {
			return $.ig.scheduler.ShapeType.prototype.getBox(this.shapeType());
		}
		return $.ig.ModelBase.prototype.getPropertyValue.call(this, propertyName);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.ShapeModel::GetPropertyValue(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.ShapeModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		switch (this.role()) {
			case $.ig.scheduler.SchedulerElementRole.agendaApptArea:
			case $.ig.scheduler.SchedulerElementRole.monthViewActivityIndicator:
				return true;
		}
		return false;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.ShapeModel::IsHitTestVisible()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	propertyChangedOverride: function (propertyName, oldValue, newValue) {
		$.ig.ModelBase.prototype.propertyChangedOverride.call(this, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.ShapeModel.prototype.fillPropertyName:
			case $.ig.ShapeModel.prototype.shapeTypePropertyName:
			case $.ig.ShapeModel.prototype.linesPropertyName:
				this.isContentDirty(true);
				break;
			default:
				this.isContentDirty(true);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::SetPropertyValue(System.String, System.Object)" />*/
	setPropertyValue: function (propertyName, value) {
		$.ig.ModelBase.prototype.setPropertyValue.call(this, propertyName, value);
		if (propertyName == $.ig.ShapeModel.prototype.shapeTypePropertyName) {
			this.shapeType($.ig.util.getEnumValue(value));
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::SetPropertyValue(System.String, System.Object)" />*/
	,
	__fill: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModel::Fill()" />*/
	fill: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__fill;
			this.__fill = value;
			if (this.__fill != oldValue) {
				this.onPropertyChanged($.ig.ShapeModel.prototype.fillPropertyName, oldValue, this.__fill);
			}
			return value;
		} else {
			return this.__fill;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModel::Fill()" />*/
	,
	__lines: null,
	/*<BeginProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.ShapeModel::Lines()" />*/
	lines: function () {
		if (null == this.__lines) {
			this.__lines = new $.ig.List$1($.ig.ShapeModelLineSegment.prototype.$type, 0);
		}
		return this.__lines;
	}
	/*<EndProperty Name="System.Collections.Generic.IEnumerable Infragistics.Scheduler.Core.ShapeModel::Lines()" />*/
	,
	__shapeType: 0,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ShapeType Infragistics.Scheduler.Core.ShapeModel::ShapeType()" />*/
	shapeType: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__shapeType;
			this.__shapeType = value;
			if (this.__shapeType != oldValue) {
				this.onPropertyChanged($.ig.ShapeModel.prototype.shapeTypePropertyName, $.ig.scheduler.ShapeType.prototype.getBox(oldValue), $.ig.scheduler.ShapeType.prototype.getBox(this.__shapeType));
			}
			return value;
		} else {
			return this.__shapeType;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ShapeType Infragistics.Scheduler.Core.ShapeModel::ShapeType()" />*/
	,
	__stroke: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModel::Stroke()" />*/
	stroke: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__stroke;
			this.__stroke = value;
			if (this.__stroke != oldValue) {
				this.onPropertyChanged($.ig.ShapeModel.prototype.strokePropertyName, oldValue, this.__stroke);
			}
			return value;
		} else {
			return this.__stroke;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModel::Stroke()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::AddLines(System.Collections.Generic.IList, System.Boolean)" />*/
	addLines: function (lines, addToExisting) {
		if (null == this.__lines) {
			this.__lines = new $.ig.List$1($.ig.ShapeModelLineSegment.prototype.$type, 0);
		}
		var oldValue = this.__lines.toArray();
		if (false == addToExisting) {
			this.__lines.clear();
		}
		this.__lines.addRange(lines);
		var newValue = this.__lines.toArray();
		if (newValue != oldValue) {
			this.onPropertyChanged($.ig.ShapeModel.prototype.linesPropertyName, oldValue, newValue);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.ShapeModel::AddLines(System.Collections.Generic.IList, System.Boolean)" />*/
	,
	$type: new $.ig.Type('ShapeModel', $.ig.ModelBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapeModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeModelLineSegment" />*/

$.ig.util.defType('ShapeModelLineSegment', 'Object', {
	init: function (start, end, stroke, thickness) {
		$.ig.Object.prototype.init.call(this);
		this.start(start);
		this.end(end);
		this.stroke(stroke);
		this.thickness(thickness);
	},
	_end: null,
	/*<BeginProperty Name="System.Windows.Point Infragistics.Scheduler.Core.ShapeModelLineSegment::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			this._end = value;
			return value;
		} else {
			return this._end;
		}
	}
	/*<EndProperty Name="System.Windows.Point Infragistics.Scheduler.Core.ShapeModelLineSegment::End()" />*/
	,
	_start: null,
	/*<BeginProperty Name="System.Windows.Point Infragistics.Scheduler.Core.ShapeModelLineSegment::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			this._start = value;
			return value;
		} else {
			return this._start;
		}
	}
	/*<EndProperty Name="System.Windows.Point Infragistics.Scheduler.Core.ShapeModelLineSegment::Start()" />*/
	,
	_stroke: null,
	/*<BeginProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModelLineSegment::Stroke()" />*/
	stroke: function (value) {
		if (arguments.length === 1) {
			this._stroke = value;
			return value;
		} else {
			return this._stroke;
		}
	}
	/*<EndProperty Name="System.Windows.Media.Brush Infragistics.Scheduler.Core.ShapeModelLineSegment::Stroke()" />*/
	,
	_thickness: 0,
	/*<BeginProperty Name="System.Int32 Infragistics.Scheduler.Core.ShapeModelLineSegment::Thickness()" />*/
	thickness: function (value) {
		if (arguments.length === 1) {
			this._thickness = value;
			return value;
		} else {
			return this._thickness;
		}
	}
	/*<EndProperty Name="System.Int32 Infragistics.Scheduler.Core.ShapeModelLineSegment::Thickness()" />*/
	,
	$type: new $.ig.Type('ShapeModelLineSegment', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapeModelLineSegment" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.ShapeModelFactory" />*/

$.ig.util.defType('ShapeModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.ShapeModel.prototype.sHAPE_MODEL_TYPE, $.ig.ShapeModel.prototype.sHAPE_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ShapeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.ShapeModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.ShapeModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('ShapeModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.ShapeModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TextModelFactory" />*/

$.ig.util.defType('TextModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.TextModel.prototype.tEXT_MODEL_TYPE, $.ig.TextModel.prototype.tEXT_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.TextModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.TextModel(0);
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.TextModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('TextModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TextModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TimeSlotModel" />*/

$.ig.util.defType('TimeSlotModel', 'ModelBase', {
	init: function () {
		$.ig.ModelBase.prototype.init.call(this, $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_TYPE, $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.TimeSlotModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.TimeSlotModelExport();
		}
		$export = $.ig.ModelBase.prototype.createModelExport.call(this, $export);
		var timeSlotModelExport = $export;
		timeSlotModelExport.end(this.end());
		timeSlotModelExport.hasActivity(this.hasActivity());
		timeSlotModelExport.isLeadingDay(this.isLeadingDay());
		timeSlotModelExport.isToday(this.isToday());
		timeSlotModelExport.isTrailingDay(this.isTrailingDay());
		timeSlotModelExport.start(this.start());
		return timeSlotModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.TimeSlotModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.TimeSlotModel::GetPropertyValue(System.String)" />*/
	getPropertyValue: function (propertyName) {
		if (propertyName == $.ig.TimeSlotModel.prototype.endPropertyName) {
			return this.end();
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.hasActivityPropertyName) {
			return this.hasActivity();
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isLeadingDayPropertyName) {
			return this.isLeadingDay();
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isTodayPropertyName) {
			return this.isToday();
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isTrailingDayPropertyName) {
			return this.isTrailingDay();
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.startPropertyName) {
			return this.start();
		}
		return $.ig.ModelBase.prototype.getPropertyValue.call(this, propertyName);
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.TimeSlotModel::GetPropertyValue(System.String)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsHitTestVisible()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModel::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	propertyChangedOverride: function (propertyName, oldValue, newValue) {
		$.ig.ModelBase.prototype.propertyChangedOverride.call(this, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.TimeSlotModel.prototype.endPropertyName:
			case $.ig.TimeSlotModel.prototype.hasActivityPropertyName:
			case $.ig.TimeSlotModel.prototype.isLeadingDayPropertyName:
			case $.ig.TimeSlotModel.prototype.isTodayPropertyName:
			case $.ig.TimeSlotModel.prototype.isTrailingDayPropertyName:
			case $.ig.TimeSlotModel.prototype.startPropertyName:
				this.isContentDirty(true);
				break;
			default:
				this.isContentDirty(true);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModel::PropertyChangedOverride(System.String, System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModel::SetPropertyValue(System.String, System.Object)" />*/
	setPropertyValue: function (propertyName, value) {
		$.ig.ModelBase.prototype.setPropertyValue.call(this, propertyName, value);
		if (propertyName == $.ig.TimeSlotModel.prototype.endPropertyName) {
			this.end(value);
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.hasActivityPropertyName) {
			this.hasActivity(value);
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isLeadingDayPropertyName) {
			this.isLeadingDay(value);
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isTodayPropertyName) {
			this.isToday(value);
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.isTrailingDayPropertyName) {
			this.isTrailingDay(value);
		}
		if (propertyName == $.ig.TimeSlotModel.prototype.startPropertyName) {
			this.start(value);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.TimeSlotModel::SetPropertyValue(System.String, System.Object)" />*/
	,
	__end: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModel::End()" />*/
	end: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__end;
			this.__end = value;
			if (+(this.__end) != +oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.endPropertyName, oldValue, this.__end);
			}
			return value;
		} else {
			return this.__end;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModel::End()" />*/
	,
	__hasActivity: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::HasActivity()" />*/
	hasActivity: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__hasActivity;
			this.__hasActivity = value;
			if (this.__hasActivity != oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.hasActivityPropertyName, oldValue, this.__hasActivity);
			}
			return value;
		} else {
			return this.__hasActivity;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::HasActivity()" />*/
	,
	__isLeadingDay: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsLeadingDay()" />*/
	isLeadingDay: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__isLeadingDay;
			this.__isLeadingDay = value;
			if (this.__isLeadingDay != oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.isLeadingDayPropertyName, oldValue, this.__isLeadingDay);
			}
			return value;
		} else {
			return this.__isLeadingDay;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsLeadingDay()" />*/
	,
	__isToday: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsToday()" />*/
	isToday: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__isToday;
			this.__isToday = value;
			if (this.__isToday != oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.isTodayPropertyName, oldValue, this.__isToday);
			}
			return value;
		} else {
			return this.__isToday;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsToday()" />*/
	,
	__isTrailingDay: false,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsTrailingDay()" />*/
	isTrailingDay: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__isTrailingDay;
			this.__isTrailingDay = value;
			if (this.__isTrailingDay != oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.isTrailingDayPropertyName, oldValue, this.__isTrailingDay);
			}
			return value;
		} else {
			return this.__isTrailingDay;
		}
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.TimeSlotModel::IsTrailingDay()" />*/
	,
	__start: new Date(),
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModel::Start()" />*/
	start: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__start;
			this.__start = value;
			if (+(this.__start) != +oldValue) {
				this.onPropertyChanged($.ig.TimeSlotModel.prototype.startPropertyName, oldValue, this.__start);
			}
			return value;
		} else {
			return this.__start;
		}
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.TimeSlotModel::Start()" />*/
	,
	$type: new $.ig.Type('TimeSlotModel', $.ig.ModelBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TimeSlotModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel" />*/

$.ig.util.defType('DayOfWeekHeaderModel', 'TextModel', {
	init: function () {
		$.ig.TextModel.prototype.init1.call(this, 1, $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_TYPE, $.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.DayOfWeekHeaderModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	createModelExport: function ($export) {
		if ($export == null) {
			$export = new $.ig.scheduler.DayOfWeekHeaderModelExport();
		}
		$export = $.ig.TextModel.prototype.createModelExport.call(this, $export);
		var timeSlotModelExport = $export;
		return timeSlotModelExport;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBaseExport Infragistics.Scheduler.Core.DayOfWeekHeaderModel::CreateModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.DayOfWeekHeaderModel::IsHitTestVisible()" />*/
	isHitTestVisible: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.DayOfWeekHeaderModel::IsHitTestVisible()" />*/
	,
	$type: new $.ig.Type('DayOfWeekHeaderModel', $.ig.TextModel.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.TimeSlotModelFactory" />*/

$.ig.util.defType('TimeSlotModelFactory', 'ModelFactoryBase', {
	init: function () {
		$.ig.ModelFactoryBase.prototype.init.call(this, $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_TYPE, $.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_KEY);
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.TimeSlotModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	createModel: function (path) {
		return new $.ig.TimeSlotModel();
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.TimeSlotModelFactory::CreateModel(Infragistics.Scheduler.Core.ModelPath)" />*/
	,
	$type: new $.ig.Type('TimeSlotModelFactory', $.ig.ModelFactoryBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.TimeSlotModelFactory" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerLayer" />*/

$.ig.util.defType('SchedulerLayer', 'FastIterationDictionary$2', {
	init: function (name) {
		$.ig.FastIterationDictionary$2.prototype.init.call(this, $.ig.ModelPath.prototype.$type, $.ig.ModelBase.prototype.$type, 0);
		this._name(name);
	},
	__name: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.SchedulerLayer::Name()" />*/
	_name: function (value) {
		if (arguments.length === 1) {
			this.__name = value;
			return value;
		} else {
			return this.__name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.SchedulerLayer::Name()" />*/
	,
	$type: new $.ig.Type('SchedulerLayer', $.ig.FastIterationDictionary$2.prototype.$type.specialize($.ig.ModelPath.prototype.$type, $.ig.ModelBase.prototype.$type))
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerLayer" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.SchedulerLayerExport" />*/

$.ig.scheduler.SchedulerLayerExport = $.ig.util.defType('scheduler.SchedulerLayerExport', 'Object', {
	___modelExports: null,
	init: function (name) {
		$.ig.Object.prototype.init.call(this);
		this.name(name);
	},
	/*<BeginProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.SchedulerLayerExport::ModelExports()" />*/
	modelExports: function () {
		if (null == this.___modelExports) {
			this.___modelExports = new $.ig.List$1($.ig.scheduler.ModelBaseExport.prototype.$type, 0);
		}
		return this.___modelExports;
	}
	/*<EndProperty Name="System.Collections.Generic.List Infragistics.Scheduler.Core.SchedulerLayerExport::ModelExports()" />*/
	,
	_name: null,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.SchedulerLayerExport::Name()" />*/
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.SchedulerLayerExport::Name()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerExport::AddModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	_addModelExport: function (modelExport) {
		this.modelExports().add(modelExport);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.SchedulerLayerExport::AddModelExport(Infragistics.Scheduler.Core.ModelBaseExport)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.SchedulerLayerExport::Serialize()" />*/
	_serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("name: \"" + this.name() + "\", modelExports: [");
		for (var i = 0; i < this.modelExports().count(); i++) {
			sb.append5(this.modelExports().__inner[i]._serialize());
			if (i < this.modelExports().count() - 1) {
				sb.append5(", ");
			}
		}
		sb.append5("]");
		sb.append5("}");
		return sb.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.SchedulerLayerExport::Serialize()" />*/
	,
	$type: new $.ig.Type('scheduler.SchedulerLayerExport', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.SchedulerLayerExport" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CachedFontInfo" />*/

$.ig.util.defType('CachedFontInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_calculatedBasedOnAvailableWidth: 0,
	_calculatedBasedOnAvailableHeight: 0,
	_calculatedBasedOnMaxFontSize: 0,
	_calculatedBasedOnText: null,
	_calculatedBasedOnDesiredFontInfo: null,
	_calculatedFontInfo: null,
	$type: new $.ig.Type('CachedFontInfo', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CachedFontInfo" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.Utils" />*/

$.ig.util.defType('Utils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Utils::WithHelper`1(System.Collections.ObjectModel.ObservableCollection, System.Action)" />*/
	withHelper$1: function ($t, collection, action) {
		for (var i = 0, count = collection.count(); i < count; i++) {
			var item = collection.__inner[i];
			action(item, i);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Utils::WithHelper`1(System.Collections.ObjectModel.ObservableCollection, System.Action)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Utils::ToList`1(System.Collections.ObjectModel.ObservableCollection)" />*/
	toList$1: function ($t, collection) {
		return new $.ig.List$1($t, 1, collection);
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Utils::ToList`1(System.Collections.ObjectModel.ObservableCollection)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::StringEquals(System.String, System.String, System.Boolean)" />*/
	stringEquals: function (a, b, ignoreCase) {
		var comparison = ignoreCase ? $.ig.StringComparison.prototype.currentCultureIgnoreCase : $.ig.StringComparison.prototype.currentCulture;
		return !$.ig.util.stringCompare1(a, b, comparison);
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::StringEquals(System.String, System.String, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::IsNullOrEmpty(System.Object)" />*/
	isNullOrEmpty: function (value) {
		if (value == null) {
			return true;
		}
		var s = $.ig.util.cast(String, value);
		if (s != null && s.length == 0) {
			return true;
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::IsNullOrEmpty(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.Utils::VerifyNotNull(System.Object, System.String)" />*/
	verifyNotNull: function (value, paramName) {
		if (value == null) {
			throw new $.ig.ArgumentNullException(0, paramName);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.Utils::VerifyNotNull(System.Object, System.String)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Utils::ToString(System.Object)" />*/
	toString1: function (value) {
		if (value == null) {
			return null;
		}
		var strVal = $.ig.util.cast(String, value);
		if (strVal != null) {
			return strVal;
		}
		return value.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Utils::ToString(System.Object)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::TryCreateInstance(System.Type, System.Object)" />*/
	tryCreateInstance: function (type, value) {
		value = null;
		if (type == null) {
			return {
				ret: false,
				p1: value
			};
		}
		return {
			ret: false,
			p1: value
		};
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::TryCreateInstance(System.Type, System.Object)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.Utils::RoleFromViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	roleFromViewMode: function (viewMode) {
		var role;
		switch (viewMode) {
			case $.ig.scheduler.SchedulerViewMode.agendaView:
				role = $.ig.scheduler.SchedulerElementRole.agendaView;
				break;
			case $.ig.scheduler.SchedulerViewMode.monthView:
				role = $.ig.scheduler.SchedulerElementRole.monthView;
				break;
			default:
				role = $.ig.scheduler.SchedulerElementRole.scheduler;
				break;
		}
		return role;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.SchedulerElementRole Infragistics.Scheduler.Core.Utils::RoleFromViewMode(Infragistics.Scheduler.Core.SchedulerViewMode)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::HasParameterlessCtor(System.Type, System.Boolean)" />*/
	hasParameterlessCtor: function (type, publicOnly) {
		$.ig.Debug.prototype.assert1(false, "No way to find a ctor in JS so don't even bother calling this method, it will always return false.");
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::HasParameterlessCtor(System.Type, System.Boolean)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.AppointmentProperty Infragistics.Scheduler.Core.Utils::ParseAppointmentProperty(System.String)" />*/
	parseAppointmentProperty: function (propertyName) {
		var value;
		if ((function () { var $ret = $.ig.Enum.prototype.tryParse$1($.ig.scheduler.AppointmentProperty.prototype.$type, propertyName, true, value); value = $ret.p2; return $ret.ret; }()) == false) {
			$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("'{0}' is not a valid Appointment property name.", propertyName));
			return (-1);
		}
		return value;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.AppointmentProperty Infragistics.Scheduler.Core.Utils::ParseAppointmentProperty(System.String)" />*/
	,
	/*<BeginMethod Name="Infragistics.Scheduler.Data.ScheduleResourceProperty Infragistics.Scheduler.Core.Utils::ParseScheduleResourceProperty(System.String)" />*/
	parseScheduleResourceProperty: function (propertyName) {
		var value;
		if ((function () { var $ret = $.ig.Enum.prototype.tryParse$1($.ig.scheduler.ScheduleResourceProperty.prototype.$type, propertyName, true, value); value = $ret.p2; return $ret.ret; }()) == false) {
			$.ig.Debug.prototype.assert1(false, $.ig.util.stringFormat("'{0}' is not a valid ScheduleResource property name.", propertyName));
			return (-1);
		}
		return value;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Data.ScheduleResourceProperty Infragistics.Scheduler.Core.Utils::ParseScheduleResourceProperty(System.String)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.Utils::ConvertToDateTime(System.Object, System.Exception)" />*/
	convertToDateTime: function (value, exception) {
		exception = null;
		if ($.ig.util.cast($.ig.Date.prototype.$type, value) !== null) {
			return {
				ret: value,
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.Convert.prototype.toDateTime(value),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: $.ig.Date.prototype.minValue(),
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.Utils::ConvertToDateTime(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Utils::ConvertToString(System.Object, System.Exception, System.IFormatProvider)" />*/
	convertToString: function (value, exception, provider) {
		exception = null;
		if (typeof value === 'string') {
			return {
				ret: value,
				p1: exception
			};
		} else if (value == null) {
			return {
				ret: null,
				p1: exception
			};
		}
		try {
			return {
				ret: value.toString(),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: null,
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Utils::ConvertToString(System.Object, System.Exception, System.IFormatProvider)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.Utils::ConvertToInt32(System.Object, System.Exception)" />*/
	convertToInt32: function (value, exception) {
		exception = null;
		if (typeof value === 'number') {
			return {
				ret: $.ig.util.getValue(value),
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.Convert.prototype.toInt321(value),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: -2147483648,
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.Utils::ConvertToInt32(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Double Infragistics.Scheduler.Core.Utils::ConvertToDouble(System.Object, System.Exception)" />*/
	convertToDouble: function (value, exception) {
		exception = null;
		if (typeof value === 'number') {
			return {
				ret: value,
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.Convert.prototype.toDouble3(value),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: -1.7976931348623157E+308,
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.Double Infragistics.Scheduler.Core.Utils::ConvertToDouble(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Decimal Infragistics.Scheduler.Core.Utils::ConvertToDecimal(System.Object, System.Exception)" />*/
	convertToDecimal: function (value, exception) {
		exception = null;
		if (typeof value === 'number') {
			return {
				ret: value,
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.Convert.prototype.toDecimal2(value),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: -7.9228162514264338E+28,
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.Decimal Infragistics.Scheduler.Core.Utils::ConvertToDecimal(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::ConvertToBoolean(System.Object, System.Exception)" />*/
	convertToBoolean: function (value, exception) {
		exception = null;
		if ($.ig.util.cast($.ig.Boolean.prototype.$type, value) !== null) {
			return {
				ret: value,
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.Convert.prototype.toBoolean(value),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: false,
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::ConvertToBoolean(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.Utils::ConvertToColor(System.Object, System.Exception)" />*/
	convertToColor: function (value, exception) {
		exception = null;
		if (value == null) {
			return {
				ret: $.ig.util.toNullable($.ig.Color.prototype.$type, null),
				p1: exception
			};
		}
		try {
			return {
				ret: $.ig.util.toNullable($.ig.Color.prototype.$type, $.ig.Color.prototype.create(value)),
				p1: exception
			};
		}
		catch (ex) {
			exception = ex;
			return {
				ret: $.ig.util.toNullable($.ig.Color.prototype.$type, null),
				p1: exception
			};
		}
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.Utils::ConvertToColor(System.Object, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.Utils::ConvertIGColor(System.Windows.Media.Color, System.Type)" />*/
	convertIGColor: function (color, destinationType) {
		if (destinationType == $.ig.Color.prototype.$type) {
			return color;
		}
		if (destinationType != String) {
			$.ig.Debug.prototype.assert1(false, "Unsupported destination type; IG color can only be converted to a string or an integer");
			return null;
		}
		var sb = new $.ig.StringBuilder(0);
		if (color.a() == 255) {
			sb.appendFormat4("#{0:X2}{1:X2}{2:X2}", color.r(), color.g(), color.b());
		} else {
			sb.appendFormat1("#{0:X2}{1:X2}{2:X2}{3:X2}", [ color.a(), color.r(), color.g(), color.b() ]);
		}
		return sb.toString();
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.Utils::ConvertIGColor(System.Windows.Media.Color, System.Type)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.Utils::ConvertColorScheme(System.Nullable, System.Type, System.Exception)" />*/
	convertColorScheme: function (value, destinationType, exception) {
		exception = null;
		if (value.hasValue() == false) {
			return {
				ret: null,
				p2: exception
			};
		}
		if (destinationType == $.ig.scheduler.ScheduleResourceColorScheme.prototype.$type) {
			return {
				ret: $.ig.util.unwrapNullable(value),
				p2: exception
			};
		} else if (destinationType == String) {
			return {
				ret: value.toString(),
				p2: exception
			};
		} else if (destinationType == $.ig.Number.prototype.$type) {
			return {
				ret: value.value(),
				p2: exception
			};
		} else {
			var message = $.ig.schedulerCore.locale.getString("LE_CouldNotConvertColorScheme");
			exception = new $.ig.Error(1, message);
		}
		return {
			ret: null,
			p2: exception
		};
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.Utils::ConvertColorScheme(System.Nullable, System.Type, System.Exception)" />*/
	,
	/*<BeginMethod Name="System.Nullable Infragistics.Scheduler.Core.Utils::ConvertToColorScheme(System.Object, System.Exception)" />*/
	convertToColorScheme: function (value, exception) {
		exception = null;
		if (value == null) {
			return {
				ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
				p1: exception
			};
		}
		if ($.ig.util.cast($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, value) !== null) {
			return {
				ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, $.ig.util.getEnumValue(value)),
				p1: exception
			};
		}
		var enumType = $.ig.scheduler.ScheduleResourceColorScheme.prototype.$type;
		if (typeof value === 'number') {
			var values = $.ig.Enum.prototype.getValues(enumType);
			var intVal = $.ig.util.getValue(value);
			if (intVal >= 0 && intVal < values.length) {
				var colorScheme = intVal;
				return {
					ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, colorScheme),
					p1: exception
				};
			} else {
				exception = new $.ig.Error(1, $.ig.schedulerCore.locale.getString("LE_CouldNotConvertValue", [ intVal, enumType ]));
				return {
					ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
					p1: exception
				};
			}
		}
		if (typeof value === 'string') {
			var stringVal = $.ig.util.cast(String, value);
			if (String.isNullOrEmpty(stringVal)) {
				return {
					ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
					p1: exception
				};
			}
			var enumVal;
			if ((function () { var $ret = $.ig.Enum.prototype.tryParse$1($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, stringVal, true, enumVal); enumVal = $ret.p2; return $ret.ret; }())) {
				return {
					ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, enumVal),
					p1: exception
				};
			} else {
				exception = new $.ig.Error(1, $.ig.schedulerCore.locale.getString("LE_CouldNotConvertValue", [ stringVal, enumType ]));
				return {
					ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
					p1: exception
				};
			}
		}
		exception = new $.ig.Error(1, $.ig.schedulerCore.locale.getString("LE_CouldNotConvertValue", [ value, enumType ]));
		return {
			ret: $.ig.util.toNullable($.ig.scheduler.ScheduleResourceColorScheme.prototype.$type, null),
			p1: exception
		};
	}
	/*<EndMethod Name="System.Nullable Infragistics.Scheduler.Core.Utils::ConvertToColorScheme(System.Object, System.Exception)" />*/
	,
	/*<BeginProperty Name="System.String Infragistics.Scheduler.Core.Utils::ListSeparator()" />*/
	listSeparator: function () {
		return ",";
	}
	/*<EndProperty Name="System.String Infragistics.Scheduler.Core.Utils::ListSeparator()" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.Utils::ParseTagContent(System.String, System.String)" />*/
	parseTagContent: function (tagName, data) {
		var openTag = $.ig.util.stringFormat("<{0}>", tagName);
		var closeTag = $.ig.util.stringFormat("</{0}>", tagName);
		var start = data.indexOf(openTag);
		var end = data.indexOf(closeTag);
		if (start < 0 || end < 0) {
			return null;
		}
		start += openTag.length;
		var length = end - start;
		return data.substr(start, length);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.Utils::ParseTagContent(System.String, System.String)" />*/
	,
	/*<BeginMethod Name="System.Object Infragistics.Scheduler.Core.Utils::GetArrayValue(System.Array, System.Int32)" />*/
	getArrayValue: function (array, index) {
		return array[index];
	}
	/*<EndMethod Name="System.Object Infragistics.Scheduler.Core.Utils::GetArrayValue(System.Array, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Exception Infragistics.Scheduler.Core.Utils::CreateException(System.String)" />*/
	createException: function (stringResourceName) {
		return $.ig.Utils.prototype.createException1(stringResourceName, null);
	}
	/*<EndMethod Name="System.Exception Infragistics.Scheduler.Core.Utils::CreateException(System.String)" />*/
	,
	/*<BeginMethod Name="System.Exception Infragistics.Scheduler.Core.Utils::CreateException(System.String, )" />*/
	createException1: function (stringResourceName, args) {
		var message = $.ig.schedulerCore.locale.getString(stringResourceName, args);
		return new $.ig.Error(1, message);
	}
	/*<EndMethod Name="System.Exception Infragistics.Scheduler.Core.Utils::CreateException(System.String, )" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::IsSameInstance(System.Object, System.Object)" />*/
	isSameInstance: function (x, y) {
		return x != null && x == y;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.Utils::IsSameInstance(System.Object, System.Object)" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Utils::ListFromIEnumerable(System.Collections.Generic.IEnumerable, System.Int32)" />*/
	listFromIEnumerable: function (value, size) {
		var list = new $.ig.List$1($.ig.Object.prototype.$type, 2, size);
		var en = value.getEnumerator();
		while (en.moveNext()) {
			var o = en.current();
			list.add1(o);
		}
		return list;
	}
	/*<EndMethod Name="System.Collections.Generic.List Infragistics.Scheduler.Core.Utils::ListFromIEnumerable(System.Collections.Generic.IEnumerable, System.Int32)" />*/
	,
	$type: new $.ig.Type('Utils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.Utils" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.DateUtils" />*/

$.ig.util.defType('DateUtils', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateUtils::FormatYearMonth(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.DateTime)" />*/
	formatYearMonth: function (provider, date) {
		return provider.formatYearMonth(date);
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateUtils::FormatYearMonth(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.DateTime)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDayNames(Infragistics.Scheduler.Core.DateTimeFormatProvider, Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	getDayNames: function (provider, format) {
		return provider.getDayNames(format);
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDayNames(Infragistics.Scheduler.Core.DateTimeFormatProvider, Infragistics.Scheduler.Core.DayOfWeekFormat)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetDaysInMonth(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32)" />*/
	getDaysInMonth: function (provider, year, month, era) {
		return provider.getDaysInMonth(year, month, era);
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetDaysInMonth(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetDayRowCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32)" />*/
	getDayRowCount: function (provider, year, month, era) {
		var daysInMonth = $.ig.DateUtils.prototype.getDaysInMonth(provider, year, month, era);
		var weekCount = $.ig.intDivide(daysInMonth, $.ig.DateUtils.prototype.daysInWeek);
		var dayRowCount = $.ig.truncate(Math.ceil(weekCount));
		return dayRowCount;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetDayRowCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetLeadingDayCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	getLeadingDayCount: function (provider, year, month, era, firstDayOfWeek) {
		var firstDayOfMonth = $.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0);
		var beginsOn = firstDayOfMonth.getDay();
		var leadingDayCount = beginsOn - firstDayOfWeek;
		return leadingDayCount < 0 ? $.ig.DateUtils.prototype.daysInWeek + leadingDayCount : leadingDayCount > 0 ? leadingDayCount : 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetLeadingDayCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetTrailingDayCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	getTrailingDayCount: function (provider, year, month, era, firstDayOfWeek) {
		var firstDayOfMonth = $.ig.Date.prototype.fromValues(year, month, 1, 0, 0, 0, 0);
		var daysInMonth = $.ig.DateUtils.prototype.getDaysInMonth(provider, year, month, era);
		var firstDayOfNextMonth;
		try {
			firstDayOfNextMonth = $.ig.Date.prototype.addDays(firstDayOfMonth, daysInMonth);
		}
		catch (e) {
			return 0;
		}
		var delta = firstDayOfWeek - firstDayOfNextMonth.getDay();
		return delta < 0 ? $.ig.DateUtils.prototype.daysInWeek + delta : delta > 0 ? delta : 0;
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetTrailingDayCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDaysOfWeek(Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	getDaysOfWeek: function (provider) {
		return $.ig.DateUtils.prototype.getDaysOfWeek1(provider.firstDayOfWeek());
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDaysOfWeek(Infragistics.Scheduler.Core.DateTimeFormatProvider)" />*/
	,
	/*<BeginMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDaysOfWeek(System.DayOfWeek)" />*/
	getDaysOfWeek1: function (startAt) {
		var daysOfWeek = [ $.ig.DayOfWeek.prototype.sunday, $.ig.DayOfWeek.prototype.monday, $.ig.DayOfWeek.prototype.tuesday, $.ig.DayOfWeek.prototype.wednesday, $.ig.DayOfWeek.prototype.thursday, $.ig.DayOfWeek.prototype.friday, $.ig.DayOfWeek.prototype.saturday ];
		var copy = new Array(daysOfWeek.length);
		var iterator = new $.ig.DayOfWeekIterator(startAt);
		var counter = 0;
		iterator.iterate(function (dayOfWeek) {
			var index = dayOfWeek;
			copy[counter] = daysOfWeek[index];
			counter += 1;
		});
		return copy;
	}
	/*<EndMethod Name=" Infragistics.Scheduler.Core.DateUtils::GetDaysOfWeek(System.DayOfWeek)" />*/
	,
	/*<BeginMethod Name="System.String Infragistics.Scheduler.Core.DateUtils::FormatDateTimeInvariant(System.DateTime, System.Boolean, System.Boolean)" />*/
	formatDateTimeInvariant: function (dateTime, includeDate, includeTime) {
		var sb = new $.ig.StringBuilder(0);
		if (includeDate) {
			sb.append3($.ig.Date.prototype.getMonth(dateTime));
			sb.append5("/");
			sb.append3(dateTime.getDate());
			sb.append5("/");
			sb.append3(dateTime.getFullYear());
		}
		if (includeTime) {
			if (includeDate) {
				sb.append5(" ");
			}
			sb.append3(dateTime.getHours());
			sb.append5(":");
			sb.append3(dateTime.getMinutes());
		}
		return sb.toString();
	}
	/*<EndMethod Name="System.String Infragistics.Scheduler.Core.DateUtils::FormatDateTimeInvariant(System.DateTime, System.Boolean, System.Boolean)" />*/
	,
	/*<BeginMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetWeekCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	getWeekCount: function (provider, year, month, era, firstDayOfWeek) {
		var daysInMonth = provider.getDaysInMonth(year, month, 0);
		var daysInFirstWeek = 7 - $.ig.DateUtils.prototype.getLeadingDayCount(provider, year, month, 0, firstDayOfWeek);
		var daysInLastWeek = 7 - $.ig.DateUtils.prototype.getTrailingDayCount(provider, year, month, 0, firstDayOfWeek);
		return 2 + ($.ig.intDivide((daysInMonth - daysInFirstWeek - daysInLastWeek), 7));
	}
	/*<EndMethod Name="System.Int32 Infragistics.Scheduler.Core.DateUtils::GetWeekCount(Infragistics.Scheduler.Core.DateTimeFormatProvider, System.Int32, System.Int32, System.Int32, System.DayOfWeek)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.DateUtils::DefaultDateTimeFormatProvider()" />*/
	defaultDateTimeFormatProvider: function () {
		if ($.ig.DateUtils.prototype.__dateTimeFormatProvider == null) {
			$.ig.DateUtils.prototype.__dateTimeFormatProvider = new $.ig.JSDateTimeFormatProvider(null);
		}
		return $.ig.DateUtils.prototype.__dateTimeFormatProvider;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.DateTimeFormatProvider Infragistics.Scheduler.Core.DateUtils::DefaultDateTimeFormatProvider()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.DateUtils::TryParseExact(System.String, System.String, System.IFormatProvider, System.DateTime)" />*/
	tryParseExact: function (value, format, provider, date) {
		date = $.ig.Date.prototype.minValue();
		try {
			date = $.ig.Date.prototype.parseExact(value, format, provider);
			return {
				ret: true,
				p3: date
			};
		}
		catch (e) {
			return {
				ret: false,
				p3: date
			};
		}
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.DateUtils::TryParseExact(System.String, System.String, System.IFormatProvider, System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::SubtractOneMillisecond(System.DateTime)" />*/
	subtractOneMillisecond: function (value) {
		var ticks = value.getTime() - $.ig.DateUtils.prototype._ticksPerMillisecond;
		value = $.ig.Date.prototype.fromTicks(ticks);
		return value;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::SubtractOneMillisecond(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::AdjustEndForRangeComparison(System.DateTime)" />*/
	adjustEndForRangeComparison: function (end) {
		if (+end == +($.ig.Date.prototype.minValue())) {
			return end;
		}
		return $.ig.DateUtils.prototype.subtractOneMillisecond(end);
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::AdjustEndForRangeComparison(System.DateTime)" />*/
	,
	/*<BeginMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::AdjustEndForRangeComparison(System.DateTime, System.DateTime)" />*/
	adjustEndForRangeComparison1: function (start, end) {
		end = $.ig.DateUtils.prototype.adjustEndForRangeComparison(end);
		return end > start ? end : start;
	}
	/*<EndMethod Name="System.DateTime Infragistics.Scheduler.Core.DateUtils::AdjustEndForRangeComparison(System.DateTime, System.DateTime)" />*/
	,
	$type: new $.ig.Type('DateUtils', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.DateUtils" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.HybridModelPresenter" />*/

$.ig.util.defType('HybridModelPresenter', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_elementPresenter: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.HybridModelPresenter::ElementPresenter()" />*/
	elementPresenter: function (value) {
		if (arguments.length === 1) {
			this._elementPresenter = value;
			return value;
		} else {
			return this._elementPresenter;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.HybridModelPresenter::ElementPresenter()" />*/
	,
	_canvasPresenter: null,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.HybridModelPresenter::CanvasPresenter()" />*/
	canvasPresenter: function (value) {
		if (arguments.length === 1) {
			this._canvasPresenter = value;
			return value;
		} else {
			return this._canvasPresenter;
		}
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.HybridModelPresenter::CanvasPresenter()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.HybridModelPresenter::NativeView()" />*/
	nativeView: function () {
		if (this.elementPresenter() != null) {
			return this.elementPresenter().nativeView();
		}
		if (this.canvasPresenter() != null) {
			return this.canvasPresenter().nativeView();
		}
		return null;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.HybridModelPresenter::NativeView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.HybridModelPresenter::ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdated: function (model) {
		if (this.elementPresenter() != null) {
			this.elementPresenter().modelUpdated(model);
		}
		if (this.canvasPresenter() != null) {
			this.canvasPresenter().modelUpdated(model);
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.HybridModelPresenter::ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('HybridModelPresenter', $.ig.Object.prototype.$type, [$.ig.IModelPresenter.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.HybridModelPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasPresenterBase" />*/

$.ig.util.defType('CanvasPresenterBase', 'Object', {
	__view: null,
	init: function (view) {
		$.ig.Object.prototype.init.call(this);
		this.__view = view;
	},
	/*<BeginProperty Name="Infragistics.Scheduler.Core.CanvasElementView Infragistics.Scheduler.Core.CanvasPresenterBase::NativeElement()" />*/
	nativeElement: function () {
		return this.__view;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.CanvasElementView Infragistics.Scheduler.Core.CanvasPresenterBase::NativeElement()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasPresenterBase::OnModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	onModelUpdated: function (model) {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasPresenterBase::OnModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.CanvasPresenterBase::Infragistics.Scheduler.Core.IModelPresenter.NativeView()" />*/
	nativeView: function () {
		return this.nativeElement();
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.INativeView Infragistics.Scheduler.Core.CanvasPresenterBase::Infragistics.Scheduler.Core.IModelPresenter.NativeView()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasPresenterBase::Infragistics.Scheduler.Core.IModelPresenter.ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	modelUpdated: function (model) {
		this.onModelUpdated(model);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasPresenterBase::Infragistics.Scheduler.Core.IModelPresenter.ModelUpdated(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('CanvasPresenterBase', $.ig.Object.prototype.$type, [$.ig.IModelPresenter.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasPresenterBase" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasNonTextPresenter" />*/

$.ig.util.defType('CanvasNonTextPresenter', 'CanvasPresenterBase', {
	init: function (view) {
		$.ig.CanvasPresenterBase.prototype.init.call(this, view);
	},
	$type: new $.ig.Type('CanvasNonTextPresenter', $.ig.CanvasPresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasNonTextPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasPresenterManager" />*/

$.ig.util.defType('CanvasPresenterManager', 'Object', {
	__container: null,
	init: function (container) {
		$.ig.Object.prototype.init.call(this);
		this.__container = container;
	},
	/*<BeginMethod Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.CanvasPresenterManager::GetModelPresenter(Infragistics.Scheduler.Core.ModelBase)" />*/
	getModelPresenter: function (model) {
		var hybridPresenter = $.ig.util.cast($.ig.HybridModelPresenter.prototype.$type, model.presenter());
		if (hybridPresenter == null) {
			hybridPresenter = new $.ig.HybridModelPresenter();
			hybridPresenter.elementPresenter(model.presenter());
		}
		var presenter = hybridPresenter.canvasPresenter();
		if (presenter != null) {
			return presenter;
		}
		if ($.ig.util.cast($.ig.TextModel.prototype.$type, model) !== null) {
			presenter = new $.ig.CanvasTextPresenter(new $.ig.CanvasTextView(model.getType() != $.ig.TextModel.prototype.$type));
		} else if ($.ig.util.cast($.ig.ShapeModel.prototype.$type, model) !== null) {
			presenter = new $.ig.CanvasShapePresenter(new $.ig.CanvasShapeView());
		} else {
			presenter = new $.ig.CanvasNonTextPresenter(new $.ig.CanvasNonTextView());
		}
		hybridPresenter.canvasPresenter(presenter);
		model.presenter(hybridPresenter);
		return presenter;
	}
	/*<EndMethod Name="Infragistics.Scheduler.Core.IModelPresenter Infragistics.Scheduler.Core.CanvasPresenterManager::GetModelPresenter(Infragistics.Scheduler.Core.ModelBase)" />*/
	,
	$type: new $.ig.Type('CanvasPresenterManager', $.ig.Object.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasPresenterManager" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasShapePresenter" />*/

$.ig.util.defType('CanvasShapePresenter', 'CanvasPresenterBase', {
	init: function (view) {
		$.ig.CanvasPresenterBase.prototype.init.call(this, view);
	},
	$type: new $.ig.Type('CanvasShapePresenter', $.ig.CanvasPresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasShapePresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasTextPresenter" />*/

$.ig.util.defType('CanvasTextPresenter', 'CanvasPresenterBase', {
	init: function (view) {
		$.ig.CanvasPresenterBase.prototype.init.call(this, view);
	},
	$type: new $.ig.Type('CanvasTextPresenter', $.ig.CanvasPresenterBase.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasTextPresenter" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasElementView" />*/

$.ig.util.defType('CanvasElementView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasElementView::DrawsBackground()" />*/
	drawsBackground: function () {
		return true;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasElementView::DrawsBackground()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasElementView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	render: function (context, model, metricsProvider, offsetX, offsetY, workRect) {
		if (this.drawsBackground()) {
			var role = model.role();
			var background = model.background();
			if (background == null) {
				background = metricsProvider.getBackground(role);
			}
			var left = model.x() + offsetX;
			var top = model.y() + offsetY;
			if (background != null) {
				workRect.height(model.height());
				workRect.width(model.width());
				workRect.canvasTop(top);
				workRect.canvasLeft(left);
				workRect.__fill = background;
				context.renderRectangle(workRect);
			}
			var borderThickNess = metricsProvider.getBorderThickness(role);
			var lineBrush;
			if (borderThickNess.left() > 0) {
				lineBrush = metricsProvider.getBorderLeft(role);
				if (lineBrush != null) {
					workRect.height(model.height());
					workRect.width(borderThickNess.left());
					workRect.__fill = lineBrush;
					context.renderRectangle(workRect);
				}
			}
			if (borderThickNess.top() > 0) {
				lineBrush = metricsProvider.getBorderTop(role);
				if (lineBrush != null) {
					workRect.height(borderThickNess.top());
					workRect.width(model.width());
					workRect.__fill = lineBrush;
					context.renderRectangle(workRect);
				}
			}
			if (borderThickNess.right() > 0) {
				lineBrush = metricsProvider.getBorderRight(role);
				if (lineBrush != null) {
					workRect.canvasTop(top);
					workRect.canvasLeft(left + model.width() - borderThickNess.right());
					workRect.height(model.height());
					workRect.width(borderThickNess.right());
					workRect.__fill = lineBrush;
					context.renderRectangle(workRect);
				}
			}
			if (borderThickNess.bottom() > 0) {
				lineBrush = metricsProvider.getBorderBottom(role);
				if (lineBrush != null) {
					workRect.canvasTop(top + model.height() - borderThickNess.right());
					workRect.canvasLeft(left);
					workRect.height(borderThickNess.bottom());
					workRect.width(model.width());
					workRect.__fill = lineBrush;
					context.renderRectangle(workRect);
				}
			}
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasElementView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	,
	$type: new $.ig.Type('CanvasElementView', $.ig.Object.prototype.$type, [$.ig.INativeView.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasElementView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasNonTextView" />*/

$.ig.util.defType('CanvasNonTextView', 'CanvasElementView', {
	init: function () {
		$.ig.CanvasElementView.prototype.init.call(this);
	},
	$type: new $.ig.Type('CanvasNonTextView', $.ig.CanvasElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasNonTextView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasShapeView" />*/

$.ig.util.defType('CanvasShapeView', 'CanvasElementView', {
	init: function () {
		$.ig.CanvasElementView.prototype.init.call(this);
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasShapeView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	render: function (context, model, metricsProvider, offsetX, offsetY, workRect) {
		var smodel = $.ig.util.cast($.ig.ShapeModel.prototype.$type, model);
		var fillBrush = smodel.fill();
		if (fillBrush == null) {
			fillBrush = metricsProvider.getBackground(model.role());
		}
		if (fillBrush == null) {
			return;
		}
		switch (smodel.shapeType()) {
			default:
			case $.ig.scheduler.ShapeType.rectangle:
				workRect.height(model.height());
				workRect.width(model.width());
				workRect.canvasTop(model.y() + offsetY);
				workRect.canvasLeft(model.x() + offsetX);
				workRect.__fill = fillBrush;
				context.renderRectangle(workRect);
				break;
			case $.ig.scheduler.ShapeType.ellipse:
				var ellipse = new $.ig.EllipseGeometry();
				ellipse.radiusX($.ig.intDivide(model.width(), 2));
				ellipse.radiusY($.ig.intDivide(model.height(), 2));
				ellipse.center({ __x: model.x() + ((model.width()) / 2) + offsetX, __y: model.y() + ((model.height()) / 2) + offsetY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				var path = (function () {
					var $ret = new $.ig.Path();
					$ret.data(ellipse);
					$ret.fill(fillBrush);
					$ret.isHitTestVisible(false);
					$ret.stroke(null);
					return $ret;
				}());
				context.renderPath(path);
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasShapeView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	,
	$type: new $.ig.Type('CanvasShapeView', $.ig.CanvasElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasShapeView" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.CanvasTextView" />*/

$.ig.util.defType('CanvasTextView', 'CanvasElementView', {
	__drawsBackground: false,
	__textblock: null,
	init: function (drawsBackground) {
		$.ig.CanvasElementView.prototype.init.call(this);
		this.__drawsBackground = drawsBackground;
	},
	/*<BeginProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasTextView::DrawsBackground()" />*/
	drawsBackground: function () {
		return this.__drawsBackground;
	}
	/*<EndProperty Name="System.Boolean Infragistics.Scheduler.Core.CanvasTextView::DrawsBackground()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.CanvasTextView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	render: function (context, model, metricsProvider, offsetX, offsetY, workRect) {
		if (this.__drawsBackground) {
			$.ig.CanvasElementView.prototype.render.call(this, context, model, metricsProvider, offsetX, offsetY, workRect);
		}
		var tmodel = $.ig.util.cast($.ig.TextModel.prototype.$type, model);
		var text = tmodel.text();
		if (text == null || text.length == 0) {
			return;
		}
		var halign = tmodel.horizontalAlignment();
		var valign = tmodel.verticalAlignment();
		var borders = metricsProvider.getBorderThickness(model.role());
		var padding = metricsProvider.getPadding(model.role());
		var left = model.x() + offsetX + model.paddingLeft();
		var top = model.y() + offsetY + model.paddingTop();
		var width = model.width() - (borders.left() + borders.right() + model.paddingLeft() + model.paddingRight());
		var height = model.height() - (borders.top() + borders.bottom() + model.paddingTop() + model.paddingBottom());
		var font = model.fontInfo();
		if (font == null) {
			font = metricsProvider.getFont(model.role());
		}
		if (font == null) {
			return;
		}
		var fill = tmodel.textBrush();
		if (fill == null) {
			fill = metricsProvider.getTextBrush(model.role());
		}
		if (this.__textblock == null) {
			this.__textblock = new $.ig.TextBlock();
		}
		this.__textblock.fill(fill);
		this.__textblock.text(text);
		context.setFontInfo(font);
		var textHeight = metricsProvider.getFontHeight(model.role(), font);
		var textWidth = this.__textblock.getHistoricalWidth(font, font.versionNumber());
		if (textWidth < 0) {
			textWidth = context.measureTextBlockWidth(this.__textblock);
			this.__textblock.setHistoricalWidth(font, font.versionNumber(), textWidth);
		}
		var restoreRequired = false;
		if (textWidth > width) {
			textWidth = width;
			restoreRequired = true;
			context.save();
			context.setRectangleClip(new $.ig.Rect(0, left, top, width, height));
		}
		if (halign != $.ig.scheduler.ContentHorizontalAlignment.left) {
			var deltaWidth = width - textWidth;
			if (deltaWidth > 0) {
				switch (halign) {
					default:
					case $.ig.scheduler.ContentHorizontalAlignment.center:
						left += deltaWidth / 2;
						break;
					case $.ig.scheduler.ContentHorizontalAlignment.right:
						left += deltaWidth;
						break;
				}
			}
		}
		if (valign != $.ig.scheduler.ContentVerticalAlignment.top) {
			var deltaHeight = height - textHeight;
			if (deltaHeight > 0) {
				switch (halign) {
					default:
					case $.ig.scheduler.ContentHorizontalAlignment.center:
						top += deltaHeight / 2;
						break;
					case $.ig.scheduler.ContentHorizontalAlignment.right:
						top += deltaHeight;
						break;
				}
			}
		}
		this.__textblock.canvasLeft(left);
		this.__textblock.canvasTop(top);
		context.renderTextBlock(this.__textblock);
		if (restoreRequired) {
			context.restore();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.CanvasTextView::Render(Infragistics.RenderingContext, Infragistics.Scheduler.Core.ModelBase, Infragistics.Scheduler.Core.IRoleMetricsProvider, System.Double, System.Double, System.Windows.Shapes.Rectangle)" />*/
	,
	$type: new $.ig.Type('CanvasTextView', $.ig.CanvasElementView.prototype.$type)
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.CanvasTextView" />*/

/*<BeginType Name="Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass" />*/

$.ig.util.defType('GridLayout___GetCellRectsInRow__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: null,
	___col_5_0: 0,
	__row: 0,
	___3__row: 0,
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		while (this.___1__state >= 0) {
			switch (this.___1__state) {
				case 0:
					this.___1__state = -1;
					this.___col_5_0 = 0;
					this.___1__state = 1;
					break;
				case 1:
					this.___1__state = -1;
					if (this.___col_5_0 < this.___4__this.__totalCols) {
						this.___2__current = this.___4__this.getCellRect(this.__row, this.___col_5_0);
						this.___1__state = 2;
						return true;
					}
					break;
				case 2:
					this.___1__state = -1;
					this.___col_5_0++;
					this.___1__state = 1;
					break;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.GridLayout___GetCellRectsInRow__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		d__.__row = this.___3__row;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('GridLayout___GetCellRectsInRow__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.GridLayout___GetCellRectsInRow__IteratorClass" />*/

/*<BeginType Name="Infragistics.Layout.GridLayout___GetCellRects__IteratorClass" />*/

$.ig.util.defType('GridLayout___GetCellRects__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: null,
	___row_5_0: 0,
	___col_5_1: 0,
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		while (this.___1__state >= 0) {
			switch (this.___1__state) {
				case 0:
					this.___1__state = -1;
					this.___row_5_0 = 0;
					this.___1__state = 1;
					break;
				case 1:
					this.___1__state = -1;
					if (this.___row_5_0 < this.___4__this.__totalRows) {
						this.___col_5_1 = 0;
						this.___1__state = 2;
						break;
					}
					break;
				case 2:
					this.___1__state = -1;
					if (this.___col_5_1 < this.___4__this.__totalCols) {
						this.___2__current = this.___4__this.getCellRect(this.___row_5_0, this.___col_5_1);
						this.___1__state = 3;
						return true;
					}
					this.___row_5_0++;
					this.___1__state = 1;
					break;
				case 3:
					this.___1__state = -1;
					this.___col_5_1++;
					this.___1__state = 2;
					break;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.GridLayout___GetCellRects__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRects__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('GridLayout___GetCellRects__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.GridLayout___GetCellRects__IteratorClass" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass" />*/

$.ig.util.defType('VisualModel___GetHiddenModels__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: null,
	___hiddenLayer_5_0: null,
	___hiddenKeys_5_1: null,
	___hiddenCount_5_2: 0,
	___hiddenRemoved_5_3: null,
	___k_5_4: 0,
	___models_5_5: null,
	___m_5_6: 0,
	___model_5_7: null,
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		while (this.___1__state >= 0) {
			switch (this.___1__state) {
				case 0:
					this.___1__state = -1;
					this.___hiddenLayer_5_0 = this.___4__this.hiddenLayer();
					this.___hiddenKeys_5_1 = this.___4__this.hiddenLayer().keyList();
					this.___hiddenCount_5_2 = this.___hiddenKeys_5_1.count();
					this.___hiddenRemoved_5_3 = this.___4__this.hiddenLayer().removedList();
					this.___k_5_4 = 0;
					this.___1__state = 1;
					break;
				case 1:
					this.___1__state = -1;
					if (this.___k_5_4 < this.___hiddenCount_5_2) {
						if (this.___hiddenRemoved_5_3.__inner[this.___k_5_4]) {
							this.___1__state = 4;
							break;
						}
						this.___models_5_5 = this.___hiddenLayer_5_0.item(this.___hiddenKeys_5_1.__inner[this.___k_5_4]);
						this.___m_5_6 = 0;
						this.___1__state = 2;
						break;
					}
					break;
				case 2:
					this.___1__state = -1;
					if (this.___m_5_6 < this.___models_5_5.count()) {
						this.___model_5_7 = this.___models_5_5.__inner[this.___m_5_6];
						if (this.___model_5_7 != null) {
							this.___2__current = this.___model_5_7;
							this.___1__state = 3;
							return true;
						}
						this.___1__state = 3;
						break;
					}
					this.___1__state = 4;
					break;
				case 3:
					this.___1__state = -1;
					this.___m_5_6++;
					this.___1__state = 2;
					break;
				case 4:
					this.___1__state = -1;
					this.___k_5_4++;
					this.___1__state = 1;
					break;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Core.ModelBase>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.VisualModel___GetHiddenModels__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Core.ModelBase>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.Generic.IEnumerator<Infragistics.Scheduler.Core.ModelBase>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.Generic.IEnumerator<Infragistics.Scheduler.Core.ModelBase>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('VisualModel___GetHiddenModels__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModel___GetHiddenModels__IteratorClass" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass" />*/

$.ig.util.defType('AgendaInfo___Days__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: new Date(),
	__dayEnumerator: null,
	___day_5_0: new Date(),
	__start: new Date(),
	___3__start: new Date(),
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::_m_Finally0()" />*/
	__m_Finally0: function () {
		this.___1__state = -1;
		if (this.__dayEnumerator != null) {
			this.__dayEnumerator.dispose();
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::_m_Finally0()" />*/
	,
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.___1__state >= 0) {
				switch (this.___1__state) {
					case 0:
						this.___1__state = -1;
						this.___4__this.ensureData();
						this.___1__state = 1;
						this.__dayEnumerator = this.___4__this.__daysAsList.getEnumerator();
						this.___1__state = 2;
						break;
					case 2:
						this.___1__state = 1;
						if (this.__dayEnumerator.moveNext()) {
							this.___day_5_0 = this.__dayEnumerator.current();
							if (this.___day_5_0 >= this.__start) {
								this.___2__current = this.___day_5_0;
								this.___1__state = 2;
								return true;
							}
							this.___1__state = 2;
							break;
						}
						this.__m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.Generic.IEnumerable<System.DateTime>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.AgendaInfo___Days__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		d__.__start = this.___3__start;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.Generic.IEnumerable<System.DateTime>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
		switch (this.___1__state) {
			case 1:
			case 2:
				this.__m_Finally0();
				break;
		}
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="System.DateTime Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.Generic.IEnumerator<System.DateTime>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.DateTime Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.Generic.IEnumerator<System.DateTime>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('AgendaInfo___Days__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Date.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Date.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.AgendaInfo___Days__IteratorClass" />*/

/*<BeginType Name="Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass" />*/

$.ig.util.defType('GridLayout___GetCellRectsInColumn__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: null,
	___row_5_0: 0,
	__col: 0,
	___3__col: 0,
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		while (this.___1__state >= 0) {
			switch (this.___1__state) {
				case 0:
					this.___1__state = -1;
					this.___row_5_0 = 0;
					this.___1__state = 1;
					break;
				case 1:
					this.___1__state = -1;
					if (this.___row_5_0 < this.___4__this.__totalRows) {
						this.___2__current = this.___4__this.getCellRect(this.___row_5_0, this.__col);
						this.___1__state = 2;
						return true;
					}
					break;
				case 2:
					this.___1__state = -1;
					this.___row_5_0++;
					this.___1__state = 1;
					break;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.GridLayout___GetCellRectsInColumn__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		d__.__col = this.___3__col;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.Generic.IEnumerable<System.Windows.Rect>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Windows.Rect Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.Generic.IEnumerator<System.Windows.Rect>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('GridLayout___GetCellRectsInColumn__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Rect.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Layout.GridLayout___GetCellRectsInColumn__IteratorClass" />*/

/*<BeginType Name="Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass" />*/

$.ig.util.defType('VisualModel___GetAllModels__IteratorClass', 'Object', {
	___1__state: 0,
	___2__current: null,
	___schedulerLayers_5_0: null,
	___end_5_1: 0,
	___step_5_2: 0,
	___i_5_3: 0,
	___currentLayer_5_4: null,
	___valueListCount_5_5: 0,
	___c_5_6: 0,
	___model_5_7: null,
	__backwards: false,
	___3__backwards: false,
	___4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.___1__state = _1__state;
	},
	/*<BeginMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::MoveNext()" />*/
	moveNext: function () {
		while (this.___1__state >= 0) {
			switch (this.___1__state) {
				case 0:
					{
						this.___1__state = -1;
						this.___schedulerLayers_5_0 = this.___4__this.schedulerLayers();
						var layerCount = this.___schedulerLayers_5_0.count();
						var start = this.__backwards ? layerCount - 1 : 0;
						this.___end_5_1 = this.__backwards ? -1 : layerCount;
						this.___step_5_2 = this.__backwards ? -1 : 1;
						this.___i_5_3 = start;
						this.___1__state = 1;
						break;
					}
				case 1:
					this.___1__state = -1;
					if (this.___i_5_3 != this.___end_5_1) {
						this.___currentLayer_5_4 = this.___schedulerLayers_5_0.__inner[this.___i_5_3];
						this.___valueListCount_5_5 = this.___currentLayer_5_4.valueList().count();
						this.___c_5_6 = 0;
						this.___1__state = 2;
						break;
					}
					break;
				case 2:
					this.___1__state = -1;
					if (this.___c_5_6 < this.___valueListCount_5_5) {
						if (this.___currentLayer_5_4.removedList().__inner[this.___c_5_6]) {
							this.___1__state = 3;
							break;
						}
						this.___model_5_7 = this.___currentLayer_5_4.valueList().__inner[this.___c_5_6];
						if (this.___model_5_7 != null) {
							this.___2__current = this.___model_5_7;
							this.___1__state = 3;
							return true;
						}
						this.___1__state = 3;
						break;
					}
					this.___i_5_3 += this.___step_5_2;
					this.___1__state = 1;
					break;
				case 3:
					this.___1__state = -1;
					this.___c_5_6++;
					this.___1__state = 2;
					break;
			}
		}
		return false;
	}
	/*<EndMethod Name="System.Boolean Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::MoveNext()" />*/
	,
	/*<BeginMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Core.ModelBase>.GetEnumerator()" />*/
	getEnumerator: function () {
		var d__;
		if (this.___1__state == -2) {
			this.___1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.VisualModel___GetAllModels__IteratorClass(0);
			d__.___4__this = this.___4__this;
		}
		d__.__backwards = this.___3__backwards;
		return d__;
	}
	/*<EndMethod Name="System.Collections.Generic.IEnumerator Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.Generic.IEnumerable<Infragistics.Scheduler.Core.ModelBase>.GetEnumerator()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.IEnumerator.Reset()" />*/
	,
	/*<BeginMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.IDisposable.Dispose()" />*/
	dispose: function () {
	}
	/*<EndMethod Name="System.Void Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.IDisposable.Dispose()" />*/
	,
	/*<BeginProperty Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.Generic.IEnumerator<Infragistics.Scheduler.Core.ModelBase>.Current()" />*/
	current: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="Infragistics.Scheduler.Core.ModelBase Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.Generic.IEnumerator<Infragistics.Scheduler.Core.ModelBase>.Current()" />*/
	,
	/*<BeginProperty Name="System.Object Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	current1: function () {
		return this.___2__current;
	}
	/*<EndProperty Name="System.Object Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass::System.Collections.IEnumerator.Current()" />*/
	,
	$type: new $.ig.Type('VisualModel___GetAllModels__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.ModelBase.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

/*<EndType Name="Infragistics.Scheduler.Core.VisualModel___GetAllModels__IteratorClass" />*/

/*<BeginStatics Name="Infragistics.Layout.GridLength" />*/

$.ig.GridLength.prototype.__s_auto = new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.auto);
$.ig.GridLength.prototype.__s_star = new $.ig.GridLength(2, 1, $.ig.GridUnitType.prototype.star);
/*<EndStatics Name="Infragistics.Layout.GridLength" />*/

/*<BeginStatics Name="Infragistics.Layout.GridLayoutUtilities" />*/

$.ig.GridLayoutUtilities.prototype._s_emptyThickness = $.ig.GridLayoutUtilities.prototype.createEmptyThickness();
/*<EndStatics Name="Infragistics.Layout.GridLayoutUtilities" />*/

/*<BeginStatics Name="Infragistics.Scheduler.ActivityBase" />*/

$.ig.scheduler.ActivityBase.prototype.__idPropertyName = "Id";
$.ig.scheduler.ActivityBase.__idPropertyName = $.ig.scheduler.ActivityBase.prototype.__idPropertyName;
$.ig.scheduler.ActivityBase.prototype.__subjectPropertyName = "Subject";
$.ig.scheduler.ActivityBase.__subjectPropertyName = $.ig.scheduler.ActivityBase.prototype.__subjectPropertyName;
$.ig.scheduler.ActivityBase.prototype.__startPropertyName = "Start";
$.ig.scheduler.ActivityBase.__startPropertyName = $.ig.scheduler.ActivityBase.prototype.__startPropertyName;
$.ig.scheduler.ActivityBase.prototype.__endPropertyName = "End";
$.ig.scheduler.ActivityBase.__endPropertyName = $.ig.scheduler.ActivityBase.prototype.__endPropertyName;
$.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName = "ResourceId";
$.ig.scheduler.ActivityBase.__resourceIdPropertyName = $.ig.scheduler.ActivityBase.prototype.__resourceIdPropertyName;
$.ig.scheduler.ActivityBase.prototype.__resourcePropertyName = "Resource";
$.ig.scheduler.ActivityBase.__resourcePropertyName = $.ig.scheduler.ActivityBase.prototype.__resourcePropertyName;
$.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName = "Recurrence";
$.ig.scheduler.ActivityBase.__recurrencePropertyName = $.ig.scheduler.ActivityBase.prototype.__recurrencePropertyName;
$.ig.scheduler.ActivityBase.prototype.__recurrenceRootPropertyName = "RecurrenceRoot";
$.ig.scheduler.ActivityBase.__recurrenceRootPropertyName = $.ig.scheduler.ActivityBase.prototype.__recurrenceRootPropertyName;
$.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName = "RecurrenceId";
$.ig.scheduler.ActivityBase.__recurrenceIdPropertyName = $.ig.scheduler.ActivityBase.prototype.__recurrenceIdPropertyName;
$.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName = "OriginalStart";
$.ig.scheduler.ActivityBase.__originalStartPropertyName = $.ig.scheduler.ActivityBase.prototype.__originalStartPropertyName;
$.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName = "IsRemoved";
$.ig.scheduler.ActivityBase.__isRemovedPropertyName = $.ig.scheduler.ActivityBase.prototype.__isRemovedPropertyName;
$.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName = "Description";
$.ig.scheduler.ActivityBase.__descriptionPropertyName = $.ig.scheduler.ActivityBase.prototype.__descriptionPropertyName;
/*<EndStatics Name="Infragistics.Scheduler.ActivityBase" />*/

/*<BeginStatics Name="Infragistics.Scheduler.ScheduleResource" />*/

$.ig.scheduler.ScheduleResource.prototype._idProperty = "Id";
$.ig.scheduler.ScheduleResource._idProperty = $.ig.scheduler.ScheduleResource.prototype._idProperty;
$.ig.scheduler.ScheduleResource.prototype._displayNameProperty = "DisplayName";
$.ig.scheduler.ScheduleResource._displayNameProperty = $.ig.scheduler.ScheduleResource.prototype._displayNameProperty;
$.ig.scheduler.ScheduleResource.prototype._colorSchemeProperty = "ColorScheme";
$.ig.scheduler.ScheduleResource._colorSchemeProperty = $.ig.scheduler.ScheduleResource.prototype._colorSchemeProperty;
/*<EndStatics Name="Infragistics.Scheduler.ScheduleResource" />*/

/*<BeginStatics Name="Infragistics.Scheduler.ScheduleResourceStorage" />*/

$.ig.ScheduleResourceStorage.prototype._tHRESHOLD = 10;
/*<EndStatics Name="Infragistics.Scheduler.ScheduleResourceStorage" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser" />*/

$.ig.DateRecurrenceParser.prototype._fREQ = "FREQ";
$.ig.DateRecurrenceParser.prototype._iNTERVAL = "INTERVAL";
$.ig.DateRecurrenceParser.prototype._cOUNT = "COUNT";
$.ig.DateRecurrenceParser.prototype._uNTIL = "UNTIL";
$.ig.DateRecurrenceParser.prototype._wKST = "WKST";
$.ig.DateRecurrenceParser.prototype._sEMICOLON = ';';
$.ig.DateRecurrenceParser.prototype._cOMMA = ',';
$.ig.DateRecurrenceParser.prototype._eQUAL = '=';
$.ig.DateRecurrenceParser.prototype._iCAL_DATE_FORMAT = "yyyyMMdd";
$.ig.DateRecurrenceParser.prototype._iCAL_DATETIME_FORMAT = "yyyyMMdd\\THHmmss";
$.ig.DateRecurrenceParser.prototype._sTEP = 4;
$.ig.DateRecurrenceParser.prototype._aBBREVIATED_DAYS = [ "SU", "MO", "TU", "WE", "TH", "FR", "SA" ];
$.ig.DateRecurrenceParser.prototype.__frequencyTable = [ $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.yearly), "YEARLY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.monthly), "MONTHLY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.weekly), "WEEKLY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.daily), "DAILY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.hourly), "HOURLY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.minutely), "MINUTELY", $.ig.scheduler.DateRecurrenceFrequency.prototype.getBox($.ig.scheduler.DateRecurrenceFrequency.secondly), "SECONDLY" ];
/*<EndStatics Name="Infragistics.Scheduler.Internal.Recurrence.DateRecurrenceParser" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Internal.Recurrence.CalendarHelper" />*/

$.ig.CalendarHelper.prototype.allDays = 127;
/*<EndStatics Name="Infragistics.Scheduler.Internal.Recurrence.CalendarHelper" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper" />*/

$.ig.RecurrenceCalendarHelper.prototype._weekRule = $.ig.CalendarWeekRule.prototype.firstFourDayWeek;
/*<EndStatics Name="Infragistics.Scheduler.Internal.Recurrence.RecurrenceCalendarHelper" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Data.ColorSchemeManager" />*/

$.ig.ColorSchemeManager.prototype._textBrushWhite = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 255, 255, 255));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._grapeBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 116, 70, 185));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._fuchsiaBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 220, 63, 118));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._pumpkinBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 249, 98, 50));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._leafyBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 67, 156, 71));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._skyeBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 43, 138, 234));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._chocolateBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 121, 85, 72));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._limeBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 159, 179, 40));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._sunflowerBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 255, 152, 0));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._tealBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 46, 156, 166));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._indigoBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 63, 81, 181));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._strawberryBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 235, 71, 63));
	return $ret;
}());
$.ig.ColorSchemeManager.prototype._unassignedBackgroundBrush = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(225, 116, 118, 130));
	return $ret;
}());
/*<EndStatics Name="Infragistics.Scheduler.Data.ColorSchemeManager" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Data.ScheduleListDataSource" />*/

$.ig.scheduler.ScheduleListDataSource.prototype.__handleAppointmentItemsPropertyChangedDefault = true;
$.ig.scheduler.ScheduleListDataSource.__handleAppointmentItemsPropertyChangedDefault = $.ig.scheduler.ScheduleListDataSource.prototype.__handleAppointmentItemsPropertyChangedDefault;
/*<EndStatics Name="Infragistics.Scheduler.Data.ScheduleListDataSource" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Data.SchedulePropertyMapping`1" />*/

$.ig.scheduler.SchedulePropertyMapping$1.prototype.__propertyPropertyName = "Property";
$.ig.scheduler.SchedulePropertyMapping$1.__propertyPropertyName = $.ig.scheduler.SchedulePropertyMapping$1.prototype.__propertyPropertyName;
$.ig.scheduler.SchedulePropertyMapping$1.prototype.__dataObjectPropertyNamePropertyName = "DataObjectPropertyName";
$.ig.scheduler.SchedulePropertyMapping$1.__dataObjectPropertyNamePropertyName = $.ig.scheduler.SchedulePropertyMapping$1.prototype.__dataObjectPropertyNamePropertyName;
$.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertCallbackPropertyName = "ConvertCallback";
$.ig.scheduler.SchedulePropertyMapping$1.__convertCallbackPropertyName = $.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertCallbackPropertyName;
$.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertBackCallbackPropertyName = "ConvertBackCallback";
$.ig.scheduler.SchedulePropertyMapping$1.__convertBackCallbackPropertyName = $.ig.scheduler.SchedulePropertyMapping$1.prototype.__convertBackCallbackPropertyName;
/*<EndStatics Name="Infragistics.Scheduler.Data.SchedulePropertyMapping" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.CanvasContainer" />*/

$.ig.CanvasContainer.prototype.__canvasFallbackBackgroundBrush = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.CanvasContainer" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.Scheduler" />*/

$.ig.Scheduler.prototype._tRACE_GROUPNAME_RECYCLE = "Recycling";
$.ig.Scheduler.prototype._cultureNamePropertyName = "CultureName";
$.ig.Scheduler.prototype._agendaViewAppointmentEndTimeBackgroundBrushPropertyName = "AgendaViewAppointmentEndTimeBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentEndTimeFontInfoPropertyName = "AgendaViewAppointmentEndTimeFontInfo";
$.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrushPropertyName = "AgendaViewAppointmentEndTimeSelectedBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentEndTimeSelectedTextBrushPropertyName = "AgendaViewAppointmentEndTimeSelectedTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentEndTimeTextBrushPropertyName = "AgendaViewAppointmentEndTimeTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentLocationBackgroundBrushPropertyName = "AgendaViewAppointmentLocationBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentLocationFontInfoPropertyName = "AgendaViewAppointmentLocationFontInfo";
$.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedBackgroundBrushPropertyName = "AgendaViewAppointmentLocationSelectedBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentLocationSelectedTextBrushPropertyName = "AgendaViewAppointmentLocationSelectedTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentLocationTextBrushPropertyName = "AgendaViewAppointmentLocationTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentMarginPropertyName = "AgendaViewAppointmentMargin";
$.ig.Scheduler.prototype._agendaViewAppointmentScopePropertyName = "AgendaAppointmentScope";
$.ig.Scheduler.prototype._agendaViewAppointmentSeparatorLineBrushPropertyName = "AgendaViewAppointmentSeparatorLineBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentStartTimeBackgroundBrushPropertyName = "AgendaViewAppointmentStartTimeBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentStartTimeFontInfoPropertyName = "AgendaViewAppointmentStartTimeFontInfo";
$.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrushPropertyName = "AgendaViewAppointmentStartTimeSelectedBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentStartTimeSelectedTextBrushPropertyName = "AgendaViewAppointmentStartTimeSelectedTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentStartTimeTextBrushPropertyName = "AgendaViewAppointmentStartTimeTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentSubjectBackgroundBrushPropertyName = "AgendaViewAppointmentSubjectBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentSubjectFontInfoPropertyName = "AgendaViewAppointmentSubjectFontInfo";
$.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrushPropertyName = "AgendaViewAppointmentSubjectSelectedBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentSubjectSelectedTextBrushPropertyName = "AgendaViewAppointmentSubjectSelectedTextBrush";
$.ig.Scheduler.prototype._agendaViewAppointmentSubjectTextBrushPropertyName = "AgendaViewAppointmentSubjectTextBrush";
$.ig.Scheduler.prototype._agendaViewBackgroundBrushPropertyName = "AgendaViewBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewDayHeaderBackgroundBrushPropertyName = "AgendaViewDayHeaderBackgroundBrush";
$.ig.Scheduler.prototype._agendaViewDayHeaderFontInfoPropertyName = "AgendaViewDayHeaderFontInfo";
$.ig.Scheduler.prototype._agendaViewDayHeaderMarginPropertyName = "AgendaViewDayHeaderMargin";
$.ig.Scheduler.prototype._agendaViewDayHeaderSeparatorLineBrushPropertyName = "AgendaViewDayHeaderSeparatorLineBrush";
$.ig.Scheduler.prototype._agendaViewDayHeaderTextBrushPropertyName = "AgendaViewDayHeaderTextBrush";
$.ig.Scheduler.prototype._agendaViewInterDaySpacingPropertyName = "AgendaViewInterDaySpacing";
$.ig.Scheduler.prototype._agendaViewMaximumDatePropertyName = "AgendaViewMaximumDate";
$.ig.Scheduler.prototype._agendaViewMessageFontInfoPropertyName = "AgendaViewMessageFontInfo";
$.ig.Scheduler.prototype._agendaViewMessageTextBrushPropertyName = "AgendaViewMessageTextBrush";
$.ig.Scheduler.prototype._agendaViewMinimumDatePropertyName = "AgendaViewMinimumDate";
$.ig.Scheduler.prototype._dataSourcePropertyName = "DataSource";
$.ig.Scheduler.prototype._maximumDatePropertyName = "MaximumDate";
$.ig.Scheduler.prototype._minimumDatePropertyName = "MinimumDate";
$.ig.Scheduler.prototype._monthViewDayActivityIndicatorBrushPropertyName = "MonthViewDayActivityIndicatorBrush";
$.ig.Scheduler.prototype._monthViewAgendaVisibilityPropertyName = "MonthViewAgendaVisibility";
$.ig.Scheduler.prototype._monthViewAppointmentFontInfoPropertyName = "MonthViewAppointmentFontInfo";
$.ig.Scheduler.prototype._monthViewBackgroundBrushPropertyName = "MonthViewBackgroundBrush";
$.ig.Scheduler.prototype._monthViewDayContentDisplayModePropertyName = "MonthViewDayContentDisplayMode";
$.ig.Scheduler.prototype._monthViewDayBackgroundBrushPropertyName = "MonthViewDayBackgroundBrush";
$.ig.Scheduler.prototype._monthViewDayFontInfoPropertyName = "MonthViewDayFontInfo";
$.ig.Scheduler.prototype._monthViewDayTextBrushPropertyName = "MonthViewDayTextBrush";
$.ig.Scheduler.prototype._monthViewDayOfWeekHeaderBackgroundBrushPropertyName = "MonthViewDayOfWeekHeaderBackgroundBrush";
$.ig.Scheduler.prototype._monthViewDayOfWeekHeaderFontInfoPropertyName = "MonthViewDayOfWeekHeaderFontInfo";
$.ig.Scheduler.prototype._monthViewDayOfWeekHeaderMarginPropertyName = "MonthViewDayOfWeekHeaderMargin";
$.ig.Scheduler.prototype._monthViewDayOfWeekHeaderTextBrushPropertyName = "MonthViewDayOfWeekHeaderTextBrush";
$.ig.Scheduler.prototype._monthViewDayOfWeekHeaderVisibilityPropertyName = "MonthViewDayOfWeekHeaderVisibility";
$.ig.Scheduler.prototype._monthViewHorizontalSeparatorVisibilityPropertyName = "MonthViewHorizontalSeparatorVisibility";
$.ig.Scheduler.prototype._monthViewInterMonthSpacingPropertyName = "MonthViewInterMonthSpacing";
$.ig.Scheduler.prototype._monthViewLeadingDayBackgroundBrushPropertyName = "MonthViewLeadingDayBackgroundBrush";
$.ig.Scheduler.prototype._monthViewLeadingDayFontInfoPropertyName = "MonthViewLeadingDayFontInfo";
$.ig.Scheduler.prototype._monthViewLeadingDayTextBrushPropertyName = "MonthViewLeadingDayTextBrush";
$.ig.Scheduler.prototype._monthViewLeadingDayVisibilityPropertyName = "MonthViewLeadingDayVisibility";
$.ig.Scheduler.prototype._monthViewNameBackgroundBrushPropertyName = "MonthViewNameBackgroundBrush";
$.ig.Scheduler.prototype._monthViewNameSeparatorLineBrushPropertyName = "MonthViewNameSeparatorLineBrush";
$.ig.Scheduler.prototype._monthViewNameTextBrushPropertyName = "MonthViewNameTextBrush";
$.ig.Scheduler.prototype._monthViewNameFontInfoPropertyName = "MonthViewNameFontInfo";
$.ig.Scheduler.prototype._monthViewNameMarginPropertyName = "MonthViewNameMargin";
$.ig.Scheduler.prototype._monthViewNameVisibilityPropertyName = "MonthViewNameVisibility";
$.ig.Scheduler.prototype._monthViewScrollDirectionPropertyName = "MonthViewScrollDirection";
$.ig.Scheduler.prototype._monthViewScrollModePropertyName = "MonthViewScrollMode";
$.ig.Scheduler.prototype._monthViewSelectedDayBackgroundBrushPropertyName = "MonthViewSelectedDayBackgroundBrush";
$.ig.Scheduler.prototype._monthViewSelectedDayTextBrushPropertyName = "MonthViewSelectedDayTextBrush";
$.ig.Scheduler.prototype._monthViewSeparatorLineBrushPropertyName = "MonthViewSeparatorLineBrush";
$.ig.Scheduler.prototype._monthViewTodayHighlightBrushPropertyName = "MonthViewTodayHighlightBrush";
$.ig.Scheduler.prototype._monthViewTodayTextBrushPropertyName = "MonthViewTodayTextBrush";
$.ig.Scheduler.prototype._monthViewTrailingDayBackgroundBrushPropertyName = "MonthViewTrailingDayBackgroundBrush";
$.ig.Scheduler.prototype._monthViewTrailingDayFontInfoPropertyName = "MonthViewTrailingDayFontInfo";
$.ig.Scheduler.prototype._monthViewTrailingDayTextBrushPropertyName = "MonthViewTrailingDayTextBrush";
$.ig.Scheduler.prototype._monthViewTrailingDayVisibilityPropertyName = "MonthViewTrailingDayVisibility";
$.ig.Scheduler.prototype._monthViewVerticalSeparatorVisibilityPropertyName = "MonthViewVerticalSeparatorVisibility";
$.ig.Scheduler.prototype._monthViewWeekNumberBackgroundBrushPropertyName = "MonthViewWeekNumberBackgroundBrush";
$.ig.Scheduler.prototype._monthViewWeekNumberFontInfoPropertyName = "MonthViewWeekNumberFontInfo";
$.ig.Scheduler.prototype._monthViewWeekNumberTextBrushPropertyName = "MonthViewWeekNumberTextBrush";
$.ig.Scheduler.prototype._monthViewWeekNumberVisibilityPropertyName = "MonthViewWeekNumberVisibility";
$.ig.Scheduler.prototype._selectedAppointmentPropertyName = "SelectedAppointment";
$.ig.Scheduler.prototype._selectedDatePropertyName = "SelectedDate";
$.ig.Scheduler.prototype._viewSplitOrientationPropertyName = "ViewSplitOrientation";
$.ig.Scheduler.prototype._viewSplitOrientationModePropertyName = "ViewSplitOrientationMode";
$.ig.Scheduler.prototype._viewModePropertyName = "ViewMode";
$.ig.Scheduler.prototype.___traceLog = new $.ig.List$1(String, 0);
/*<EndStatics Name="Infragistics.Scheduler.Core.Scheduler" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.SchedulerUtils" />*/

$.ig.SchedulerUtils.prototype.disabledClass = "ui-state-disabled";
/*<EndStatics Name="Infragistics.Scheduler.Core.SchedulerUtils" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.ElementView" />*/

$.ig.ElementView.prototype.zIndex_HitTestOvelay = 100;
/*<EndStatics Name="Infragistics.Scheduler.Core.ElementView" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.SchedulerView" />*/

if ($.ig.SchedulerView.prototype.staticInit && !$.ig.SchedulerView.prototype.schedulerViewStaticInitCalled) { $.ig.SchedulerView.prototype.staticInit(); $.ig.SchedulerView.prototype.schedulerViewStaticInitCalled = true; }
/*<EndStatics Name="Infragistics.Scheduler.Core.SchedulerView" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.Brushes" />*/

$.ig.Brushes.prototype.__instance = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.Brushes" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy" />*/

$.ig.NativeSchedulerViewDummy.prototype._s_instance = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.NativeSchedulerViewDummy" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.SpatialEngineAgendaView" />*/

$.ig.SpatialEngineAgendaView.prototype.aGENDA_APPOINTMENT_SEPARATORLINE_HEIGHT = 1;
$.ig.SpatialEngineAgendaView.prototype.aGENDA_DAYHEADER_SEPARATORLINE_HEIGHT = 2;
$.ig.SpatialEngineAgendaView.prototype.aGENDA_ROW_VERTICAL_SPACING = 3;
$.ig.SpatialEngineAgendaView.prototype.aGENDA_COLORBAR_HORZ_SPACING = 8;
/*<EndStatics Name="Infragistics.Scheduler.Core.SpatialEngineAgendaView" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.SpatialEngineMonthView" />*/

$.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_HEIGHT = 2;
$.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_MARGIN_TOP = 12;
$.ig.SpatialEngineMonthView.prototype.mONTHVIEW_NAME_SEPARATORLINE_MARGIN_BOTTOM = 10;
/*<EndStatics Name="Infragistics.Scheduler.Core.SpatialEngineMonthView" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo" />*/

$.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana = "Verdana";
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize7 = 7;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize8 = 8;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize9 = 9;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize10 = 10;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize11 = 11;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize12 = 12;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize13 = 13;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize14 = 14;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize15 = 15;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize16 = 16;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize18 = 18;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize20 = 20;
$.ig.SchedulerDefaultThemeInfo.prototype.fontSize22 = 22;
$.ig.SchedulerDefaultThemeInfo.prototype.defaultFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize12;
$.ig.SchedulerDefaultThemeInfo.prototype.largeFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.mediumFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize10;
$.ig.SchedulerDefaultThemeInfo.prototype.smallFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize8;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewAppointmentFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewAppointmentFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize7;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayOfWeekHeaderFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewDayOfWeekHeaderFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize14;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewNameFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewNameFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize22;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewWeekNumberFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewWeekNumberFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize12;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewLeadingDayFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewLeadingDayFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewTrailingDayFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.monthViewTrailingDayFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewDayHeaderFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewDayHeaderFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize22;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentEndTimeFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentEndTimeFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize15;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentStartTimeFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentStartTimeFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize15;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentSubjectFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentSubjectFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentLocationFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewAppointmentLocationFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize18;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewMessageFontName = $.ig.SchedulerDefaultThemeInfo.prototype.fontNameVerdana;
$.ig.SchedulerDefaultThemeInfo.prototype.agendaViewMessageFontSize = $.ig.SchedulerDefaultThemeInfo.prototype.fontSize22;
$.ig.SchedulerDefaultThemeInfo.prototype._brush_Transparent = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(0, 255, 255, 255));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_666666 = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 102, 102, 102));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_30PctOpacity = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(77, 102, 102, 102));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_666666_50PctOpacity = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(128, 102, 102, 102));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_0099FF = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 0, 153, 255));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_333333_30PctOpacity = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(77, 51, 51, 51));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_444444 = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 68, 68, 68));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_888888 = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 136, 136, 136));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_999999 = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 153, 153, 153));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_BBBBBB = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 187, 187, 187));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_CCCCCC_30PctOpacity = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(77, 204, 204, 204));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_C0C0C0 = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 192, 192, 192));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_DDDDDD = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 221, 221, 221));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype._brush_EEEEEE = (function () {
	var $ret = new $.ig.Brush();
	$ret.color($.ig.Color.prototype.fromArgb(255, 238, 238, 238));
	return $ret;
}());
$.ig.SchedulerDefaultThemeInfo.prototype.thicknessEmptyValue = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSelectedDayTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewSeparatorLineBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayActivityIndicatorBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayHighlightBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTodayTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameSeparatorLineBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeSelectedTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeSelectedTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectSelectedTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationSelectedTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSeparatorLineBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderSeparatorLineBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewBackgroundBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageTextBrush = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewWeekNumberFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewLeadingDayFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewTrailingDayFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewAppointmentFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentEndTimeFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentStartTimeFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentSubjectFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentLocationFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewMessageFontInfo = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewNameMargin = null;
$.ig.SchedulerDefaultThemeInfo.prototype._monthViewDayOfWeekHeaderMargin = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewAppointmentMargin = null;
$.ig.SchedulerDefaultThemeInfo.prototype._agendaViewDayHeaderMargin = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.SchedulerDefaultThemeInfo" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.ModelBase" />*/

$.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX = "";
$.ig.ModelBase.prototype.backgroundPropertyName = "Background";
$.ig.ModelBase.prototype.contentOpacityPropertyName = "ContentOpacity";
$.ig.ModelBase.prototype.currentLayerPropertyName = "CurrentLayer";
$.ig.ModelBase.prototype.fontInfoPropertyName = "FontInfo";
$.ig.ModelBase.prototype.heightPropertyName = "Height";
$.ig.ModelBase.prototype.horizontalAlignmentPropertyName = "HorizontalAlignment";
$.ig.ModelBase.prototype.isSelectedPropertyName = "IsSelected";
$.ig.ModelBase.prototype.leftOffsetPropertyName = "LeftOffset";
$.ig.ModelBase.prototype.leftPercentOffsetPropertyName = "LeftPercentOffset";
$.ig.ModelBase.prototype.lineBreakStylePropertyName = "LineBreakStyle";
$.ig.ModelBase.prototype.modelKeyPropertyName = "ModelKey";
$.ig.ModelBase.prototype.modelTypePropertyName = "ModelType";
$.ig.ModelBase.prototype.opacityPropertyName = "Opacity";
$.ig.ModelBase.prototype.originalValuePropertyName = "OriginalValue";
$.ig.ModelBase.prototype.paddingLeftPropertyName = "PaddingLeft";
$.ig.ModelBase.prototype.paddingTopPropertyName = "PaddingTop";
$.ig.ModelBase.prototype.paddingRightPropertyName = "PaddingRight";
$.ig.ModelBase.prototype.paddingBottomPropertyName = "PaddingBottom";
$.ig.ModelBase.prototype.renderValuePropertyName = "RenderValue";
$.ig.ModelBase.prototype.rolePropertyName = "Role";
$.ig.ModelBase.prototype.selectedBackgroundPropertyName = "SelectedBackground";
$.ig.ModelBase.prototype.selectedStatusPropertyName = "SelectedStatus";
$.ig.ModelBase.prototype.statePropertyName = "State";
$.ig.ModelBase.prototype.textBrushPropertyName = "TextBrush";
$.ig.ModelBase.prototype.topOffsetPropertyName = "TopOffset";
$.ig.ModelBase.prototype.topPercentOffsetPropertyName = "TopPercentOffset";
$.ig.ModelBase.prototype.verticalAlignmentPropertyName = "VerticalAlignment";
$.ig.ModelBase.prototype.virtualizationPercentagePropertyName = "VirtualizationPercentage";
$.ig.ModelBase.prototype.widthPropertyName = "Width";
$.ig.ModelBase.prototype.xPropertyName = "X";
$.ig.ModelBase.prototype.yPropertyName = "Y";
$.ig.ModelBase.prototype.__setterMap = null;
$.ig.ModelBase.prototype.__getterMap = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.ModelBase" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.TextModel" />*/

$.ig.TextModel.prototype.tEXT_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "text";
$.ig.TextModel.prototype.tEXT_MODEL_TYPE = $.ig.ModelType.prototype.text;
$.ig.TextModel.prototype.textPropertyName = "Text";
/*<EndStatics Name="Infragistics.Scheduler.Core.TextModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel" />*/

$.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "agendadayheader";
$.ig.AgendaDayHeaderModel.prototype.aGENDADAYHEADER_MODEL_TYPE = $.ig.ModelType.prototype.header;
/*<EndStatics Name="Infragistics.Scheduler.Core.AgendaDayHeaderModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel" />*/

$.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "agendaapptendtime";
$.ig.AgendaApptEndTimeModel.prototype.aGENDAAPPTENDTIME_MODEL_TYPE = $.ig.ModelType.prototype.text;
/*<EndStatics Name="Infragistics.Scheduler.Core.AgendaApptEndTimeModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel" />*/

$.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "agendaapptsubject";
$.ig.AgendaApptSubjectModel.prototype.aGENDAAPPTSUBJECT_MODEL_TYPE = $.ig.ModelType.prototype.header;
/*<EndStatics Name="Infragistics.Scheduler.Core.AgendaApptSubjectModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.AgendaApptLocationModel" />*/

$.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "agendaapptlocation";
$.ig.AgendaApptLocationModel.prototype.aGENDAAPPTLOCATION_MODEL_TYPE = $.ig.ModelType.prototype.header;
/*<EndStatics Name="Infragistics.Scheduler.Core.AgendaApptLocationModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel" />*/

$.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "agendaapptstarttime";
$.ig.AgendaApptStartTimeModel.prototype.aGENDAAPPTSTARTTIME_MODEL_TYPE = $.ig.ModelType.prototype.text;
/*<EndStatics Name="Infragistics.Scheduler.Core.AgendaApptStartTimeModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.VisualModel" />*/

$.ig.VisualModel.prototype.wEEK_NUMBER_FONT_CACHE_KEY = "week";
$.ig.VisualModel.prototype.dAY_NUMBER_FONT_CACHE_KEY = "day";
/*<EndStatics Name="Infragistics.Scheduler.Core.VisualModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.ModelTypeToExportClassMap" />*/

$.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings = null;
$.ig.scheduler.ModelTypeToExportClassMap.mappings = $.ig.scheduler.ModelTypeToExportClassMap.prototype.mappings;
if ($.ig.scheduler.ModelTypeToExportClassMap.prototype._staticInit && !$.ig.scheduler.ModelTypeToExportClassMap.prototype.modelTypeToExportClassMapStaticInitCalled) { $.ig.scheduler.ModelTypeToExportClassMap.prototype._staticInit(); $.ig.scheduler.ModelTypeToExportClassMap.prototype.modelTypeToExportClassMapStaticInitCalled = true; }
/*<EndStatics Name="Infragistics.Scheduler.Core.ModelTypeToExportClassMap" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.MonthNameModel" />*/

$.ig.MonthNameModel.prototype.mONTHNAME_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "monthname";
$.ig.MonthNameModel.prototype.mONTHNAME_MODEL_TYPE = $.ig.ModelType.prototype.header;
/*<EndStatics Name="Infragistics.Scheduler.Core.MonthNameModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.MonthWeekNumberModel" />*/

$.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "monthweeknumber";
$.ig.MonthWeekNumberModel.prototype.mONTHWEEKNUMBER_MODEL_TYPE = $.ig.ModelType.prototype.weekNumber;
/*<EndStatics Name="Infragistics.Scheduler.Core.MonthWeekNumberModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.ShapeModel" />*/

$.ig.ShapeModel.prototype.sHAPE_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "shape";
$.ig.ShapeModel.prototype.sHAPE_MODEL_TYPE = $.ig.ModelType.prototype.shape;
$.ig.ShapeModel.prototype.fillPropertyName = "Fill";
$.ig.ShapeModel.prototype.linesPropertyName = "Lines";
$.ig.ShapeModel.prototype.shapeTypePropertyName = "ShapeType";
$.ig.ShapeModel.prototype.strokePropertyName = "Stroke";
/*<EndStatics Name="Infragistics.Scheduler.Core.ShapeModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.TimeSlotModel" />*/

$.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "timeslot";
$.ig.TimeSlotModel.prototype.tIMESLOT_MODEL_TYPE = $.ig.ModelType.prototype.timeSlot;
$.ig.TimeSlotModel.prototype.endPropertyName = "End";
$.ig.TimeSlotModel.prototype.hasActivityPropertyName = "HasActivity";
$.ig.TimeSlotModel.prototype.isLeadingDayPropertyName = "IsLeadingDay";
$.ig.TimeSlotModel.prototype.isTodayPropertyName = "IsToday";
$.ig.TimeSlotModel.prototype.isTrailingDayPropertyName = "IsTrailingDay";
$.ig.TimeSlotModel.prototype.startPropertyName = "Start";
/*<EndStatics Name="Infragistics.Scheduler.Core.TimeSlotModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel" />*/

$.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_KEY = $.ig.ModelBase.prototype.bUILTINMODEL_KEY_PREFIX + "dayofweekheader";
$.ig.DayOfWeekHeaderModel.prototype.dAYOFWEEKHEADER_MODEL_TYPE = $.ig.ModelType.prototype.header;
/*<EndStatics Name="Infragistics.Scheduler.Core.DayOfWeekHeaderModel" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.Utils" />*/

$.ig.Utils.prototype.dPINormal = 96;
$.ig.Utils.prototype.maxListSize = 10;
/*<EndStatics Name="Infragistics.Scheduler.Core.Utils" />*/

/*<BeginStatics Name="Infragistics.Scheduler.Core.DateUtils" />*/

$.ig.DateUtils.prototype.daysInWeek = 7;
$.ig.DateUtils.prototype._ticksPerMillisecond = 10000;
$.ig.DateUtils.prototype.__dateTimeFormatProvider = null;
/*<EndStatics Name="Infragistics.Scheduler.Core.DateUtils" />*/


/*<BeginGlobal/>*/
if ($.ig.scheduler) { $.ig.scheduler._isNamespace = true; }

/*<EndGlobal/>*/
function $_0(x) {
	/// <returns type='Number' />
	return x;
}
function $_1(x) {
	/// <returns type='$.ig.scheduler.DateRecurrenceRuleBase' />
	return x;
}
function $_2(x) {
	/// <returns type='String' />
	return x;
}
function $_3(x) {
	/// <returns type='$.ig.scheduler.DateQueryResult' />
	return x;
}
function $_4(x) {
	/// <returns type='$.ig.scheduler.AppointmentQueryResult' />
	return x;
}
function $_5(x) {
	/// <returns type='$.ig.scheduler.Appointment' />
	return x;
}
function $_6(x) {
	/// <returns type='$.ig.scheduler.AppointmentOperationResult' />
	return x;
}
function $_7(x) {
	/// <returns type='$.ig.scheduler.SchedulePropertyMapping$1' />
	return x;
}
function $_8(x) {
	/// <returns type='$.ig.scheduler.SchedulePropertyMapping$1' />
	return x;
}
/*<BeginFooter/>*/
}));// REMOVE_FROM_COMBINED_FILES
/*<EndFooter/>*/

