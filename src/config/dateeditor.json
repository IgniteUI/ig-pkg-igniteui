{
  "overview": null,
  "name": "ui.igDateEditor",
  "category": null,
  "visual": true,
  "events": {
    "blur": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor loses focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "エディターの入力フィールドがフォーカスを失ったとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
      }
    },
    "dropDownItemSelected": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selected. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier. <br>    Use ui.item to obtain reference to the list item which is selected.",
        "jp": "ドロップダウン リストが選択されるときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。<br>     ui.items を使用して、選択されたリスト項目への参照を取得します。"
      }
    },
    "dropDownItemSelecting": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selecting. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier. <br>    Use ui.item to obtain reference to the list item which is about to be selected.",
        "jp": "ドロップダウン リストが選択されるときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。<br>     ui.item を使用して、選択されようとしているリスト項目への参照を取得します。"
      }
    },
    "dropDownListClosed": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already closed. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストがすでに閉じているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListClosing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is closing. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストが閉じているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListOpened": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already opened. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストがすでに開いているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListOpening": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is opening. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストが開いているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "focus": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor gets focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "エディターの入力フィールドがフォーカスを取得したとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
      }
    },
    "keydown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keydown event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
        "jp": "keydown イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
      }
    },
    "keypress": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keypress event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.<br>    Set ui.key to another character which will replace original entry.",
        "jp": "keypress イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。<br>    ui.key を元のエントリを置き換える別の文字に設定します。"
      }
    },
    "keyup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keyup event.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
        "jp": "keyup イベントに対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
      }
    },
    "mousedown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousedown at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mousedown に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mousemove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousemove at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mousemove に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseout": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseleave に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseover": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseover at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseover に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseup at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseup に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after rendering of the editor completes.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get a reference to the editor performing rendering.<br>    Use ui.element to get a reference to the editor element.",
        "jp": "エディターの描画が完了した後に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して、レンダリングを実行するエディターへの参照を取得します。<br>    ui.element を使用して、エディター要素への参照を取得します。"
      }
    },
    "rendering": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before rendering of the editor completes.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get a reference to the editor performing rendering.<br>    Use ui.element to get a reference to the editor element.",
        "jp": "エディターの描画が完了する前に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して、レンダリングを実行するエディターへの参照を取得します。<br>    ui.element を使用して、エディター要素への参照を取得します。"
      }
    },
    "textChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after text in editor was changed. It can be raised when keyUp event occurs, <br>    or when the clear button is clicked or when an item from a list is selected.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.text to obtain new text<br>    Use ui.oldTExt to obtain the old text.",
        "jp": "エディター内のテキストが変更された後に発生するイベント。keyUp イベントが発生するときに発生できます。<br>    または、クリアボタンがクリックされたときまたはリストの項目が選択されたときに発生できます。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.text を使用して、新しいテキストを取得します。<br>    古いテキストの取得に ui.oldTExt を使用します。"
      }
    },
    "valueChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "エディター内の値が変更された後に発生するイベント。フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
      }
    },
    "valueChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before value in editor was changed.<br>    Return false in order to cancel change.<br>    It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "エディター内の値が変更される前に発生するイベント。<br>    変更をキャンセルするには、False を返します。<br>    フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
      }
    }
  },
  "properties": {
    "allowNullValue": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to prevent null value.<br>    If that option is false, and editor has no value, then value is set to an empty string.",
        "jp": "null 値を回避する機能を取得または設定します。<br>    このオプションが false で、エディターに値がない場合、値は空の文字列になります。"
      },
      "valueOptions": null
    },
    "buttonType": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.",
        "jp": " スピンおよびクリア ボタンの可視性を取得または設定します。このオプションは、初期化時にのみ設定できます。「spin,clear」などの組み合わせもサポートされています。"
      },
      "valueOptions": [
        {
          "name": "clear",
          "type": "string",
          "description": {
            "en": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);",
            "jp": " 値をクリアするボタンが入力フィールドの右側に配置されます (base HTML 要素が direction:rtl を持つ場合は左側)。"
          }
        },
        {
          "name": "spin",
          "type": "string",
          "description": {
            "en": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).",
            "jp": " スピン ボタンが入力フィールドの右側に置かれます (基本 HTML 要素が direction:rtl を持つ場合は左側)。"
          }
        }
      ]
    },
    "centuryThreshold": {
      "type": "number",
      "defaultValue": 29.0,
      "description": {
        "en": "Sets gets year for auto detection of 20th and 21st centuries.<br>    That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. \"yy\" or \"y\".<br>    If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.",
        "jp": "20 世紀および 21 世紀の自動検出の年を取得または設定します。<br>    このオプションは、ユーザーが 1 桁または 2 桁を年フィールドに入力した場合、または日付パターンが 1 年または ２年位置のみ (\"yy\" または \"y\" など) を含む場合に自動的に塗りつぶすために使用されます。<br>    ユーザーがこのオプションの値よりも大きな値を入力した場合、20 世紀を使用します。それ以外の場合は、21 世紀を使用します。"
      },
      "valueOptions": null
    },
    "dataMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.",
        "jp": " value() メソッドの get によって返された値のタイプを設定・取得します。また、value(val) メソッドの set の機能や、ブラウザーのコピー/貼り付け操作にも影響します。"
      },
      "valueOptions": [
        {
          "name": "date",
          "type": "string",
          "description": {
            "en": " The Date object is used. When that mode is set the value send to the server on submit is string value converter from the javascript Date object using \"toISOString\" method.",
            "jp": " Date オブジェクトが使用されます。モードが設定されると、submit でサーバーに送信される値は \"toISOString\" を使用した javascript Date オブジェクトの文字列値コンバーターです。"
          }
        },
        {
          "name": "displayModeText",
          "type": "string",
          "description": {
            "en": " The String object is used and the \"text\" in display mode (no focus) format (pattern).",
            "jp": " String オブジェクトが使用され、「text」は表示モード (no focus) 形式 (pattern) です。"
          }
        },
        {
          "name": "editModeText",
          "type": "string",
          "description": {
            "en": " The String object is used and the \"text\" in edit mode (focus) format (pattern).",
            "jp": " String オブジェクトが使用され、「text」は編集モード (focus) 形式 (pattern) です。"
          }
        }
      ]
    },
    "dateDisplayFormat": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets format of date while editor has no focus.<br>                Value of that option can be set to a specific date pattern or to a flag defined by regional settings.<br>                If value is not set, then the dateInputFormat is used automatically.<br>                If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the \"escape\" character should be used in front of them. <br>                List of predefined regional flags:<br>                \"date\": the datePattern member of regional option is used<br>                \"dateLong\": the dateLongPattern member of regional option is used<br>                \"time\": the timePattern member of regional option is used<br>                \"timeLong\": the timeLongPattern member of regional option is used<br>                \"dateTime\": the dateTimePattern member of regional option is used<br>                List of explicit characters, which should have escape \\\\ character in front of them:<br>                    C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.<br>                List of date-flags when explicit date pattern is used:<br>                \"y\": year field without century and without leading zero<br>                \"yy\": year field without century and with leading zero<br>                \"yyyy\": year field with leading zeros<br>                \"M\": month field as digit without leading zero<br>                \"MM\": month field as digit with leading zero<br>                \"MMM\": month field as short month name<br>                \"MMMM\": month field as long month name<br>                \"d\": day of month field without leading zero <br>                \"dd\": day of month field with leading zero<br>                \"ddd\": day of the week as short name<br>                \"dddd\": day of the week as long name<br>                \"t\": first character of string which represents AM/PM field <br>                \"tt\": 2 characters of string which represents AM/PM field<br>                \"h\": hours field in 12-hours format without leading zero<br>                \"hh\": hours field in 12-hours format with leading zero<br>                \"H\": hours field in 24-hours format without leading zero<br>                \"HH\": hours field in 24-hours format with leading zero<br>                \"m\": minutes field without leading zero<br>                \"mm\": minutes field with leading zero<br>                \"s\": seconds field without leading zero<br>                \"ss\": seconds field with leading zero<br>                \"f\": milliseconds field in hundreds<br>                \"ff\": milliseconds field in tenths<br>                \"fff\": milliseconds field",
        "jp": "エディターがフォーカスを持っていないときの日付書式を取得または設定します。<br>                このオプションの値は、指定した日パターンまたは地域設定で定義されたフラグに設定できます。<br>                値が設定されていない場合は、dateInputFormat が自動的に使用されます。<br>                値が明示的な日パターンに設定されていて、日フラグ以外のパターンに、日フラグまたはマスクフラグに一致する明示的な文字が含まれている場合は、それらの文字の前に \"エスケープ\" 文字を使用する必要があります。<br>     定義済みの地域フラグのリスト。<br>                \"date\": 地域オプションの datePattern メンバーを使用します。<br>                \"dateLong\": 地域オプションの dateLongPattern メンバーを使用します。<br>                \"time\": 地域オプションの timePattern メンバーを使用します。<br>                \"timeLong\": 地域オプションの timeLongPattern メンバーを使用します。<br>                \"dateTime\": 地域オプションの dateTimePattern メンバーを使用します。<br>                明示的な文字のリスト。これらの前にエスケープ \\\\ 文字が必要です。<br>                    C、&、a、A、?、L、9、0、#、>、<、y、M、d、h、H、m、s、t、f。<br>                明示的な日パターンを使用するときの日フラグのリスト。<br>                \"y\": 世紀部分も先行するゼロもない年フィールド。<br>                \"yy\": 世紀部分がなく先行するゼロがある年フィールド。<br>                \"yyyy\": 先行するゼロがある年フィールド。<br>                \"M\": 先行するゼロがない数字で表す月フィールド。<br>                \"MM\": 先行するゼロがある数字で表す月フィールド。<br>                \"MMM\": 短い月名前で表す月フィールド。<br>                \"MMMM\": 長い月名前で表す月フィールド。<br>                \"d\": 先行するゼロがない月の中の日。<br>                \"dd\": 先行するゼロがある月の中の日。<br>                \"ddd\": 短い名前の曜日。<br>                \"dddd\": 長い名前の曜日。<br>                \"t\": AM/PM フィールドを表す文字列の最初の文字。<br>                \"tt\": AM/PM フィールドを表す 2 文字の文字列。<br>                \"h\": 先行するゼロがない 12 時間形式の時フィールド。<br>                \"hh\": 先行するゼロがある 12 時間形式の時フィールド。<br>                \"H\": 先行するゼロがない 24 時間形式の時フィールド。<br>                \"HH\": 先行するゼロがある 24 時間形式の時フィールド。<br>                \"m\": 先行するゼロがない分フィールド。<br>                \"mm\": 先行するゼロがある分フィールド。<br>                \"s\": 先行するゼロがない秒フィールド。<br>                \"ss\": 先行するゼロがある秒フィールド。<br>                \"f\": 100 分の 1 単位のミリ秒フィールド。<br>                "ff": 10 分の 1 単位のミリ秒フィールド。<br>                \"fff\": ミリ秒フィールド。"
      },
      "valueOptions": null
    },
    "dateInputFormat": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets format of date while editor has focus.<br>                Value of that option can be set to explicit date pattern or to a flag defined by regional settings.<br>                If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the \"escape\" character should be used in front of them.<br>                If option is not set, then the \"date\" is used automatically.<br>                List of predefined regional flags:<br>                \"date\": the datePattern member of regional option is used<br>                \"dateLong\": the dateLongPattern member of regional option is used<br>                \"time\": the timePattern member of regional option is used<br>                \"timeLong\": the timeLongPattern member of regional option is used<br>                \"dateTime\": the dateTimePattern member of regional option is used<br>                List of explicit characters, which should have escape \\\\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.<br>                List of date-flags when explicit date pattern is used:<br>                \"y\": year field without century and without leading zero<br>                \"yy\": year field without century and with leading zero<br>                \"yyyy\": year field with leading zeros<br>                \"M\": month field as digit without leading zero<br>                \"MM\": month field as digit with leading zero<br>                \"MMM\": month field as short month name. Note: in focused state the MM is used.<br>                \"MMMM\": month field as long month name. Note: in focused state the MM is used.<br>                \"d\": day of month field without leading zero <br>                \"dd\": day of month field with leading zero<br>                \"ddd\": day of the week as short name. Note: in focused state that field is skipped.<br>                \"dddd\": day of the week as long name. Note: in focused state that field is skipped.<br>                \"t\": first character of string which represents AM/PM field <br>                \"tt\": 2 characters of string which represents AM/PM field<br>                \"h\": hours field in 12-hours format without leading zero<br>                \"hh\": hours field in 12-hours format with leading zero<br>                \"H\": hours field in 24-hours format without leading zero<br>                \"HH\": hours field in 24-hours format with leading zero<br>                \"m\": minutes field without leading zero<br>                \"mm\": minutes field with leading zero<br>                \"s\": seconds field without leading zero<br>                \"ss\": seconds field with leading zero<br>                \"f\": milliseconds field in hundreds<br>                \"ff\": milliseconds field in tenths<br>                \"fff\": milliseconds field",
        "jp": "エディターがフォーカスを持っているときの日付書式を取得または設定します。<br>                このオプションの値は、明示的な日パターンまたは地域設定で定義されたフラグに設定できます。<br>                値が明示的な日パターンに設定されていて、日フラグ以外のパターンに、日フラグまたはマスクフラグに一致する明示的な文字が含まれている場合は、それらの文字の前にエスケープ文字を使用する必要があります。<br>                値が設定されていない場合は、\"date\" が自動的に使用されます。<br>                定義済みの地域フラグのリスト。<br>                \"date\": 地域オプションの datePattern メンバーを使用します。<br>                \"dateLong\": 地域オプションの dateLongPattern メンバーを使用します。<br>                \"time\": 地域オプションの timePattern メンバーを使用します。<br>                \"timeLong\": 地域オプションの timeLongPattern メンバーを使用します。<br>                \"dateTime\": 地域オプションの dateTimePattern メンバーを使用します。<br>                明示的な文字のリスト。これらの前にエスケープ \\\\ 文字が必要です: C、&、a、A、?、L、9、0、#、>、<、y、M、d、h、H、m、s、t、f。<br>                明示的な日パターンを使用するときの日フラグのリスト。<br>                \"y\": 世紀部分も先行するゼロもない年フィールド。<br>                \"yy\": 世紀部分がなく先行するゼロがある年フィールド。<br>                \"yyyy\": 先行するゼロがある年フィールド。<br>                \"M\": 先行するゼロがない数字で表す月フィールド。<br>                \"MM\": 先行するゼロがある数字で表す月フィールド。<br>                \"MMM\": 短い月名前で表す月フィールド。注: フォーカス状態で MM は使用されます。<br>                \"MMMM\": 長い月名前で表す月フィールド。注: フォーカス状態で MM は使用されます。<br>                \"d\": 先行するゼロがない月の中の日。<br>                \"dd\": 先行するゼロがある月の中の日。<br>                \"ddd\": 短い名前の曜日。注: フォーカス状態で、そのフィールドはスキップされます。<br>                \"dddd\": 長い名前の曜日。注: フォーカス状態で、そのフィールドはスキップされます。<br>                \"t\": AM/PM フィールドを表す文字列の最初の文字。<br>                \"tt\": AM/PM フィールドを表す 2 文字の文字列。<br>                \"h\": 先行するゼロがない 12 時間形式の時フィールド。<br>                \"hh\": 先行するゼロがある 12 時間形式の時フィールド。<br>                \"H\": 先行するゼロがない 24 時間形式の時フィールド。<br>                \"HH\": 先行するゼロがある 24 時間形式の時フィールド。<br>                \"m\": 先行するゼロがない分フィールド。<br>                \"mm\": 先行するゼロがある分フィールド。<br>                \"s\": 先行するゼロがない秒フィールド。<br>                \"ss\": 先行するゼロがある秒フィールド。<br>                \"f\": 100 分の 1 単位のミリ秒フィールド。<br>                "ff": 10 分の 1 単位のミリ秒フィールド。<br>                \"fff\": ミリ秒フィールド。"
      },
      "valueOptions": null
    },
    "disabled": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request",
        "jp": "disabled 属性を設定します。編集を許可しません。すべてのボタンおよび適用される操作を無効にします。送信において現在の値が要求に送られません。"
      },
      "valueOptions": null
    },
    "dropDownAnimationDuration": {
      "type": "number",
      "defaultValue": 300.0,
      "description": {
        "en": "Gets sets show/hide drop-down list animation duration in milliseconds.",
        "jp": "ドロップダウン リストの表示/非表示アニメーションの期間 (ミリ秒) を取得または設定します。"
      },
      "valueOptions": null
    },
    "dropDownAttachedToBody": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets location of drop-down list.<br>    Value false will create html element for list as a child of main html element.<br>    Value true creates list as a child of body.",
        "jp": "ドロップダウン リストの場所を取得または設定します。<br>    値が false の場合、main HTML 要素の子として、リストの HTML 要素を作成します。<br>    値が true の場合、body の子として、リストを作成します。"
      },
      "valueOptions": null
    },
    "dropDownOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable. <br>    Note! In case there are no list items - the editor will reamin readonly",
        "jp": "ドロップダウン リストからの項目のみにエディターを制限する機能を設定または取得します。True に設定すると、エディターのテキストは編集できません。<br>     注:リスト項目がない場合もエディターは読み取り専用です。"
      },
      "valueOptions": null
    },
    "dropDownOrientation": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.",
        "jp": " 開くボタンがクリックされたとき、ドロップダウン リストを開く方向を取得または設定します。自動オプションを設定した場合、コンポーネントは下に十分なスペースがあるか計算します。もしない場合、コンポーネントの上のスペースを確認し、上下とも十分なスペースがない場合、ドロップダウンを開きます。"
      },
      "valueOptions": []
    },
    "emptyChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
        "en": "Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the \"value\" or for the \"text\" methods.",
        "jp": "アプリケーションが \"value\" の取得または \"text\" の取得メソッドを呼び出すときにマスク内の埋められていない必要な位置の代用として使用する文字を取得または設定します。"
      },
      "valueOptions": null
    },
    "enableUTCDates": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets formatting of the dates as UTC.<br>                That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.<br>                Notes:<br>                That option affects only functionality of get/set value method and the Date-value, which was set on initialization.<br>                When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.<br>                When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.<br>                When that option is modified after initialization, then displayed text and internal Date-value are not affected.<br>                It is not recommended to change that option without resetting Date-value.",
        "jp": "UTC として日付の書式を取得または設定します。<br>                このオプションは、dataMode オプションがエディターの get/set 値に使用されるのが 'date' および Date オブジェクト場合のみサポートされます。<br>                注:<br>                オプションは get/set 値メソッドおよび初期化で設定された Date-value の機能のみに影響します。<br>                アプリケーションが set-value を使用する際に、内部 Date-value および displayed-text が TimezoneOffset によって増加されます。<br>                アプリケーションが get-value を使用する際に、TimezoneOffset によって減らされた内部 Date-value  が返されます。<br>                そのオプションが初期化の後に変更される場合、表示されるテキストおよび内部の Date-value は影響されません。<br>                Date-value をリセットせずにそのオプションを変更しないでください。"
      },
      "valueOptions": null
    },
    "excludeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>    Notes:<br>    If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
        "jp": "キーボードまたは貼り付けによって特定の文字を入力できないようにする機能を取得または設定します。<br>    注:<br>    文字が includeKeys オプションに指定した場合、excludeKeys は優先があります。<br>    文字は大文字で設定する必要があります。<br>    大文字と小文字を区別することはサポートされていません。"
      },
      "valueOptions": null
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The height can be set in pixels (px) and percentage (%).",
            "jp": " 高さをピクセル (px) またはパーセンテージ (%) に設定できます。"
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The height can be set as a number in pixels.",
            "jp": " 高さをピクセル単位の数値で設定できます。"
          }
        }
      ]
    },
    "includeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>    Notes:<br>    If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
        "jp": "キーボードからおよび貼り付けによって特定の文字だけを入力フィールドに入力できるようにする機能を取得または設定します。<br>    注:<br>    \"excludeKeys\" オプションがこのオプションと同じ文字を含んでいる場合、\"excludeKeys\" が優先されます。<br>    文字は大文字で設定する必要があります。<br>    大文字と小文字を区別することはサポートされていません。"
      },
      "valueOptions": null
    },
    "inputMask": {
      "type": "string",
      "defaultValue": "CCCCCCCCCC",
      "description": {
        "en": "Sets gets input mask. Mask may include filter-flags and literal characters.<br>    Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape \"\\\\\" character should be used.<br>    Default is \"CCCCCCCCCC\"<br>    Note: optional flags/entries affect the value returned by get of the \"value\" and \"text\" methods.<br>    List of filter-flags:<br>    C: any keyboard character. Entry is optional.<br>    &: any keyboard character. Entry is required.<br>    a: letter or digit character. Entry is optional.<br>    A: letter or digit character. Entry is required.<br>    ?: letter character. Entry is optional.<br>    L: letter character. Entry is required.<br>    9: digit character. Entry is optional.<br>    0: digit character. Entry is required.<br>    #: digit character or \"+\" or \"_\". Entry is optional with replacement by \"emptyPositionChar\" or by \"padChar\".<br>    >: all letters to the right are converted to the upper case. In order to disable conversion, the \">\" flag should be used again.<br>    <: all letters to the right are converted to the lower case. In order to disable conversion, the \"<\" flag should be used again.",
        "jp": "入力マスクを取得または設定します。マスクには、フィルター フラグやリテラル文字が含まれる場合があります。<br>    リテラル文字は、エンドユーザーが変更できないマスクの一部です。フィルター フラグをリテラル文字として使用するには、エスケープ "\\\\" 文字を使用する必要があります。<br>    デフォルトは \"CCCCCCCCCC\" です。<br>    注: オプションのフラグ/エントリは、\"value\" の取得または \"text\" の取得メソッドが返す値に影響します。<br>    フィルター フラグのリスト。<br>    C: 任意のキーボード文字。エントリはオプションです。<br>    &: 任意のキーボード文字。エントリは必須です。<br>    a: 文字または数字。エントリはオプションです。<br>    A: 文字または数字。エントリは必須です。<br>    ?: 通常の文字。エントリはオプションです。<br>    L: 通常の文字。エントリは必須です。<br>    9: 数字。エントリはオプションです。<br>    0: 数字。エントリは必須です。<br>    #: 数字、\"+\"、または \"_\"。エントリはオプションです。\"emptyPositionChar\" または \"padChar\" で代用できます。<br>    >: 右にあるすべての文字が大文字に変換されます。変換を無効にするには、\">\" フラグをもう一度使用します。<br>    <: 右にあるすべての文字が小文字に変換されます。変換を無効にするには、\">\" フラグをもう一度使用します。"
      },
      "valueOptions": null
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.",
        "jp": "値入力の名前属性を設定します。入力はサーバーへ値を送信するために使用されます。ターゲット要素が入力で名前要素があり、開発者が inputName オプションに設定した場合、このオプションは値入力を上書きし要素の属性を削除します。"
      },
      "valueOptions": null
    },
    "isLimitedToListValues": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed",
        "jp": "リスト項目に含まれる値のみに許可を設定します。この検証は、エディターがぼかされるか、Enter キーが押されたときに実行されます。"
      },
      "valueOptions": null
    },
    "limitSpinToCurrentField": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to modify only 1 date field on spin events.<br>                Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.<br>                Value true modifies only value of one field.",
        "jp": "スピン イベントで日付の 1 フィールドを編集する機能を取得または設定します。<br>                値が False の場合、増加または減少させた日付フィールドが限界に達するとほかの日付フィールドが変化します。<br>                値が True の場合、1 つのフィールドの値のみを変更できます。"
      },
      "valueOptions": null
    },
    "listItemHoverDuration": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "type=\"number* Sets the hover/unhover animation duration.",
        "jp": "type=\"number\" ホバー/アンホバーアニメーション期間を設定します。"
      },
      "valueOptions": null
    },
    "listItems": {
      "type": "array",
      "defaultValue": null,
      "description": {
        "en": "Sets gets list of items which are used for drop-down list.<br>    Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.",
        "jp": "ドロップダウン リストに使用される項目リストを設定または取得します。<br>    リスト内の項目は、文字列、数、オブジェクトが使用可能です。項目は、キャストまたは操作なしに直接描画されます。"
      },
      "valueOptions": null
    },
    "listWidth": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.",
        "jp": "ドロップダウン リストのカスタムの幅 (ピクセル単位) を取得または設定します。値がゼロまたは負の場合、エディターの幅が使用されます。"
      },
      "valueOptions": null
    },
    "locale": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.",
        "jp": "ボタンのタイトルに使用する文字列を取得または設定します。オブジェクトの値は一組の値またはキーの値メンバーを含む必要があります。注:ロケールのサブオプションは igEditor のメイン オプションに表示されますこのケースではメインオプションの中の値は最優先でロケールに対応する値をオーバーライドします。"
      },
      "valueOptions": null
    },
    "maxLength": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Sets gets maximum length of text which can be entered by user.<br>    Negative values or 0 disables that behavior.",
        "jp": "ユーザーが入力できるテキストの最大長を取得または設定します。<br>    負の値または 0 はこの動作を無効にします。"
      },
      "valueOptions": null
    },
    "maxValue": {
      "type": "date",
      "defaultValue": null,
      "description": {
        "en": "Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/\"thicks\"/).<br>     Note! This option doesn't use the displayInputFormat to extract the date",
        "jp": "ユーザーがエディターに入力できる最大値を取得または設定します。Date オブジェクトは値として設定できます。文字列値を渡すと、エディターは日付オブジェクトを作成するために javascript Date オブジェクトのコンストラクターを使用し、結果のオブジェクトを比較で使用します。MVC 日付書式も使用できます。たとえば、Date(/\"thicks\"/) です。<br>     注:このプロパティは、日付を抽出するために displayInputFormat 設定を使用しません。"
      },
      "valueOptions": null
    },
    "minValue": {
      "type": "date",
      "defaultValue": null,
      "description": {
        "en": "Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/\"thicks\"/).<br>     Note! This option doesn't use the displayInputFormat to extract the date.",
        "jp": "ユーザーがエディターに入力できる最小値を取得または設定します。Date オブジェクトは値として設定できます。文字列値を渡すと、エディターは日付オブジェクトを作成するために javascript Date オブジェクトのコンストラクターを使用し、結果のオブジェクトを比較で使用します。MVC 日付書式も使用できます。たとえば、Date(/\"thicks\"/) です。<br>     注:このプロパティは、日付を抽出するために displayInputFormat 設定を使用しません。"
      },
      "valueOptions": null
    },
    "nullValue": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string",
        "jp": " null 値の表現を取得または設定します。デフォルトの場合、入力の値は null に設定され、入力が空文字列を保持します。"
      },
      "valueOptions": []
    },
    "padChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
        "en": "Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).",
        "jp": "エディターが表示モード (フォーカスなし) のときにマスク内の埋められていない必要な位置の代用として使用する文字を取得または設定します。"
      },
      "valueOptions": null
    },
    "placeHolder": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string.",
        "jp": "エディターがフォーカスを持たず、エディター内の value が null または空の文字列ときのエディターに表示されるテキストを取得または設定します。"
      },
      "valueOptions": null
    },
    "preventSubmitOnEnter": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability of the editor to prevent form submition on enter key pressed.",
        "jp": "Enter キーの押下でフォーム送信を回避する機能を設定します。"
      },
      "valueOptions": null
    },
    "readOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.",
        "jp": "読み取り専用 attribute.Does を編集不可に設定します。すべてのボタンおよび適用される操作を無効にします。送信において現在の値が要求に送られます。"
      },
      "valueOptions": null
    },
    "regional": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.",
        "jp": "エディターのカスタムの地域設定を取得または設定します。文字列の場合、$.ig.regional[stringValue] を仮定します。"
      },
      "valueOptions": null
    },
    "revertIfNotValid": {
      "type": "bool",
      "defaultValue": true,
      "description": {
        "en": "Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.",
        "jp": "ぼかしまたは Enter キーの押しでエディターの値が無効な場合、以前の値に戻すことを設定します。False に設定される場合、clear は呼び出されます。"
      },
      "valueOptions": null
    },
    "selectionOnFocus": {
      "type": "string",
      "defaultValue": "selectAll",
      "description": {
        "en": "type=\"selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.<br>     selectAll type=\"string\" Setting this option will select all the text into the editor when the edit mode gets enetered.<br>     atStart type=\"string\" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.<br>     atEnd type=\"string\" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.<br>     browserDefault type=\"string\" Setting this option won't do any extra logic, but proceed with browser default behavior.",
        "jp": "type=\"selectAll|atStart|atEnd|browserDefault\" エディターがフォーカスを取得したときの動作を設定します。デフォルト値は selectAll です。<br>     selectAll type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのすべてのテキストを選択します。<br>     atStart type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのテキストの初めにカーソルを移動します。<br>     atEnd type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのテキストの最後にカーソルを移動します。<br>     browserDefault type=\"string\" このオプションの設定に追加のロジックはありませんが、ブラウザーのデフォルトの動作で処理されます。"
      },
      "valueOptions": null
    },
    "spinDelta": {
      "type": "number",
      "defaultValue": 1.0,
      "description": {
        "en": "Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.",
        "jp": "スピン イベント発生時にエディター内の値の増減に使用するデルタ値を取得および設定します。値が負の数に設定される場合、例外は発生されます。整数値以外の値は double および float の dataMode のみにサポートされます。"
      },
      "valueOptions": null
    },
    "spinWrapAround": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.",
        "jp": "ホバー項目を開いたドロップダウン リストからその反対側へ自動的に変更する機能を取得または設定します。最後の項目に達してスピン ダウンがクリックされると、最初の項目がホバーされます (逆の場合も同じ) 。"
      },
      "valueOptions": null
    },
    "suppressNotifications": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.",
        "jp": "エディターのビルトイン基本検証シナリオで、必須リスト選択、値ラッピング、スピン制限などのデフォルトの通知を無効にします。"
      },
      "valueOptions": null
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in tabIndex for editor.",
        "jp": "エディターの tabIndex の値を取得または設定します。"
      },
      "valueOptions": null
    },
    "textAlign": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
        "jp": " エディター内のテキストの水平配置を取得または設定します。このオプションを設定した場合、'right' は 'numeric、'currency' 、および 'percent' エディターで使用され、'left'  はその他のすべてのタイプのエディターで使用されます。"
      },
      "valueOptions": [
        {
          "name": "left",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "right",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "center",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        }
      ]
    },
    "textMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.",
        "jp": " 単一行テキスト エディター、パスワード エディター、複数行エディターなど、エディターのテキスト モードを取得または設定します。このオプションは、初期化時にのみ影響します。ベースとなる要素 (セレクター) が TEXTAREA の場合、それを入力フィールドとして使用します。"
      },
      "valueOptions": [
        {
          "name": "text",
          "type": "string",
          "description": {
            "en": " Single line text editor based on INPUT element is created.",
            "jp": " INPUT 要素に基づく単一行テキスト エディターが作成されます。"
          }
        },
        {
          "name": "password",
          "type": "string",
          "description": {
            "en": " Editor based on INPUT element with type password is created.",
            "jp": " タイプ パスワードで作成される INPUT 要素に基づくエディターが作成されます。"
          }
        },
        {
          "name": "multiline",
          "type": "string",
          "description": {
            "en": " multiline editor based on TEXTAREA element is created.",
            "jp": " TEXTAREA 要素に基づく複数行エディターが作成されます。"
          }
        }
      ]
    },
    "toLower": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "True の場合は、入力された文字列を小文字に変換し、False の場合は、文字列をそのままにしておく機能を取得または設定します。このオプションは、キーボード入力と貼り付けを使用する場合のみ効果があります。"
      },
      "valueOptions": null
    },
    "toUpper": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "True の場合は、入力された文字列を大文字に変換し、False の場合は、文字列をそのままにしておく機能を取得または設定します。このオプションは、キーボード入力と貼り付けを使用する場合のみ効果があります。"
      },
      "valueOptions": null
    },
    "unfilledCharsPrompt": {
      "type": "string",
      "defaultValue": "_",
      "description": {
        "en": "Sets gets character which is used as prompt in edit mode for available entry position.",
        "jp": "使用可能な入力位置の編集モードのプロンプトとして使用する文字を取得または設定します。"
      },
      "valueOptions": null
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets options supported by the igValidator widget.<br>    Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors, <br>                while similar options of the editor work to prevent wrong values from being entered.",
        "jp": "igValidator ウィジェットによってサポートされるオプションを設定または取得します。<br>    注: エラーをトリガーした際に igValidator の検証ルールは最小値/長さおよび最大値/長さを別々に適用します。<br>                エディターの同様のオプションは、誤った値が入力されるのを防止します。"
      },
      "schemaRef": "validator"
    },
    "value": {
      "type": "date",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/\"thicks\"/).<br>     Note! This option doesn't use the displayInputFormat to extract the date.",
        "jp": "エディター内の値を取得または設定します。Date オブジェクトは値として設定できます。文字列値を渡すと、エディターは日付オブジェクトを作成するために javascript Date オブジェクトのコンストラクターを使用し、結果のオブジェクトを値として使用します。MVC 日付書式も使用できます。たとえば、Date(/\"thicks\"/) です。<br>     注:このプロパティは、日付を抽出するために displayInputFormat 設定を使用しません。"
      },
      "valueOptions": null
    },
    "visibleItemsCount": {
      "type": "number",
      "defaultValue": 5.0,
      "description": {
        "en": "Gets sets how many items should be shown at once. <br>      Notes:<br>      That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.",
        "jp": "一度に表示される項目の数を取得または設定します。<br>     注:<br>      リスト項目の数が値より小さい場合、このオプションは上書きされます。この場合、ドロップダウンの高さが項目の数に基づいて設定されます。"
      },
      "valueOptions": null
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The widget width can be set in pixels (px) and percentage (%).",
            "jp": " ウィジェットの幅をピクセル (px) またはパーセンテージ (%) に設定できます。"
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The widget width can be set as a number in pixels.",
            "jp": " ウィジェットの幅は数値としてピクセルで設定できます。"
          }
        }
      ]
    },
    "yearShift": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "Sets gets difference between year in Gregorian calendar and displayed year.",
        "jp": "グレゴリオ暦での年と表示されている年の差異を取得または設定します。"
      },
      "valueOptions": null
    }
  }
}
