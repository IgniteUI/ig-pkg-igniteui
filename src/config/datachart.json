{
  "overview": null,
  "name": "ui.igDataChart",
  "category": null,
  "visual": true,
  "events": {
    "assigningCategoryMarkerStyle": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.startIndex to get the start index for the current items.<br>   Use ui.endIndex to get the end index for the current items.<br>   Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.<br>   Use ui.startDate if ui.hasDateRange is true.<br>   Use ui.endDate if ui.hasDateRange is true.<br>   Use ui.getItems to get all the items associated with the event (only if necessary).<br>   Use ui.fill to get or set the fill to use for the current item.<br>   Use ui.stroke to get or set the stroke to use for the current item.<br>   Use ui.opacity to get or set the opacity to use for the current item.<br>   Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.<br>   Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.<br>   Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.<br>   Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.<br>   Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.",
		"jp": "Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.startIndex to get the start index for the current items.<br>   Use ui.endIndex to get the end index for the current items.<br>   Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.<br>   Use ui.startDate if ui.hasDateRange is true.<br>   Use ui.endDate if ui.hasDateRange is true.<br>   Use ui.getItems to get all the items associated with the event (only if necessary).<br>   Use ui.fill to get or set the fill to use for the current item.<br>   Use ui.stroke to get or set the stroke to use for the current item.<br>   Use ui.opacity to get or set the opacity to use for the current item.<br>   Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.<br>   Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.<br>   Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.<br>   Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.<br>   Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null."
	}
    },
    "assigningCategoryStyle": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.startIndex to get the start index for the current items.<br>   Use ui.endIndex to get the end index for the current items.<br>   Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.<br>   Use ui.startDate if ui.hasDateRange is true.<br>   Use ui.endDate if ui.hasDateRange is true.<br>   Use ui.getItems to get all the items associated with the event (only if necessary).<br>   Use ui.fill to get or set the fill to use for the current item.<br>   Use ui.stroke to get or set the stroke to use for the current item.<br>   Use ui.opacity to get or set the opacity to use for the current item.<br>   Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.<br>   Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.<br>   Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.<br>   Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.<br>   Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.",
		"jp": "Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.startIndex to get the start index for the current items.<br>   Use ui.endIndex to get the end index for the current items.<br>   Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.<br>   Use ui.startDate if ui.hasDateRange is true.<br>   Use ui.endDate if ui.hasDateRange is true.<br>   Use ui.getItems to get all the items associated with the event (only if necessary).<br>   Use ui.fill to get or set the fill to use for the current item.<br>   Use ui.stroke to get or set the stroke to use for the current item.<br>   Use ui.opacity to get or set the opacity to use for the current item.<br>   Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.<br>   Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.<br>   Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.<br>   Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.<br>   Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null."
	}
    },
    "axisRangeChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired when the range of and axis on the chart changes.<br>   Function takes arguments evt and ui.<br>   Use ui.axis to get reference to current chart axis object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newMaximumValue to get new maximum value.<br>   Use ui.newMinimumValue to get new minimum value.<br>   Use ui.oldMaximumValue to get old maximum value.<br>   Use ui.oldMinimumValue to get old minimum value.",
		"jp": "Event fired when the range of and axis on the chart changes.<br>   Function takes arguments evt and ui.<br>   Use ui.axis to get reference to current chart axis object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newMaximumValue to get new maximum value.<br>   Use ui.newMinimumValue to get new minimum value.<br>   Use ui.oldMaximumValue to get old maximum value.<br>   Use ui.oldMinimumValue to get old minimum value."
	}
    },
    "browserNotSupported": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "event fired when the control is displayed on a non HTML5 compliant browser",
		"jp": "event fired when the control is displayed on a non HTML5 compliant browser"
	}
    },
    "gridAreaRectChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs just after the current Chart's grid area rectangle is changed.<br>   The grid area may change as the result of the Chart being resized, or<br>   of an axis being added or changing size, possibly in another Chart.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newHeight to get new height value.<br>   Use ui.newLeft to get new left value.<br>   Use ui.newTop to get new top value.<br>   Use ui.newWidth to get new top value.<br>   Use ui.oldHeight to get old height value.<br>   Use ui.oldLeft to get old left value.<br>   Use ui.oldTop to get old top value.<br>   Use ui.oldWidth to get old top value.",
		"jp": "Occurs just after the current Chart's grid area rectangle is changed.<br>   The grid area may change as the result of the Chart being resized, or<br>   of an axis being added or changing size, possibly in another Chart.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newHeight to get new height value.<br>   Use ui.newLeft to get new left value.<br>   Use ui.newTop to get new top value.<br>   Use ui.newWidth to get new top value.<br>   Use ui.oldHeight to get old height value.<br>   Use ui.oldLeft to get old left value.<br>   Use ui.oldTop to get old top value.<br>   Use ui.oldWidth to get old top value."
	}
    },
    "progressiveLoadStatusChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired when the progressive loading state of the series has changed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.currentStatus to get current status.",
		"jp": "Event fired when the progressive loading state of the series has changed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.currentStatus to get current status."
	}
    },
    "refreshCompleted": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Raised when the chart's processing for an update has completed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.",
		"jp": "Raised when the chart's processing for an update has completed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object."
	}
    },
    "seriesCursorMouseMove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the cursors are moved over a series in this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the cursors are moved over a series in this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "seriesMouseEnter": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the left mouse pointer enters an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the left mouse pointer enters an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "seriesMouseLeave": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the left mouse pointer leaves an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the left mouse pointer leaves an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "seriesMouseLeftButtonDown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "seriesMouseLeftButtonUp": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "seriesMouseMove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the left mouse pointer moves while over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position.",
		"jp": "Occurs when the left mouse pointer moves while over an element of this chart.<br>   Function takes arguments evt and ui.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.<br>   Use ui.positionX to get mouse X position.<br>   Use ui.positionY to get mouse Y position."
	}
    },
    "tooltipHidden": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "event fired after a tooltip is hidden <br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.",
		"jp": "event fired after a tooltip is hidden <br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush."
	}
    },
    "tooltipHiding": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "event fired when the mouse has left a series and the tooltip is about to hide<br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.",
		"jp": "event fired when the mouse has left a series and the tooltip is about to hide<br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush."
	}
    },
    "tooltipShowing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "event fired when the mouse has hovered on a series and the tooltip is about to show <br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.",
		"jp": "event fired when the mouse has hovered on a series and the tooltip is about to show <br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush."
	}
    },
    "tooltipShown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "event fired after a tooltip is shown<br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush.",
		"jp": "event fired after a tooltip is shown<br>   Function takes arguments evt and ui.<br>   Use ui.element to get reference to tooltip DOM element.<br>   Use ui.item to get reference to current series item object.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.actualItemBrush to get item brush.<br>   Use ui.actualSeriesBrush to get series brush."
	}
    },
    "typicalBasedOn": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Handle this event in order to specify which columns the Typical price calculation is based on. <br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.count to get the number of positions that should be calculated from the start.<br>   Use ui.position to get the beginning position that should be calculated from.<br>   Use ui.supportingCalculations to get the supporting calculations to use in the calculation.<br>   Use ui.dataSource to get the data to use for the calculation.<br>   Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.",
		"jp": "Handle this event in order to specify which columns the Typical price calculation is based on. <br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.series to get reference to current series object.<br>   Use ui.count to get the number of positions that should be calculated from the start.<br>   Use ui.position to get the beginning position that should be calculated from.<br>   Use ui.supportingCalculations to get the supporting calculations to use in the calculation.<br>   Use ui.dataSource to get the data to use for the calculation.<br>   Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated."
	}
    },
    "windowRectChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs just after the current Chart's window rectangle is changed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newHeight to get new height value.<br>   Use ui.newLeft to get new left value.<br>   Use ui.newTop to get new top value.<br>   Use ui.newWidth to get new top value.<br>   Use ui.oldHeight to get old height value.<br>   Use ui.oldLeft to get old left value.<br>   Use ui.oldTop to get old top value.<br>   Use ui.oldWidth to get old top value.",
		"jp": "Occurs just after the current Chart's window rectangle is changed.<br>   Function takes arguments evt and ui.<br>   Use ui.chart to get reference to chart object.<br>   Use ui.newHeight to get new height value.<br>   Use ui.newLeft to get new left value.<br>   Use ui.newTop to get new top value.<br>   Use ui.newWidth to get new top value.<br>   Use ui.oldHeight to get old height value.<br>   Use ui.oldLeft to get old left value.<br>   Use ui.oldTop to get old top value.<br>   Use ui.oldWidth to get old top value."
	}
    }
  },
  "properties": {
    "animateSeriesWhenAxisRangeChanges": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set to true in order to override the default behavior in which series do not animate if an axis range changes",
		"jp": "Set to true in order to override the default behavior in which series do not animate if an axis range changes"
	}
    },
    "autoMarginHeight": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the automatic height to add when automatically adding margins to the chart.",
		"jp": "Sets or gets the automatic height to add when automatically adding margins to the chart."
	}
    },
    "autoMarginWidth": {
      "type": "number",
      "defaultValue": 20.0,
      "description": {
		"en": "Sets or gets the automatic width to add when automatically adding margins to the chart.",
		"jp": "Sets or gets the automatic width to add when automatically adding margins to the chart."
	}
    },
    "axes": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "an array of axis objects",
		"jp": "an array of axis objects"
	},
	  "designerDisplayProperty": "name",
      "schema": {
        "type": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Type of the axis",
		"jp": "Type of the axis"
	},
          "valueOptions": [
            {
              "name": "numericX",
              "type": "string",
              "description": {
		"en": "Specify the axis as numeric X axis. Useful for displaying scatter, category and financial price series.",
		"jp": "Specify the axis as numeric X axis. Useful for displaying scatter, category and financial price series."
	}
            },
            {
              "name": "numericY",
              "type": "string",
              "description": {
		"en": "Specify the axis as numeric Y axis.Useful for displaying scatter, category and financial price series.",
		"jp": "Specify the axis as numeric Y axis.Useful for displaying scatter, category and financial price series."
	}
            },
			      {
              "name": "categoryX",
              "type": "string",
              "description": {
		"en": "Specify the axis as category X axis. Useful for displaying scatter, category and financial price series.",
		"jp": "Specify the axis as category X axis. Useful for displaying scatter, category and financial price series."
	}
            },
            {
              "name": "categoryDateTimeX",
              "type": "string",
              "description": {
		"en": "Specify the axis as category datetime X axis. Useful for displaying category and financial price series with date based data.",
		"jp": "Specify the axis as category datetime X axis. Useful for displaying category and financial price series with date based data."
	}
            },
			      {
              "name": "categoryY",
              "type": "string",
              "description": {
		"en": "Specify the axis as category Y axis. Useful for displaying scatter, category and financial price series.",
		"jp": "Specify the axis as category Y axis. Useful for displaying scatter, category and financial price series."
	}
            },
            {
              "name": "categoryAngle",
              "type": "string",
              "description": {
		"en": "Specify the axis as category angle axis. Useful for displaying polar and radial categories.",
		"jp": "Specify the axis as category angle axis. Useful for displaying polar and radial categories."
	}
            },
			      {
              "name": "numericAngle",
              "type": "string",
              "description": {
		"en": "Specify the axis as numeric angle axis. Useful for displaying polar and radial series.",
		"jp": "Specify the axis as numeric angle axis. Useful for displaying polar and radial series."
	}
            },
            {
              "name": "numericRadius",
              "type": "string",
              "description": {
		"en": "Specify the axis as numeric radius axis. Useful for displaying polar and radial series.",
		"jp": "Specify the axis as numeric radius axis. Useful for displaying polar and radial series."
	}
            }
          ]
        },
        "name": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The unique identifier of the axis.",
		"jp": "The unique identifier of the axis."
	}
        },
        "dataSource": {
          "type": "custom",
          "defaultValue": null,
          "description": {
		"en": "Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.",
		"jp": "Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself."
	}
        },
        "dataSourceUrl": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.",
		"jp": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it."
	}
        },
        "dataSourceType": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property.",
		"jp": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property."
	}
        },
        "responseDataKey": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Specifies the name of the property in which data records are held if the response is wrapped.",
		"jp": "Specifies the name of the property in which data records are held if the response is wrapped."
	}
        },
    		"remove": {
    		  "type": "bool",
          "defaultValue": true,
		      "description": {
		"en": "Set to true in order to have an existing axis removed from the chart, by name",
		"jp": "Set to true in order to have an existing axis removed from the chart, by name"
	}
    		},
        "labelLocation": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Specifies the location to display the axis labels for this axis.",
		"jp": "Specifies the location to display the axis labels for this axis."
	},
          "valueOptions": [
            {
              "name": "outsideTop",
              "type": "string",
              "description": {
		"en": "The labels should have an outside top position.",
		"jp": "The labels should have an outside top position."
	}
            },
            {
              "name": "outsideBottom",
              "type": "string",
              "description": {
		"en": "The labels should have an outside bottom position.",
		"jp": "The labels should have an outside bottom position."
	}
            },
            {
              "name": "outsideLeft",
              "type": "string",
              "description": {
		"en": "The labels should have an outside left position.",
		"jp": "The labels should have an outside left position."
	}
            },
            {
              "name": "outsideRight",
              "type": "string",
              "description": {
		"en": "The labels should have an outside right position.",
		"jp": "The labels should have an outside right position."
	}
            },
            {
              "name": "insideTop",
              "type": "string",
              "description": {
		"en": "The labels should have an inside top position.",
		"jp": "The labels should have an inside top position."
	}
            },
            {
              "name": "insideBottom",
              "type": "string",
              "description": {
		"en": "The labels should have an inside bottom position.",
		"jp": "The labels should have an inside bottom position."
	}
            },
            {
              "name": "insideLeft",
              "type": "string",
              "description": {
		"en": "The labels should have an inside left position.",
		"jp": "The labels should have an inside left position."
	}
            },
            {
              "name": "insideRight",
              "type": "string",
              "description": {
		"en": "The labels should have an inside right position. ",
		"jp": "The labels should have an inside right position. "
	}
            }
          ]
        },
        "labelVisibility": {
          "type": "string",
          "defaultValue": "visible",
          "description": {
		"en": "Specifies whether the labels are visible.",
		"jp": "Specifies whether the labels are visible."
	},
          "valueOptions": [
            {
              "name": "visible",
              "type": "string",
              "description": {
		"en": "The labels should be visisble for this axis.",
		"jp": "The labels should be visisble for this axis."
	}
            },
            {
              "name": "collapsed",
              "type": "string",
              "description": {
		"en": "The labels should not be visible for this axis.",
		"jp": "The labels should not be visible for this axis."
	}
            }
          ]
        },
        "labelExtent": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Specifies the extent of the area dedicated to the labels for this axis. If unspecified, this value is auto-calculated.",
		"jp": "Specifies the extent of the area dedicated to the labels for this axis. If unspecified, this value is auto-calculated."
	}
        },
        "labelAngle": {
          "type": "string",
          "defaultValue": 0,
          "description": {
		"en": "Specifies the angle that labels on the axis should be rotated.",
		"jp": "Specifies the angle that labels on the axis should be rotated."
	}
        },
        "labelTextStyle": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Overrides the style of the text used for the axis labels.",
		"jp": "Overrides the style of the text used for the axis labels."
	}
        },
        "labelTextColor": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Overrides the color of the text used for the axis labels.",
		"jp": "Overrides the color of the text used for the axis labels."
	}
        },
        "formatLabel": {
          "type": "function",
          "defaultValue": null,
		  "args": [
			{
			  "name": "value",
			  "type": "object",
			  "optional": false
			}
		  ],
          "description": {
		"en": "Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.",
		"jp": "Sets or gets a function which takes an object that produces a formatted label for displaying in the chart."
	}
        },
        "stroke": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the Stroke property.",
		"jp": "Gets or sets the Stroke property."
	}
        },
        "strokeThickness": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "Gets or sets the StrokeThickness property.",
		"jp": "Gets or sets the StrokeThickness property."
	}
        },
        "strip": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the Strip property.",
		"jp": "Gets or sets the Strip property."
	}
        },
        "majorStroke": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the MajorStroke property.",
		"jp": "Gets or sets the MajorStroke property."
	}
        },
        "majorStrokeThickness": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "Gets or sets the MajorStrokeThickness property.",
		"jp": "Gets or sets the MajorStrokeThickness property."
	}
        },
        "minorStroke": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the MinorStroke property.",
		"jp": "Gets or sets the MinorStroke property."
	}
        },
        "minorStrokeThickness": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "Gets or sets the MinorStrokeThickness property.",
		"jp": "Gets or sets the MinorStrokeThickness property."
	}
        },
        "isInverted": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets the IsInverted property.",
		"jp": "Gets or sets the IsInverted property."
	}
        },
        "crossingAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the CrossingAxis property.",
		"jp": "Gets or sets the CrossingAxis property."
	}
        },
        "crossingValue": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the CrossingValue property.",
		"jp": "Gets or sets the CrossingValue property."
	}
        },
        "coercionMethods": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the coercion methods to use when loading data from data sources. Should be specified before setting any member paths, if being used. Setting it later will not cause data to be reimported into the chart.",
		"jp": "Gets or sets the coercion methods to use when loading data from data sources. Should be specified before setting any member paths, if being used. Setting it later will not cause data to be reimported into the chart."
	}
        },
        "label": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the axis label format string.",
		"jp": "Gets or sets the axis label format string."
	}
        },
        "gap": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the amount of space between adjacent categories for the current axis object. The gap is silently clamped to the range [0, 1] when used.",
		"jp": "Gets or sets the amount of space between adjacent categories for the current axis object. The gap is silently clamped to the range [0, 1] when used."
	}
        },
        "overlap": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the amount of overlap between adjacent categories for the current axis object. The overlap is silently clamped to the range [-1, 1] when used.",
		"jp": "Gets or sets the amount of overlap between adjacent categories for the current axis object. The overlap is silently clamped to the range [-1, 1] when used."
	}
        },
        "startAngleOffset": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Indicates the angle in degress that the chart's 0th angle should be offset.",
		"jp": "Indicates the angle in degress that the chart's 0th angle should be offset."
	}
        },
        "interval": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the frequency of displayed labels. The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.",
		"jp": "Gets or sets the frequency of displayed labels. The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label."
	}
        },
        "displayType": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the axis display type. Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.",
		"jp": "Gets or sets the axis display type. Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point."
	},
          "valueOptions": [
            {
              "name": "continuous",
              "type": "string",
              "description": {
		"en": "Points occur at even intervals, even where data is not present at a given point.",
		"jp": "Points occur at even intervals, even where data is not present at a given point."
	}
            },
            {
              "name": "discrete",
              "type": "string",
              "description": {
		"en": "Points occur when data is present, possibly at uneven intervals.",
		"jp": "Points occur when data is present, possibly at uneven intervals."
	}
            }
          ]
        },
        "minimumValue": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the axis MinimumValue.",
		"jp": "Gets or sets the axis MinimumValue."
	}
        },
        "maximumValue": {
          "type": "string",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the axis MaximumValue.",
		"jp": "Gets or sets the axis MaximumValue."
	}
        },
        "dateTimeMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the DateTime mapping property for the CategoryDateTimeXAxis.",
		"jp": "Gets or sets the DateTime mapping property for the CategoryDateTimeXAxis."
	}
        },
        "referenceValue": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the ReferenceValue property.",
		"jp": "Gets or sets the ReferenceValue property."
	}
        },
        "isLogarithmic": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets the LogarithmBase property.",
		"jp": "Gets or sets the LogarithmBase property."
	}
        },
        "logarithmBase": {
          "type": "number",
          "defaultValue": 10,
          "description": {
		"en": "Gets or sets the LogarithmBase property.",
		"jp": "Gets or sets the LogarithmBase property."
	}
        },
        "radiusExtentScale": {
          "type": "number",
          "defaultValue": 0.75,
          "description": {
		"en": "Defines the percentage of the maximum radius extent to use as the maximum radius. Should be a value between 0.0 and 1.0.",
		"jp": "Defines the percentage of the maximum radius extent to use as the maximum radius. Should be a value between 0.0 and 1.0."
	}
        },
        "innerRadiusExtentScale": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be a value between 0.0 and 1.0.",
		"jp": "Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be a value between 0.0 and 1.0."
	}
        },
        "title": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The title to display for the component. ",
		"jp": "The title to display for the component. "
	}
        },
        "titleTextStyle": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The css font property to use for the title.",
		"jp": "The css font property to use for the title."
	}
        },
        "titleMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The margin to display around the title of the axis.",
		"jp": "The margin to display around the title of the axis."
	}
        },
        "titleHorizontalAlignment": {
          "type": "string",
          "defaultValue": "center",
          "description": {
		"en": "The horizontal alignment to use for the title.",
		"jp": "The horizontal alignment to use for the title."
	},
          "valueOptions": [
            {
              "name": "top",
              "type": "string",
              "description": {
		"en": "Top aligns the title",
		"jp": "Top aligns the title"
	}
            },
            {
              "name": "center",
              "type": "string",
              "description": {
		"en": "Center aligns the title.",
		"jp": "Center aligns the title."
	}
            },
            {
              "name": "bottom",
              "type": "string",
              "description": {
		"en": "Bottom aligns the title.",
		"jp": "Bottom aligns the title."
	}
            }
          ]
        },
        "titleVerticalAlignment": {
          "type": "string",
          "defaultValue": "center",
          "description": {
		"en": "The vertical alignment to use for the title. ",
		"jp": "The vertical alignment to use for the title. "
	},
          "valueOptions": [
            {
              "name": "top",
              "type": "string",
              "description": {
		"en": "Top aligns the title",
		"jp": "Top aligns the title"
	}
            },
            {
              "name": "center",
              "type": "string",
              "description": {
		"en": "Center aligns the title.",
		"jp": "Center aligns the title."
	}
            },
            {
              "name": "bottom",
              "type": "string",
              "description": {
		"en": "Bottom aligns the title.",
		"jp": "Bottom aligns the title."
	}
            }
          ]
        },
        "titlePosition": {
          "type": "string",
          "defaultValue": "auto",
          "description": {
		"en": "The position to use for the title.",
		"jp": "The position to use for the title."
	},
          "valueOptions": [
            {
              "name": "auto",
              "type": "string",
              "description": {
		"en": "The title is positioned automatically.",
		"jp": "The title is positioned automatically."
	}
            },
            {
              "name": "left",
              "type": "string",
              "description": {
		"en": "The title is positioned on the left of the labels, if applicable.",
		"jp": "The title is positioned on the left of the labels, if applicable."
	}
            },
            {
              "name": "right",
              "type": "string",
              "description": {
		"en": "The title is positioned on the right of the labels, if applicable.",
		"jp": "The title is positioned on the right of the labels, if applicable."
	}
            },
            {
              "name": "top",
              "type": "string",
              "description": {
		"en": "The title is positioned on the top of the labels, if applicable.",
		"jp": "The title is positioned on the top of the labels, if applicable."
	}
            },
            {
              "name": "bottom",
              "type": "string",
              "description": {
		"en": "The title is positioned on the bottom of the labels, if applicable.",
		"jp": "The title is positioned on the bottom of the labels, if applicable."
	}
            }
          ]
        },
        "titleTopMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The top margin to use for the title.",
		"jp": "The top margin to use for the title."
	}
        },
        "titleLeftMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The left margin to use for the title.",
		"jp": "The left margin to use for the title."
	}
        },
        "titleRightMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The right margin to use for the title.",
		"jp": "The right margin to use for the title."
	}
        },
        "titleBottomMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The bottom margin to use for the title.",
		"jp": "The bottom margin to use for the title."
	}
        },
        "labelHorizontalAlignment": {
          "type": "string",
          "defaultValue": "right",
          "description": {
		"en": "The horizontal alignment to use for the labels. Only applicable to vertical axes.",
		"jp": "The horizontal alignment to use for the labels. Only applicable to vertical axes."
	},
          "valueOptions": [
            {
              "name": "left",
              "type": "string",
              "description": {
		"en": "Left aligns the labels.",
		"jp": "Left aligns the labels."
	}
            },
            {
              "name": "center",
              "type": "string",
              "description": {
		"en": "Center aligns the labels.",
		"jp": "Center aligns the labels."
	}
            },
            {
              "name": "right",
              "type": "string",
              "description": {
		"en": "Right aligns the labels.",
		"jp": "Right aligns the labels."
	}
            }
          ]
        },
        "labelVerticalAlignment": {
          "type": "string",
          "defaultValue": "top",
          "description": {
		"en": "The vertical alignment to use for the labels. Only applicable to horizontal axes.",
		"jp": "The vertical alignment to use for the labels. Only applicable to horizontal axes."
	},
          "valueOptions": [
            {
              "name": "top",
              "type": "string",
              "description": {
		"en": "Top aligns the labels",
		"jp": "Top aligns the labels"
	}
            },
            {
              "name": "center",
              "type": "string",
              "description": {
		"en": "Center aligns the labels.",
		"jp": "Center aligns the labels."
	}
            },
            {
              "name": "bottom",
              "type": "string",
              "description": {
		"en": "Bottom aligns the labels.",
		"jp": "Bottom aligns the labels."
	}
            }
          ]
        },
        "labelMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The margin to use for the labels.",
		"jp": "The margin to use for the labels."
	}
        },
        "labelTopMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The top margin to use for the labels.",
		"jp": "The top margin to use for the labels."
	}
        },
        "labelLeftMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The left margin to use for the labels.",
		"jp": "The left margin to use for the labels."
	}
        },
        "labelRightMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The right margin to use for the labels.",
		"jp": "The right margin to use for the labels."
	}
        },
        "labelBottomMargin": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The bottom margin to use for the labels.",
		"jp": "The bottom margin to use for the labels."
	}
        },
        "showFirstLabel": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Sets whether or not to show the first label on the axis.",
		"jp": "Sets whether or not to show the first label on the axis."
	}
        },
        "titleAngle": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The angle to use for the axis title.",
		"jp": "The angle to use for the axis title."
	}
        },
        "tickLength": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The length of the tickmarks to display for this axis.",
		"jp": "The length of the tickmarks to display for this axis."
	}
        },
        "tickStrokeThickness": {
          "type": "number",
          "defaultValue": 0.5,
          "description": {
		"en": "The stroke thickness to use for the tickmarks.",
		"jp": "The stroke thickness to use for the tickmarks."
	}
        },
        "tickStroke": {
          "type": "string",
          "defaultValue": "black",
          "description": {
		"en": "The color to use for the tickmarks.",
		"jp": "The color to use for the tickmarks."
	}
        },
        "useClusteringMode": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether the cateogory axis should use clustering display mode even if no series are present that would force clustering mode.",
		"jp": "Gets or sets whether the cateogory axis should use clustering display mode even if no series are present that would force clustering mode."
	}
        }
      }
    },
    "bottomMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the bottom margin to use around the chart content in the canvas.",
		"jp": "Sets or gets the bottom margin to use around the chart content in the canvas."
	}
    },
    "brushes": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the Brushes property.<br>   The brushes property defines the palette from which automatically assigned series brushes are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection.",
		"jp": "Gets or sets the Brushes property.<br>   The brushes property defines the palette from which automatically assigned series brushes are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection."
	},
      "arrayMemberType": "string",
	   "schema": {
			"name": {
			  "type": "string",
			  "required": true,
			  "defaultValue": null,
			  "processValueOnly" : true,
			  "description": {
		"en": "Css color string",
		"jp": "Css color string"
	}
			}
		},
		"designerDisplayProperty": "name"
    },
    "circleMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for circle markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of circle.<br>   The provided object should have properties called render and optionally measure.",
		"jp": "Gets or sets the template to use for circle markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of circle.<br>   The provided object should have properties called render and optionally measure."
	},
      "schema": {
        "measure": {
          "type": "function",
          "defaultValue": null,
          "description": {
		"en": "Custom measure function",
		"jp": "Custom measure function"
	},
          "args": [
            {
              "name": "measureInfo",
              "type": "object",
              "optional": false,
              "schema": {
                "context": {
                  "type": "object",
                  "defaultValue": null,
                  "description": {
		"en": "Either a DOM element or a CanvasContext2D depending on the particular template scenario",
		"jp": "Either a DOM element or a CanvasContext2D depending on the particular template scenario"
	}
                },
                "width": {
                  "type": "number",
                  "defaultValue": null,
                  "description": {
		"en": "If value is present, specifies the available width, user may set to desired width for content",
		"jp": "If value is present, specifies the available width, user may set to desired width for content"
	}
                },
                "height": {
                  "type": "number",
                  "defaultValue": null,
                  "description": {
		"en": "Either a DOM element or a CanvasContext2D depending on the particular template scenario",
		"jp": "Either a DOM element or a CanvasContext2D depending on the particular template scenario"
	}
                },
                "isConstant": {
                  "type": "bool",
                  "defaultValue": false,
                  "description": {
		"en": "User should set to true if desired with and height will always be the same for this template",
		"jp": "User should set to true if desired with and height will always be the same for this template"
	}
                },
                "data": {
                  "type": "object",
                  "defaultValue": null,
                  "description": {
		"en": "If present, represents the contextual data for this template",
		"jp": "If present, represents the contextual data for this template"
	}
                }
              }
            }
          ]
        },
        "render": {
          "type": "function",
          "defaultValue": null,
          "description": {
		"en": "Custom render function",
		"jp": "Custom render function"
	},
          "args": [
            {
              "name": "renderInfo",
              "type": "object",
              "optional": false,
              "schema": {
                "context": {
                  "type": "object",
                  "defaultValue": null,
                  "description": {
		"en": "Either a DOM element or a CanvasContext2D depending on the particular template scenario",
		"jp": "Either a DOM element or a CanvasContext2D depending on the particular template scenario"
	}
                },
                "xPosition": {
                  "type": "number",
                  "defaultValue": null,
                  "description": {
		"en": "If present, specifies the x position at which to render the content",
		"jp": "If present, specifies the x position at which to render the content"
	}
                },
                "yPosition": {
                  "type": "number",
                  "defaultValue": null,
                  "description": {
		"en": "If present, specifies the y position at which to render the content",
		"jp": "If present, specifies the y position at which to render the content"
	}
                },
                "availableWidth": {
                  "type": "number",
                  "defaultValue": false,
                  "description": {
		"en": "If present, specifies the available width in which to render the content",
		"jp": "If present, specifies the available width in which to render the content"
	}
                },
                "availableHeight": {
                  "type": "number",
                  "defaultValue": null,
                  "description": {
		"en": "If present, specifies the available height in which to render the content",
		"jp": "If present, specifies the available height in which to render the content"
	}
                },
                "data": {
                  "type": "object",
                  "defaultValue": false,
                  "description": {
		"en": "If present, specifies the data that is in context for this content",
		"jp": "If present, specifies the data that is in context for this content"
	}
                },
                "isHitTestRender": {
                  "type": "bool",
                  "defaultValue": false,
                  "description": {
		"en": "If true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]",
		"jp": "If true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]"
	}
                }
              }
            }
          ]
        }
      }
    },
    "crosshairPoint": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the cross hair point (in world coordinates)<br>   Either or both of the crosshair point's X and Y may be set to double.NaN, in which<br>   case the relevant crosshair line is hidden.",
		"jp": "Gets or sets the cross hair point (in world coordinates)<br>   Either or both of the crosshair point's X and Y may be set to double.NaN, in which<br>   case the relevant crosshair line is hidden."
	},
      "schema": {
        "x": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The x coordinate.",
		"jp": "The x coordinate."
	}
        },
        "y": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "The y coordinate.",
		"jp": "The y coordinate."
	}
        }
      }
    },
    "crosshairVisibility": {
      "type": "string",
      "defaultValue": "collapsed",
      "description": {
		"en": " Gets or sets the current Chart's crosshair visibility override.",
		"jp": " Gets or sets the current Chart's crosshair visibility override."
	},
      "valueOptions": [
        {
          "name": "visible",
          "type": "string",
          "description": {
		"en": "Crosshair should be visible.",
		"jp": "Crosshair should be visible."
	}
        },
        {
          "name": "collapsed",
          "type": "string",
          "description": {
		"en": "Crosshair should not be visible.",
		"jp": "Crosshair should not be visible."
	}
        }
      ]
    },
    "dataSource": {
      "type": "custom",
      "defaultValue": null,
      "description": {
		"en": "can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself",
		"jp": "can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself"
	}
    },
    "dataSourceType": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property.",
		"jp": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property."
	}
    },
    "dataSourceUrl": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it",
		"jp": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it"
	}
    },
    "defaultInteraction": {
      "type": "string",
      "defaultValue": "dragZoom",
      "description": {
		"en": "Gets or sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.",
		"jp": "Gets or sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events."
	},
      "valueOptions": [
        {
          "name": "none",
          "type": "string",
          "description": {
		"en": "User gesture will not change the state of the chart.",
		"jp": "User gesture will not change the state of the chart."
	}
        },
        {
          "name": "dragZoom",
          "type": "string",
          "description": {
		"en": "User gesture will start a drag rectangle to zoom the chart.",
		"jp": "User gesture will start a drag rectangle to zoom the chart."
	}
        },
        {
          "name": "dragPan",
          "type": "string",
          "description": {
		"en": "User gesture will start a pan action to move the chart's window.",
		"jp": "User gesture will start a pan action to move the chart's window."
	}
        }
      ]
    },
    "diamondMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for diamond markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of diamond.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for diamond markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of diamond.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "dragModifier": {
      "type": "string",
      "defaultValue": "none",
      "description": {
		"en": "Gets or sets the current Chart's DragModifier property.",
		"jp": "Gets or sets the current Chart's DragModifier property."
	},
      "valueOptions": [
        {
          "name": "none",
          "type": "string",
          "description": {
		"en": "No modifier key is set.",
		"jp": "No modifier key is set."
	}
        },
        {
          "name": "alt",
          "type": "string",
          "description": {
		"en": "The modifier is set to alt key.",
		"jp": "The modifier is set to alt key."
	}
        },
        {
          "name": "control",
          "type": "string",
          "description": {
		"en": "The modifier is set to control key.",
		"jp": "The modifier is set to control key."
	}
        },
        {
          "name": "shift",
          "type": "string",
          "description": {
		"en": "The modifier is set to shift key.",
		"jp": "The modifier is set to shift key."
	}
        }
      ]
    },
    "gridMode": {
      "type": "string",
      "defaultValue": "behindSeries",
      "description": {
		"en": "Gets or sets the GridMode property.",
		"jp": "Gets or sets the GridMode property."
	},
      "valueOptions": [
        {
          "name": "none",
          "type": "string",
          "description": {
		"en": "No chart grid.",
		"jp": "No chart grid."
	}
        },
        {
          "name": "beforeSeries",
          "type": "string",
          "description": {
		"en": "Chart grid should be rendered before or in front of the data series.",
		"jp": "Chart grid should be rendered before or in front of the data series."
	}
        },
        {
          "name": "behindSeries",
          "type": "string",
          "description": {
		"en": "Chart grid should be rendered behind or in back of the data series.",
		"jp": "Chart grid should be rendered behind or in back of the data series."
	}
        }
      ]
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).",
		"jp": "The height of the chart. It can be set as a number in pixels, string (px) or percentage (%)."
	}
    },
    "hexagonMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for hexagon markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of hexagon.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for hexagon markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of hexagon.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "hexagramMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for hexagram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of hexagram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for hexagram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of hexagram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "highlightingTransitionDuration": {
      "type": "number",
      "defaultValue": 300.0,
      "description": {
		"en": "the length, in milliseconds of the highlighting transition.",
		"jp": "the length, in milliseconds of the highlighting transition."
	}
    },
    "horizontalZoomable": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Gets or sets the current Chart's horizontal zoomability.",
		"jp": "Gets or sets the current Chart's horizontal zoomability."
	}
    },
    "isSquare": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.",
		"jp": "Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts."
	}
    },
    "isSurfaceInteractionDisabled": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set to true in order to disable any interactions with the plot surface.",
		"jp": "Set to true in order to disable any interactions with the plot surface."
	}
    },
    "leftMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the left margin to use around the chart content in the canvas.",
		"jp": "Sets or gets the left margin to use around the chart content in the canvas."
	}
    },
    "legend": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.",
		"jp": "Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself."
	},
      "schema": {
        "element": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The name of the element to turn into a legend.",
		"jp": "The name of the element to turn into a legend."
	}
        },
        "type": {
          "type": "string",
          "defaultValue": "legend",
          "description": {
		"en": "The name of the element to turn into a legend.",
		"jp": "The name of the element to turn into a legend."
	},
          "valueOptions": [
            {
              "name": "item",
              "type": "string",
              "description": {
		"en": "Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.",
		"jp": "Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control."
	}
            },
            {
              "name": "legend",
              "type": "string",
              "description": {
		"en": "Specify the legend as legend. It is supported by all types of series in the igDataChart control.",
		"jp": "Specify the legend as legend. It is supported by all types of series in the igDataChart control."
	}
            }
          ]
        },
        "width": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The width of the legend.",
		"jp": "The width of the legend."
	}
        },
        "height": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The height of the legend.",
		"jp": "The height of the legend."
	}
        }
      }
    },
    "markerBrushes": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the MarkerBrushes property.<br>   The marker brushes property defines the palette from which automatically assigned marker brushes are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection.",
		"jp": "Gets or sets the MarkerBrushes property.<br>   The marker brushes property defines the palette from which automatically assigned marker brushes are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection."
	},
      "arrayMemberType": "string",
	   "schema": {
			"name": {
			  "type": "string",
			  "required": true,
			  "defaultValue": null,
			  "processValueOnly" : true,
			  "description": {
		"en": "Css color string",
		"jp": "Css color string"
	}
			}
		},
		"designerDisplayProperty": "name"
    },
    "markerOutlines": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the MarkerOutlines property.<br>   The marker outlines property defines the palette from which automatically assigned marker outlines are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection.",
		"jp": "Gets or sets the MarkerOutlines property.<br>   The marker outlines property defines the palette from which automatically assigned marker outlines are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection."
	},
      "arrayMemberType": "string",
	   "schema": {
			"name": {
			  "type": "string",
			  "required": true,
			  "defaultValue": null,
			  "processValueOnly" : true,
			  "description": {
		"en": "Css color string",
		"jp": "Css color string"
	}
			}
		},
		"designerDisplayProperty": "name"
    },
    "outlines": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the Outlines property.<br>   The outlines property defines the palette from which automatically assigned series outlines are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection.",
		"jp": "Gets or sets the Outlines property.<br>   The outlines property defines the palette from which automatically assigned series outlines are selected.<br>   The value provided should be an array of css color strings. Optionally the first element can be a string reading \"RGB\" or \"HSV\" to specify the interpolation mode of the collection."
	},
      "arrayMemberType": "string",
	   "schema": {
			"name": {
			  "type": "string",
			  "required": true,
			  "defaultValue": null,
			  "processValueOnly" : true,
			  "description": {
		"en": "Css color string",
		"jp": "Css color string"
	}
			}
		},
		"designerDisplayProperty": "name"
    },
    "overviewPlusDetailPaneVisibility": {
      "type": "string",
      "defaultValue": "collapsed",
      "description": {
		"en": "The visibility of the OverviewPlusDetailPane.",
		"jp": "The visibility of the OverviewPlusDetailPane."
	},
      "valueOptions": [
        {
          "name": "visible",
          "type": "string",
          "description": {
		"en": "The overview pane should be visible.",
		"jp": "The overview pane should be visible."
	}
        },
        {
          "name": "collapsed",
          "type": "string",
          "description": {
		"en": "The overview pane should not be visible.",
		"jp": "The overview pane should not be visible."
	}
        }
      ]
    },
    "panModifier": {
      "type": "string",
      "defaultValue": "shift",
      "description": {
		"en": "Gets or sets the current Chart's PanModifier property.",
		"jp": "Gets or sets the current Chart's PanModifier property."
	},
      "valueOptions": [
        {
          "name": "none",
          "type": "string",
          "description": {
		"en": "No modifier key is set.",
		"jp": "No modifier key is set."
	}
        },
        {
          "name": "alt",
          "type": "string",
          "description": {
		"en": "The modifier is set to alt key.",
		"jp": "The modifier is set to alt key."
	}
        },
        {
          "name": "control",
          "type": "string",
          "description": {
		"en": "The modifier is set to control key.",
		"jp": "The modifier is set to control key."
	}
        },
        {
          "name": "shift",
          "type": "string",
          "description": {
		"en": "The modifier is set to shift key.",
		"jp": "The modifier is set to shift key."
	}
        }
      ]
    },
    "pentagonMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for pentagon markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pentagon.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for pentagon markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pentagon.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "pentagramMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for pentragram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pentagram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for pentragram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pentagram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "plotAreaBackground": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the brush used as the background for the current Chart object's plot area.",
		"jp": "Gets or sets the brush used as the background for the current Chart object's plot area."
	}
    },
    "previewRect": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the preview rectangle.<br>   The preview rectangle may be set to Rect.Empty, in which case the visible preview<br>   strokePath is hidden.<br>   The provided object should have numeric properties called left, top, width and height.",
		"jp": "Gets or sets the preview rectangle.<br>   The preview rectangle may be set to Rect.Empty, in which case the visible preview<br>   strokePath is hidden.<br>   The provided object should have numeric properties called left, top, width and height."
	},
      "schema": {
        "left": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets left position of the rectangle",
		"jp": "Gets sets left position of the rectangle"
	}
        },
        "top": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets top position of the rectangle",
		"jp": "Gets sets top position of the rectangle"
	}
        },
        "width": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets sets width position of the rectangle",
		"jp": "Gets sets width position of the rectangle"
	}
        },
        "height": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets sets height position of the rectangle",
		"jp": "Gets sets height position of the rectangle"
	}
        }
      }
    },
    "pyramidMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for pyramid markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pyramid.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for pyramid markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of pyramid.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "responseDataKey": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "see $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.",
		"jp": "see $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped."
	}
    },
    "rightMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the right margin to use around the chart content in the canvas.",
		"jp": "Sets or gets the right margin to use around the chart content in the canvas."
	}
    },
    "series": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "an array of series objects",
		"jp": "an array of series objects"
	},
      "designerDisplayProperty": "name",
      "schema": {
        "type": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Type of the series.",
		"jp": "Type of the series."
	},
          "valueOptions": [
            {
              "name": "area",
              "type": "string",
              "description": {
		"en": "Specify the series as Area series.",
		"jp": "Specify the series as Area series."
	}
            },
            {
              "name": "bar",
              "type": "string",
              "description": {
		"en": "Specify the series as Bar series.",
		"jp": "Specify the series as Bar series."
	}
            },
            {
              "name": "column",
              "type": "string",
              "description": {
		"en": "Specify the series as Column series.",
		"jp": "Specify the series as Column series."
	}
            },
            {
              "name": "line",
              "type": "string",
              "description": {
		"en": "Specify the series as Line series.",
		"jp": "Specify the series as Line series."
	}
            },
            {
              "name": "rangeArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Range Area series.",
		"jp": "Specify the series as Range Area series."
	}
            },
            {
              "name": "rangeColumn",
              "type": "string",
              "description": {
		"en": "Specify the series as Range Column series.",
		"jp": "Specify the series as Range Column series."
	}
            },
            {
              "name": "splineArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Spline Area series.",
		"jp": "Specify the series as Spline Area series."
	}
            },
            {
              "name": "spline",
              "type": "string",
              "description": {
		"en": "Specify the series as Spline series.",
		"jp": "Specify the series as Spline series."
	}
            },
            {
              "name": "stepArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Step Area series",
		"jp": "Specify the series as Step Area series"
	}
            },
            {
              "name": "stepLine",
              "type": "string",
              "description": {
		"en": "Specify the series as Step Line series.",
		"jp": "Specify the series as Step Line series."
	}
            },
            {
              "name": "waterfall",
              "type": "string",
              "description": {
		"en": "Specify the series as Waterfall series.",
		"jp": "Specify the series as Waterfall series."
	}
            },
            {
              "name": "financial",
              "type": "string",
              "description": {
		"en": "Specify the series as Financial series.",
		"jp": "Specify the series as Financial series."
	}
            },
            {
              "name": "typicalPriceIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Typical Price Indicator series.",
		"jp": "Specify the series as Typical Price Indicator series."
	}
            },
            {
              "name": "point",
              "type": "string",
              "description": {
		"en": "Specify the series as Point series.",
		"jp": "Specify the series as Point series."
	}
            },
            {
              "name": "polarSplineArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Polar Spline Area series.",
		"jp": "Specify the series as Polar Spline Area series."
	}
            },
            {
              "name": "polarSpline",
              "type": "string",
              "description": {
		"en": "Specify the series as Polar Spline series.",
		"jp": "Specify the series as Polar Spline series."
	}
            },
            {
              "name": "polarArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Polar Area series.",
		"jp": "Specify the series as Polar Area series."
	}
            },
            {
              "name": "polarLine",
              "type": "string",
              "description": {
		"en": "Specify the series as Polar Line series.",
		"jp": "Specify the series as Polar Line series."
	}
            },
            {
              "name": "polarScatter",
              "type": "string",
              "description": {
		"en": "Specify the series as Polar Scatter series.",
		"jp": "Specify the series as Polar Scatter series."
	}
            },
            {
              "name": "radialColumn",
              "type": "string",
              "description": {
		"en": "Specify the series as Radial Column series.",
		"jp": "Specify the series as Radial Column series."
	}
            },
            {
              "name": "radialLine",
              "type": "string",
              "description": {
		"en": "Specify the series as Radial Line series.",
		"jp": "Specify the series as Radial Line series."
	}
            },
            {
              "name": "radialPie",
              "type": "string",
              "description": {
		"en": "Specify the series as Radial Pie series.",
		"jp": "Specify the series as Radial Pie series."
	}
            },
            {
              "name": "radialArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Radial Area series.",
		"jp": "Specify the series as Radial Area series."
	}
            },
            {
              "name": "scatter",
              "type": "string",
              "description": {
		"en": "Specify the series as Scatter series.",
		"jp": "Specify the series as Scatter series."
	}
            },
            {
              "name": "scatterLine",
              "type": "string",
              "description": {
		"en": "Specify the series as Scatter Line series.",
		"jp": "Specify the series as Scatter Line series."
	}
            },
            {
              "name": "scatterSpline",
              "type": "string",
              "description": {
		"en": "Specify the series as Scatter Spline series.",
		"jp": "Specify the series as Scatter Spline series."
	}
            },
            {
              "name": "bubble",
              "type": "string",
              "description": {
		"en": "Specify the series as Bubble series.",
		"jp": "Specify the series as Bubble series."
	}
            },
            {
              "name": "absoluteVolumeOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Absolute Volume Oscillator Indicator series.",
		"jp": "Specify the series as Absolute Volume Oscillator Indicator series."
	}
            },
            {
              "name": "averageTrueRangeIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Average True Range Indicator series.",
		"jp": "Specify the series as Average True Range Indicator series."
	}
            },
            {
              "name": "accumulationDistributionIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Accumulation Distribution Indicator series",
		"jp": "Specify the series as Accumulation Distribution Indicator series"
	}
            },
            {
              "name": "averageDirectionalIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Average Directional Index Indicator series.",
		"jp": "Specify the series as Average Directional Index Indicator series."
	}
            },
            {
              "name": "bollingerBandWidthIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Bollinger Band Width Indicator series.",
		"jp": "Specify the series as Bollinger Band Width Indicator series."
	}
            },
            {
              "name": "chaikinOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Chaikin Oscillator Indicator series.",
		"jp": "Specify the series as Chaikin Oscillator Indicator series."
	}
            },
            {
              "name": "chaikinVolatilityIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Chaikin Volitility Indicator series.",
		"jp": "Specify the series as Chaikin Volitility Indicator series."
	}
            },
            {
              "name": "commodityChannelIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Commodity Channel Index Indicator series.",
		"jp": "Specify the series as Commodity Channel Index Indicator series."
	}
            },
            {
              "name": "detrendedPriceOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Detrended Price Oscillator Indicator series.",
		"jp": "Specify the series as Detrended Price Oscillator Indicator series."
	}
            },
            {
              "name": "easeOfMovementIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Ease Of Movement Indicator series.",
		"jp": "Specify the series as Ease Of Movement Indicator series."
	}
            },
            {
              "name": "fastStochasticOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Fast Stochastic Oscillator Indicator series.",
		"jp": "Specify the series as Fast Stochastic Oscillator Indicator series."
	}
            },
            {
              "name": "forceIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Force Index Indicator series.",
		"jp": "Specify the series as Force Index Indicator series."
	}
            },
            {
              "name": "fullStochasticOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Full Stochastic Oscillator Indicator series.",
		"jp": "Specify the series as Full Stochastic Oscillator Indicator series."
	}
            },
            {
              "name": "marketFacilitationIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Market Facilitation Index Indicator series.",
		"jp": "Specify the series as Market Facilitation Index Indicator series."
	}
            },
            {
              "name": "massIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Mass Index Indicator series.",
		"jp": "Specify the series as Mass Index Indicator series."
	}
            },
            {
              "name": "medianPriceIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Median Price Indicator series.",
		"jp": "Specify the series as Median Price Indicator series."
	}
            },
            {
              "name": "moneyFlowIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Money Flow Index Indicator series.",
		"jp": "Specify the series as Money Flow Index Indicator series."
	}
            },
            {
              "name": "movingAverageConvergenceDivergenceIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Moving Average Convergence Divergence Indicator series.",
		"jp": "Specify the series as Moving Average Convergence Divergence Indicator series."
	}
            },
            {
              "name": "negativeVolumeIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Negative Volume Index Indicator series.",
		"jp": "Specify the series as Negative Volume Index Indicator series."
	}
            },
            {
              "name": "onBalanceVolumeIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as On Balance Volume Indicator series.",
		"jp": "Specify the series as On Balance Volume Indicator series."
	}
            },
            {
              "name": "percentagePriceOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Percentage Price Oscillator Indicator series.",
		"jp": "Specify the series as Percentage Price Oscillator Indicator series."
	}
            },
            {
              "name": "percentageVolumeOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Percentage Volume Oscillator Indicator series.",
		"jp": "Specify the series as Percentage Volume Oscillator Indicator series."
	}
            },
            {
              "name": "positiveVolumeIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Positive Volume Index Indicator series.",
		"jp": "Specify the series as Positive Volume Index Indicator series."
	}
            },
            {
              "name": "priceVolumeTrendIndictor",
              "type": "string",
              "description": {
		"en": "Specify the series as Price Volume Trend Indictor series.",
		"jp": "Specify the series as Price Volume Trend Indictor series."
	}
            },
            {
              "name": "rateOfChangeAndMomentumIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Rate Of Change And Momentum Indicator series.",
		"jp": "Specify the series as Rate Of Change And Momentum Indicator series."
	}
            },
            {
              "name": "relativeStrengthIndexIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Relative Strength Index Indicator series.",
		"jp": "Specify the series as Relative Strength Index Indicator series."
	}
            },
            {
              "name": "slowStochasticOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Slow Stochastic Oscillator Indicator series.",
		"jp": "Specify the series as Slow Stochastic Oscillator Indicator series."
	}
            },
            {
              "name": "standardDeviationIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Standard Deviation Indicator series.",
		"jp": "Specify the series as Standard Deviation Indicator series."
	}
            },
            {
              "name": "stochRSIIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Stoch RSI Indicator series.",
		"jp": "Specify the series as Stoch RSI Indicator series."
	}
            },
            {
              "name": "trixIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Trix Indicator series.",
		"jp": "Specify the series as Trix Indicator series."
	}
            },
            {
              "name": "ultimateOscillatorIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Ultimate Oscillator Indicator series.",
		"jp": "Specify the series as Ultimate Oscillator Indicator series."
	}
            },
            {
              "name": "weightedCloseIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Weighted Close Indicator series.",
		"jp": "Specify the series as Weighted Close Indicator series."
	}
            },
            {
              "name": "williamsPercentRIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Williams Percent R Indicator series.",
		"jp": "Specify the series as Williams Percent R Indicator series."
	}
            },
            {
              "name": "bollingerBandsOverlay",
              "type": "string",
              "description": {
		"en": "Specify the series as Bollinger Bands Overlay series.",
		"jp": "Specify the series as Bollinger Bands Overlay series."
	}
            },
            {
              "name": "priceChannelOverlay",
              "type": "string",
              "description": {
		"en": "Specify the series as Price Channel Overlay series.",
		"jp": "Specify the series as Price Channel Overlay series."
	}
            },
            {
              "name": "customIndicator",
              "type": "string",
              "description": {
		"en": "Specify the series as Custom Indicator series.",
		"jp": "Specify the series as Custom Indicator series."
	}
            },
            {
              "name": "stackedBar",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Bar series.",
		"jp": "Specify the series as Stacked Bar series."
	}
            },
            {
              "name": "stacked100Bar",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Bar series.",
		"jp": "Specify the series as Stacked 100 Bar series."
	}
            },
            {
              "name": "stackedArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Area series.",
		"jp": "Specify the series as Stacked Area series."
	}
            },
            {
              "name": "stacked100Area",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Area series.",
		"jp": "Specify the series as Stacked 100 Area series."
	}
            },
            {
              "name": "stackedColumn",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Column series.",
		"jp": "Specify the series as Stacked Column series."
	}
            },
            {
              "name": "stacked100Column",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Column series.",
		"jp": "Specify the series as Stacked 100 Column series."
	}
            },
            {
              "name": "stackedLine",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Line series.",
		"jp": "Specify the series as Stacked Line series."
	}
            },
            {
              "name": "stacked100Line",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Line series.",
		"jp": "Specify the series as Stacked 100 Line series."
	}
            },
            {
              "name": "stackedSpline",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Spline series.",
		"jp": "Specify the series as Stacked Spline series."
	}
            },
            {
              "name": "stacked100Spline",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Spline series.",
		"jp": "Specify the series as Stacked 100 Spline series."
	}
            },
            {
              "name": "stackedSplineArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked Spline Area series.",
		"jp": "Specify the series as Stacked Spline Area series."
	}
            },
            {
              "name": "stacked100SplineArea",
              "type": "string",
              "description": {
		"en": "Specify the series as Stacked 100 Spline Area series.",
		"jp": "Specify the series as Stacked 100 Spline Area series."
	}
            },
            {
              "name": "crosshairLayer",
              "type": "string",
              "description": {
		"en": "Specify the series as a crosshair layer.",
		"jp": "Specify the series as a crosshair layer."
	}
            },
            {
              "name": "categoryHighlightLayer",
              "type": "string",
              "description": {
		"en": "Specify the series as a category highlight layer.",
		"jp": "Specify the series as a category highlight layer."
	}
            },
            {
              "name": "categoryItemHighlightLayer",
              "type": "string",
              "description": {
		"en": "Specify the series as a category item highlight layer.",
		"jp": "Specify the series as a category item highlight layer."
	}
            },
            {
              "name": "itemToolTipLayer",
              "type": "string",
              "description": {
		"en": "Specify the series as an item tooltip layer.",
		"jp": "Specify the series as an item tooltip layer."
	}
            },
            {
              "name": "categoryToolTipLayer",
              "type": "string",
              "description": {
		"en": "Specify the series as a category tooltip layer.",
		"jp": "Specify the series as a category tooltip layer."
	}
            }
          ]
        },
        "name": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The unique identifier of the series.",
		"jp": "The unique identifier of the series."
	}
        },
        "dataSource": {
          "type": "custom",
          "defaultValue": null,
          "description": {
		"en": "Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself ",
		"jp": "Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself "
	}
        },
        "dataSourceUrl": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it",
		"jp": "Specifies a remote URL accepted by $.ig.DataSource in order to request data from it"
	}
        },
        "dataSourceType": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property.",
		"jp": "Explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property."
	}
        },
        "responseDataKey": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Specifies the name of the property in which data records are held if the response is wrapped.",
		"jp": "Specifies the name of the property in which data records are held if the response is wrapped."
	}
        },
        "remove": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Set to true in order to have an existing series removed from the chart, by name",
		"jp": "Set to true in order to have an existing series removed from the chart, by name"
	}
        },
        "showTooltip": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Whether the chart should render a tooltip.",
		"jp": "Whether the chart should render a tooltip."
	}
        },
        "tooltipTemplate": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "The name of template or the template itself that chart tooltip will use to render.",
		"jp": "The name of template or the template itself that chart tooltip will use to render."
	}
        },
        "legend": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.",
		"jp": "Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself."
	},
          "schema": {
            "element": {
              "type": "string",
              "defaultValue": null,
              "description": {
		"en": "The name of the element to turn into a legend.",
		"jp": "The name of the element to turn into a legend."
	}
            },
            "type": {
              "type": "string",
              "defaultValue": "legend",
              "description": {
		"en": "Type of the legend.",
		"jp": "Type of the legend."
	},
              "valueOptions": [
                {
                  "name": "item",
                  "type": "string",
                  "description": {
		"en": "Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.",
		"jp": "Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control."
	}
                },
                {
                  "name": "legend",
                  "type": "string",
                  "description": {
		"en": "Specify the legend as legend. It is supported by all types of series in the igDataChart control.",
		"jp": "Specify the legend as legend. It is supported by all types of series in the igDataChart control."
	}
                }
              ]
            },
            "width": {
              "type": "string",
              "defaultValue": null,
              "description": {
		"en": "The width of the legend.",
		"jp": "The width of the legend."
	}
            },
            "height": {
              "type": "string",
              "defaultValue": null,
              "description": {
		"en": "The height of the legend.",
		"jp": "The height of the legend."
	}
            }
          }
        },
        "legendItemVisibility": {
          "type": "string",
          "defaultValue": "visible",
          "description": {
		"en": "Gets or sets the legend item visibility for the current series object.",
		"jp": "Gets or sets the legend item visibility for the current series object."
	},
          "valueOptions": [
            {
              "name": "visible",
              "type": "string",
              "description": {
		"en": "The legend item should be visible.",
		"jp": "The legend item should be visible."
	}
            },
            {
              "name": "collapsed",
              "type": "string",
              "description": {
		"en": "The legend item should not be visible.",
		"jp": "The legend item should not be visible."
	}
            }
          ]
        },
        "legendItemBadgeTemplate": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the LegendItemBadgeTemplate property. The legend item badge is created according to the LegendItemBadgeTemplate on-demand by the series object itself.",
		"jp": "Gets or sets the LegendItemBadgeTemplate property. The legend item badge is created according to the LegendItemBadgeTemplate on-demand by the series object itself."
	},
          "schemaRef": "dataChart.circleMarkerTemplate"
        },
        "legendItemTemplate": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the LegendItemTemplate property. The legend item control content is created according to the LegendItemTemplate on-demand by the series object itself.",
		"jp": "Gets or sets the LegendItemTemplate property. The legend item control content is created according to the LegendItemTemplate on-demand by the series object itself."
	},
          "schemaRef": "dataChart.circleMarkerTemplate"
        },
        "discreteLegendItemTemplate": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the DiscreteLegendItemTemplate property. The legend item control content is created according to the LegendItemTemplate on-demand by the series object itself.",
		"jp": "Gets or sets the DiscreteLegendItemTemplate property. The legend item control content is created according to the LegendItemTemplate on-demand by the series object itself."
	},
          "schemaRef": "dataChart.circleMarkerTemplate"
        },
        "transitionDuration": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the duration of the current series's morph.",
		"jp": "Gets or sets the duration of the current series's morph."
	}
        },
        "transitionEasingFunction": {
          "type": "function",
          "defaultValue": null,
          "description": {
		"en": "Provides an easing function to use for the transitions. This should either be a well known name of an easing function (The only currently supported name is cubic), or it should be a function that takes a number and returns the output with the function applied.",
		"jp": "Provides an easing function to use for the transitions. This should either be a well known name of an easing function (The only currently supported name is cubic), or it should be a function that takes a number and returns the output with the function applied."
	}
        },
        "resolution": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "Gets or sets the current series object's rendering resolution.",
		"jp": "Gets or sets the current series object's rendering resolution."
	}
        },
        "title": {
          "type": "string",
          "defaultValue": 1,
          "description": {
		"en": "Gets or sets the Title property. The legend item control is created according to the Title on-demand by the series object itself.",
		"jp": "Gets or sets the Title property. The legend item control is created according to the Title on-demand by the series object itself."
	}
        },
        "brush": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush to use for the series.",
		"jp": "Gets or sets the brush to use for the series."
	}
        },
        "outline": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush to use for the outline of the series. Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.",
		"jp": "Gets or sets the brush to use for the outline of the series. Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts."
	}
        },
        "thickness": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the brush to use for the outline of the series. Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.",
		"jp": "Gets or sets the brush to use for the outline of the series. Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts."
	}
        },
        "coercionMethods": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or gets the coercion methods to use when loading data from data sources. Should be specified before setting any member paths, if being used. Setting it later will not cause data to be reimported into the chart.",
		"jp": "Gets or gets the coercion methods to use when loading data from data sources. Should be specified before setting any member paths, if being used. Setting it later will not cause data to be reimported into the chart."
	}
        },
        "markerType": {
          "type": "string",
          "defaultValue": "none",
          "description": {
		"en": "Gets or sets the marker type for the current series object. If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.",
		"jp": "Gets or sets the marker type for the current series object. If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored."
	},
          "valueOptions": [
            {
              "name": "unset",
              "type": "string",
              "description": {
		"en": "Marker hasn't been set.",
		"jp": "Marker hasn't been set."
	}
            },
            {
              "name": "none",
              "type": "string",
              "description": {
		"en": "No markerItems.",
		"jp": "No markerItems."
	}
            },
            {
              "name": "automatic",
              "type": "string",
              "description": {
		"en": "Automatic marker shape.",
		"jp": "Automatic marker shape."
	}
            },
            {
              "name": "circle",
              "type": "string",
              "description": {
		"en": "Circle marker shape.",
		"jp": "Circle marker shape."
	}
            },
            {
              "name": "triangle",
              "type": "string",
              "description": {
		"en": "Flat-top triangle marker shape.",
		"jp": "Flat-top triangle marker shape."
	}
            },
            {
              "name": "pyramid",
              "type": "string",
              "description": {
		"en": "Flat-base triangle marker shape.",
		"jp": "Flat-base triangle marker shape."
	}
            },
            {
              "name": "square",
              "type": "string",
              "description": {
		"en": "Square marker shape.",
		"jp": "Square marker shape."
	}
            },
            {
              "name": "diamond",
              "type": "string",
              "description": {
		"en": "Diamond marker shape.",
		"jp": "Diamond marker shape."
	}
            },
            {
              "name": "pentagon",
              "type": "string",
              "description": {
		"en": "Pentagon marker shape.",
		"jp": "Pentagon marker shape."
	}
            },
            {
              "name": "hexagon",
              "type": "string",
              "description": {
		"en": "Hexagon marker shape.",
		"jp": "Hexagon marker shape."
	}
            },
            {
              "name": "tetragram",
              "type": "string",
              "description": {
		"en": "Four-pointed star marker shape.",
		"jp": "Four-pointed star marker shape."
	}
            },
            {
              "name": "pentagram",
              "type": "string",
              "description": {
		"en": "Five-pointed star marker shape.",
		"jp": "Five-pointed star marker shape."
	}
            },
            {
              "name": "hexagram",
              "type": "string",
              "description": {
		"en": "Six-pointed star marker shape.",
		"jp": "Six-pointed star marker shape."
	}
            }
          ]
        },
        "markerTemplate": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the MarkerTemplate for the current series object.",
		"jp": "Gets or sets the MarkerTemplate for the current series object."
	},
          "schemaRef": "dataChart.circleMarkerTemplate"
        },
        "markerBrush": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush that specifies how the current series object's marker interiors are painted.",
		"jp": "Gets or sets the brush that specifies how the current series object's marker interiors are painted."
	}
        },
        "markerOutline": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush that specifies how the current series object's marker outlines are painted.",
		"jp": "Gets or sets the brush that specifies how the current series object's marker outlines are painted."
	}
        },
        "xAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the effective x-axis for the current object.",
		"jp": "Gets or sets the effective x-axis for the current object."
	}
        },
        "yAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the effective y-axis for the current object.",
		"jp": "Gets or sets the effective y-axis for the current object."
	}
        },
        "xMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the value mapping property for the current series object.",
		"jp": "Gets or sets the value mapping property for the current series object."
	}
        },
        "yMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the value mapping property for the current series object.",
		"jp": "Gets or sets the value mapping property for the current series object."
	}
        },
        "trendLineType": {
          "type": "string",
          "defaultValue": "none",
          "description": {
		"en": "Gets or sets the trend type for the current scatter series.",
		"jp": "Gets or sets the trend type for the current scatter series."
	},
          "valueOptions": [
            {
              "name": "none",
              "type": "string",
              "description": {
		"en": "No trendline should display.",
		"jp": "No trendline should display."
	}
            },
            {
              "name": "linearFit",
              "type": "string",
              "description": {
		"en": "Linear fit.",
		"jp": "Linear fit."
	}
            },
            {
              "name": "quadraticFit",
              "type": "string",
              "description": {
		"en": "Quadratic polynomial fit.",
		"jp": "Quadratic polynomial fit."
	}
            },
            {
              "name": "cubicFit",
              "type": "string",
              "description": {
		"en": "Cubic polynomial fit.",
		"jp": "Cubic polynomial fit."
	}
            },
            {
              "name": "quarticFit",
              "type": "string",
              "description": {
		"en": "Quartic polynomial fit.",
		"jp": "Quartic polynomial fit."
	}
            },
            {
              "name": "quinticFit",
              "type": "string",
              "description": {
		"en": "Quintic polynomial fit.",
		"jp": "Quintic polynomial fit."
	}
            },
            {
              "name": "logarithmicFit",
              "type": "string",
              "description": {
		"en": "Logarithmic fit.",
		"jp": "Logarithmic fit."
	}
            },
            {
              "name": "exponentialFit",
              "type": "string",
              "description": {
		"en": "Exponential fit.",
		"jp": "Exponential fit."
	}
            },
            {
              "name": "powerLawFit",
              "type": "string",
              "description": {
		"en": "Powerlaw fit.",
		"jp": "Powerlaw fit."
	}
            },
            {
              "name": "simpleAverage",
              "type": "string",
              "description": {
		"en": "Simple moving average.",
		"jp": "Simple moving average."
	}
            },
            {
              "name": "exponentialAverage",
              "type": "string",
              "description": {
		"en": "Exponential moving average.",
		"jp": "Exponential moving average."
	}
            },
            {
              "name": "modifiedAverage",
              "type": "string",
              "description": {
		"en": "Modified moving average.",
		"jp": "Modified moving average."
	}
            },
            {
              "name": "cumulativeAverage",
              "type": "string",
              "description": {
		"en": "Cumulative moving average.",
		"jp": "Cumulative moving average."
	}
            },
            {
              "name": "weightedAverage",
              "type": "string",
              "description": {
		"en": "Weighted moving average.",
		"jp": "Weighted moving average."
	}
            }
          ]
        },
        "trendLineBrush": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush to use to draw the trend line.",
		"jp": "Gets or sets the brush to use to draw the trend line."
	}
        },
        "trendLineThickness": {
          "type": "number",
          "defaultValue": 1.5,
          "description": {
		"en": "Gets or sets the thickness of the current scatter series object's trend line.",
		"jp": "Gets or sets the thickness of the current scatter series object's trend line."
	}
        },
        "trendLinePeriod": {
          "type": "number",
          "defaultValue": 7,
          "description": {
		"en": "Gets or sets the moving average period for the current scatter series object. The typical, and initial, value for trend line period is 7.",
		"jp": "Gets or sets the moving average period for the current scatter series object. The typical, and initial, value for trend line period is 7."
	}
        },
        "trendLineZIndex": {
          "type": "number",
          "defaultValue": 1001,
          "description": {
		"en": "Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.",
		"jp": "Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data."
	}
        },
        "maximumMarkers": {
          "type": "number",
          "defaultValue": 400,
          "description": {
		"en": "Gets or sets the maximum number of markerItems displayed by the current series. If more than the specified number of markerItems are visible, the series will automatically choose a representative set.",
		"jp": "Gets or sets the maximum number of markerItems displayed by the current series. If more than the specified number of markerItems are visible, the series will automatically choose a representative set."
	}
        },
        "unknownValuePlotting": {
          "type": "number",
          "defaultValue": "dontPlot",
          "description": {
		"en": "Determines how unknown values will be plotted on the chart. Null and Double.NaN are two examples of unknown values.",
		"jp": "Determines how unknown values will be plotted on the chart. Null and Double.NaN are two examples of unknown values."
	},
          "valueOptions": [
            {
              "name": "linearInterpolate",
              "type": "string",
              "description": {
		"en": "Plot the unknown value as the midpoint between surrounding known values using linear interpolation.",
		"jp": "Plot the unknown value as the midpoint between surrounding known values using linear interpolation."
	}
            },
            {
              "name": "dontPlot",
              "type": "string",
              "description": {
		"en": "Do not plot the unknown value on the chart.",
		"jp": "Do not plot the unknown value on the chart."
	}
            }
          ]
        },
        "radiusMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the radius mapping property for the current series object.",
		"jp": "Gets or sets the radius mapping property for the current series object."
	}
        },
        "radiusScale": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the radius size scale for the bubbles.",
		"jp": "Gets or sets the radius size scale for the bubbles."
	}
        },
        "labelMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the Label mapping property for the current series object.",
		"jp": "Gets or sets the Label mapping property for the current series object."
	}
        },
        "fillMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the fill mapping property for the current series object.",
		"jp": "Gets or sets the fill mapping property for the current series object."
	}
        },
        "fillScale": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush scale for the marker brush.",
		"jp": "Gets or sets the brush scale for the marker brush."
	}
        },
        "angleAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets the effective angle axis for the current series object.",
		"jp": "Gets the effective angle axis for the current series object."
	}
        },
        "valueAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets the effective value axis for the current series object.",
		"jp": "Gets the effective value axis for the current series object."
	}
        },
        "clipSeriesToBounds": {
          "type": "bool",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets whether to clip the series to the bounds. Setting this to true can effect performance.",
		"jp": "Gets or sets whether to clip the series to the bounds. Setting this to true can effect performance."
	}
        },
        "valueMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the item path that provides the values for the current series.",
		"jp": "Gets or sets the item path that provides the values for the current series."
	}
        },
        "radiusX": {
          "type": "number",
          "defaultValue": 2.0,
          "description": {
		"en": "Gets or sets the x-radius of the ellipse that is used to round the corners of the column.",
		"jp": "Gets or sets the x-radius of the ellipse that is used to round the corners of the column."
	}
        },
        "radiusY": {
          "type": "number",
          "defaultValue": 2.0,
          "description": {
		"en": "Gets or sets the y-radius of the ellipse that is used to round the corners of the column.",
		"jp": "Gets or sets the y-radius of the ellipse that is used to round the corners of the column."
	}
        },
        "angleMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the x-radius of the ellipse that is used to round the corners of the column.",
		"jp": "Gets or sets the x-radius of the ellipse that is used to round the corners of the column."
	}
        },
        "radiusAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets the effective radius axis for the current series object.",
		"jp": "Gets the effective radius axis for the current series object."
	}
        },
        "useCartesianInterpolation": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Gets or sets whether Cartesian Interpolation should be used rather than Archimedian spiral based interpolation.",
		"jp": "Gets or sets whether Cartesian Interpolation should be used rather than Archimedian spiral based interpolation."
	}
        },
        "negativeBrush": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the brush to use for negative portions of the series.",
		"jp": "Gets or sets the brush to use for negative portions of the series."
	}
        },
        "splineType": {
          "type": "string",
          "defaultValue": "natural",
          "description": {
		"en": "Gets or sets the type of spline to be rendered.",
		"jp": "Gets or sets the type of spline to be rendered."
	},
          "valueOptions": [
            {
              "name": "natural",
              "type": "string",
              "description": {
		"en": "Calculates the spline using a natural spline calculation formula.",
		"jp": "Calculates the spline using a natural spline calculation formula."
	}
            },
            {
              "name": "clamped",
              "type": "string",
              "description": {
		"en": "Calculated the spline using a clamped spline calculation formula.",
		"jp": "Calculated the spline using a clamped spline calculation formula."
	}
            }
          ]
        },
        "lowMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the value mapping property for the current series object.",
		"jp": "Gets or sets the value mapping property for the current series object."
	}
        },
        "highMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the value mapping property for the current series object.",
		"jp": "Gets or sets the value mapping property for the current series object."
	}
        },
        "openMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the open mapping property for the current series object.",
		"jp": "Gets or sets the open mapping property for the current series object."
	}
        },
        "closeMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the close mapping property for the current series object.",
		"jp": "Gets or sets the close mapping property for the current series object."
	}
        },
        "volumeMemberPath": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the volume mapping property for the current series object.",
		"jp": "Gets or sets the volume mapping property for the current series object."
	}
        },
        "displayType": {
          "type": "string",
          "defaultValue": "candlestick",
          "description": {
		"en": "Gets or sets the display for the current FinancialIndicator object.",
		"jp": "Gets or sets the display for the current FinancialIndicator object."
	},
          "valueOptions": [
            {
              "name": "candlestick",
              "type": "string",
              "description": {
		"en": "Displays prices as a Japanese Candlestick.",
		"jp": "Displays prices as a Japanese Candlestick."
	}
            },
            {
              "name": "OHLC",
              "type": "string",
              "description": {
		"en": "Displays prices as a Japanese Candlestick.",
		"jp": "Displays prices as a Japanese Candlestick."
	}
            }
          ]
        },
        "ignoreFirst": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the number of values to hide at the beginning of the indicator.",
		"jp": "Gets or sets the number of values to hide at the beginning of the indicator."
	}
        },
        "period": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object. The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.",
		"jp": "Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object. The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14."
	}
        },
        "shortPeriod": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object. The typical, and initial, value for short AVO periods is 10.",
		"jp": "Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object. The typical, and initial, value for short AVO periods is 10."
	}
        },
        "longPeriod": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object. The typical, and initial, value for long AVO periods is 30.",
		"jp": "Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object. The typical, and initial, value for long AVO periods is 30."
	}
        },
        "markerCollisionAvoidance": {
          "type": "string",
          "defaultValue": "none",
          "description": {
		"en": "Gets or sets the MarkerCollisionAvoidance",
		"jp": "Gets or sets the MarkerCollisionAvoidance"
	},
          "valueOptions": [
            {
              "name": "none",
              "type": "string",
              "description": {
		"en": "No collision avoidance is attempted.",
		"jp": "No collision avoidance is attempted."
	}
            },
            {
              "name": "omit",
              "type": "string",
              "description": {
		"en": "Markers that collide will be omitted.",
		"jp": "Markers that collide will be omitted."
	}
            },
            {
              "name": "fade",
              "type": "string",
              "description": {
		"en": "Markers that collide will be faded in opacity.",
		"jp": "Markers that collide will be faded in opacity."
	}
            },
            {
              "name": "omitAndShift",
              "type": "string",
              "description": {
		"en": "Markers that collide may be shifted or omitted.",
		"jp": "Markers that collide may be shifted or omitted."
	}
            },
            {
              "name": "omitAndFade",
              "type": "string",
              "description": {
		"en": "Markers that collide may be shifted or faded.",
		"jp": "Markers that collide may be shifted or faded."
	}
            }
          ]
        },
        "useHighMarkerFidelity": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Sets or Gets whether to increase marker fidelity for extreme data shapes that have lots of Y variation over short X intervals.",
		"jp": "Sets or Gets whether to increase marker fidelity for extreme data shapes that have lots of Y variation over short X intervals."
	}
        },
        "useBruteForce": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets the whether to use use brute force mode.",
		"jp": "Gets or sets the whether to use use brute force mode."
	}
        },
        "progressiveLoad": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Gets or sets the whether to progressively load the data into the chart.",
		"jp": "Gets or sets the whether to progressively load the data into the chart."
	}
        },
        "mouseOverEnabled": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets the whether the chart reacts to mouse move events.",
		"jp": "Gets or sets the whether the chart reacts to mouse move events."
	}
        },
        "useSquareCutoffStyle": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area.",
		"jp": "Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area."
	}
        },
        "heatMinimum": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "Gets or sets the density value that maps to the minimum heat color.",
		"jp": "Gets or sets the density value that maps to the minimum heat color."
	}
        },
        "heatMaximum": {
          "type": "number",
          "defaultValue": 50,
          "description": {
		"en": "Gets or sets the value that maps to the maximum heat color.",
		"jp": "Gets or sets the value that maps to the maximum heat color."
	}
        },
        "heatMaximum": {
          "type": "number",
          "defaultValue": 50,
          "description": {
		"en": "Gets or sets the value that maps to the maximum heat color.",
		"jp": "Gets or sets the value that maps to the maximum heat color."
	}
        },
        "heatMinimumColor": {
          "type": "string",
          "defaultValue": "black",
          "description": {
		"en": "Gets or sets the minimum heat color for the density scale.",
		"jp": "Gets or sets the minimum heat color for the density scale."
	}
        },
        "heatMaximumColor": {
          "type": "string",
          "defaultValue": "red",
          "description": {
		"en": "Gets or sets the maximum heat color for the density scale.",
		"jp": "Gets or sets the maximum heat color for the density scale."
	}
        },
        "series": {
          "type": "array",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the series for stacked charts. It should contain array of series objects. Each item in array should represent a series with type=\"stackedFragment\" and it may have most options supported by top-level series object, such as xAxis, yAxis, valueMemberPath, etc.",
		"jp": "Gets or sets the series for stacked charts. It should contain array of series objects. Each item in array should represent a series with type=\"stackedFragment\" and it may have most options supported by top-level series object, such as xAxis, yAxis, valueMemberPath, etc."
	},
          "schemaRef": "datachart.series"
        },
        "isDropShadowEnabled": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether drop shadow should be enabled for this series.",
		"jp": "Gets or sets whether drop shadow should be enabled for this series."
	}
        },
        "useSingleShadow": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Gets or sets whether drop shadow is applied to the whole series visual or to each of the individual shapes forming the series.",
		"jp": "Gets or sets whether drop shadow is applied to the whole series visual or to each of the individual shapes forming the series."
	}
        },
        "shadowColor": {
          "type": "string",
          "defaultValue": "rgba(95,95,95,0.5)",
          "description": {
		"en": "Gets or sets the color to use for the drop shadow.",
		"jp": "Gets or sets the color to use for the drop shadow."
	}
        },
        "shadowBlur": {
          "type": "number",
          "defaultValue": 10,
          "description": {
		"en": "Gets or sets the blur amount to use for the drop shadow.",
		"jp": "Gets or sets the blur amount to use for the drop shadow."
	}
        },
        "shadowOffsetX": {
          "type": "number",
          "defaultValue": 5,
          "description": {
		"en": "Gets or sets the x offset amount to use for the drop shadow.",
		"jp": "Gets or sets the x offset amount to use for the drop shadow."
	}
        },
        "shadowOffsetY": {
          "type": "number",
          "defaultValue": 5,
          "description": {
		"en": "Gets or sets the y offset amount to use for the drop shadow.",
		"jp": "Gets or sets the y offset amount to use for the drop shadow."
	}
        },
        "isTransitionInEnabled": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets if the series should play a transition in animation when the data source is assigned.",
		"jp": "Gets or sets if the series should play a transition in animation when the data source is assigned."
	}
        },
        "isTransitionInEnabled": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets if the series should play a transition in animation when the data source is assigned.",
		"jp": "Gets or sets if the series should play a transition in animation when the data source is assigned."
	}
        },
        "transitionInSpeedType": {
          "type": "string",
          "defaultValue": "auto",
          "description": {
		"en": "Gets or sets the speed to transition in the series data points.",
		"jp": "Gets or sets the speed to transition in the series data points."
	},
          "valueOptions": [
            {
              "name": "auto",
              "type": "string",
              "description": {
		"en": "A speed type is automatically selected.",
		"jp": "A speed type is automatically selected."
	}
            },
            {
              "name": "normal",
              "type": "string",
              "description": {
		"en": "All speeds are normal, data points will arrive at the same time.",
		"jp": "All speeds are normal, data points will arrive at the same time."
	}
            },
            {
              "name": "valueScaled",
              "type": "string",
              "description": {
		"en": "Data points will arrive later if their value is further from the start point.",
		"jp": "Data points will arrive later if their value is further from the start point."
	}
            },
            {
              "name": "indexScaled",
              "type": "string",
              "description": {
		"en": "Data points will arrive later if their index is further from the axis origin.",
		"jp": "Data points will arrive later if their index is further from the axis origin."
	}
            },
            {
              "name": "random",
              "type": "string",
              "description": {
		"en": "Data points will arrive at random times.",
		"jp": "Data points will arrive at random times."
	}
            }
          ]
        },
        "transitionInMode": {
          "type": "string",
          "defaultValue": "auto",
          "description": {
		"en": "Gets or sets the method to transition in the series.",
		"jp": "Gets or sets the method to transition in the series."
	},
          "valueOptions": [
            {
              "name": "auto",
              "type": "string",
              "description": {
		"en": "Series transitions in an automatically chosen way.",
		"jp": "Series transitions in an automatically chosen way."
	}
            },
            {
              "name": "fromZero",
              "type": "string",
              "description": {
		"en": "Series transitions in from the reference value of the value axis.",
		"jp": "Series transitions in from the reference value of the value axis."
	}
            },
            {
              "name": "sweepFromLeft",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the left.",
		"jp": "Series sweeps in from the left."
	}
            },
            {
              "name": "sweepFromRight",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the right.",
		"jp": "Series sweeps in from the right."
	}
            },
            {
              "name": "sweepFromTop",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the top.",
		"jp": "Series sweeps in from the top."
	}
            },
            {
              "name": "sweepFromBottom",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the bottom.",
		"jp": "Series sweeps in from the bottom."
	}
            },
            {
              "name": "sweepFromCenter",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the center.",
		"jp": "Series sweeps in from the center."
	}
            },
            {
              "name": "accordionFromLeft",
              "type": "string",
              "description": {
		"en": "Series accordions in from the left.",
		"jp": "Series accordions in from the left."
	}
            },
            {
              "name": "accordionFromRight",
              "type": "string",
              "description": {
		"en": "Series accordions in from the right.",
		"jp": "Series accordions in from the right."
	}
            },
            {
              "name": "accordionFromTop",
              "type": "string",
              "description": {
		"en": "Series accordions in from the top.",
		"jp": "Series accordions in from the top."
	}
            },
            {
              "name": "accordionFromBottom",
              "type": "string",
              "description": {
		"en": "Series accordions in from the bottom.",
		"jp": "Series accordions in from the bottom."
	}
            },
            {
              "name": "expand",
              "type": "string",
              "description": {
		"en": "Series expands from the value midpoints.",
		"jp": "Series expands from the value midpoints."
	}
            },
            {
              "name": "sweepFromCategoryAxisMinimum",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the category axis minimum.",
		"jp": "Series sweeps in from the category axis minimum."
	}
            },
            {
              "name": "sweepFromCategoryAxisMaximum",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the category axis maximum.",
		"jp": "Series sweeps in from the category axis maximum."
	}
            },
            {
              "name": "sweepFromValueAxisMinimum",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the value axis minimum.",
		"jp": "Series sweeps in from the value axis minimum."
	}
            },
            {
              "name": "sweepFromValueAxisMaximum",
              "type": "string",
              "description": {
		"en": "Series sweeps in from the value axis maximum.",
		"jp": "Series sweeps in from the value axis maximum."
	}
            },
            {
              "name": "accordionFromCategoryAxisMinimum",
              "type": "string",
              "description": {
		"en": "Series accordions in from the category axis minimum.",
		"jp": "Series accordions in from the category axis minimum."
	}
            },
            {
              "name": "accordionFromCategoryAxisMaximum",
              "type": "string",
              "description": {
		"en": "Series accordions in from the category axis maximum.",
		"jp": "Series accordions in from the category axis maximum."
	}
            },
            {
              "name": "accordionFromValueAxisMinimum",
              "type": "string",
              "description": {
		"en": "Series accordions in from the value axis minimum.",
		"jp": "Series accordions in from the value axis minimum."
	}
            },
            {
              "name": "accordionFromValueAxisMaximum",
              "type": "string",
              "description": {
		"en": "Series accordions in from the value axis maximum.",
		"jp": "Series accordions in from the value axis maximum."
	}
            }
          ]
        },
        "transitionInDuration": {
          "type": "number",
          "defaultValue": 500,
          "description": {
		"en": "Gets or sets the duration of the current series's transition in morph in milliseconds.",
		"jp": "Gets or sets the duration of the current series's transition in morph in milliseconds."
	}
        },
        "radius": {
          "type": "number",
          "defaultValue": 2,
          "description": {
		"en": "Gets or sets the corner radius to use for the series, if applicable.",
		"jp": "Gets or sets the corner radius to use for the series, if applicable."
	}
        },
        "areaFillOpacity": {
          "type": "number",
          "defaultValue": 1.0,
          "description": {
		"en": "Gets or sets the opacity modifier to apply to the area fill shape of the series, if applicable.",
		"jp": "Gets or sets the opacity modifier to apply to the area fill shape of the series, if applicable."
	}
        },
        "expectFunctions": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether the series should expect that its data source members need to be called as functions to get their values.",
		"jp": "Gets or sets whether the series should expect that its data source members need to be called as functions to get their values."
	}
        },
        "useInterpolation": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether the hover layer should use interpolation to position itself relative the closest values.",
		"jp": "Gets or sets whether the hover layer should use interpolation to position itself relative the closest values."
	}
        },
        "skipUnknowns": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether the hover layer should skip unknown values when trying to find the closest values.",
		"jp": "Gets or sets whether the hover layer should skip unknown values when trying to find the closest values."
	}
        },
        "skipUnknowns": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether the hover layer should skip unknown values when trying to find the closest values.",
		"jp": "Gets or sets whether the hover layer should skip unknown values when trying to find the closest values."
	}
        },
        "verticalLineVisibility": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Gets or sets whether the vertical crosshair portion of the layer should be visible.",
		"jp": "Gets or sets whether the vertical crosshair portion of the layer should be visible."
	}
        },
        "horizontalLineVisibility": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Gets or sets whether the horizontal crosshair portion of the layer should be visible.",
		"jp": "Gets or sets whether the horizontal crosshair portion of the layer should be visible."
	}
        },
        "targetSeries": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the name of the target series for the layer, if desired. Setting the target series will scope the layer to target just that series.",
		"jp": "Gets or sets the name of the target series for the layer, if desired. Setting the target series will scope the layer to target just that series."
	}
        },
        "targetAxis": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Gets or sets the name of the target axis for the layer, if desired. Setting the target axis will scope the layer to target just that axis.",
		"jp": "Gets or sets the name of the target axis for the layer, if desired. Setting the target axis will scope the layer to target just that axis."
	}
        },
        "isCustomCategoryStyleAllowed": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether a custom category style is allowed. Setting this to true will case the assigningCategoryStyle event to get fired, if provided.",
		"jp": "Gets or sets whether a custom category style is allowed. Setting this to true will case the assigningCategoryStyle event to get fired, if provided."
	}
        },
        "isCustomCategoryMarkerStyleAllowed": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether a custom category marker style is allowed. Setting this to true will case the assigningCategoryMarkerStyle event to get fired, if provided.",
		"jp": "Gets or sets whether a custom category marker style is allowed. Setting this to true will case the assigningCategoryMarkerStyle event to get fired, if provided."
	}
        },
        "isHighlightingEnabled": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Gets or sets whether highlighting should be enabled for the series, if supported.",
		"jp": "Gets or sets whether highlighting should be enabled for the series, if supported."
	}
        },
        "bandHighlightWidth": {
          "type": "number",
          "defaultValue": 10.0,
          "description": {
		"en": "Gets or sets the width to use for the highlight region if highlighting items in a grid aligned series (line, spline, etc), with a banded shape.",
		"jp": "Gets or sets the width to use for the highlight region if highlighting items in a grid aligned series (line, spline, etc), with a banded shape."
	}
        },
        "highlightType": {
          "type": "string",
          "defaultValue": "auto",
          "description": {
		"en": "Gets or sets which type of highlight shape to use when highlighting items.",
		"jp": "Gets or sets which type of highlight shape to use when highlighting items."
	},
          "valueOptions": [
            {
              "name": "auto",
              "type": "string",
              "description": {
		"en": "Use an automatic highlight type for this series.",
		"jp": "Use an automatic highlight type for this series."
	}
            },
            {
              "name": "marker",
              "type": "string",
              "description": {
		"en": "Use a marker highlight type for this series.",
		"jp": "Use a marker highlight type for this series."
	}
            },
            {
              "name": "shape",
              "type": "string",
              "description": {
		"en": "Use a shape highlight type for this series.",
		"jp": "Use a shape highlight type for this series."
	}
            }
          ]
        },
        "highlightType": {
          "type": "string",
          "defaultValue": "auto",
          "description": {
		"en": "Gets or sets the Position to apply to the tooltip containers.",
		"jp": "Gets or sets the Position to apply to the tooltip containers."
	},
          "valueOptions": [
            {
              "name": "auto",
              "type": "string",
              "description": {
		"en": "Use an automatic position for the category tooltips.",
		"jp": "Use an automatic position for the category tooltips."
	}
            },
            {
              "name": "outsideStart",
              "type": "string",
              "description": {
		"en": "Position the category tooltip at the outside start of the value axis.",
		"jp": "Position the category tooltip at the outside start of the value axis."
	}
            },
            {
              "name": "insideStart",
              "type": "string",
              "description": {
		"en": "Position the category tooltip at the inside start of the value axis.",
		"jp": "Position the category tooltip at the inside start of the value axis."
	}
            },
            {
              "name": "insideEnd",
              "type": "string",
              "description": {
		"en": "Position the category tooltip at the inside end of the value axis.",
		"jp": "Position the category tooltip at the inside end of the value axis."
	}
            },
            {
              "name": "outsideEnd",
              "type": "string",
              "description": {
		"en": "Position the category tooltip at the outside end of the value axis.",
		"jp": "Position the category tooltip at the outside end of the value axis."
	}
            }
          ]
        },
        "cursorPosition": {
          "type": "object",
          "defaultValue": null,
          "description": {
		"en": "Sets the position a cursor position to use instead of the current mouse cursor position for displaying the annotations in this layer. Should be an object with an x and a y property in world coordinates (ranging from 0 to 1)",
		"jp": "Sets the position a cursor position to use instead of the current mouse cursor position for displaying the annotations in this layer. Should be an object with an x and a y property in world coordinates (ranging from 0 to 1)"
	}
        },
        "isDefaultCrosshairDisabled": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "Sets if the presence of this layer should disable the default crosshair behavior of the chart, if present.",
		"jp": "Sets if the presence of this layer should disable the default crosshair behavior of the chart, if present."
	}
        },
        "useIndex": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Sets if the current layer should take up a brush/ordering index in the series collection to derive its color automatically.",
		"jp": "Sets if the current layer should take up a brush/ordering index in the series collection to derive its color automatically."
	}
        },
        "useLegend": {
          "type": "bool",
          "defaultValue": false,
          "description": {
		"en": "Sets if the current layer should have an entry in the legend of the chart. By default annotation layers are not present in the legend.",
		"jp": "Sets if the current layer should have an entry in the legend of the chart. By default annotation layers are not present in the legend."
	}
        }
      }
    },
    "size": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "To set both dimensions of the chart simultaneously an object with a width and height property can be provided",
		"jp": "To set both dimensions of the chart simultaneously an object with a width and height property can be provided"
	},
      "schema": {
        "width": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Defines the width dimension of the chart",
		"jp": "Defines the width dimension of the chart"
	}
        },
        "height": {
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "Defines the height dimension of the chart",
		"jp": "Defines the height dimension of the chart"
	}
        }
      }
    },
    "squareMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for square markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of square.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for square markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of square.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "subtitle": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "the subtitle to display for the component.",
		"jp": "the subtitle to display for the component."
	}
    },
    "subtitleBottomMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the bottom margin to use for the subtitle.",
		"jp": "the bottom margin to use for the subtitle."
	}
    },
    "subtitleHorizontalAlignment": {
      "type": "string",
      "defaultValue": "center",
      "description": {
		"en": "The horizontal alignment to use for the subtitle. ",
		"jp": "The horizontal alignment to use for the subtitle. "
	},
      "valueOptions": [
        {
          "name": "left",
          "type": "string",
          "description": {
		"en": "Left aligns the subtitle.",
		"jp": "Left aligns the subtitle."
	}
        },
        {
          "name": "center",
          "type": "string",
          "description": {
		"en": "Center aligns the subtitle.",
		"jp": "Center aligns the subtitle."
	}
        },
        {
          "name": "right",
          "type": "string",
          "description": {
		"en": "Right aligns the subtitle.",
		"jp": "Right aligns the subtitle."
	}
        }
      ]
    },
    "subtitleLeftMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the left margin to use for the subtitle.",
		"jp": "the left margin to use for the subtitle."
	}
    },
    "subtitleRightMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the right margin to use for the subtitle.",
		"jp": "the right margin to use for the subtitle."
	}
    },
    "subtitleTextColor": {
      "type": "string",
      "defaultValue": "black",
      "description": {
		"en": "the color to use for the subtitle.",
		"jp": "the color to use for the subtitle."
	}
    },
    "subtitleTextStyle": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "the css font property to use for the title.",
		"jp": "the css font property to use for the title."
	}
    },
    "subtitleTopMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the top margin to use for the subtitle.",
		"jp": "the top margin to use for the subtitle."
	}
    },
    "syncChannel": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "The channel name to use to sync this chart with other charts.",
		"jp": "The channel name to use to sync this chart with other charts."
	}
    },
    "synchronizeVertically": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Whether the chart should be synchronized vertically",
		"jp": "Whether the chart should be synchronized vertically"
	}
    },
    "syncrhonizeHorizontally": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Whether the chart should be synchronized horizontally",
		"jp": "Whether the chart should be synchronized horizontally"
	}
    },
    "tetragramMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for tetragram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of tetragram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for tetragram markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of tetragram.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "theme": {
      "type": "string",
      "defaultValue": "c",
      "description": {
		"en": "The swatch used to style this widget",
		"jp": "The swatch used to style this widget"
	}
    },
    "title": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "the title to display for the component.",
		"jp": "the title to display for the component."
	}
    },
    "titleBottomMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the bottom margin to use for the title.",
		"jp": "the bottom margin to use for the title."
	}
    },
    "titleHorizontalAlignment": {
      "type": "string",
      "defaultValue": "center",
      "description": {
		"en": "The horizontal alignment to use for the title.",
		"jp": "The horizontal alignment to use for the title."
	},
      "valueOptions": [
        {
          "name": "left",
          "type": "string",
          "description": {
		"en": "Left aligns the title.",
		"jp": "Left aligns the title."
	}
        },
        {
          "name": "center",
          "type": "string",
          "description": {
		"en": "Center aligns the title.",
		"jp": "Center aligns the title."
	}
        },
        {
          "name": "right",
          "type": "string",
          "description": {
		"en": "Right aligns the title.",
		"jp": "Right aligns the title."
	}
        }
      ]
    },
    "titleLeftMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the left margin to use for the title.",
		"jp": "the left margin to use for the title."
	}
    },
    "titleRightMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the right margin to use for the title.",
		"jp": "the right margin to use for the title."
	}
    },
    "titleTextColor": {
      "type": "string",
      "defaultValue": "black",
      "description": {
		"en": "the color to use for the title.",
		"jp": "the color to use for the title."
	}
    },
    "titleTextStyle": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "the css font property to use for the title.",
		"jp": "the css font property to use for the title."
	}
    },
    "titleTopMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "the top margin to use for the title.",
		"jp": "the top margin to use for the title."
	}
    },
    "topMargin": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the top margin to use around the chart content in the canvas.",
		"jp": "Sets or gets the top margin to use around the chart content in the canvas."
	}
    },
    "triangleMarkerTemplate": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Gets or sets the template to use for triangle markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of triangle.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate",
		"jp": "Gets or sets the template to use for triangle markers on the chart.<br>   Defines the marker template used for<br>   series with a marker type of triangle.<br>   The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate"
	},
      "schemaRef": "dataChart.circleMarkerTemplate"
    },
    "verticalZoomable": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Gets or sets the current Chart's vertical zoomability.",
		"jp": "Gets or sets the current Chart's vertical zoomability."
	}
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).",
		"jp": "The width of the chart. It can be set as a number in pixels, string (px) or percentage (%)."
	}
    },
    "windowPositionHorizontal": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "A number between 0 and 1 determining the position of the horizontal scroll.<br>   This property is effectively a shortcut to the X position of the WindowRect property.",
		"jp": "A number between 0 and 1 determining the position of the horizontal scroll.<br>   This property is effectively a shortcut to the X position of the WindowRect property."
	}
    },
    "windowPositionVertical": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "A number between 0 and 1 determining the position of the vertical scroll.<br>   This property is effectively a shortcut to the Y position of the WindowRect property.",
		"jp": "A number between 0 and 1 determining the position of the vertical scroll.<br>   This property is effectively a shortcut to the Y position of the WindowRect property."
	}
    },
    "windowRect": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "A rectangle representing the portion of the chart currently in view.<br>   A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.<br>   The provided object should have numeric properties called left, top, width and height.",
		"jp": "A rectangle representing the portion of the chart currently in view.<br>   A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.<br>   The provided object should have numeric properties called left, top, width and height."
	},
      "schema": {
        "left": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets left position of the rectangle",
		"jp": "Gets sets left position of the rectangle"
	}
        },
        "top": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets top position of the rectangle",
		"jp": "Gets sets top position of the rectangle"
	}
        },
        "width": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets width position of the rectangle",
		"jp": "Gets sets width position of the rectangle"
	}
        },
        "height": {
          "type": "number",
          "defaultValue": null,
          "description": {
		"en": "Gets sets height position of the rectangle",
		"jp": "Gets sets height position of the rectangle"
	}
        }
      }
    },
    "windowRectMinWidth": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets or gets the minimum width that the window rect is allowed to reach before being clamped.<br>   Decrease this value if you want to allow for further zooming into the viewer.<br>   If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.",
		"jp": "Sets or gets the minimum width that the window rect is allowed to reach before being clamped.<br>   Decrease this value if you want to allow for further zooming into the viewer.<br>   If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy."
	}
    },
    "windowResponse": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Set or get the upating method of the view on a user action",
		"jp": "Set or get the upating method of the view on a user action"
	},
      "valueOptions": [
        {
          "name": "deferred",
          "type": "string",
          "description": {
		"en": "Defer the view update until after the user action is complete.",
		"jp": "Defer the view update until after the user action is complete."
	}
        },
        {
          "name": "immediate",
          "type": "string",
          "description": {
		"en": "Update the view immediately while the user action is happening.",
		"jp": "Update the view immediately while the user action is happening."
	}
        }
      ]
    },
    "windowScaleHorizontal": {
      "type": "number",
      "defaultValue": 1.0,
      "description": {
		"en": "A number between 0 and 1 determining the scale of the horizontal zoom.<br>   This property is effectively a shortcut to the Width of the WindowRect property.",
		"jp": "A number between 0 and 1 determining the scale of the horizontal zoom.<br>   This property is effectively a shortcut to the Width of the WindowRect property."
	}
    },
    "windowScaleVertical": {
      "type": "number",
      "defaultValue": 1.0,
      "description": {
		"en": "A number between 0 and 1 determining the scale of the vertical zoom.<br>   This property is effectively a shortcut to the Height of the WindowRect property.",
		"jp": "A number between 0 and 1 determining the scale of the vertical zoom.<br>   This property is effectively a shortcut to the Height of the WindowRect property."
	}
    }
  }
}