{
  "overview": null,
  "name": "ui.igVideoPlayer",
  "category": null,
  "visual": true,
  "events": {
    "bannerClick": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the banner is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.bannerElement to get the banner html element in the DOM.",
		"jp": "Occurs when the banner is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.bannerElement to get the banner html element in the DOM."
	}
    },
    "bannerHidden": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the banner is hidden.<br>   Function takes arguments evt and ui.<br>   Use ui.index to get the banner index in the banners array.<br>   Use ui.banner to get the banner object from the banners array.<br>   Use ui.bannerElement to get the banner html element in the DOM.",
		"jp": "Occurs when the banner is hidden.<br>   Function takes arguments evt and ui.<br>   Use ui.index to get the banner index in the banners array.<br>   Use ui.banner to get the banner object from the banners array.<br>   Use ui.bannerElement to get the banner html element in the DOM."
	}
    },
    "bannerVisible": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Defines the name of the player banner visible event. Fired when the banner has been displayed.<br>   Function takes arguments evt and ui.<br>   Use ui.index to get the banner index in the banners array.<br>   Use ui.banner to get the banner object from the banners array.<br>   Use ui.bannerElement to get the banner html element in the DOM.",
		"jp": "Defines the name of the player banner visible event. Fired when the banner has been displayed.<br>   Function takes arguments evt and ui.<br>   Use ui.index to get the banner index in the banners array.<br>   Use ui.banner to get the banner object from the banners array.<br>   Use ui.bannerElement to get the banner html element in the DOM."
	}
    },
    "bookmarkClick": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the bookmark is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.bookmark to get the bookmark object from the bookmarks array.<br>   Use ui.bookmarkElement to get the html element in the DOM.",
		"jp": "Occurs when the bookmark is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.bookmark to get the bookmark object from the bookmarks array.<br>   Use ui.bookmarkElement to get the html element in the DOM."
	}
    },
    "bookmarkHit": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when the bookmark is hit.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.bookmark to get the bookmark object from the bookmarks array.<br>   Use ui.bookmarkElement to get the html element in the DOM.",
		"jp": "Occurs when the bookmark is hit.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.bookmark to get the bookmark object from the bookmarks array.<br>   Use ui.bookmarkElement to get the html element in the DOM."
	}
    },
    "browserNotSupported": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when browser does not support HTML 5 video.",
		"jp": "Occurs when browser does not support HTML 5 video."
	}
    },
    "buffering": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when a chunk of data is buffered.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.buffered to get buffered percentage.",
		"jp": "Occurs when a chunk of data is buffered.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.buffered to get buffered percentage."
	}
    },
    "ended": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when video has ended.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds.",
		"jp": "Occurs when video has ended.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds."
	}
    },
    "enterFullScreen": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when igVideoPlayer enters full screen mode.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.",
		"jp": "Occurs when igVideoPlayer enters full screen mode.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video."
	}
    },
    "exitFullScreen": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when igVideoPlayer exits full screen mode.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.",
		"jp": "Occurs when igVideoPlayer exits full screen mode.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video."
	}
    },
    "paused": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when video is paused.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds.",
		"jp": "Occurs when video is paused.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds."
	}
    },
    "playing": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when video gets playing.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds.",
		"jp": "Occurs when video gets playing.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.duration to get the video duration in seconds."
	}
    },
    "progress": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when video has advanced the playback position.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.currentTime to get current position in the video at which the event was fired.<br>   Use ui.duration to get the video duration in seconds.",
		"jp": "Occurs when video has advanced the playback position.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.currentTime to get current position in the video at which the event was fired.<br>   Use ui.duration to get the video duration in seconds."
	}
    },
    "relatedVideoClick": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when related video is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.<br>   Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.",
		"jp": "Occurs when related video is clicked.<br>   Function takes arguments evt and ui.<br>   Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.<br>   Use ui.relatedVideoElement to get the relatedVideo html element in the DOM."
	}
    },
    "waiting": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Occurs when igVideoPlayer is waiting for data from the server.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.currentTime to get current position in the video at which the event was fired.<br>   Use ui.duration to get the video duration in seconds.",
		"jp": "Occurs when igVideoPlayer is waiting for data from the server.<br>   Function takes arguments evt and ui.<br>   Use ui.source to get the url of the playing video.<br>   Use ui.currentTime to get current position in the video at which the event was fired.<br>   Use ui.duration to get the video duration in seconds."
	}
    }
  },
  "properties": {
    "autohide": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Get or set whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.",
		"jp": "Get or set whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used."
	}
    },
    "autoplay": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether the video should start playing immediately after the control is loaded.",
		"jp": "Get or set whether the video should start playing immediately after the control is loaded."
	}
    },
    "browserControls": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.",
		"jp": "Get or set whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls."
	}
    },
    "centerButtonHideDelay": {
      "type": "number",
      "defaultValue": 1200.0,
      "description": {
		"en": "Get or set the center big button hide delay.",
		"jp": "Get or set the center big button hide delay."
	}
    },
    "fullscreen": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.",
		"jp": "Get or set whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control."
	}
    },
    "height": {
      "type": "number",
      "defaultValue": null,
      "description": {
		"en": "Get or set the height of the control. By default null will stretch the control to fit data, if no other heights are defined.",
		"jp": "Get or set the height of the control. By default null will stretch the control to fit data, if no other heights are defined."
	}
    },
    "loop": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether the video to start again after it has ended.",
		"jp": "Get or set whether the video to start again after it has ended."
	}
    },
    "muted": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether the video volume is muted.",
		"jp": "Get or set whether the video volume is muted."
	}
    },
    "posterUrl": {
      "type": "string",
      "defaultValue": "",
      "description": {
		"en": "Get or set a URL to an image to show, when no video data is available.",
		"jp": "Get or set a URL to an image to show, when no video data is available."
	}
    },
    "preload": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Get or set whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.",
		"jp": "Get or set whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation."
	}
    },
    "progressLabelFormat": {
      "type": "string",
      "defaultValue": "${currentTime} / ${duration}",
      "description": {
		"en": "Get or set the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.",
		"jp": "Get or set the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration."
	}
    },
    "showSeekTime": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Get or set whether the control seek tool tip will be shown when hovering the video progress bar.",
		"jp": "Get or set whether the control seek tool tip will be shown when hovering the video progress bar."
	}
    },
    "sources": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Get or set a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.",
		"jp": "Get or set a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg."
	}
    },
    "title": {
      "type": "string",
      "defaultValue": "",
      "description": {
		"en": "Get or set video title.",
		"jp": "Get or set video title."
	}
    },
    "volume": {
      "type": "number",
      "defaultValue": 0.5,
      "description": {
		"en": "Get or set the video volume. It can be between 0.0 and 1.0.",
		"jp": "Get or set the video volume. It can be between 0.0 and 1.0."
	}
    },
    "volumeAutohideDelay": {
      "type": "number",
      "defaultValue": 1000.0,
      "description": {
		"en": "Get or set volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.",
		"jp": "Get or set volume slider auto hide delay. This is applicable only when Infragistics playback controls are used."
	}
    },
    "width": {
      "type": "number",
      "defaultValue": null,
      "description": {
		"en": "Get or set the width of the control. By default null will stretch the control to fit data, if no other widths are defined.",
		"jp": "Get or set the width of the control. By default null will stretch the control to fit data, if no other widths are defined."
	}
    }
  }
}