{
  "overview": null,
  "name": "ui.igMaskEditor",
  "category": null,
  "visual": true,
  "events": {
    "blur": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor loses focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "Event which is raised when input field of editor loses focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
      }
    },
    "dropDownItemSelected": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selected. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier. <br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to obtain reference to the list item which is selected.",
        "jp": "Event which is raised when the drop down list item is selected. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier. <br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to obtain reference to the list item which is selected."
      }
    },
    "dropDownItemSelecting": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selecting. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier. <br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to obtain reference to the list item which is about to be selected.",
        "jp": "Event which is raised when the drop down list item is selecting. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier. <br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to obtain reference to the list item which is about to be selected."
      }
    },
    "dropDownListClosed": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already closed. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier.",
        "jp": "Event which is raised when the drop down is already closed. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier."
      }
    },
    "dropDownListClosing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is closing. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier.",
        "jp": "Event which is raised when the drop down is closing. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier."
      }
    },
    "dropDownListOpened": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already opened. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier.",
        "jp": "Event which is raised when the drop down is already opened. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier."
      }
    },
    "dropDownListOpening": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is opening. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier.",
        "jp": "Event which is raised when the drop down is opening. <br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.editorInput to obtain reference to the editable input<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to the list contaier."
      }
    },
    "focus": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor gets focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "Event which is raised when input field of editor gets focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
      }
    },
    "keydown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keydown event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode.",
        "jp": "Event which is raised on keydown event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode."
      }
    },
    "keypress": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keypress event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode.<br>&nbsp;&nbsp;&nbsp;&nbsp;Set ui.key to another character which will replace original entry.",
        "jp": "Event which is raised on keypress event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode.<br>&nbsp;&nbsp;&nbsp;&nbsp;Set ui.key to another character which will replace original entry."
      }
    },
    "keyup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keyup event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode.",
        "jp": "Event which is raised on keyup event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode."
      }
    },
    "mousedown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousedown at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "Event which is raised on mousedown at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
      }
    },
    "mousemove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousemove at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "Event which is raised on mousemove at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
      }
    },
    "mouseout": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
      }
    },
    "mouseover": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseover at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "Event which is raised on mouseover at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
      }
    },
    "mouseup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseup at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "Event which is raised on mouseup at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
      }
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after rendering of the editor completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the editor performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.element to get a reference to the editor element.",
        "jp": "Event which is raised after rendering of the editor completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the editor performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.element to get a reference to the editor element."
      }
    },
    "rendering": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before rendering of the editor completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the editor performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.element to get a reference to the editor element.",
        "jp": "Event which is raised before rendering of the editor completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the editor performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.element to get a reference to the editor element."
      }
    },
    "textChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after text in editor was changed. It can be raised when keyUp event occurs, <br>&nbsp;&nbsp;&nbsp;&nbsp;or when the clear button is clicked or when an item from a list is selected.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.text to obtain new text<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.oldTExt to obtain the old text.",
        "jp": "Event which is raised after text in editor was changed. It can be raised when keyUp event occurs, <br>&nbsp;&nbsp;&nbsp;&nbsp;or when the clear button is clicked or when an item from a list is selected.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.text to obtain new text<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.oldTExt to obtain the old text."
      }
    },
    "valueChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value."
      }
    },
    "valueChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before value in editor was changed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel change.<br>&nbsp;&nbsp;&nbsp;&nbsp;It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "Event which is raised before value in editor was changed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel change.<br>&nbsp;&nbsp;&nbsp;&nbsp;It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value."
      }
    }
  },
  "properties": {
    "allowNullValue": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to prevent null value.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is false, and editor has no value, then value is set to an empty string.",
        "jp": "Sets gets ability to prevent null value.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is false, and editor has no value, then value is set to an empty string."
      },
      "valueOptions": null
    },
    "buttonType": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.",
        "jp": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too."
      },
      "valueOptions": [
        {
          "name": "dropdown",
          "type": "string",
          "description": {
            "en": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);",
            "jp": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);"
          }
        },
        {
          "name": "clear",
          "type": "string",
          "description": {
            "en": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);",
            "jp": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);"
          }
        },
        {
          "name": "spin",
          "type": "string",
          "description": {
            "en": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).",
            "jp": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl)."
          }
        }
      ]
    },
    "dataMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.",
        "jp": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser."
      },
      "valueOptions": [
        {
          "name": "rawText",
          "type": "string",
          "description": {
            "en": " only entered text. All unfilled prompts (positions) and literals are ignored (removed).",
            "jp": " only entered text. All unfilled prompts (positions) and literals are ignored (removed)."
          }
        },
        {
          "name": "rawTextWithRequiredPrompts",
          "type": "string",
          "description": {
            "en": " only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)",
            "jp": " only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)"
          }
        },
        {
          "name": "rawTextWithAllPrompts",
          "type": "string",
          "description": {
            "en": " only entered text and prompts (positions). All literals are ignored (removed).",
            "jp": " only entered text and prompts (positions). All literals are ignored (removed)."
          }
        },
        {
          "name": "rawTextWithLiterals",
          "type": "string",
          "description": {
            "en": " only entered text and literals. All unfilled prompts are ignored (removed).",
            "jp": " only entered text and literals. All unfilled prompts are ignored (removed)."
          }
        },
        {
          "name": "rawTextWithRequiredPromptsAndLiterals",
          "type": "string",
          "description": {
            "en": " only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed).",
            "jp": " only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed)."
          }
        },
        {
          "name": "allText",
          "type": "string",
          "description": {
            "en": " entered text, all prompts (positions) and literals. Note: that is used as default.",
            "jp": " entered text, all prompts (positions) and literals. Note: that is used as default."
          }
        }
      ]
    },
    "disabled": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request",
        "jp": "Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request"
      },
      "valueOptions": null
    },
    "dropDownAnimationDuration": {
      "type": "number",
      "defaultValue": 300.0,
      "description": {
        "en": "Gets sets show/hide drop-down list animation duration in milliseconds.",
        "jp": "Gets sets show/hide drop-down list animation duration in milliseconds."
      },
      "valueOptions": null
    },
    "dropDownAttachedToBody": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets location of drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value false will create html element for list as a child of main html element.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value true creates list as a child of body.",
        "jp": "Sets gets location of drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value false will create html element for list as a child of main html element.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value true creates list as a child of body."
      },
      "valueOptions": null
    },
    "dropDownOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable. <br>&nbsp;&nbsp;&nbsp;&nbsp;Note! In case there are no list items - the editor will reamin readonly",
        "jp": "Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable. <br>&nbsp;&nbsp;&nbsp;&nbsp;Note! In case there are no list items - the editor will reamin readonly"
      },
      "valueOptions": null
    },
    "dropDownOrientation": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.",
        "jp": " Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way."
      },
      "valueOptions": []
    },
    "emptyChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
        "en": "Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the \"value\" or for the \"text\" methods.",
        "jp": "Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the \"value\" or for the \"text\" methods."
      },
      "valueOptions": null
    },
    "excludeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>&nbsp;&nbsp;&nbsp;&nbsp;Letters should be set in upper case.<br>&nbsp;&nbsp;&nbsp;&nbsp;Making difference between upper and lower case is not supported.",
        "jp": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>&nbsp;&nbsp;&nbsp;&nbsp;Letters should be set in upper case.<br>&nbsp;&nbsp;&nbsp;&nbsp;Making difference between upper and lower case is not supported."
      },
      "valueOptions": null
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The height can be set in pixels (px) and percentage (%).",
            "jp": " The height can be set in pixels (px) and percentage (%)."
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The height can be set as a number in pixels.",
            "jp": " The height can be set as a number in pixels."
          }
        }
      ]
    },
    "includeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>&nbsp;&nbsp;&nbsp;&nbsp;Letters should be set in upper case.<br>&nbsp;&nbsp;&nbsp;&nbsp;Making difference between upper and lower case is not supported.",
        "jp": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>&nbsp;&nbsp;&nbsp;&nbsp;Letters should be set in upper case.<br>&nbsp;&nbsp;&nbsp;&nbsp;Making difference between upper and lower case is not supported."
      },
      "valueOptions": null
    },
    "inputMask": {
      "type": "string",
      "defaultValue": "CCCCCCCCCC",
      "description": {
        "en": "Sets gets input mask. Mask may include filter-flags and literal characters.<br>&nbsp;&nbsp;&nbsp;&nbsp;Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape \"\\\\\" character should be used.<br>&nbsp;&nbsp;&nbsp;&nbsp;Default is \"CCCCCCCCCC\"<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: optional flags/entries affect the value returned by get of the \"value\" and \"text\" methods.<br>&nbsp;&nbsp;&nbsp;&nbsp;List of filter-flags:<br>&nbsp;&nbsp;&nbsp;&nbsp;C: any keyboard character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;&: any keyboard character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;a: letter or digit character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;A: letter or digit character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;?: letter character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;L: letter character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;9: digit character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;0: digit character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;#: digit character or \"+\" or \"_\". Entry is optional with replacement by \"emptyPositionChar\" or by \"padChar\".<br>&nbsp;&nbsp;&nbsp;&nbsp;>: all letters to the right are converted to the upper case. In order to disable conversion, the \">\" flag should be used again.<br>&nbsp;&nbsp;&nbsp;&nbsp;<: all letters to the right are converted to the lower case. In order to disable conversion, the \"<\" flag should be used again.",
        "jp": "Sets gets input mask. Mask may include filter-flags and literal characters.<br>&nbsp;&nbsp;&nbsp;&nbsp;Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape \"\\\\\" character should be used.<br>&nbsp;&nbsp;&nbsp;&nbsp;Default is \"CCCCCCCCCC\"<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: optional flags/entries affect the value returned by get of the \"value\" and \"text\" methods.<br>&nbsp;&nbsp;&nbsp;&nbsp;List of filter-flags:<br>&nbsp;&nbsp;&nbsp;&nbsp;C: any keyboard character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;&: any keyboard character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;a: letter or digit character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;A: letter or digit character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;?: letter character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;L: letter character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;9: digit character. Entry is optional.<br>&nbsp;&nbsp;&nbsp;&nbsp;0: digit character. Entry is required.<br>&nbsp;&nbsp;&nbsp;&nbsp;#: digit character or \"+\" or \"_\". Entry is optional with replacement by \"emptyPositionChar\" or by \"padChar\".<br>&nbsp;&nbsp;&nbsp;&nbsp;>: all letters to the right are converted to the upper case. In order to disable conversion, the \">\" flag should be used again.<br>&nbsp;&nbsp;&nbsp;&nbsp;<: all letters to the right are converted to the lower case. In order to disable conversion, the \"<\" flag should be used again."
      },
      "valueOptions": null
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.",
        "jp": "Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element."
      },
      "valueOptions": null
    },
    "isLimitedToListValues": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed",
        "jp": "Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed"
      },
      "valueOptions": null
    },
    "listItemHoverDuration": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "type=\"number* Sets the hover/unhover animation duration.",
        "jp": "type=\"number* Sets the hover/unhover animation duration."
      },
      "valueOptions": null
    },
    "listItems": {
      "type": "array",
      "defaultValue": null,
      "description": {
        "en": "Sets gets list of items which are used for drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.",
        "jp": "Sets gets list of items which are used for drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them."
      },
      "valueOptions": null
    },
    "listWidth": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.",
        "jp": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used."
      },
      "valueOptions": null
    },
    "locale": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.",
        "jp": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale."
      },
      "valueOptions": null
    },
    "maxLength": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Sets gets maximum length of text which can be entered by user.<br>&nbsp;&nbsp;&nbsp;&nbsp;Negative values or 0 disables that behavior.",
        "jp": "Sets gets maximum length of text which can be entered by user.<br>&nbsp;&nbsp;&nbsp;&nbsp;Negative values or 0 disables that behavior."
      },
      "valueOptions": null
    },
    "nullValue": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string",
        "jp": " Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string"
      },
      "valueOptions": []
    },
    "padChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
        "en": "Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).",
        "jp": "Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused)."
      },
      "valueOptions": null
    },
    "placeHolder": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string.",
        "jp": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string."
      },
      "valueOptions": null
    },
    "preventSubmitOnEnter": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability of the editor to prevent form submition on enter key pressed.",
        "jp": "Sets the ability of the editor to prevent form submition on enter key pressed."
      },
      "valueOptions": null
    },
    "readOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.",
        "jp": "Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request."
      },
      "valueOptions": null
    },
    "regional": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.",
        "jp": "Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed."
      },
      "valueOptions": null
    },
    "revertIfNotValid": {
      "type": "bool",
      "defaultValue": true,
      "description": {
        "en": "Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.",
        "jp": "Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called."
      },
      "valueOptions": null
    },
    "selectionOnFocus": {
      "type": "string",
      "defaultValue": "selectAll",
      "description": {
        "en": "type=\"selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectAll type=\"string\" Setting this option will select all the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atStart type=\"string\" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atEnd type=\"string\" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;browserDefault type=\"string\" Setting this option won't do any extra logic, but proceed with browser default behavior.",
        "jp": "type=\"selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectAll type=\"string\" Setting this option will select all the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atStart type=\"string\" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atEnd type=\"string\" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;browserDefault type=\"string\" Setting this option won't do any extra logic, but proceed with browser default behavior."
      },
      "valueOptions": null
    },
    "spinWrapAround": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.",
        "jp": "Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa."
      },
      "valueOptions": null
    },
    "suppressNotifications": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.",
        "jp": "Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits."
      },
      "valueOptions": null
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in tabIndex for editor.",
        "jp": "Gets sets value in tabIndex for editor."
      },
      "valueOptions": null
    },
    "textAlign": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
        "jp": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor."
      },
      "valueOptions": [
        {
          "name": "left",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "right",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "center",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        }
      ]
    },
    "textMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.",
        "jp": " Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field."
      },
      "valueOptions": [
        {
          "name": "text",
          "type": "string",
          "description": {
            "en": " Single line text editor based on INPUT element is created.",
            "jp": " Single line text editor based on INPUT element is created."
          }
        },
        {
          "name": "password",
          "type": "string",
          "description": {
            "en": " Editor based on INPUT element with type password is created.",
            "jp": " Editor based on INPUT element with type password is created."
          }
        },
        {
          "name": "multiline",
          "type": "string",
          "description": {
            "en": " multiline editor based on TEXTAREA element is created.",
            "jp": " multiline editor based on TEXTAREA element is created."
          }
        }
      ]
    },
    "toLower": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste."
      },
      "valueOptions": null
    },
    "toUpper": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste."
      },
      "valueOptions": null
    },
    "unfilledCharsPrompt": {
      "type": "string",
      "defaultValue": "_",
      "description": {
        "en": "Sets gets character which is used as prompt in edit mode for available entry position.",
        "jp": "Sets gets character which is used as prompt in edit mode for available entry position."
      },
      "valueOptions": null
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets options supported by the igValidator widget.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors, <br>                while similar options of the editor work to prevent wrong values from being entered.",
        "jp": "Sets gets options supported by the igValidator widget.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors, <br>                while similar options of the editor work to prevent wrong values from being entered."
      },
       "schemaRef": "validator"
    },
    "value": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.",
        "jp": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor."
      },
      "valueOptions": null
    },
    "visibleItemsCount": {
      "type": "number",
      "defaultValue": 5.0,
      "description": {
        "en": "Gets sets how many items should be shown at once. <br>&nbsp;&nbsp;&nbsp;   Notes:<br>&nbsp;&nbsp;&nbsp;   That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.",
        "jp": "Gets sets how many items should be shown at once. <br>&nbsp;&nbsp;&nbsp;   Notes:<br>&nbsp;&nbsp;&nbsp;   That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items."
      },
      "valueOptions": null
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The widget width can be set in pixels (px) and percentage (%).",
            "jp": " The widget width can be set in pixels (px) and percentage (%)."
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The widget width can be set as a number in pixels.",
            "jp": " The widget width can be set as a number in pixels."
          }
        }
      ]
    }
  }
}