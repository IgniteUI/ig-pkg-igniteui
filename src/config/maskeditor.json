{
  "overview": null,
  "name": "ui.igMaskEditor",
  "category": null,
  "visual": true,
  "events": {
    "blur": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised when input field of editor loses focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
		"jp": "Event which is raised when input field of editor loses focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser."
	}
    },
    "buttonClick": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised when button was clicked by mouse.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
		"jp": "Event which is raised when button was clicked by mouse.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser."
	}
    },
    "focus": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised when input field of editor gets focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
		"jp": "Event which is raised when input field of editor gets focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser."
	}
    },
    "hideDropDown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised before drop-down list or calendar is opened.<br>    Function takes argument evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain reference to the selected item in list or Date in calendar.<br>    If ui.value is not null and not undefined, that it means that drop-down was closed due to selection from drop-down list or from calendar.<br>    Otherwise, drop-down was closed due to lost focus or Esc key press.<br>    Return false in order to cancel hide action and keep drop-down visible.<br>    It is not recommended to cancel that action on blur event.<br>    Note: In case of calendar of datepicker, the evt or evt.originalEvent can be null. That happens if calendar was closed on blur or by Esc key.<br>    Returning the false in this situation will not prevent closing drop-down calendar.",
		"jp": "Event which is raised before drop-down list or calendar is opened.<br>    Function takes argument evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain reference to the selected item in list or Date in calendar.<br>    If ui.value is not null and not undefined, that it means that drop-down was closed due to selection from drop-down list or from calendar.<br>    Otherwise, drop-down was closed due to lost focus or Esc key press.<br>    Return false in order to cancel hide action and keep drop-down visible.<br>    It is not recommended to cancel that action on blur event.<br>    Note: In case of calendar of datepicker, the evt or evt.originalEvent can be null. That happens if calendar was closed on blur or by Esc key.<br>    Returning the false in this situation will not prevent closing drop-down calendar."
	}
    },
    "invalidValue": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on lost focus when editor contains invalid value. That event is available for all editors besides default \"text\" type editor.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain suggested value.<br>    Set ui.value to change suggested value.<br>    If type of editor is numeric, currency, percent, date or datepicker, then ui.text contains actual text entered by user.<br>    If type of editor is numeric, currency or percent, then the ui.reason may have following flags: \"null\", \"format\" or \"limit\".<br>    If type of editor is date or datepicker, then ui contains following additional members:<br>    ui.reason may have following flags: \"null\", \"dayOfMonth\", \"numberOfFields\", \"limit\" or \"invalid\";<br>    ui.year - year of entered date;<br>    ui.month - month of entered date;<br>    ui.day - day of entered date;<br>    ui.hours - hours of entered date;<br>    ui.minutes - minutes of entered date;<br>    ui.seconds - seconds of entered date;<br>    ui.milliseconds - milliseconds of entered date.",
		"jp": "Event which is raised on lost focus when editor contains invalid value. That event is available for all editors besides default \"text\" type editor.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain suggested value.<br>    Set ui.value to change suggested value.<br>    If type of editor is numeric, currency, percent, date or datepicker, then ui.text contains actual text entered by user.<br>    If type of editor is numeric, currency or percent, then the ui.reason may have following flags: \"null\", \"format\" or \"limit\".<br>    If type of editor is date or datepicker, then ui contains following additional members:<br>    ui.reason may have following flags: \"null\", \"dayOfMonth\", \"numberOfFields\", \"limit\" or \"invalid\";<br>    ui.year - year of entered date;<br>    ui.month - month of entered date;<br>    ui.day - day of entered date;<br>    ui.hours - hours of entered date;<br>    ui.minutes - minutes of entered date;<br>    ui.seconds - seconds of entered date;<br>    ui.milliseconds - milliseconds of entered date."
	}
    },
    "keydown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on keydown event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
		"jp": "Event which is raised on keydown event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode."
	}
    },
    "keypress": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on keypress event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.<br>    Set ui.key to another character which will replace original entry.",
		"jp": "Event which is raised on keypress event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.<br>    Set ui.key to another character which will replace original entry."
	}
    },
    "keyup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on keyup event.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
		"jp": "Event which is raised on keyup event.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode."
	}
    },
    "listSelected": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised after list item was selected.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item.",
		"jp": "Event which is raised after list item was selected.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item."
	}
    },
    "listSelecting": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised before list item is selected.<br>    Return false in order to cancel select action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item.",
		"jp": "Event which is raised before list item is selected.<br>    Return false in order to cancel select action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item."
	}
    },
    "mousedown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on mousedown at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
		"jp": "Event which is raised on mousedown at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
	}
    },
    "mouseleave": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
		"jp": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
	}
    },
    "mousemove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on mousemove at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
		"jp": "Event which is raised on mousemove at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
	}
    },
    "mouseover": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on mouseover at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
		"jp": "Event which is raised on mouseover at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
	}
    },
    "mouseup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on mouseup at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
		"jp": "Event which is raised on mouseup at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
	}
    },
    "showDropDown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised before drop-down list or calendar is opened.<br>    Return false in order to cancel drop-down action.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
		"jp": "Event which is raised before drop-down list or calendar is opened.<br>    Return false in order to cancel drop-down action.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser."
	}
    },
    "spin": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised on spin event.<br>    Return false in order to cancel spin.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.delta to obtain delta for increment or decrement.<br>    Use ui.value to obtain the \"value\" of editor before spin action.",
		"jp": "Event which is raised on spin event.<br>    Return false in order to cancel spin.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.delta to obtain delta for increment or decrement.<br>    Use ui.value to obtain the \"value\" of editor before spin action."
	}
    },
    "textChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised after text in editor was changed.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
		"jp": "Event which is raised after text in editor was changed.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value."
	}
    },
    "valueChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
		"jp": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value."
	}
    },
    "valueChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event which is raised before value in editor was changed.<br>    Return false in order to cancel change.<br>    It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
		"jp": "Event which is raised before value in editor was changed.<br>    Return false in order to cancel change.<br>    It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value."
	}
    }
  },
  "properties": {
    "animationHideDuration": {
      "type": "number",
      "defaultValue": 200.0,
      "description": {
		"en": "Sets gets duration of animation in milliseconds when drop-down list is hidden. That option is not supported when \"type\" is set to \"datepicker\", because the jquery.ui.datepicker does not have similar feature. Default is 200. If value is less than 5, then animation is disabled.",
		"jp": "Sets gets duration of animation in milliseconds when drop-down list is hidden. That option is not supported when \"type\" is set to \"datepicker\", because the jquery.ui.datepicker does not have similar feature. Default is 200. If value is less than 5, then animation is disabled."
	}
    },
    "animationShowDuration": {
      "type": "number",
      "defaultValue": 200.0,
      "description": {
		"en": "Sets gets duration of animation in milliseconds when drop-down list or calendar is displayed. Default is 200. If value is less than 5, then animation is disabled.",
		"jp": "Sets gets duration of animation in milliseconds when drop-down list or calendar is displayed. Default is 200. If value is less than 5, then animation is disabled."
	}
    },
    "button": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.",
		"jp": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too."
	},
      "valueOptions": [
        {
          "name": "dropdown",
          "type": "string",
          "description": {
		"en": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);",
		"jp": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);"
	}
        },
        {
          "name": "clear",
          "type": "string",
          "description": {
		"en": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);",
		"jp": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);"
	}
        },
        {
          "name": "spin",
          "type": "string",
          "description": {
		"en": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).",
		"jp": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl)."
	}
        }
      ]
    },
    "dataMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.",
		"jp": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser."
	},
      "valueOptions": [
        {
          "name": "rawText",
          "type": "string",
          "description": {
		"en": " only entered text. All unfilled prompts (positions) and literals are ignored (removed). Note: that is used as default.",
		"jp": " only entered text. All unfilled prompts (positions) and literals are ignored (removed). Note: that is used as default."
	}
        },
        {
          "name": "rawTextWithRequiredPrompts",
          "type": "string",
          "description": {
		"en": " only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)",
		"jp": " only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)"
	}
        },
        {
          "name": "rawTextWithAllPrompts",
          "type": "string",
          "description": {
		"en": " only entered text and prompts (positions). All literals are ignored (removed).",
		"jp": " only entered text and prompts (positions). All literals are ignored (removed)."
	}
        },
        {
          "name": "rawTextWithLiterals",
          "type": "string",
          "description": {
		"en": " only entered text and literals. All unfilled prompts are ignored (removed).",
		"jp": " only entered text and literals. All unfilled prompts are ignored (removed)."
	}
        },
        {
          "name": "rawTextWithRequiredPromptsAndLiterals",
          "type": "string",
          "description": {
		"en": " only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed).",
		"jp": " only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed)."
	}
        },
        {
          "name": "allText",
          "type": "string",
          "description": {
		"en": " entered text, all prompts (positions) and literals.",
		"jp": " entered text, all prompts (positions) and literals."
	}
        }
      ]
    },
    "display": {
      "type": "string",
      "defaultValue": "inline-block",
      "description": {
		"en": "Sets gets style.display for outer html element.<br>    The value of \"\" will disable changing style.display.<br>    If the base html element is not INPUT, TEXTAREA, SPAN or DIV, then it is recommended to set this option to an empty string,<br>    because, some browsers may fail to handle display other than default value of browser.<br>    For example, if base element for editor is TD, then behavior in Chrome can be problematic.",
		"jp": "Sets gets style.display for outer html element.<br>    The value of \"\" will disable changing style.display.<br>    If the base html element is not INPUT, TEXTAREA, SPAN or DIV, then it is recommended to set this option to an empty string,<br>    because, some browsers may fail to handle display other than default value of browser.<br>    For example, if base element for editor is TD, then behavior in Chrome can be problematic."
	}
    },
    "dropDownOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets ability to override the \"readOnly\" option and allow showing the drop-down list and changing the value in the editor from a list. Value false does not allow drop-down when \"readOnly\" is true.",
		"jp": "Sets gets ability to override the \"readOnly\" option and allow showing the drop-down list and changing the value in the editor from a list. Value false does not allow drop-down when \"readOnly\" is true."
	}
    },
    "dropDownTriggers": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets gets list of actions which trigger display of drop-down list or calendar.",
		"jp": " Sets gets list of actions which trigger display of drop-down list or calendar."
	},
      "valueOptions": [
        {
          "name": "arrow",
          "type": "string",
          "description": {
		"en": " Down-arrow shows drop-down and up-arrow hides drop-down;",
		"jp": " Down-arrow shows drop-down and up-arrow hides drop-down;"
	}
        },
        {
          "name": "button",
          "type": "string",
          "description": {
		"en": " Shows and hides drop-down;",
		"jp": " Shows and hides drop-down;"
	}
        },
        {
          "name": "focus",
          "type": "string",
          "description": {
		"en": " Shows drop-down on focus.",
		"jp": " Shows drop-down on focus."
	}
        },
        {
          "name": "A-Z",
          "type": "string",
          "description": {
		"en": " Any upper case characters show drop-down.",
		"jp": " Any upper case characters show drop-down."
	}
        }
      ]
    },
    "emptyChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
		"en": "Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the \"value\" or for the \"text\" methods.",
		"jp": "Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the \"value\" or for the \"text\" methods."
	}
    },
    "excludeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>    Notes:<br>    If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
		"jp": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>    Notes:<br>    If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported."
	}
    },
    "focusOnSpin": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "If that option is disabled and the editor is not focused, then a mouse click on the spin button will keep the text in the editor in display (not focus) format and perform spin actions.",
		"jp": "If that option is disabled and the editor is not focused, then a mouse click on the spin button will keep the text in the editor in display (not focus) format and perform spin actions."
	}
    },
    "height": {
      "type": "number",
      "defaultValue": null,
      "description": {
		"en": "Sets gets height of editor in pixels.<br>    Only positive values have effect.<br>    If that option is not set, then value of style.height of base html element will be used automatically. However, that value should be in the px units.",
		"jp": "Sets gets height of editor in pixels.<br>    Only positive values have effect.<br>    If that option is not set, then value of style.height of base html element will be used automatically. However, that value should be in the px units."
	}
    },
    "hideEnterKey": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Sets gets ability to hide the Enter key from browser.",
		"jp": "Sets gets ability to hide the Enter key from browser."
	}
    },
    "hideMaskOnFocus": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set gets ability to hide mask in focus state.<br>    Value of false allows to show all input mask with prompt characters regardless if available mask positions are filled or not.<br>    Value of true will show only part of mask located on the left side from caret when available mask positions on the right side from caret are empty.",
		"jp": "Set gets ability to hide mask in focus state.<br>    Value of false allows to show all input mask with prompt characters regardless if available mask positions are filled or not.<br>    Value of true will show only part of mask located on the left side from caret when available mask positions on the right side from caret are empty."
	}
    },
    "includeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>    Notes:<br>    If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
		"jp": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>    Notes:<br>    If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported."
	}
    },
    "inputMask": {
      "type": "string",
      "defaultValue": "CCCCCCCCCC",
      "description": {
		"en": "Sets gets input mask. Mask may include filter-flags and literal characters.<br>    Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape \"\\\\\" character should be used.<br>    Default is \"CCCCCCCCCC\"<br>    Note: optional flags/entries affect the value returned by get of the \"value\" and \"text\" methods.<br>    List of filter-flags:<br>    C: any keyboard character. Entry is optional.<br>    &: any keyboard character. Entry is required.<br>    a: letter or digit character. Entry is optional.<br>    A: letter or digit character. Entry is required.<br>    ?: letter character. Entry is optional.<br>    L: letter character. Entry is required.<br>    9: digit character. Entry is optional.<br>    0: digit character. Entry is required.<br>    #: digit character or \"+\" or \"_\". Entry is optional with replacement by \"emptyPositionChar\" or by \"padChar\".<br>    >: all letters to the right are converted to the upper case. In order to disable conversion, the \">\" flag should be used again.<br>    <: all letters to the right are converted to the lower case. In order to disable conversion, the \"<\" flag should be used again.",
		"jp": "Sets gets input mask. Mask may include filter-flags and literal characters.<br>    Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape \"\\\\\" character should be used.<br>    Default is \"CCCCCCCCCC\"<br>    Note: optional flags/entries affect the value returned by get of the \"value\" and \"text\" methods.<br>    List of filter-flags:<br>    C: any keyboard character. Entry is optional.<br>    &: any keyboard character. Entry is required.<br>    a: letter or digit character. Entry is optional.<br>    A: letter or digit character. Entry is required.<br>    ?: letter character. Entry is optional.<br>    L: letter character. Entry is required.<br>    9: digit character. Entry is optional.<br>    0: digit character. Entry is required.<br>    #: digit character or \"+\" or \"_\". Entry is optional with replacement by \"emptyPositionChar\" or by \"padChar\".<br>    >: all letters to the right are converted to the upper case. In order to disable conversion, the \">\" flag should be used again.<br>    <: all letters to the right are converted to the lower case. In order to disable conversion, the \"<\" flag should be used again."
	}
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Gets sets name of (hidden) INPUT element, which value will be set to current value of editor on any change.",
		"jp": "Gets sets name of (hidden) INPUT element, which value will be set to current value of editor on any change."
	}
    },
    "listAutoComplete": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets autocomplete.<br>    Value true enables and false disables auto-complete functionality to fill value of editor by a partially matching item from the listOfItems.<br>    If that option is enabled and entered text does not match with a part of any item in list, then original value is preserved.<br>    Notes:<br>    That option is supported only when the \"type\" of editor is \"text\" and it has effect only when listOfItems is set.<br>    Partial match can be validated from the beginning of an item or anywhere within an item. That is defined by the \"listMatchContains\" option.<br>    Validation can be case sensitive or not and that is defined by the \"listMatchIgnoreCase\" option.",
		"jp": "Sets gets autocomplete.<br>    Value true enables and false disables auto-complete functionality to fill value of editor by a partially matching item from the listOfItems.<br>    If that option is enabled and entered text does not match with a part of any item in list, then original value is preserved.<br>    Notes:<br>    That option is supported only when the \"type\" of editor is \"text\" and it has effect only when listOfItems is set.<br>    Partial match can be validated from the beginning of an item or anywhere within an item. That is defined by the \"listMatchContains\" option.<br>    Validation can be case sensitive or not and that is defined by the \"listMatchIgnoreCase\" option."
	}
    },
    "listColumns": {
      "type": "number",
      "defaultValue": 1.0,
      "description": {
		"en": "Sets gets number of columns in drop-down list.",
		"jp": "Sets gets number of columns in drop-down list."
	}
    },
    "listDropDownAsChild": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets location of drop-down list.<br>    Value true will create html element for list as a child of main html element.<br>    Value false creates list as a child of body.<br>    Notes:<br>    That option has effect only for drop-down defined by listOfItems.<br>    The value of true is supported only when main (outer) html element of editor is container such as SPAN or DIV, or buttons are enabled, or renderInContainer is enabled, the theme is set.<br>    The value of true allows a better positioning and can be useful when editor is located in complex layout and containers with \"position:fixed\".",
		"jp": "Sets gets location of drop-down list.<br>    Value true will create html element for list as a child of main html element.<br>    Value false creates list as a child of body.<br>    Notes:<br>    That option has effect only for drop-down defined by listOfItems.<br>    The value of true is supported only when main (outer) html element of editor is container such as SPAN or DIV, or buttons are enabled, or renderInContainer is enabled, the theme is set.<br>    The value of true allows a better positioning and can be useful when editor is located in complex layout and containers with \"position:fixed\"."
	}
    },
    "listItems": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "Sets gets list of items which are used for drop-down list, spin, validation and auto-complete functionality.<br>    Items in list can be strings, numbers, dates or objects in any combination.<br>    If type of editor is date or datepicker and item is string, then igEditor will try to convert it to Date object and show item in display format.<br>    If type of editor is numeric, currency or percent and item is string, then igEditor will try to convert it to number and show item in display format.<br>    If item is object and it has member \"text\", then that member is used.<br>    If item is object and besides \"text\" has function getHtml(), then that function is used to render item in list.<br>    The item or item.text is used to set \"value\" of particular editor when list-item is selected.",
		"jp": "Sets gets list of items which are used for drop-down list, spin, validation and auto-complete functionality.<br>    Items in list can be strings, numbers, dates or objects in any combination.<br>    If type of editor is date or datepicker and item is string, then igEditor will try to convert it to Date object and show item in display format.<br>    If type of editor is numeric, currency or percent and item is string, then igEditor will try to convert it to number and show item in display format.<br>    If item is object and it has member \"text\", then that member is used.<br>    If item is object and besides \"text\" has function getHtml(), then that function is used to render item in list.<br>    The item or item.text is used to set \"value\" of particular editor when list-item is selected."
	},
	  "arrayMemberType" : "string,number,date"
    },
    "listMatchContains": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets list match contains.<br>    Value true enables and false disables validation for partial match of entered text anywhere within an item in the listOfItems or only from the beginning of an item.<br>    That option has effect only when \"listMatchOnly\" or \"listAutoComplete\" options are enabled.",
		"jp": "Sets gets list match contains.<br>    Value true enables and false disables validation for partial match of entered text anywhere within an item in the listOfItems or only from the beginning of an item.<br>    That option has effect only when \"listMatchOnly\" or \"listAutoComplete\" options are enabled."
	}
    },
    "listMatchIgnoreCase": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Sets gets case validation. Value of false enables and true disables validation for case of entries to match with items in listOfItems.<br>    That option has effect only when \"listMatchOnly\" or \"listAutoComplete\" options are enabled.",
		"jp": "Sets gets case validation. Value of false enables and true disables validation for case of entries to match with items in listOfItems.<br>    That option has effect only when \"listMatchOnly\" or \"listAutoComplete\" options are enabled."
	}
    },
    "listMatchOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set gets list match.<br>    Value true enables and false disables validation of keyboard entries to match with items in listOfItems.<br>    If that option is enabled and entered text does not match with a part of any item in list, then entry is canceled.<br>    Notes:<br>    That option is supported only when the \"type\" of editor is \"text\" and it has effect only when listOfItems is set.<br>    Partial match can be validated from the beginning of an item or anywhere within an item. That is defined by the \"listMatchContains\" option.<br>    Validation can be case sensitive or not and that is defined by the \"listMatchIgnoreCase\" option.",
		"jp": "Set gets list match.<br>    Value true enables and false disables validation of keyboard entries to match with items in listOfItems.<br>    If that option is enabled and entered text does not match with a part of any item in list, then entry is canceled.<br>    Notes:<br>    That option is supported only when the \"type\" of editor is \"text\" and it has effect only when listOfItems is set.<br>    Partial match can be validated from the beginning of an item or anywhere within an item. That is defined by the \"listMatchContains\" option.<br>    Validation can be case sensitive or not and that is defined by the \"listMatchIgnoreCase\" option."
	}
    },
    "listMaxHeight": {
      "type": "number",
      "defaultValue": 300.0,
      "description": {
		"en": "Sets gets maximum height of drop-down list in pixels. If value is equal to 0 or negative, then the height of list is defined by number of items in list.",
		"jp": "Sets gets maximum height of drop-down list in pixels. If value is equal to 0 or negative, then the height of list is defined by number of items in list."
	}
    },
    "listWidth": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
		"en": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.",
		"jp": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used."
	}
    },
    "locale": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.",
		"jp": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale."
	},
	  "arrayMemberType" : "string"
    },
    "nullText": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string.",
		"jp": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string."
	}
    },
    "padChar": {
      "type": "string",
      "defaultValue": " ",
      "description": {
		"en": "Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).",
		"jp": "Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused)."
	}
    },
    "promptChar": {
      "type": "string",
      "defaultValue": "_",
      "description": {
		"en": "Sets gets character which is used as prompt in edit mode for available entry position.",
		"jp": "Sets gets character which is used as prompt in edit mode for available entry position."
	}
    },
    "readOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set gets ability to modify editor from keyboard (false) or disables keyboard (true).<br>    Notes:<br>    If the \"spinOnReadOnly\" is enabled, then value will be modified on spin regardless of the \"readOnly\".<br>    If the \"listItems\" has items and \"dropDownTriggers\" is defined, then value will be modified from drop-down list regardless of the \"readOnly\".",
		"jp": "Set gets ability to modify editor from keyboard (false) or disables keyboard (true).<br>    Notes:<br>    If the \"spinOnReadOnly\" is enabled, then value will be modified on spin regardless of the \"readOnly\".<br>    If the \"listItems\" has items and \"dropDownTriggers\" is defined, then value will be modified from drop-down list regardless of the \"readOnly\"."
	}
    },
    "renderInContainer": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets option to wrap input field into SPAN..<br>    That option can be set only on initialization and it is available only when base element is INPUT or TEXTAREA.<br>    If drop-down button or spin-buttons are enabled or the theme is set, then that option has no effect.<br>    The reason for that property is to allow vertical alignment of several igEditor controls when they are located in html inline and some of them have enabled buttons.<br>    If all editors are created within SPAN wrapper, then they will appear on the same line. Otherwise, editors in SPANs will be shifted 3-6 pixels above INPUT editors.",
		"jp": "Sets gets option to wrap input field into SPAN..<br>    That option can be set only on initialization and it is available only when base element is INPUT or TEXTAREA.<br>    If drop-down button or spin-buttons are enabled or the theme is set, then that option has no effect.<br>    The reason for that property is to allow vertical alignment of several igEditor controls when they are located in html inline and some of them have enabled buttons.<br>    If all editors are created within SPAN wrapper, then they will appear on the same line. Otherwise, editors in SPANs will be shifted 3-6 pixels above INPUT editors."
	}
    },
    "required": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Set gets validation for empty value in editor.",
		"jp": "Set gets validation for empty value in editor."
	}
    },
    "selectionOnFocus": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets gets behavior of selection/caret in input-field when editor gets focus.",
		"jp": " Sets gets behavior of selection/caret in input-field when editor gets focus."
	},
      "valueOptions": [
        {
          "name": "select",
          "type": "string",
          "description": {
		"en": " Select all text",
		"jp": " Select all text"
	}
        },
        {
          "name": "start",
          "type": "string",
          "description": {
		"en": " Set caret at the beginning of text",
		"jp": " Set caret at the beginning of text"
	}
        },
        {
          "name": "end",
          "type": "string",
          "description": {
		"en": " Set caret at the end of text",
		"jp": " Set caret at the end of text"
	}
        },
        {
          "name": "default",
          "type": "string",
          "description": {
		"en": " Use default behavior of browser (in case of mask, numeric and date editors it may be unreliable)",
		"jp": " Use default behavior of browser (in case of mask, numeric and date editors it may be unreliable)"
	}
        }
      ]
    },
    "spinOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets ability to override the \"readOnly\" option and allow changes \"value\" of editor on spin events. Value false does not allow spin when \"readOnly\" is true.",
		"jp": "Sets gets ability to override the \"readOnly\" option and allow changes \"value\" of editor on spin events. Value false does not allow spin when \"readOnly\" is true."
	}
    },
    "spinWrapAround": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.<br>    In case of listOfItems, the first and the last items in list are used as minimum and maximum values.",
		"jp": "Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.<br>    In case of listOfItems, the first and the last items in list are used as minimum and maximum values."
	}
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": {
		"en": "Gets sets value in tabIndex for editor.",
		"jp": "Gets sets value in tabIndex for editor."
	}
    },
    "textAlign": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
		"jp": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor."
	},
      "valueOptions": [
        {
          "name": "null",
          "type": "object",
          "description": {
		"en": "Sets to default option in that case it's left",
		"jp": "Sets to default option in that case it's left"
	}
        },
        {
          "name": "left",
          "type": "string",
          "description": {
		"en": "Aligns the text on left",
		"jp": "Aligns the text on left"
	}
        },
        {
          "name": "right",
          "type": "string",
          "description": {
		"en": "Aligns the text on right",
		"jp": "Aligns the text on right"
	}
        },
        {
          "name": "center",
          "type": "string",
          "description": {
		"en": "Aligns the text on center",
		"jp": "Aligns the text on center"
	}
        }
      ]
    },
    "theme": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Sets gets selector for css classes used by editor.<br>    That option allows replacing all default css styles of editor by custom values.<br>    Application should provide css classes for all members defined in the css options with \"theme\" selector.<br>    For example, if that property is set to \"mytheme\", then application should provide following css classes:<br>    .mytheme .ui-igedit-field{...};<br>    .mytheme .ui-igedit-focus{...};<br>    etc.<br>    Note: changing theme is not supported when base element is INPUT or TEXTAREA and renderInContainer or button are not enabled.",
		"jp": "Sets gets selector for css classes used by editor.<br>    That option allows replacing all default css styles of editor by custom values.<br>    Application should provide css classes for all members defined in the css options with \"theme\" selector.<br>    For example, if that property is set to \"mytheme\", then application should provide following css classes:<br>    .mytheme .ui-igedit-field{...};<br>    .mytheme .ui-igedit-focus{...};<br>    etc.<br>    Note: changing theme is not supported when base element is INPUT or TEXTAREA and renderInContainer or button are not enabled."
	}
    },
    "toLower": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
		"jp": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste."
	}
    },
    "toUpper": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
		"jp": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste."
	}
    },
    "type": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": " Sets type of editor. If that option is not set, but the 'value' option is defined, then if type of 'value' is Number, then the 'numeric' type is used, if type of 'value' is Date, then the 'date' type is used. For all other types of 'value' the 'text' type is used. Note: if that option is set to 'datepicker', then application should ensure that css and js files used by jquery.ui.datepicker are available.",
		"jp": " Sets type of editor. If that option is not set, but the 'value' option is defined, then if type of 'value' is Number, then the 'numeric' type is used, if type of 'value' is Date, then the 'date' type is used. For all other types of 'value' the 'text' type is used. Note: if that option is set to 'datepicker', then application should ensure that css and js files used by jquery.ui.datepicker are available."
	},
      "valueOptions": [
        {
          "name": "text",
          "type": "string",
          "description": {
		"en": " Text editor is created",
		"jp": " Text editor is created"
	}
        },
        {
          "name": "mask",
          "type": "string",
          "description": {
		"en": " Mask editor is created",
		"jp": " Mask editor is created"
	}
        },
        {
          "name": "date",
          "type": "string",
          "description": {
		"en": " Date-time editor is created",
		"jp": " Date-time editor is created"
	}
        },
        {
          "name": "datepicker",
          "type": "string",
          "description": {
		"en": " Date-picker is created",
		"jp": " Date-picker is created"
	}
        },
        {
          "name": "numeric",
          "type": "string",
          "description": {
		"en": " Numeric editor is created",
		"jp": " Numeric editor is created"
	}
        },
        {
          "name": "currency",
          "type": "string",
          "description": {
		"en": " Currency editor is created",
		"jp": " Currency editor is created"
	}
        },
        {
          "name": "percent",
          "type": "string",
          "description": {
		"en": " Percent editor is created",
		"jp": " Percent editor is created"
	}
        }
      ]
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "Sets gets options supported by igValidator.<br>    In order to enable validation and use defaults, an empty object can be used.<br>    Note: validation rules of igValidator, such as min, max, minLength, required are not supported, but similar properties of igEditor should be used.",
		"jp": "Sets gets options supported by igValidator.<br>    In order to enable validation and use defaults, an empty object can be used.<br>    Note: validation rules of igValidator, such as min, max, minLength, required are not supported, but similar properties of igEditor should be used."
	},
	  "schemaRef": "validator"
    },
    "value": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options. That can be string, number or Date depending on type of editor. If it is used on initialization and the type option is missing, then if 'value' is Number, then 'numeric' editor is created automatically and if 'value' is Date, then the 'date' editor is created.",
		"jp": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options. That can be string, number or Date depending on type of editor. If it is used on initialization and the type option is missing, then if 'value' is Number, then 'numeric' editor is created automatically and if 'value' is Date, then the 'date' editor is created."
	}, 
	  "arrayMemberType" : "object"
    },
    "width": {
      "type": "number",
      "defaultValue": null,
      "description": {
		"en": "Sets gets width of editor in pixels.<br>    Only positive values have effect. If that option is not set, then value of style.width of base html element will be used automatically. However, that value should be in the px units.",
		"jp": "Sets gets width of editor in pixels.<br>    Only positive values have effect. If that option is not set, then value of style.width of base html element will be used automatically. However, that value should be in the px units."
	}
    }
  }
}