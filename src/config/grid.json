{
  "overview": null,
  "name": "ui.igGrid",
  "category": null,
  "events": {
    "cellClick": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired when a cell is clicked.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.cellElement to get reference to cell DOM element.<br>&nbsp;&nbsp;&nbsp;Use ui.rowIndex to get row index.<br>&nbsp;&nbsp;&nbsp;Use ui.colIndex to get column index.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "columnsCollectionModified": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after the columns colection has been modified(e.g. a column is hidden)<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "created": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote) <br>&nbsp;&nbsp;&nbsp;&nbsp;use ui.owner to get a reference to the grid"
    },
    "dataBinding": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before data binding takes place.<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel data binding.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "dataBound": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after data binding is complete.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "dataRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after all of the data records in the grid table body have been rendered. <br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "dataRendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before the TBODY holding the data records starts its rendering.<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel data records rendering.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "destroyed": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "fired when the grid is destroyed<br>&nbsp;&nbsp;&nbsp;&nbsp;use ui.owner to get a reference to the grid"
    },
    "footerRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after the footer has been rendered.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.table to get reference to footers table DOM element."
    },
    "footerRendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before the footer starts its rendering.<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel footer rendering.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "headerCellRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after every TH in the grid header has been rendered.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.columnKey to get column key.<br>&nbsp;&nbsp;&nbsp;Use ui.th to get reference to header cell DOM element."
    },
    "headerRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after the header has been rendered.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.table to get reference to headers table DOM element."
    },
    "headerRendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before the header starts its rendering.<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel header rendering.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after the whole grid widget has been rendered (including headers, footers, etc.).<br>&nbsp;&nbsp;&nbsp;This event is fired only when the grid is being initialized. <br>&nbsp;&nbsp;&nbsp;It will not be fired if the grid is rebound to its data <br>&nbsp;&nbsp;&nbsp;(for example, when calling the dataBind() API method <br>&nbsp;&nbsp;&nbsp;or when changing the page size (when paging is enabled)).<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "rendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before the grid starts rendering (all contents).<br>&nbsp;&nbsp;&nbsp;This event is fired only when the grid is being initialized. <br>&nbsp;&nbsp;&nbsp;It will not be fired if the grid is rebound to its data <br>&nbsp;&nbsp;&nbsp;(for example, when calling the dataBind() API method <br>&nbsp;&nbsp;&nbsp;or when changing the page size (when paging is enabled)).<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel grid rendering.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid."
    },
    "requestError": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "event fired if there is an error in the request, when the grid is doing a remote operation,<br>&nbsp;&nbsp;&nbsp;&nbsp;such as data binding, paging, sorting, etc. <br>&nbsp;&nbsp;&nbsp;&nbsp;use ui.owner to get a reference to the grid<br>&nbsp;&nbsp;&nbsp;&nbsp;use ui.message to get the error message coming from the server"
    },
    "rowsRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after data rows are rendered.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.tbody to get reference to grid's table body."
    },
    "rowsRendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired before actual data rows (TRs) are rendered.<br>&nbsp;&nbsp;&nbsp;Return false in order to cancel rows rendering.&nbsp;<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.tbody to get reference to grid's table body."
    },
    "schemaGenerated": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.<br>&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;Use ui.owner to get reference to igGrid.<br>&nbsp;&nbsp;&nbsp;Use ui.schema to get reference to data source schema.<br>&nbsp;&nbsp;&nbsp;Use ui.dataSource to get reference to data source."
    }
  },
  "properties": {
    "accessibilityRendering": {
      "type": "bool",
      "defaultValue": false,
      "description": "if this option is set to true, ARIA and role attributes will be rendered for data records, cells and grid containers"
    },
    "adjustVirtualHeights": {
      "type": "bool",
      "defaultValue": false,
      "description": "If this option is set to true, the height of the grid row will be calculated automatically based on the average row height and the visible virtual records. If no average row height is specified, one will be calculated automatically at runtime."
    },
    "aggregateTransactions": {
      "type": "bool",
      "defaultValue": false,
      "description": "if set to true, the following behavior will take place:<br>&nbsp;&nbsp;&nbsp;&nbsp;if a new row is added, and then deleted, there will be no transaction added to the log <br>&nbsp;&nbsp;&nbsp;&nbsp;if a new role is added, edited, then deleted, there will be no transaction added to the log<br>&nbsp;&nbsp;&nbsp;&nbsp;if several edits are made to a row or an individual cell, this should result in a single transaction<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: This option takes effect only when autoCommit is set to false."
    },
    "alternateRowStyles": {
      "type": "bool",
      "defaultValue": true,
      "description": "enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents."
    },
    "autoAdjustHeight": {
      "type": "bool",
      "defaultValue": true,
      "description": "If autoAdjustHeight is set to false, the options.height will be set only on the scrolling container, and all other UI elements such as paging footer / filter row/ headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no virtualization enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight."
    },
    "autoCommit": {
      "type": "bool",
      "defaultValue": false,
      "description": "automatically commits the transactions as rows/cells are being edited"
    },
    "autofitLastColumn": {
      "type": "bool",
      "defaultValue": true,
      "description": "If autofitLastColumn is true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the entire grid."
    },
    "autoFormat": {
      "type": "string",
      "defaultValue": "date",
      "description": " Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.",
      "valueOptions": [
        {
          "name": "date",
          "type": "string",
          "description": " formats only Date columns"
        },
        {
          "name": "number",
          "type": "string",
          "description": " formats only number columns"
        },
        {
          "name": "dateandnumber",
          "type": "string",
          "description": ""
        },
        {
          "name": "true",
          "type": "bool",
          "description": " formats Date and number columns"
        },
        {
          "name": "false",
          "type": "bool",
          "description": " auto formatting is disabled"
        }
      ]
    },
    "autoGenerateColumns": {
      "type": "bool",
      "defaultValue": true,
      "description": "if no columns collection is defined, and autoGenerateColumns is set to true, columns will be inferred from the data source"
    },
    "avgColumnWidth": {
      "type": "string",
      "defaultValue": null,
      "description": " used for virtualization, this is the average value in pixels for a column width "
    },
    "avgRowHeight": {
      "type": "string",
      "defaultValue": null,
      "description": " used for virtualization, this is the average value in pixels (default) that will be used to calculate how many rows and which ones to render as the end user scrolls. Also all rows' height will be automatically equal to this value "
    },
    "caption": {
      "type": "string",
      "defaultValue": null,
      "description": "caption text that will be shown above the grid header"
    },
    "columns": {
      "type": "array",
      "defaultValue": null,
      "description": "an array of column objects",
      "designerDisplayProperty": "key",
      "schema": {
        "key": {
          "required": true,
          "type": "string",
          "defaultValue": null,
          "description": "Column key (property in the data source to which the column is bound to)"
        },
        "headerText": {
          "type": "string",
          "defaultValue": null,
          "description": "Column header text"
        },
        "width": {
          "type": "string",
          "defaultValue": null,
          "description": "Width of the column in pixels or percentage. Can have optional 'px' at the end. If width is not defined and defaultColumnWidth is set, it is assumed for all columns"
        },
        "dataType": {
          "type": "string",
          "defaultValue": "string",
          "description": "data type of the column cell values",
          "valueOptions": [
            {
              "name": "string",
              "type": "string",
              "description": "The column values will be stored and formatted as strings"
            },
            {
              "name": "number",
              "type": "string",
              "description": "The column values will be stored and formatted as numbers"
            },
            {
              "name": "date",
              "type": "string",
              "description": "The column values will be stored and formatted as Date objects"
            },
            {
              "name": "bool",
              "type": "string",
              "description": "The column values will be stored and formatted as boolean values"
            },
            {
              "name": "object",
              "type": "string",
              "description": "The column values will be stored and formatted in the way they appear in the data source"
            }
          ]
        },
        "hidden": {
          "type": "bool",
          "defaultValue": false,
          "description": "Initial visibility of the column. A column can be hidden without the Hiding feature being enabled but there will be no UI for unhiding it. Columns can be defined as hidden in the options of the Hiding feature as well and those definitions take precedence."
        },
        "format": {
          "type": "string",
          "defaultValue": null,
          "description": "Sets gets format for cells in column. Default value is null. If dataType is \"date\", then supported formats are following: \"date\", \"dateLong\", \"dateTime\", \"time\", \"timeLong\", \"MM/dd/yyyy\", \"MMM-d, yy, h:mm:ss tt\", \"dddd d MMM\", etc. If dataType is \"number\", then supported numeric formats are following: \"number\", \"currency\", \"percent\", \"int\", \"double\", \"0.00\", \"#.0####\", \"0\", \"#.#######\", etc. The value of \"double\" will be similar to \"number\", but with unlimited maximum number of decimal places. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object. If dataType is \"string\" or not set, then format is rendered as it is with replacement of possible \"{0}\" flag by value in cell. Example, if format is set to \"Name: {0}\" and value in cell is \"Bob\", then value will appear as \"Name: Bob\". If value is set to \"checkbox\", then checkboxes are used regardless of renderCheckboxes option of igGrid. That has effect only when dataType option of column is set to \"bool\"."
        },
        "formatter": {
          "type": "function",
          "defaultValue": null,
          "description": "Reference to a function (string or function) which will be used for formatting the cell values. The function should accept a value and return the new formatted value."
        },
        "formula": {
          "type": "string",
          "defaultValue": null,
          "description": "a reference or name of a javascript function which will calculate the value based on other cell values in the same row when column is unbound."
        },
        "group": {
          "type": "array",
          "schemaRef": "grid.columns",
          "description": "Array of other column definitions. If the column has the property group than the grid has multi column headers",
          "defaultValue": null
        },
        "rowspan": {
          "type": "number",
          "defaultValue": 1,
          "description": "Used to adjust span of multi column header cell."
        },
        "template": {
          "type": "string",
          "defaultValue": null,
          "description": "Sets a template for an individual column. the contents of the template should be the HTML markup that goes inside the table cell, without any and tags included in front and at the end. The syntax of the template, when referencing data keys and using conditional expressions is the same as the one for rowTemplate."
        },
        "unbound": {
          "type": "bool",
          "defaultValue": false,
          "description": "Sets whether column is bound to the datasource."
        },
        "unboundValues": {
          "type": "array",
          "defaultValue": null,
          "arrayMemberType": "object"
        }
      }
    },
    "columnVirtualization": {
      "type": "bool",
      "defaultValue": false,
      "description": "option to enable virtualization for columns only (horizontal)"
    },
    "dataSource": {
      "type": "object",
      "defaultValue": null,
      "description": "can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself"
    },
    "dataSourceType": {
      "type": "string",
      "defaultValue": null,
      "description": "explicitly set data source type (such as \"json\"). Please refer to the documentation of $.ig.DataSource and its type property"
    },
    "dataSourceUrl": {
      "type": "string",
      "defaultValue": null,
      "description": "specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)"
    },
    "defaultColumnWidth": {
      "type": "string",
      "defaultValue": null,
      "description": " Default column width that will be set for all columns."
    },
    "enableHoverStyles": {
      "type": "bool",
      "defaultValue": true,
      "description": "enables/disables rendering of ui-state-hover classes when the mouse is over a record. this can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content"
    },
    "enableUTCDates": {
      "type": "bool",
      "defaultValue": false,
      "description": "enables formatting of the dates as UTC. Note that this may be desirable when the dates are coming from a backend, encoded as UTC. Otherwise, if dates are created on the client (in the browser), most probably keeping enableUTCDates to false is the desired behavior"
    },
    "features": {
      "type": "object",
      "defaultValue": null,
       "components": ["gridfiltering", "gridupdating", "gridtooltips", "gridsummaries", "gridsorting", "gridselection", "gridrowselectors", "gridresizing", "gridpaging", "gridmulticolumnheaders", "gridmergedcells", "gridhiding", "gridgroupby", "gridcolumnmoving"],
      "description": "a list of grid features definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly"
    },
    "fixedFooters": {
      "type": "bool",
      "defaultValue": true,
      "description": "footers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedFooters will always act as if it's true, no matter which value is set"
    },
    "fixedHeaders": {
      "type": "bool",
      "defaultValue": true,
      "description": "headers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedHeaders will always act as if it's true, no matter which value is set"
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": " This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.  "
    },
    "jQueryTemplating": {
      "type": "bool",
      "defaultValue": false,
      "description": "custom high-performance rendering will be used for rendering by default. jQuery Templating plugin can be used and enabled by setting this option to true. This will allow usage of column / row templates in jQuery Templating style. If virtualization is enabled, it is advised to keep this option to \"false\", in order to have better scrolling/rendering performance  <br>&nbsp;&nbsp;&nbsp;*** IMPORTANT ***<br>&nbsp;&nbsp;&nbsp;This option has been depricated as of the 12.1 release. The igGrid now uses the custom Infragistics templating engine by default."
    },
    "jsonpRequest": {
      "type": "bool",
      "defaultValue": null,
      "description": "When dataSource is string defines whether to set data source of type JSONP"
    },
    "localSchemaTransform": {
      "type": "bool",
      "defaultValue": true,
      "description": "if this option is set to false, the data to which the grid is bound will be used \"as is\" with no additional transformations based on columns defined"
    },
    "mergeUnboundColumns": {
      "type": "bool",
      "defaultValue": false,
      "description": "Merge unbound columns values inside datasource when data source is remote. If true then the unbound columns are merged to the datasource at runtime - indeed DataSource is expanded with the new data and this could cause performance issues when dataSource is huge, if false then the unbound data is sent to the client"
    },
    "primaryKey": {
      "type": "string",
      "defaultValue": null,
      "description": "primary key name of the column containing unique identifiers"
    },
    "renderCheckboxes": {
      "type": "bool",
      "defaultValue": false,
      "description": "Gets sets ability to render checkboxes and use checkbox editor when dataType of a column is \"bool\". That option is not available when jQueryTemplating is used."
    },
    "requestType": {
      "type": "string",
      "defaultValue": "GET",
      "description": "specifies the HTTP verb to be used to issue the request",
      "valueOptions": [
        {
          "name": "GET",
          "type": "string",
          "description": "initiates GET requests"
        },
        {
          "name": "POST",
          "type": "string",
          "description": "initiates POST requests"
        }
      ]
    },
    "responseContentType": {
      "type": "string",
      "defaultValue": "application/json; charset=utf-8",
      "description": "content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType"
    },
    "responseDataKey": {
      "type": "string",
      "defaultValue": null,
      "description": "see $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped"
    },
    "responseTotalRecCountKey": {
      "type": "string",
      "defaultValue": null,
      "description": "See $.ig.DataSource. Property in the response specifying the total number of records on the server."
    },
    "restSettings": {
      "type": "object",
      "defaultValue": null,
      "description": "Settings related to REST compliant update routine",
      "schema": {
        "create": {
          "type": "object",
          "defaultValue": null,
          "description": "Settings for create requests",
          "schema": {
            "batch": {
              "type": "bool",
              "defaultValue": false,
              "description": "Specifies whether create requests will be sent in batches"
            },
            "template": {
              "type": "string",
              "defaultValue": null,
              "description": "Specifies a remote URL template. Use ${id} in place of the resource id"
            },
            "uri": {
              "type": "string",
              "defaultValue": null,
              "description": "Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests."
            }
          }
        },
        "update": {
		  "type": "object",
          "defaultValue": null,
          "description": "Settings for update requests",	
          "schemaRef": "grid.restSettings.create"
        },
        "remove": {
	      "type": "object",
          "defaultValue": null,
          "description": "Settings for remove requests",
          "schemaRef": "grid.restSettings.create"
        },
        "contentSerializer": {
          "type": "function",
          "defaultValue": null,
          "description": "Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.",
          "args": [
            {
              "name": "content",
              "type": "object",
              "optional": false
            }
          ]
        },
        "contentType": {
          "type": "string",
          "defaultValue": "application/json; charset=utf-8",
          "description": "Specifies the content type of the request."
        },
        "encodeRemoveInRequestUri": {
          "type": "bool",
          "defaultValue": true,
          "description": "Specifies whether the ids of the removed resources are send through the request URI"
        }
      }
    },
    "rowTemplate": {
      "type": "string",
      "defaultValue": null,
      "description": "jQuery templating style template that will be used to render data records"
    },
    "rowVirtualization": {
      "type": "bool",
      "defaultValue": false,
      "description": "option to enable virtualization for rows only (vertical)"
    },
    "serializeTransactionLog": {
      "type": "bool",
      "defaultValue": true,
      "description": "if true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be done instead of GET"
    },
    "showFooter": {
      "type": "bool",
      "defaultValue": true,
      "description": "option controlling the visibility of the grid footer"
    },
    "showHeader": {
      "type": "bool",
      "defaultValue": true,
      "description": "option controlling the visibility of the grid header"
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": 0,
      "description": "initial tabIndex attribute that will be set on the container element"
    },
    "templatingEngine": {
      "type": "string",
      "defaultValue": "infragistics",
      "description": " the templating engine that will be used to render the grid ",
      "valueOptions": [
        {
          "name": "infragistics",
          "type": "string",
          "description": " the grid will use the Infragistics Templating engine to render its content and specific parts of the UI"
        },
        {
          "name": "jsRender",
          "type": "string",
          "description": " the grid will use jsRender to render its content and specific parts of the UI"
        }
      ]
    },
    "updateUrl": {
      "type": "string",
      "defaultValue": null,
      "description": "URL to which updating requests will be made. If autoCommit is true, updates will be done immediately to the data source, without keeping interim transaction logs"
    },
    "virtualization": {
      "type": "bool",
      "defaultValue": false,
      "description": "Enables/disables virtualization. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data."
    },
    "virtualizationMode": {
      "type": "string",
      "defaultValue": "fixed",
      "description": " Determines virtualization mode",
      "valueOptions": [
        {
          "name": "fixed",
          "type": "string",
          "description": " renders only the visible rows and/or columns in the grid. On scrolling the same rows and/or columns are updated with new data from the data source."
        },
        {
          "name": "continuous",
          "type": "string",
          "description": " renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one."
        }
      ]
    },
    "virtualizationMouseWheelStep": {
      "type": "number",
      "defaultValue": null,
      "description": "number of pixels to move the grid when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. The \"null\" value will assume this is set to avgRowHeight"
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": ""
    }
  }
}