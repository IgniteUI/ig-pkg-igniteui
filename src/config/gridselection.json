{
  "overview": null,
  "name": "ui.igGridSelection",
  "title": "Selection",
  "category": null,
  "visual": true,
  "events": {
    "activeCellChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after a cell becomes active (focus style applied).<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.",
		"jp": "Event fired after a cell becomes active (focus style applied).<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index."
	}
    },
    "activeCellChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before a cell becomes active (focus style applied) (cancellable).<br>   Return false in order to cancel active cell changing. <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.",
		"jp": "Event fired before a cell becomes active (focus style applied) (cancellable).<br>   Return false in order to cancel active cell changing. <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index."
	}
    },
    "activeRowChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after a row becomes active (focus style applied). <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to active row DOM element.<br>   Use ui.row.index to get row index.",
		"jp": "Event fired after a row becomes active (focus style applied). <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to active row DOM element.<br>   Use ui.row.index to get row index."
	}
    },
    "activeRowChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before a row becomes active (focus style applied) (cancellable).<br>   Return false in order to cancel active row changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to active row DOM element.<br>   Use ui.row.index to get active row index.",
		"jp": "Event fired before a row becomes active (focus style applied) (cancellable).<br>   Return false in order to cancel active row changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to active row DOM element.<br>   Use ui.row.index to get active row index."
	}
    },
    "cellSelectionChanged": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after cell(s) are selected.<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get reference to column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.<br>   Use ui.selectedCells to get reference to selected cells object array.<br>   ui.manual - returns true if internal trigger.",
		"jp": "Event fired after cell(s) are selected.<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get reference to column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.<br>   Use ui.selectedCells to get reference to selected cells object array.<br>   ui.manual - returns true if internal trigger."
	}
    },
    "cellSelectionChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before cell(s) are about to be selected (cancellable).<br>   Return false in order to cancel cell selection changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get reference to column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.<br>   Use ui.selectedCells to get reference to selected cells object array.<br>   ui.manual - returns true if internal trigger.",
		"jp": "Event fired before cell(s) are about to be selected (cancellable).<br>   Return false in order to cancel cell selection changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.cell.element to get reference to cell DOM element.<br>   Use ui.cell.columnKey to get reference to column key.<br>   Use ui.cell.index to get column index.<br>   Use ui.cell.row to get reference to row DOM element.<br>   Use ui.cell.rowIndex to get row index.<br>   Use ui.selectedCells to get reference to selected cells object array.<br>   ui.manual - returns true if internal trigger."
	}
    },
    "rowSelectionChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after row(s) are selected.<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to row DOM element.<br>   Use ui.row.index to get row index.<br>   Use ui.selectedRows to get reference to rows object array.<br>            Use ui.selectedFixedRows to get reference to fixed rows object array if any.<br>   ui.manual - returns true if internal trigger.",
		"jp": "Event fired after row(s) are selected.<br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to row DOM element.<br>   Use ui.row.index to get row index.<br>   Use ui.selectedRows to get reference to rows object array.<br>            Use ui.selectedFixedRows to get reference to fixed rows object array if any.<br>   ui.manual - returns true if internal trigger."
	}
    },
    "rowSelectionChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before row(s) are about to be selected (cancellable).<br>   Return false in order to cancel selection changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to row DOM element.<br>   Use ui.row.index to get row index.<br>   Use ui.selectedRows to get reference to rows object array.<br>            Use ui.selectedFixedRows to get reference to fixed rows object array if any.<br>   ui.manual - returns true if internal trigger.",
		"jp": "Event fired before row(s) are about to be selected (cancellable).<br>   Return false in order to cancel selection changing.   <br>   Function takes arguments evt and ui.<br>   Use ui.owner to get reference to igGridSelection.<br>   Use ui.owner.grid to get reference to igGrid.<br>   Use ui.row.element to get reference to row DOM element.<br>   Use ui.row.index to get row index.<br>   Use ui.selectedRows to get reference to rows object array.<br>            Use ui.selectedFixedRows to get reference to fixed rows object array if any.<br>   ui.manual - returns true if internal trigger."
	}
    }
  },
  "properties": {
	"name": {
      "type": "string",
      "defaultValue": null
    },
    "activation": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel",
		"jp": "Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel"
	}
    },
    "mode": {
      "type": "string",
      "defaultValue": "row",
      "description": {
		"en": "Defines type of the selection.",
		"jp": "Defines type of the selection."
	},
      "valueOptions": [
        {
          "name": "row",
          "type": "string",
          "description": {
		"en": "Defines row selection mode.",
		"jp": "Defines row selection mode."
	}
        },
        {
          "name": "cell",
          "type": "string",
          "description": {
		"en": "Defines cell selection mode.",
		"jp": "Defines cell selection mode."
	}
        }
      ]
    },
    "mouseDragSelect": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Enables / disables selection via dragging with the mouse - only applicable for cell selection",
		"jp": "Enables / disables selection via dragging with the mouse - only applicable for cell selection"
	}
    },
    "multipleCellSelectOnClick": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "if true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set<br>   to row. this option is useful for enabling multiple discountinued selection on touch environments.",
		"jp": "if true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set<br>   to row. this option is useful for enabling multiple discountinued selection on touch environments."
	}
    },
    "multipleSelection": {
      "type": "bool",
      "defaultValue": false,
      "description": {
		"en": "Enables / Disables multiple selection of cells and rows - depending on the mode",
		"jp": "Enables / Disables multiple selection of cells and rows - depending on the mode"
	}
    },
    "skipChildren": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "if true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid",
		"jp": "if true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid"
	}
    },
    "touchDragSelect": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "Enables / disables selection via continuous touch event - only applicable for cell selection and<br>   touch-supported environments",
		"jp": "Enables / disables selection via continuous touch event - only applicable for cell selection and<br>   touch-supported environments"
	}
    },
    "wrapAround": {
      "type": "bool",
      "defaultValue": true,
      "description": {
		"en": "if wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected",
		"jp": "if wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected"
	}
    }
  }
}