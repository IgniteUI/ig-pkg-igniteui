{
    "overview": null,
    "name": "ui.igPercentEditor",
    "category": null,
    "visual": true,
    "events": {
        "blur": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised when input field of editor loses focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
                "jp": "エディターの入力フィールドがフォーカスを失ったとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
            }
        },
        "buttonClick": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised when button was clicked by mouse.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
                "jp": "ボタンがマウスでクリックされたときに発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
            }
        },
        "focus": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised when input field of editor gets focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
                "jp": "エディターの入力フィールドがフォーカスを取得したとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
            }
        },
        "hideDropDown": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised before drop-down list or calendar is opened.<br>    Function takes argument evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain reference to the selected item in list or Date in calendar.<br>    If ui.value is not null and not undefined, that it means that drop-down was closed due to selection from drop-down list or from calendar.<br>    Otherwise, drop-down was closed due to lost focus or Esc key press.<br>    Return false in order to cancel hide action and keep drop-down visible.<br>    It is not recommended to cancel that action on blur event.<br>    Note: In case of calendar of datepicker, the evt or evt.originalEvent can be null. That happens if calendar was closed on blur or by Esc key.<br>    Returning the false in this situation will not prevent closing drop-down calendar.",
                "jp": "ドロップダウン リストまたは予定表を開く前に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して、リスト内の選択項目または予定表の日付への参照を取得します。<br>    ui.value が null でなく定義されていない場合、ドロップダウン リストまたは予定表の選択によってドロップダウンが閉じていることを意味します。<br>    そうでない場合、フォーカスを失ったことまたは [Esc] キーを押したことによってドロップダウンが閉じています。<br>    非表示動作をキャンセルし、ドロップダウンを表示状態にするために、False を返します。<br>    blur イベントに対してそのアクションをキャンセルしないでください。<br>    注: datepicker の予定表の場合、evt または evt.originalEvent は null が可能です。blur に対してまたは [Esc] キーによって予定表が閉じた場合にこれが発生します。<br>    この状況で False を返しても、ドロップダウン カレンダーを閉じることを防ぐことはできません。"
            }
        },
        "invalidValue": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on lost focus when editor contains invalid value. That event is available for all editors besides default \"text\" type editor.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain suggested value.<br>    Set ui.value to change suggested value.<br>    If type of editor is numeric, currency, percent, date or datepicker, then ui.text contains actual text entered by user.<br>    If type of editor is numeric, currency or percent, then the ui.reason may have following flags: \"null\", \"format\" or \"limit\".<br>    If type of editor is date or datepicker, then ui contains following additional members:<br>    ui.reason may have following flags: \"null\", \"dayOfMonth\", \"numberOfFields\", \"limit\" or \"invalid\";<br>    ui.year - year of entered date;<br>    ui.month - month of entered date;<br>    ui.day - day of entered date;<br>    ui.hours - hours of entered date;<br>    ui.minutes - minutes of entered date;<br>    ui.seconds - seconds of entered date;<br>    ui.milliseconds - milliseconds of entered date.",
                "jp": "エディターに無効な値が含まれている場合にフォーカスを失ったとき発生するイベント。このイベントは、デフォルトの text タイプのエディターに加えすべてのエディターで使用可能です。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して、値の候補を取得します。<br>    ui.value を設定して、値の候補を変更します。<br>    エディターのタイプが数値、通貨、パーセント、日付、または datepicker の場合、ui.text にはユーザーが入力した実際のテキストが含まれています。<br>    エディターのタイプが数値、通貨、またはパーセントの場合、ui.reason は、フラグ null、format、または limit を持つことが可能です。<br>    エディターのタイプが日付または datepicker の場合、ui には以下の追加メンバーが含まれています。<br>    ui.reason は、フラグ null、dayOfMonth、numberOfFields、limit、または invalid を持つこと可能です。<br>    ui.year - 入力された日付の年。<br>    ui.month - 入力された日付の月。<br>    ui.day - 入力された日付の日。<br>    ui.hours - 入力された日付の時。<br>    ui.minutes - 入力された日付の分。<br>    ui.seconds - 入力された日付の秒。<br>    ui.milliseconds - 入力された日付のミリ秒。"
            }
        },
        "keydown": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on keydown event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
                "jp": "keydown イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
            }
        },
        "keypress": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on keypress event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.<br>    Set ui.key to another character which will replace original entry.",
                "jp": "keypress イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。<br>    ui.key を元のエントリを置き換える別の文字に設定します。"
            }
        },
        "keyup": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on keyup event.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
                "jp": "keyup イベントに対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
            }
        },
        "listSelected": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised after list item was selected.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item.",
                "jp": "リスト項目が選択された後に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.index を使用して、新しい選択インデックスを取得します。<br>    ui.oldIndex を使用して、古い選択インデックスを取得します。<br>    ui.item を使用して、新しい選択インデックスへの参照を取得します。"
            }
        },
        "listSelecting": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised before list item is selected.<br>    Return false in order to cancel select action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.index to get new selected index.<br>    Use ui.oldIndex to get old selected index.<br>    Use ui.item to get reference to new selected item.",
                "jp": "リスト項目が選択される前に発生するイベント。<br>    選択操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.index を使用して、新しい選択インデックスを取得します。<br>    ui.oldIndex を使用して、古い選択インデックスを取得します。<br>    ui.item を使用して、新しい選択インデックスへの参照を取得します。"
            }
        },
        "mousedown": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on mousedown at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
                "jp": "ドロップダウン リストを含むエディターの任意の部分での mousedown に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
            }
        },
        "mouseleave": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
                "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseleave に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
            }
        },
        "mousemove": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on mousemove at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
                "jp": "ドロップダウン リストを含むエディターの任意の部分での mousemove に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
            }
        },
        "mouseover": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on mouseover at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
                "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseover に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
            }
        },
        "mouseup": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on mouseup at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
                "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseup に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
            }
        },
        "showDropDown": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised before drop-down list or calendar is opened.<br>    Return false in order to cancel drop-down action.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
                "jp": "ドロップダウン リストまたは予定表を開く前に発生するイベント。<br>    ドロップダウン操作をキャンセルするには、False を返します。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
            }
        },
        "spin": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised on spin event.<br>    Return false in order to cancel spin.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.delta to obtain delta for increment or decrement.<br>    Use ui.value to obtain the \"value\" of editor before spin action.",
                "jp": "スピン イベントに対して発生するイベント。<br>    スピン操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.delta を使用して増減のデルタを取得します。<br>    ui.value を使用して、スピン操作をする前のエディターの value を取得します。"
            }
        },
        "textChanged": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised after text in editor was changed.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
                "jp": "エディター内のテキストが変更された後に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
            }
        },
        "valueChanged": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
                "jp": "エディター内の値が変更された後に発生するイベント。フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
            }
        },
        "valueChanging": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised before value in editor was changed.<br>    Return false in order to cancel change.<br>    It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
                "jp": "エディター内の値が変更される前に発生するイベント。<br>    変更をキャンセルするには、False を返します。<br>    フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
            }
        }
    },
    "properties": {
        "animationHideDuration": {
            "type": "number",
            "defaultValue": 200.0,
            "description": {
                "en": "Sets gets duration of animation in milliseconds when drop-down list is hidden. That option is not supported when \"type\" is set to \"datepicker\", because the jquery.ui.datepicker does not have similar feature. Default is 200. If value is less than 5, then animation is disabled.",
                "jp": "ドロップダウン リストが非表示になるときのアニメーションの期間 (ミリ秒単位) を取得または設定します。type を datepicker に設定した場合、jquery.ui.datepicker にその機能がないため、オプションはサポートされません。デフォルトは 200 です。値が 5 より小さい場合、アニメーションは無効になります。"
            }
        },
        "animationShowDuration": {
            "type": "number",
            "defaultValue": 200.0,
            "description": {
                "en": "Sets gets duration of animation in milliseconds when drop-down list or calendar is displayed. Default is 200. If value is less than 5, then animation is disabled.",
                "jp": "ドロップダウン リストまたはカレンダーが表示される場合に、アニメーションの時間 (ミリ秒単位) を設定または取得します。デフォルトは 200 です。値が 5 より小さい場合、アニメーションは無効になります。"
            }
        },
        "button": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.",
                "jp": " スピンおよびドロップダウン ボタンの可視性を取得または設定します。このオプションは、初期化時にのみ設定できます。「dropdown,spin」または「spinclear」などの組み合わせもサポートされています。"
            },
            "valueOptions": [
                {
                    "name": "dropdown",
                    "type": "string",
                    "description": {
                        "en": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);",
                        "jp": " リストを開くボタンが入力フィールドの右側に配置されます (base HTML 要素が direction:rtl を持つ場合は左側)。"
                    }
                },
                {
                    "name": "clear",
                    "type": "string",
                    "description": {
                        "en": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);",
                        "jp": " 値をクリアするボタンが入力フィールドの右側に配置されます (base HTML 要素が direction:rtl を持つ場合は左側)。"
                    }
                },
                {
                    "name": "spin",
                    "type": "string",
                    "description": {
                        "en": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).",
                        "jp": " スピン ボタンが入力フィールドの右側に置かれます (基本 HTML 要素が direction:rtl を持つ場合は左側)。"
                    }
                }
            ]
        },
        "dataMode": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.",
                "jp": " value() メソッドの get によって返された値のタイプを設定・取得します。また、value(val) メソッドの set の機能や、ブラウザーのコピー/貼り付け操作にも影響します。"
            },
            "valueOptions": [
                {
                    "name": "text",
                    "type": "string",
                    "description": {
                        "en": " the String object is used with 'text' in display mode format.",
                        "jp": " String オブジェクトが、表示モード形式で「text」と共に使用されます。"
                    }
                },
                {
                    "name": "editModeText",
                    "type": "string",
                    "description": {
                        "en": " the String object is used with 'text' in edit mode format.",
                        "jp": " String オブジェクトが、編集モード形式で「text」と共に使用されます。"
                    }
                },
                {
                    "name": "double",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of double and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'. Note: that is used as default.",
                        "jp": " double の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または Number.NaN が使用されます。注: それはデフォルトとして使用されます。"
                    }
                },
                {
                    "name": "float",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of double and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'.",
                        "jp": " double の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または Number.NaN が使用されます。"
                    }
                },
                {
                    "name": "decimal",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of double and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " double の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "long",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of signed long and if value is not set, then the null or 0 is used depending on the option 'nullable'. ",
                        "jp": " 符号付き long の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。 "
                    }
                },
                {
                    "name": "ulong",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of unsigned long and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号なし long の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "int",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of signed int and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号付き int の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "uint",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of unsigned int and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号なし int の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "short",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of signed short and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号付き short の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "ushort",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of unsigned short and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号なし short の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "sbyte",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of signed byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号付き byte の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                },
                {
                    "name": "byte",
                    "type": "string",
                    "description": {
                        "en": " the Number object is used with limits of unsigned byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.",
                        "jp": " 符号なし byte の制限を持つ Number オブジェクトが使用されます。値が設定されていない場合は「nullable」オプションによって、null または 0 が使用されます。"
                    }
                }
            ]
        },
        "decimalSeparator": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the character, which is used as decimal separator.<br>    Note: this option has priority over possible regional settings.",
                "jp": "小数点記号として使用する文字を取得または設定します。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "display": {
            "type": "string",
            "defaultValue": "inline-block",
            "description": {
                "en": "Sets gets style.display for outer html element.<br>    The value of \"\" will disable changing style.display.<br>    If the base html element is not INPUT, TEXTAREA, SPAN or DIV, then it is recommended to set this option to an empty string,<br>    because, some browsers may fail to handle display other than default value of browser.<br>    For example, if base element for editor is TD, then behavior in Chrome can be problematic.",
                "jp": "outer HTML 要素の style.display を取得または設定します。<br>    値が \"\" の場合、style.display を変更できません。<br>    ベース HTML 要素が INPUT、TEXTAREA、SPAN または DIV でない場合、このオプションの値を空の文字列に設定します。<br>    これは、一部のブラウザーで、ブラウザーのデフォルト以外の表示を処理できない場合があるためです。<br>    たとえば、エディターのベース要素が TD の場合、Chrome の動作に問題が発生します。"
            }
        },
        "displayFactor": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the factor which used for the get and set of the \"value\" method.<br>    On the get number (string) entered by user is divided by that factor and on the set the number (string) displayed in editor is multiplied by that factor.<br>    For example, if factor is 100 and the \"value\" is set to 0.123, then editor will show string \"12.3\".<br>    Possible values: 1, 10, 100, 1000, 10000, 100000, etc.<br>    Note: this option has priority over possible regional settings.",
                "jp": "\"value\" の取得および設定メソッドで使用するファクターを取得または設定します。<br>    ユーザーが入力した取得する数 (文字列) はそのファクターで除算され、エディターに表示されている設定する数 (文字列) にはファクターが乗算されます。<br>    たとえば、ファクターが 100 で、\"value\" が 0.123 に設定されている場合、エディターには文字列 \"12.3\" が表示されます。<br>    利用可能な値: 1、10、100、1000、10000、100000、など。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "dropDownOnReadOnly": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets ability to override the \"readOnly\" option and allow showing the drop-down list and changing the value in the editor from a list. Value false does not allow drop-down when \"readOnly\" is true.",
                "jp": "readOnly オプションをオーバーライドし、ドロップダウン リストを表示して、リストからエディターの値を変更できるようにする機能を取得または設定します。値が False の場合、readOnly が True だとドロップダウンできません。"
            }
        },
        "dropDownTriggers": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": " Sets gets list of actions which trigger display of drop-down list or calendar.",
                "jp": " ドロップダウン リストまたは予定表の表示をトリガーするアクションのリストを取得または設定します。"
            },
            "valueOptions": [
                {
                    "name": "arrow",
                    "type": "string",
                    "description": {
                        "en": " Down-arrow shows drop-down and up-arrow hides drop-down;",
                        "jp": " 下矢印でドロップダウンを表示し、上矢印でドロップダウンを非表示にします。"
                    }
                },
                {
                    "name": "button",
                    "type": "string",
                    "description": {
                        "en": " Shows and hides drop-down;",
                        "jp": " ドロップダウンの表示と非表示。"
                    }
                },
                {
                    "name": "focus",
                    "type": "string",
                    "description": {
                        "en": " Shows drop-down on focus.",
                        "jp": " フォーカスされたドロップダウンの表示。"
                    }
                },
                {
                    "name": "A-Z",
                    "type": "string",
                    "description": {
                        "en": " Any upper case characters show drop-down.",
                        "jp": " 大文字を示すドロップダウン。"
                    }
                }
            ]
        },
        "focusOnSpin": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "If that option is disabled and the editor is not focused, then a mouse click on the spin button will keep the text in the editor in display (not focus) format and perform spin actions.",
                "jp": "このオプションが無効でエディターがフォーカスを持たない場合、スピン ボタンをクリックすると、エディター内のテキストを (フォーカスではなく) 表示形式に保ち、スピン アクションを実行します。"
            }
        },
        "groups": {
            "type": "object",
            "defaultValue": null,
            "description": {
                "en": "(array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.<br>    The \"numericGroupSeparator\" is inserted between groups.<br>    If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.<br>    Count of groups starts from the decimal point (from right to left).<br>    That option has effect only in display (no focus) state.<br>    Note: this option has priority over possible regional settings.",
                "jp": "(数値オブジェクトの配列) グループに分けられる数の整数部分の桁数を取得または設定します。<br>    グループ間には numericGroupSeparator が挿入されます。<br>    配列内のすべての値の和が整数部分の長さよりも小さい場合、配列の最後の項目を以降のすべてのグループに使用します。<br>    グループのカウントは、小数点から (右から左へ) 始まります。<br>    このオプションは、表示状態 (フォーカスなし) の場合のみ効果があります。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "groupSeparator": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the character, which is used as separator for groups (like thousands).<br>    That option has effect only in display (no focus) state.<br>    Note: this option has priority over possible regional settings.",
                "jp": "グループ (千の位など) のセパレーターとして使用する文字を取得または設定します。<br>    このオプションは、表示状態 (フォーカスなし) の場合のみ効果があります。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "height": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets height of editor in pixels.<br>    Only positive values have effect.<br>    If that option is not set, then value of style.height of base html element will be used automatically. However, that value should be in the px units.",
                "jp": "エディターの高さ (ピクセル単位) を取得または設定します。<br>    正の値のみが効果を持ちます。<br>    このオプションが設定されていない場合は、base HTML 要素の style.height の値が自動的に使用されます。ただし、この値は px 単位である必要があります。"
            }
        },
        "hideEnterKey": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets ability to hide the Enter key from browser.",
                "jp": "ブラウザーから [Enter] キーを非表示する機能を取得または設定します。"
            }
        },
        "inputName": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Gets sets name of (hidden) INPUT element, which value will be set to current value of editor on any change.",
                "jp": "非表示の INPUT 要素の名前を取得または設定します。変更で値はエディターの現在値に設定されます。"
            }
        },
        "listColumns": {
            "type": "number",
            "defaultValue": 1.0,
            "description": {
                "en": "Sets gets number of columns in drop-down list.",
                "jp": "ドロップダウン リストの列数を取得または設定します。"
            }
        },
        "listDropDownAsChild": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets location of drop-down list.<br>    Value true will create html element for list as a child of main html element.<br>    Value false creates list as a child of body.<br>    Notes:<br>    That option has effect only for drop-down defined by listOfItems.<br>    The value of true is supported only when main (outer) html element of editor is container such as SPAN or DIV, or buttons are enabled, or renderInContainer is enabled, the theme is set.<br>    The value of true allows a better positioning and can be useful when editor is located in complex layout and containers with \"position:fixed\".",
                "jp": "ドロップダウン リストの場所を取得または設定します。<br>    値が True の場合、main HTML 要素の子として、リストの HTML 要素を作成します。<br>    値が False の場合、body の子として、リストを作成します。<br>    注:<br>    このオプションは、listOfItems で定義されたドロップダウンに対してのみ効果があります。<br>    エディターの main (outer) HTML 要素が SPAN または DIV などのコンテナーのとき、ボタンが有効なとき、renderInContainer が有効なとき、またはテーマが設定されているときのみ、True の値がサポートされています。<br>    値が True の場合、より適切な配置が可能であり、エディターが複雑なレイアウトで \"position:fixed\" を持つコンテナーに配置されているときに役に立ちます。"
            }
        },
        "listItems": {
            "type": "array",
            "defaultValue": null,
            "description": {
                "en": "Sets gets list of items which are used for drop-down list, spin, validation and auto-complete functionality.<br>    Items in list can be strings, numbers, dates or objects in any combination.<br>    If type of editor is date or datepicker and item is string, then igEditor will try to convert it to Date object and show item in display format.<br>    If type of editor is numeric, currency or percent and item is string, then igEditor will try to convert it to number and show item in display format.<br>    If item is object and it has member \"text\", then that member is used.<br>    If item is object and besides \"text\" has function getHtml(), then that function is used to render item in list.<br>    The item or item.text is used to set \"value\" of particular editor when list-item is selected.",
                "jp": "ドロップダウン リスト、スピン、検証およびオートコンプリートの機能で使用する項目のリストを取得または設定します。<br>    リスト内の項目には、文字列、数、日付またはオブジェクトが任意の組み合わせで可能です。<br>    エディターのタイプが日付または datepicker で、項目が文字列の場合、igEditor はそれを日付オブジェクトへ変換して、その項目を表示形式で表示します。<br>    エディターのタイプが数値、通貨、またはパーセントで、項目が文字列の場合、igEditor はそれを数へ変換して、その項目を表示形式で表示します。<br>    項目がオブジェクトで、メンバー text を含んでいる場合、そのメンバーが使用されます。<br>    項目がオブジェクトで、さらに、text が関数 getHtml() の場合、その関数がリスト内の項目の描画に使用されます。<br>    リスト項目が選択されると、項目または item.text を使用して、特定のエディターの value を設定します。"
            },
            "arrayMemberType": "string,number,date"
        },
        "listMaxHeight": {
            "type": "number",
            "defaultValue": 300.0,
            "description": {
                "en": "Sets gets maximum height of drop-down list in pixels. If value is equal to 0 or negative, then the height of list is defined by number of items in list.",
                "jp": "ドロップダウン リストの最大の高さ (ピクセル単位) を取得または設定します。値がゼロまたは負の場合、リストの高さはリスト内の項目数によって定義されます。"
            }
        },
        "listWidth": {
            "type": "number",
            "defaultValue": 0.0,
            "description": {
                "en": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.",
                "jp": "ドロップダウン リストのカスタムの幅 (ピクセル単位) を取得または設定します。値がゼロまたは負の場合、エディターの幅が使用されます。"
            }
        },
        "locale": {
            "type": "object",
            "defaultValue": null,
            "description": {
                "en": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.",
                "jp": "ボタンのタイトルに使用する文字列を取得または設定します。オブジェクトの値は一組の値またはキーの値メンバーを含む必要があります。注:ロケールのサブオプションは igEditor のメイン オプションに表示されますこのケースではメインオプションの中の値は最優先でロケールに対応する値をオーバーライドします。"
            },
            "arrayMemberType": "object"
        },
        "maxDecimals": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the maximum number of decimal places which are used in display (no focus) state.<br>    Note: this option has priority over possible regional settings.",
                "jp": "表示状態 (フォーカスなし) の場合に使用する小数点以下の最大桁数を取得または設定します。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "maxLength": {
            "type": "number",
            "defaultValue": 0.0,
            "description": {
                "en": "Sets gets maximum length of text which can be entered by user.<br>    Negative values or 0 disables that behavior.",
                "jp": "ユーザーが入力できるテキストの最大長を取得または設定します。<br>    負の値または 0 はこの動作を無効にします。"
            }
        },
        "maxValue": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the maximum value which can be entered in editor by end user.",
                "jp": "エンドユーザーがエディターに入力できる最大値を取得または設定します。"
            }
        },
        "minDecimals": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the minimum number of decimal places which are used in display (no focus) state.<br>    If number of digits in fractional part of number is less than the value of this option, then the \"0\" characters are used to fill missing digits.<br>    Note: this option has priority over possible regional settings.",
                "jp": "表示状態 (フォーカスなし) の場合に使用する小数点以下の最小桁数を取得または設定します。<br>    数の小数部分の桁数がこのオプションの値より小さい場合、足りない桁を文字 0 で埋めます。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "minValue": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the minimum value which can be entered in editor by end user.",
                "jp": "エンドユーザーがエディターに入力できる最小値を取得または設定します。"
            }
        },
        "negativePattern": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the pattern for negative numeric values, which is used in display (no focus) state.<br>    The \"$\" flag represents \"numericSymbol\".<br>    The \"n\" flag represents the value of number.<br>    The \"-\" and \"()\" flags are static part of pattern.<br>    Note: this option has priority over possible regional settings.",
                "jp": "表示状態 (フォーカスなし) の場合に使用する負の数値のパターンを取得または設定します。<br>    「$」 フラグは numericSymbol を表します。<br>    「n」 フラグは数値を表します。<br>    「-」 および 「()」 フラグはパターンの静的な部分です。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "negativeSign": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the character, which is used for negative numeric values.<br>    Note: this option has priority over possible regional settings.",
                "jp": "負の数値として使用する文字を取得または設定します。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "nullable": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets ability to prevent null value.<br>    If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).",
                "jp": "null 値を回避する機能を取得または設定します。<br>    このオプションが無効で、エディターに値がない場合、値は 0 (または minValue/maxValue) になります。"
            }
        },
        "nullText": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string.",
                "jp": "エディターがフォーカスを持たず、エディター内の value が null または空の文字列ときのエディターに表示されるテキストを取得または設定します。"
            }
        },
        "nullValue": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the representation of null value.",
                "jp": "null 値の表現を取得または設定します。"
            }
        },
        "positivePattern": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets the pattern for positive numeric values, which is used in display (no focus) state.<br>    The \"$\" flag represents \"numericSymbol\" and the \"n\" flag represents the value of number.<br>    Note: this option has priority over possible regional settings.",
                "jp": "表示状態 (フォーカスなし) の場合に使用する正の数値のパターンを取得または設定します。<br>    「$」 フラグは numericSymbol を表し、「n」 フラグは数値を表します。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "readOnly": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Set gets ability to modify editor from keyboard (false) or disables keyboard (true).<br>    Notes:<br>    If the \"spinOnReadOnly\" is enabled, then value will be modified on spin regardless of the \"readOnly\".<br>    If the \"listItems\" has items and \"dropDownTriggers\" is defined, then value will be modified from drop-down list regardless of the \"readOnly\".",
                "jp": "False の場合はキーボードからエディターを変更し、True の場合はキーボードを無効にする機能を取得または設定します。<br>    注:<br>    spinOnReadOnly が有効の場合、readOnly に関係なく、この値はスピンで変更されます。<br>    listItems が項目を持ち、dropDownTriggers が定義されている場合、readOnly に関係なく、値はドロップダウン リストから変更されます。"
            }
        },
        "regional": {
            "type": "object",
            "defaultValue": null,
            "description": {
                "en": "Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.",
                "jp": "エディターのカスタムの地域設定を取得または設定します。文字列の場合、$.ig.regional[stringValue] を仮定します。"
            },
            "arrayMemberType": "string"
        },
        "renderInContainer": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets option to wrap input field into SPAN..<br>    That option can be set only on initialization and it is available only when base element is INPUT or TEXTAREA.<br>    If drop-down button or spin-buttons are enabled or the theme is set, then that option has no effect.<br>    The reason for that property is to allow vertical alignment of several igEditor controls when they are located in html inline and some of them have enabled buttons.<br>    If all editors are created within SPAN wrapper, then they will appear on the same line. Otherwise, editors in SPANs will be shifted 3-6 pixels above INPUT editors.",
                "jp": "入力フィールドを SPAN 内で折り返すオプションを取得または設定します。<br>    このオプションは初期化時にのみ設定でき、base 要素が INPUT または TEXTAREA のときのみ使用可能です。<br>    ドロップダウン ボタンまたはスピン ボタンが有効かテーマが設定されている場合、このオプションは効果がありません。<br>    このプロパティの理由は、様々な igEditor コントロールが HTML インライン内にあり、その一部でボタンを有効になっているときに、それらのコントロールを垂直方向に配置可能にするためです。<br>    すべてのエディターが SPAN ラッパー内で作成される場合、それらは同じ行に表示されます。そうでない場合、SPAN 内のエディターは INPUT エディターより 3 から 6 ピクセル上にずれます。"
            }
        },
        "required": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Set gets validation for empty value in editor.",
                "jp": "エディターに空の値があるかの検証を取得または設定します。"
            }
        },
        "scientificFormat": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "",
                "jp": ""
            },
            "valueOptions": [
                {
                    "name": "null",
                    "type": "object",
                    "description": {
                        "en": " scientific format is disabled.",
                        "jp": " 科学的表記法は無効です。"
                    }
                },
                {
                    "name": "E",
                    "type": "string",
                    "description": {
                        "en": " scientific format is enabled and the \"E\" character is used.",
                        "jp": " 科学的表記法は有効で、文字「E」を使用します。"
                    }
                },
                {
                    "name": "e",
                    "type": "string",
                    "description": {
                        "en": " scientific format is enabled and the \"e\" character is used.",
                        "jp": " 科学的表記法は有効で、文字「e」を使用します。"
                    }
                },
                {
                    "name": "E+",
                    "type": "string",
                    "description": {
                        "en": " scientific format is enabled and the \"E\" character is used. The \"E+\" is used for positive values in display mode.",
                        "jp": " 科学的表記法は有効で、文字「E」を使用します。「E+」 は、編集モードで正の値に使用します。"
                    }
                },
                {
                    "name": "e+",
                    "type": "string",
                    "description": {
                        "en": " scientific format is enabled and the \"e\" character is used. The \"e+\" is used for positive values in display mode.",
                        "jp": " 科学的表記法は有効で、文字「e」を使用します。「e+」 は、編集モードで正の値に使用します。"
                    }
                }
            ]
        },
        "selectionOnFocus": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": " Sets gets behavior of selection/caret in input-field when editor gets focus.",
                "jp": " エディターにフォーカスがあるときの入力フィールド内の選択/カレットの動作を取得または設定します。"
            },
            "valueOptions": [
                {
                    "name": "select",
                    "type": "string",
                    "description": {
                        "en": " Select all text",
                        "jp": " すべてのテキストを選択します。"
                    }
                },
                {
                    "name": "start",
                    "type": "string",
                    "description": {
                        "en": " Set caret at the beginning of text",
                        "jp": " テキストの初めにキャレットを設定します。"
                    }
                },
                {
                    "name": "end",
                    "type": "string",
                    "description": {
                        "en": " Set caret at the end of text",
                        "jp": " テキストの終わりにキャレットを設定します。"
                    }
                },
                {
                    "name": "default",
                    "type": "string",
                    "description": {
                        "en": " Use default behavior of browser (in case of mask, numeric and date editors it may be unreliable)",
                        "jp": " ブラウザーのデフォルト動作を使用します (マスク、数値、および日付エディターの場合信頼性がありません)。"
                    }
                }
            ]
        },
        "spinDelta": {
            "type": "number",
            "defaultValue": 1.0,
            "description": {
                "en": "Sets gets delta-value which is used to increment or decrement value in editor on spin events.",
                "jp": "スピン イベント発生時にエディター内の値の増減に使用するデルタ値を取得および設定します。"
            }
        },
        "spinOnReadOnly": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets ability to override the \"readOnly\" option and allow changes \"value\" of editor on spin events. Value false does not allow spin when \"readOnly\" is true.",
                "jp": "readOnly オプションをオーバーライドし、スピン イベント発生時にエディターの value を変更できるようにする機能を取得または設定します。値が False の場合、readOnly が True だとスピンは使用できません。"
            }
        },
        "spinWrapAround": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.<br>    In case of listOfItems, the first and the last items in list are used as minimum and maximum values.",
                "jp": "スピン アクションで最小値または最大値に達した場合に、エディターで自動的に値を反対の限度に設定する機能を取得または設定します。<br>    listOfItems の場合、リスト内の最初と最後の項目を最小値および最大値として使用します。"
            }
        },
        "symbol": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets symbol, which is used in display (no focus) state.<br>    Note: this option has priority over possible regional settings.",
                "jp": "表示状態 (フォーカスなし) の場合に使用する記号を取得または設定します。<br>    注: このオプションは可能な地域の設定よりも優先されます。"
            }
        },
        "tabIndex": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Gets sets value in tabIndex for editor.",
                "jp": "エディターの tabIndex の値を取得または設定します。"
            }
        },
        "textAlign": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
                "jp": " エディター内のテキストの水平配置を取得または設定します。このオプションを設定した場合、'right' は 'numeric、'currency' 、および 'percent' エディターで使用され、'left'  はその他のすべてのタイプのエディターで使用されます。"
            },
            "valueOptions": [
                {
                    "name": "null",
                    "type": "object",
                    "description": {
                        "en": "Sets to default option in that case it's right",
                        "jp": "'right' の場合、デフォルト オプションに設定されます。"
                    }
                },
                {
                    "name": "left",
                    "type": "string",
                    "description": {
                        "en": "Aligns the text on left",
                        "jp": "テキストを左側に配置します。"
                    }
                },
                {
                    "name": "right",
                    "type": "string",
                    "description": {
                        "en": "Aligns the text on right",
                        "jp": "テキストを右側に配置します。"
                    }
                },
                {
                    "name": "center",
                    "type": "string",
                    "description": {
                        "en": "Aligns the text on center",
                        "jp": "テキストを中央に配置します。"
                    }
                }
            ]
        },
        "theme": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets selector for css classes used by editor.<br>    That option allows replacing all default css styles of editor by custom values.<br>    Application should provide css classes for all members defined in the css options with \"theme\" selector.<br>    For example, if that property is set to \"mytheme\", then application should provide following css classes:<br>    .mytheme .ui-igedit-field{...};<br>    .mytheme .ui-igedit-focus{...};<br>    etc.<br>    Note: changing theme is not supported when base element is INPUT or TEXTAREA and renderInContainer or button are not enabled.",
                "jp": "エディターが使用する CSS クラスのセレクターを取得または設定します。<br>    このオプションは、エディターのすべてのデフォルト CSS スタイルをカスタム値に置き換えることを可能にします。<br>    アプリケーションは、theme セレクターを持つ CSS オプションで定義されるすべてのメンバーの CSS クラスを提供する必要があります。<br>    たとえば、このプロパティが「mytheme」に設定されている場合、アプリケーションは以下の CSS クラスを提供する必要があります。<br>    .mytheme .ui-igedit-field{...};<br>    .mytheme .ui-igedit-focus{...};<br>    など。<br>    注: ベース要素が INPUT または TEXTAREA で renderInContainer またはボタンが有効でないとき、テーマの変更はサポートされていません。"
            }
        },
        "validatorOptions": {
            "type": "object",
            "defaultValue": null,
            "description": {
                "en": "Sets gets options supported by igValidator.<br>    In order to enable validation and use defaults, an empty object can be used.<br>    Note: validation rules of igValidator, such as min, max, minLength, required are not supported, but similar properties of igEditor should be used.",
                "jp": "igValidator でサポートされるオプションを取得または設定します。<br>    検証を有効にして、デフォルトを使用するには、空のオブジェクトを使用します。<br>    注: min、max、minLength、required などの igValidator の検証規則はサポートされていませんが、igEditor の同様のプロパティを使用する必要があります。"
            },
            "schemaRef": "validator"
        },
        "value": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options. That can be string, number or Date depending on type of editor. If it is used on initialization and the type option is missing, then if 'value' is Number, then 'numeric' editor is created automatically and if 'value' is Date, then the 'date' editor is created.",
                "jp": "エディター内の値を取得または設定します。エディターのタイプおよび dataMode オプションに基づいたオプションを取得または設定する効果。エディターのタイプによって、それは文字列、数字または Date になり得ます。初期化およびタイプ オプションがない場合に使用され、'value' が Number の場合、エディターが自動的に作成されます。'value' が Date の場合、'date' エディターが作成されます。"
            },
            "arrayMemberType": "string,number"
        },
        "width": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets width of editor in pixels.<br>    Only positive values have effect. If that option is not set, then value of style.width of base html element will be used automatically. However, that value should be in the px units.",
                "jp": "エディターの幅 (ピクセル単位) を取得または設定します。<br>    正の値のみが効果を持ちます。このオプションが設定されていない場合は、base HTML 要素の style.width の値が自動的に使用されます。ただし、この値は px 単位である必要があります。"
            }
        }
    }
}
