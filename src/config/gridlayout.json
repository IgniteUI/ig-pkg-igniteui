{
  "overview": null,
  "name": "ui.igLayoutManager",
  "category": null,
  "visual": true,
  "events": {
    "internalResized": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after items are resized.<br>                Use ui.owner to get a reference to the layout manager performing resizing.",
		"jp": "Event fired after items are resized.<br>                Use ui.owner to get a reference to the layout manager performing resizing."
	}
    },
    "internalResizing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before items are resized.<br>                Use ui.owner to get a reference to the layout manager performing resizing.",
		"jp": "Event fired before items are resized.<br>                Use ui.owner to get a reference to the layout manager performing resizing."
	}
    },
    "itemRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after an item has been rendered in the container<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager.<br>    Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc. <br>    use ui.index to get a reference of the item's index, if the layout is flow or vertical",
		"jp": "Event fired after an item has been rendered in the container<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager.<br>    Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc. <br>    use ui.index to get a reference of the item's index, if the layout is flow or vertical"
	}
    },
    "itemRendering": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired before an item is rendered in the container<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager.<br>    Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc. <br>    use ui.index to get a reference of the item's index, if the layout is flow or vertical",
		"jp": "Event fired before an item is rendered in the container<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager.<br>    Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc. <br>    use ui.index to get a reference of the item's index, if the layout is flow or vertical"
	}
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
		"en": "Event fired after all items are rendered.<br>                Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager.",
		"jp": "Event fired after all items are rendered.<br>                Function takes arguments evt and ui.<br>    Use ui.owner to get reference to the igLayoutManager."
	}
    }
  },
  "properties": {
    "gridLayout": {
      "type": "object",
      "defaultValue": null,
      "description": {
		"en": "options specific to grid layout mode",
		"jp": "options specific to grid layout mode"
	},
      "schema": {
        "cols": {
          "type": "number",
          "defaultValue": 3,
          "description": {
		"en": "number of columns in the grid layout",
		"jp": "number of columns in the grid layout"
	},
          "required": true
        },
        "rows": {
          "type": "number",
          "defaultValue": 3,
          "description": {
		"en": "number of rows in the grid layout",
		"jp": "number of rows in the grid layout"
	},
          "required": true
        },
        "columnWidth": {
          "type": "number",
          "defaultValue": 300,
          "description": {
		"en": "width for a single item",
		"jp": "width for a single item"
	}
        },
        "columnHeight": {
          "type": "number",
          "defaultValue": 200,
          "description": {
		"en": "height for a single item",
		"jp": "height for a single item"
	}
        },
        "animationDuration": {
          "type": "number",
          "defaultValue": 500,
          "description": {
		"en": "",
		"jp": ""
	}
        },
        "marginLeft": {
          "type": "number",
          "defaultValue": 10,
          "description": {
		"en": "",
		"jp": ""
	}
        },
        "marginTop": {
          "type": "number",
          "defaultValue": 10,
          "description": {
		"en": "",
		"jp": ""
	}
        },
        "rearrangeItems": {
          "type": "bool",
          "defaultValue": true,
          "description": {
		"en": "rearrange items automatically on layout change",
		"jp": "rearrange items automatically on layout change"
	}
        }
      }
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "height of the layout container",
		"jp": "height of the layout container"
	}
    },
    "items": {
      "type": "array",
      "defaultValue": null,
      "description": {
		"en": "an array of item descriptions <br>    this assumes the container is empty, and every item<br>    is described by rowspan,colspan, etc. - otherwise values of<br>    1 are assumed<br>    items can have various properties some of which may not be applicable<br>    depending on the layoutMode.<br>    for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout",
		"jp": "an array of item descriptions <br>    this assumes the container is empty, and every item<br>    is described by rowspan,colspan, etc. - otherwise values of<br>    1 are assumed<br>    items can have various properties some of which may not be applicable<br>    depending on the layoutMode.<br>    for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout"
	},
      "schema": {
        "width": {
          "required": true,
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "item width",
		"jp": "item width"
	}
        },
        "height": {
          "required": true,
          "type": "string",
          "defaultValue": null,
          "description": {
		"en": "item height",
		"jp": "item height"
	}
        },
        "rowSpan": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "item row span - number of rows in a grid layout to span",
		"jp": "item row span - number of rows in a grid layout to span"
	}
        },
        "colSpan": {
          "type": "number",
          "defaultValue": 1,
          "description": {
		"en": "item column span - number of columns in a grid layout to span",
		"jp": "item column span - number of columns in a grid layout to span"
	}
        },
        "rowIndex": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "row position",
		"jp": "row position"
	}
        },
        "colIndex": {
          "type": "number",
          "defaultValue": 0,
          "description": {
		"en": "column position",
		"jp": "column position"
	}
        }
      }
    },
    "layoutMode": {
	  "hidden": true,
      "type": "string",
      "defaultValue": "grid",
      "description": {
		"en": " defines the layout type",
		"jp": " defines the layout type"
	}
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": {
		"en": "width of the layout container",
		"jp": "width of the layout container"
	}
    }
  }
}