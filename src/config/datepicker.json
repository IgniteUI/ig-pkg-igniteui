{
  "overview": null,
  "name": "ui.igDatePicker",
  "category": null,
  "visual": true,
  "events": {
    "blur": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised when input field of editor loses focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
    },
    "buttonClick": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised when button was clicked by mouse.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
    },
    "focus": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised when input field of editor gets focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
    },
    "hideDropDown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before drop-down list or calendar is opened.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain reference to the selected item in list or Date in calendar.<br>&nbsp;&nbsp;&nbsp;&nbsp;If ui.value is not null and not undefined, that it means that drop-down was closed due to selection from drop-down list or from calendar.<br>&nbsp;&nbsp;&nbsp;&nbsp;Otherwise, drop-down was closed due to lost focus or Esc key press.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel hide action and keep drop-down visible.<br>&nbsp;&nbsp;&nbsp;&nbsp;It is not recommended to cancel that action on blur event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: In case of calendar of datepicker, the evt or evt.originalEvent can be null. That happens if calendar was closed on blur or by Esc key.<br>&nbsp;&nbsp;&nbsp;&nbsp;Returning the false in this situation will not prevent closing drop-down calendar."
    },
    "invalidValue": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on lost focus when editor contains invalid value. That event is available for all editors besides default \"text\" type editor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain suggested value.<br>&nbsp;&nbsp;&nbsp;&nbsp;Set ui.value to change suggested value.<br>&nbsp;&nbsp;&nbsp;&nbsp;If type of editor is numeric, currency, percent, date or datepicker, then ui.text contains actual text entered by user.<br>&nbsp;&nbsp;&nbsp;&nbsp;If type of editor is numeric, currency or percent, then the ui.reason may have following flags: \"null\", \"format\" or \"limit\".<br>&nbsp;&nbsp;&nbsp;&nbsp;If type of editor is date or datepicker, then ui contains following additional members:<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.reason may have following flags: \"null\", \"dayOfMonth\", \"numberOfFields\", \"limit\" or \"invalid\";<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.year - year of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.month - month of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.day - day of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.hours - hours of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.minutes - minutes of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.seconds - seconds of entered date;<br>&nbsp;&nbsp;&nbsp;&nbsp;ui.milliseconds - milliseconds of entered date."
    },
    "keydown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on keydown event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode."
    },
    "keypress": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on keypress event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel key action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode.<br>&nbsp;&nbsp;&nbsp;&nbsp;Set ui.key to another character which will replace original entry."
    },
    "keyup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on keyup event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.key to obtain value of keyCode."
    },
    "listSelected": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after list item was selected.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.index to get new selected index.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.oldIndex to get old selected index.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to get reference to new selected item."
    },
    "listSelecting": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before list item is selected.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel select action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.index to get new selected index.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.oldIndex to get old selected index.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.item to get reference to new selected item."
    },
    "mousedown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on mousedown at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
    },
    "mouseleave": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
    },
    "mousemove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on mousemove at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
    },
    "mouseover": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on mouseover at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
    },
    "mouseup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on mouseup at any part of editor including drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.id and ui.elementType to obtain flag which represents html element under mouse."
    },
    "showDropDown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before drop-down list or calendar is opened.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel drop-down action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes argument evt.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser."
    },
    "spin": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised on spin event.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel spin.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.delta to obtain delta for increment or decrement.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain the \"value\" of editor before spin action."
    },
    "textChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after text in editor was changed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value."
    },
    "valueChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value."
    },
    "valueChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before value in editor was changed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel change.<br>&nbsp;&nbsp;&nbsp;&nbsp;It can be raised on lost focus or on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igEditor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.value to obtain new value and ui.oldValue to obtain old value."
    }
  },
  "properties": {
    "animationHideDuration": {
      "type": "number",
      "defaultValue": 200.0,
      "description": "Sets gets duration of animation in milliseconds when drop-down list is hidden. That option is not supported when \"type\" is set to \"datepicker\", because the jquery.ui.datepicker does not have similar feature. Default is 200. If value is less than 5, then animation is disabled."
    },
    "animationShowDuration": {
      "type": "number",
      "defaultValue": 200.0,
      "description": "Sets gets duration of animation in milliseconds when drop-down list or calendar is displayed. Default is 200. If value is less than 5, then animation is disabled."
    },
    "button": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets visibility of spin and drop-down button.",
      "valueOptions": [
        {
          "name": "dropdown",
          "type": "string",
          "description": " Button to open list is located on the right side of input-field (or left side if base html element has direction:rtl)"
        },
        {
          "name": "clear",
          "type": "string",
          "description": " Button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl)"
        },
        {
          "name": "spin",
          "type": "string",
          "description": " Spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl)"
        }
      ]
    },
    "centuryThreshold": {
      "type": "number",
      "defaultValue": 29.0,
      "description": "Sets gets year for auto detection of 20th and 21st centuries.<br>&nbsp;&nbsp;&nbsp;&nbsp;That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. \"yy\" or \"y\".<br>&nbsp;&nbsp;&nbsp;&nbsp;If user entered value larger than value of this option, then 20th century is used, otherwise the 21st."
    },
    "dataMode": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.",
      "valueOptions": [
        {
          "name": "date",
          "type": "string",
          "description": " The Date object is used. Note: that is used as default."
        },
        {
          "name": "editModeText",
          "type": "string",
          "description": " The String object is used and the \"text\" in edit mode (focus) format (pattern)."
        },
        {
          "name": "text",
          "type": "string",
          "description": " The String object is used and the \"text\" in display mode (no focus) format (pattern)."
        }
      ]
    },
    "dateDisplayFormat": {
      "type": "string",
      "defaultValue": null,
      "description": "Sets gets format of date while editor has no focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of that option can be set to a specific date pattern or to a flag defined by regional settings.<br>&nbsp;&nbsp;&nbsp;&nbsp;If value is not set, then the dateInputFormat is used automatically.<br>&nbsp;&nbsp;&nbsp;&nbsp;If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the \"escape\" character should be used in front of them. <br>&nbsp;&nbsp;&nbsp;&nbsp;List of predefined regional flags:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"date\": the datePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dateLong\": the dateLongPattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"time\": the timePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"timeLong\": the timeLongPattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dateTime\": the dateTimePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;List of explicit characters, which should have escape \\\\ character in front of them:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.<br>&nbsp;&nbsp;&nbsp;&nbsp;List of date-flags when explicit date pattern is used:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"y\": year field without century and without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"yy\": year field without century and with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"yyyy\": year field with leading zeros<br>&nbsp;&nbsp;&nbsp;&nbsp;\"M\": month field as digit without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MM\": month field as digit with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MMM\": month field as short month name<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MMMM\": month field as long month name<br>&nbsp;&nbsp;&nbsp;&nbsp;\"d\": day of month field without leading zero <br>&nbsp;&nbsp;&nbsp;&nbsp;\"dd\": day of month field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ddd\": day of the week as short name<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dddd\": day of the week as long name<br>&nbsp;&nbsp;&nbsp;&nbsp;\"t\": first character of string which represents AM/PM field <br>&nbsp;&nbsp;&nbsp;&nbsp;\"tt\": 2 characters of string which represents AM/PM field<br>&nbsp;&nbsp;&nbsp;&nbsp;\"h\": hours field in 12-hours format without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"hh\": hours field in 12-hours format with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"H\": hours field in 24-hours format without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"HH\": hours field in 24-hours format with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"m\": minutes field without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"mm\": minutes field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"s\": seconds field without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ss\": seconds field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"f\": milliseconds field in thousands<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ff\": milliseconds field in hundreds<br>&nbsp;&nbsp;&nbsp;&nbsp;\"fff\": milliseconds field"
    },
    "dateInputFormat": {
      "type": "string",
      "defaultValue": null,
      "description": "Sets gets format of date while editor has focus.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of that option can be set to explicit date pattern or to a flag defined by regional settings.<br>&nbsp;&nbsp;&nbsp;&nbsp;If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the \"escape\" character should be used in front of them.<br>&nbsp;&nbsp;&nbsp;&nbsp;If option is not set, then the \"date\" is used automatically.<br>&nbsp;&nbsp;&nbsp;&nbsp;List of predefined regional flags:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"date\": the datePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dateLong\": the dateLongPattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"time\": the timePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"timeLong\": the timeLongPattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dateTime\": the dateTimePattern member of regional option is used<br>&nbsp;&nbsp;&nbsp;&nbsp;List of explicit characters, which should have escape \\\\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.<br>&nbsp;&nbsp;&nbsp;&nbsp;List of date-flags when explicit date pattern is used:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"y\": year field without century and without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"yy\": year field without century and with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"yyyy\": year field with leading zeros<br>&nbsp;&nbsp;&nbsp;&nbsp;\"M\": month field as digit without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MM\": month field as digit with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MMM\": month field as short month name. Note: in focused state the MM is used.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"MMMM\": month field as long month name. Note: in focused state the MM is used.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"d\": day of month field without leading zero <br>&nbsp;&nbsp;&nbsp;&nbsp;\"dd\": day of month field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ddd\": day of the week as short name. Note: in focused state that field is skipped.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"dddd\": day of the week as long name. Note: in focused state that field is skipped.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"t\": first character of string which represents AM/PM field <br>&nbsp;&nbsp;&nbsp;&nbsp;\"tt\": 2 characters of string which represents AM/PM field<br>&nbsp;&nbsp;&nbsp;&nbsp;\"h\": hours field in 12-hours format without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"hh\": hours field in 12-hours format with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"H\": hours field in 24-hours format without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"HH\": hours field in 24-hours format with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"m\": minutes field without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"mm\": minutes field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"s\": seconds field without leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ss\": seconds field with leading zero<br>&nbsp;&nbsp;&nbsp;&nbsp;\"f\": milliseconds field in thousands<br>&nbsp;&nbsp;&nbsp;&nbsp;\"ff\": milliseconds field in hundreds<br>&nbsp;&nbsp;&nbsp;&nbsp;\"fff\": milliseconds field"
    },
    "display": {
      "type": "string",
      "defaultValue": "inline-block",
      "description": "Sets gets style.display for outer html element.<br>&nbsp;&nbsp;&nbsp;&nbsp;The value of \"\" will disable changing style.display.<br>&nbsp;&nbsp;&nbsp;&nbsp;If the base html element is not INPUT, TEXTAREA, SPAN or DIV, then it is recommended to set this option to an empty string,<br>&nbsp;&nbsp;&nbsp;&nbsp;because, some browsers may fail to handle display other than default value of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;For example, if base element for editor is TD, then behavior in Chrome can be problematic."
    },
    "dropDownOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets ability to override the \"readOnly\" option and allow showing the drop-down list and changing the value in the editor from a list. Value false does not allow drop-down when \"readOnly\" is true."
    },
    "dropDownTriggers": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets list of actions which trigger display of drop-down list or calendar.",
      "valueOptions": [
        {
          "name": "arrow",
          "type": "string",
          "description": " Down-arrow shows drop-down and up-arrow hides drop-down;"
        },
        {
          "name": "button",
          "type": "string",
          "description": " Shows and hides drop-down;"
        },
        {
          "name": "focus",
          "type": "string",
          "description": " Shows drop-down on focus."
        },
        {
          "name": "A-Z",
          "type": "string",
          "description": " Any upper case characters show drop-down."
        }
      ]
    },
    "enableUTCDates": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets formatting of the dates as UTC.<br>&nbsp;&nbsp;&nbsp;&nbsp;That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;That option affects only functionality of get/set value method and the Date-value, which was set on initialization.<br>&nbsp;&nbsp;&nbsp;&nbsp;When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.<br>&nbsp;&nbsp;&nbsp;&nbsp;When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.<br>&nbsp;&nbsp;&nbsp;&nbsp;When that option is modified after initialization, then displayed text and internal Date-value are not affected.<br>&nbsp;&nbsp;&nbsp;&nbsp;It is not recommended to change that option without resetting Date-value."
    },
    "focusOnDropDownOpen": {
      "type": "bool",
      "defaultValue": null,
      "description": "Sets gets ability to automatically focus the input, when a calendar is opened.<br>&nbsp;&nbsp;&nbsp;&nbsp;Possible values:<br>&nbsp;&nbsp;&nbsp;&nbsp;true - keep focus in INPUT field (touch devices might pop-up keyboard when calendar is opened)<br>&nbsp;&nbsp;&nbsp;&nbsp;false - prevent focus in INPUT field when calendar is opened (touch devices should not show keyboard)<br>&nbsp;&nbsp;&nbsp;&nbsp;null - attempt to detect touch/mobile device and prevent focus in INPUT field when calendar is opened"
    },
    "focusOnSpin": {
      "type": "bool",
      "defaultValue": false,
      "description": "If that option is disabled and the editor is not focused, then a mouse click on the spin button will keep the text in the editor in display (not focus) format and perform spin actions."
    },
    "height": {
      "type": "number",
      "defaultValue": null,
      "description": "Sets gets height of editor in pixels.<br>&nbsp;&nbsp;&nbsp;&nbsp;Only positive values have effect.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is not set, then value of style.height of base html element will be used automatically. However, that value should be in the px units."
    },
    "hideEnterKey": {
      "type": "bool",
      "defaultValue": true,
      "description": "Sets gets ability to hide the Enter key from browser."
    },
    "hideMaskOnFocus": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets ability to hide mask in focus state.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of true allows showing or hiding all input mask with prompt characters regardless if available mask positions are filled or not.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of true will show only part of mask located on the left side from caret when available mask positions on the right side from caret are empty."
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets name of (hidden) INPUT element, which value will be set to current value of editor on any change."
    },
    "maxValue": {
      "type": "date",
      "defaultValue": null,
      "description": "Sets gets the maximum value which can be entered in editor by user."
    },
    "minNumberOfDateFields": {
      "type": "number",
      "defaultValue": 3.0,
      "description": "Sets gets the minimum number of date fields, which makes entered date-string valid.<br>&nbsp;&nbsp;&nbsp;&nbsp;All missing fields are automatically filled up from the previous valid date or with zeros or with the values from the today date.<br>&nbsp;&nbsp;&nbsp;&nbsp;For example, if \"dateInputPattern\" is set to \"yyyy/MM/dd hh:mm\" and user entered only the first 3 fields (year, month, day), then values for hours and minutes are filled with zeros."
    },
    "minValue": {
      "type": "date",
      "defaultValue": null,
      "description": "Sets gets the minimum value which can be entered in editor by user."
    },
    "nullable": {
      "type": "bool",
      "defaultValue": true,
      "description": "Sets gets ability to prevent null value.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is disabled, and editor has no value, then value is set to today date (or minValue/maxValue)."
    },
    "nullText": {
      "type": "string",
      "defaultValue": null,
      "description": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string."
    },
    "promptChar": {
      "type": "string",
      "defaultValue": "_",
      "description": "Sets gets character which is used as prompt in edit mode for available entry position. Default is \"_\""
    },
    "readOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": "Set gets ability to modify editor from keyboard (false) or disables keyboard (true).<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;If the \"spinOnReadOnly\" is enabled, then value will be modified on spin regardless of the \"readOnly\".<br>&nbsp;&nbsp;&nbsp;&nbsp;If the \"listItems\" has items and \"dropDownTriggers\" is defined, then value will be modified from drop-down list regardless of the \"readOnly\"."
    },
    "reduceDayOfInvalidDate": {
      "type": "bool",
      "defaultValue": true,
      "description": "Sets gets ability to decrease day of month.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of true allows decreasing day of month, when editor loses focus and user entered day of month which is larger the maximum for that particular month.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of false will automatically increment month and decrease day of month.<br>&nbsp;&nbsp;&nbsp;&nbsp;Examples.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is true and user entered \"09/31/2010\", then on lost focus that string will be converted to \"09/30/2010\".<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is false, then in similar situation the string will be converted to \"10/01/2010\"."
    },
    "renderInContainer": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets option to wrap input field into SPAN..<br>&nbsp;&nbsp;&nbsp;&nbsp;That option can be set only on initialization and it is available only when base element is INPUT or TEXTAREA.<br>&nbsp;&nbsp;&nbsp;&nbsp;If drop-down button or spin-buttons are enabled or the theme is set, then that option has no effect.<br>&nbsp;&nbsp;&nbsp;&nbsp;The reason for that property is to allow vertical alignment of several igEditor controls when they are located in html inline and some of them have enabled buttons.<br>&nbsp;&nbsp;&nbsp;&nbsp;If all editors are created within SPAN wrapper, then they will appear on the same line. Otherwise, editors in SPANs will be shifted 3-6 pixels above INPUT editors."
    },
    "required": {
      "type": "bool",
      "defaultValue": false,
      "description": "Set gets validation for empty value in editor."
    },
    "selectionOnFocus": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets behavior of selection/caret in input-field when editor gets focus.",
      "valueOptions": [
        {
          "name": "select",
          "type": "string",
          "description": " Select all text"
        },
        {
          "name": "start",
          "type": "string",
          "description": " Set caret at the beginning of text"
        },
        {
          "name": "end",
          "type": "string",
          "description": " Set caret at the end of text"
        },
        {
          "name": "default",
          "type": "string",
          "description": " Use default behavior of browser (in case of mask, numeric and date editors it may be unreliable)"
        }
      ]
    },
    "spin1Field": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets ability to modify only 1 date field on spin events.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value true modifies only value of one field."
    },
    "spinDelta": {
      "type": "number",
      "defaultValue": 1.0,
      "description": "Sets gets delta-value which is used to increment or decrement the value of field where caret is located is modified."
    },
    "spinOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets ability to override the \"readOnly\" option and allow changes \"value\" of editor on spin events. Value false does not allow spin when \"readOnly\" is true."
    },
    "spinWrapAround": {
      "type": "bool",
      "defaultValue": false,
      "description": "Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.<br>&nbsp;&nbsp;&nbsp;&nbsp;In case of listOfItems, the first and the last items in list are used as minimum and maximum values."
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": "Gets sets value in tabIndex for editor."
    },
    "textAlign": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
      "valueOptions": [
		{
          "name": "left",
          "type": "string",
          "description": "Aligns the text on left"
        },
        {
          "name": "right",
          "type": "string",
          "description": "Aligns the text on right"
        },
        {
          "name": "center",
          "type": "string",
          "description": "Aligns the text on center"
        }
      ]
    },
    "theme": {
      "type": "string",
      "defaultValue": null,
      "description": "Sets gets selector for css classes used by editor.<br>&nbsp;&nbsp;&nbsp;&nbsp;That option allows replacing all default css styles of editor by custom values.<br>&nbsp;&nbsp;&nbsp;&nbsp;Application should provide css classes for all members defined in the css options with \"theme\" selector.<br>&nbsp;&nbsp;&nbsp;&nbsp;For example, if that property is set to \"mytheme\", then application should provide following css classes:<br>&nbsp;&nbsp;&nbsp;&nbsp;.mytheme .ui-igedit-field{...};<br>&nbsp;&nbsp;&nbsp;&nbsp;.mytheme .ui-igedit-focus{...};<br>&nbsp;&nbsp;&nbsp;&nbsp;etc.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: changing theme is not supported when base element is INPUT or TEXTAREA and renderInContainer or button are not enabled."
    },
    "useLastGoodDate": {
      "type": "bool",
      "defaultValue": false,
      "description": "Set gets ability to use last valid date when user entered invalid value.<br>&nbsp;&nbsp;&nbsp;&nbsp;Value of true allows automatically use last valid date, when editor loses focus and user failed to enter a valid date.<br>&nbsp;&nbsp;&nbsp;&nbsp;In case of value false, the entered date is considered invalid and null is used."
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": "Sets gets options supported by igValidator.<br>&nbsp;&nbsp;&nbsp;&nbsp;In order to enable validation and use defaults, an empty object can be used.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: validation rules of igValidator, such as min, max, minLength, required are not supported, but similar properties of igEditor should be used.",
	  "schemaRef": "validator"
    },
    "value": {
      "type": "date",
      "defaultValue": null,
      "description": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options. That can be string, number or Date depending on type of editor. If it is used on initialization and the type option is missing, then if 'value' is Number, then 'numeric' editor is created automatically and if 'value' is Date, then the 'date' editor is created.",
	  "arrayMemberType" : "string,date"
    },
    "width": {
      "type": "number",
      "defaultValue": null,
      "description": "Sets gets width of editor in pixels.<br>&nbsp;&nbsp;&nbsp;&nbsp;Only positive values have effect. If that option is not set, then value of style.width of base html element will be used automatically. However, that value should be in the px units."
    },
    "yearShift": {
      "type": "number",
      "defaultValue": 0.0,
      "description": "Sets gets difference between year in Gregorian calendar and displayed year."
    }
  }
}