{
  "overview": null,
  "name": "ui.igCombo",
  "category": null,
  "visual": true,
  "events": {
    "dataBinding": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before data binding is performed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to igCombo performing the databinding.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.dataSource to get a reference to the $.ig.DataSource combo is to be databound to."
    },
    "dataBound": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after data binding is complete.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo performing the data binding.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.success to see if the databinding was performed correctly.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.errorMessage to get the error message if the databinding failed."
    },
    "dropDownClosed": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after drop-down list was closed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to jquery DOM element which represents drop down list container."
    },
    "dropDownClosing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before drop-down list is closed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel hide action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to jquery DOM element which represents drop down list container."
    },
    "dropDownOpened": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after drop-down list was opened.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to jquery DOM element which represents drop down list container."
    },
    "dropDownOpening": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before drop-down list is opened.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel drop-down action.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.list to obtain reference to jquery DOM element which represents drop down list container."
    },
    "filtered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after filtering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use evt.originalEvent to obtain reference to event of browser. That can be null.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.items to obtain reference to the list of filtered items. Each item has data and element properties."
    },
    "filtering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before data filtering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.expression to obtain reference to array which contains expressions supported by $.ig.DataSource.<br>&nbsp;&nbsp;&nbsp;&nbsp;Each expression-item contains following members: fieldName (textKey), cond (filteringCondition), expr (value/string to filter)."
    },
    "itemsRendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after rendering of the combo items completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the combo performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.items to get a reference to the rendered items. Each item has data and element properties."
    },
    "itemsRendering": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before rendering of the combo items is performed.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the combo performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to."
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after rendering of the combo completes.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to get a reference to the combo performing rendering.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.element to get a reference to the main/top combo element."
    },
    "selectionChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised after selection change.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.items to obtain reference to array of new selected items. That can be null.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.oldItems to obtain reference to array of old selected items. That can be null."
    },
    "selectionChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": "Event which is raised before selection change.<br>&nbsp;&nbsp;&nbsp;&nbsp;Return false in order to cancel change.<br>&nbsp;&nbsp;&nbsp;&nbsp;Function takes arguments evt and ui.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.owner to obtain reference to igCombo.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.<br>&nbsp;&nbsp;&nbsp;&nbsp;Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null."
    }
  },
  "properties": {
    "animationHideDuration": {
      "type": "number",
      "defaultValue": 100.0,
      "description": "Gets sets hide drop-down list animation duration in milliseconds.",
      "valueOptions": null
    },
    "animationShowDuration": {
      "type": "number",
      "defaultValue": 100.0,
      "description": "Gets sets show drop-down list animation duration in milliseconds.",
      "valueOptions": null
    },
    "autoSelectFirstMatch": {
      "type": "bool",
      "defaultValue": true,
      "description": "Gets sets whether the first matching item should be auto selected when typing in input. When multi selection is enabled this option will instead put the active item on the matching element.",
      "valueOptions": null
    },
    "caseSensitive": {
      "type": "bool",
      "defaultValue": false,
      "description": "Gets sets whether filtering and auto selection should be case sensitive",
      "valueOptions": null
    },
    "clearButtonTitle": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets title for html element which represend clear button. That is an override for the $.ig.Combo.locale.clearButtonTitle.",
      "valueOptions": null
    },
    "closeDropDownOnBlur": {
      "type": "bool",
      "defaultValue": true,
      "description": "Gets sets ability to close drop-down list when control loses focus.",
      "valueOptions": null
    },
    "closeDropDownOnSelect": {
      "type": "bool",
      "defaultValue": true,
      "description": "Gets sets ability to close drop down list when single item in the list is selected with mouse click or enter press. The default value when multi selection is enabled will be false. This option will not close the drop down when multiple selection is enabled and additive selection is performed.",
      "valueOptions": null
    },
    "dataSource": {
      "type": "object",
      "defaultValue": null,
      "description": "Gets sets a valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: if it is set to string and \"dataSourceType\" option is not set, then $.ig.JSONDataSource is used.",
      "valueOptions": null
    },
    "dataSourceType": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets data source type (such as \"json\", \"xml\", etc). Please refer to the documentation of $.ig.DataSource and its type property",
      "valueOptions": null
    },
    "dataSourceUrl": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets url which is used for sending JSON on request for remote filtering (MVC for example). That option is required when load on demand is enabled and its type is remote.",
      "valueOptions": null
    },
    "delayFilteringOnKeyUp": {
      "type": "number",
      "defaultValue": 250.0,
      "description": "Specifies the delay duration before triggering next filtering operation. Useful to boost performance by lowering the filtering operations count.",
      "valueOptions": null
    },
    "dropDownAttachedToBody": {
      "type": "bool",
      "defaultValue": true,
      "description": "Gets sets ability to append container of drop-down list to the body or to the parent of combo.",
      "valueOptions": null
    },
    "dropDownButtonTitle": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets title for html element which represend drop-down button. That is an override for the $.ig.Combo.locale.dropDownButtonTitle.",
      "valueOptions": null
    },
    "dropDownOnFocus": {
      "type": "bool",
      "defaultValue": false,
      "description": "Gets sets ability to show drop down list when combo gets focus. This option has effect only if mode is 'editable'",
      "valueOptions": null
    },
    "dropDownWidth": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets width of drop down list in pixels",
      "valueOptions": []
    },
    "enableClearButton": {
      "type": "bool",
      "defaultValue": true,
      "description": "Specifies whether the clear button should be rendered. When mode is drop down with single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.",
      "valueOptions": null
    },
    "filterExprUrlKey": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets url key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData",
      "valueOptions": null
    },
    "filteringCondition": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets condition used for filtering.",
      "valueOptions": []
    },
    "filteringLogic": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets filtering logic.",
      "valueOptions": []
    },
    "filteringType": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets type of filtering.",
      "valueOptions": [
        {
          "name": "remote",
          "type": "string",
          "description": " filtering is performed by server"
        },
        {
          "name": "local",
          "type": "string",
          "description": " filtering is performed by $.ig.DataSource"
        },
        {
          "name": "none",
          "type": "string",
          "description": " filtering is disabled"
        }
      ]
    },
    "format": {
      "type": "string",
      "defaultValue": "auto",
      "description": "Gets or sets the format string that is used to format the text display values in the combo. <br>&nbsp;&nbsp;&nbsp;&nbsp;Valid options are:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"auto\" (default) - uses automatic formatting for Date and number objects.<br>&nbsp;&nbsp;&nbsp;&nbsp;\"none\", \"\", or null - will disable formatting<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Custom values can be something like \"currency\", \"percent\", \"dateLong\", \"time\", \"MMM-dd-yyyy H:mm tt\", etc.<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Custom format strings should match the data type in \"textKey\" column.",
      "valueOptions": null
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.",
      "valueOptions": []
    },
    "highlightMatchesMode": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets condition used for highlighting of matching parts in items of drop-down list.",
      "valueOptions": [
        {
          "name": "multi",
          "type": "string",
          "description": " multiple matches in a single item are rendered"
        },
        {
          "name": "contains",
          "type": "string",
          "description": " match at any position in item is rendered"
        },
        {
          "name": "startsWith",
          "type": "string",
          "description": " only match which starts from the beginning of text is rendered"
        },
        {
          "name": "full",
          "type": "string",
          "description": " only fully matched items are rendered"
        },
        {
          "name": "null",
          "type": "object",
          "description": " matches are not rendered"
        }
      ]
    },
    "initialSelectedItems": {
      "type": "array",
      "defaultValue": null,
      "description": "Gets sets list of items to be selected when combo is initialized. It should contain array of objects with index or value property, then on initialization matching items will be selected. When mode is drop down with single selection, readonly, readonlylist or combo is initialized on select element the first item will be selected if this option is not set.<br>&nbsp;&nbsp;&nbsp;&nbsp;Note: Only items loaded on initialization can be selected. When load-on-demand attempt to select not loaded item will fail.",
      "valueOptions": null
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets name of the hidden INPUT element, which is used when submiting data. Its value will be set to values of selected items valueKeys separated by \",\" character on any change in igCombo.",
      "valueOptions": null
    },
    "itemTemplate": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets template used to render an item in list. Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;1. The jquery.tmpl.js of Microsoft is used and application should provide supported syntax for content.<br>&nbsp;&nbsp;&nbsp;&nbsp;2. Template is rendered inside of LI html element.<br>&nbsp;&nbsp;&nbsp;&nbsp;So, application should consider restriction for layout: do not use \"block\" html elements and in case of absolutely positioned elements,<br>&nbsp;&nbsp;&nbsp;&nbsp;they should not overlap with checkbox icons.",
      "valueOptions": null
    },
    "loadOnDemandSettings": {
      "type": "object",
      "defaultValue": null,
      "description": "Gets sets container of variables which define load on demand functionality.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes:<br>&nbsp;&nbsp;&nbsp;&nbsp;That option has effect only when data is loaded remotely using dataSourceUrl.<br>&nbsp;&nbsp;&nbsp;&nbsp;Selection is supported only for already loaded items.",
      "valueOptions": null
    },
    "mode": {
      "type": "string",
      "defaultValue": null,
      "description": " Sets gets functionality mode.",
      "valueOptions": [
        {
          "name": "editable",
          "type": "string",
          "description": " Allows to modify value by edit field and drop-down list."
        },
        {
          "name": "dropdown",
          "type": "string",
          "description": " Allows to modify value by drop-down list only."
        },
        {
          "name": "readonlylist",
          "type": "string",
          "description": " Allows to open list, but does not allow any changes in field or selection in drop-down list. If selection is not set, then first item in dataSource is automatically selected."
        },
        {
          "name": "readonly",
          "type": "string",
          "description": " Does not allow to open list or change value in field. If selection is not set, then first item in dataSource is automatically selected."
        }
      ]
    },
    "multiSelection": {
      "type": "object",
      "defaultValue": null,
      "description": "Gets sets object specifying multi selection feature options. The object has following properties enabled, addWithKeyModifier, showCheckboxes and itemSeparator. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.",
      "valueOptions": null
    },
    "noMatchFoundText": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets text of list item for condition when \"filteringType\" option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.",
      "valueOptions": null
    },
    "placeHolder": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.",
      "valueOptions": null
    },
    "preventSubmitOnEnter": {
      "type": "bool",
      "defaultValue": true,
      "description": "Gets sets ability to prevent form submitting on enter key press",
      "valueOptions": null
    },
    "requestType": {
      "type": "string",
      "defaultValue": "GET",
      "description": "specifies the HTTP verb to be used to issue the request",
      "valueOptions": null
    },
    "responseContentType": {
      "type": "string",
      "defaultValue": null,
      "description": "content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType",
      "valueOptions": null
    },
    "responseDataKey": {
      "type": "string",
      "defaultValue": null,
      "description": "see $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.",
      "valueOptions": null
    },
    "responseDataType": {
      "type": "string",
      "defaultValue": null,
      "description": " Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType ",
      "valueOptions": [
        {
          "name": "json",
          "type": "string",
          "description": ""
        },
        {
          "name": "xml",
          "type": "string",
          "description": ""
        },
        {
          "name": "html",
          "type": "string",
          "description": ""
        },
        {
          "name": "script",
          "type": "string",
          "description": ""
        },
        {
          "name": "jsonp",
          "type": "string",
          "description": ""
        },
        {
          "name": "text",
          "type": "string",
          "description": ""
        }
      ]
    },
    "responseTotalRecCountKey": {
      "type": "string",
      "defaultValue": null,
      "description": "see $.ig.DataSource. property in the response specifying the total number of records on the server.",
      "valueOptions": null
    },
    "selectItemBySpaceKey": {
      "type": "bool",
      "defaultValue": false,
      "description": "Gets sets ability to select items by space button press",
      "valueOptions": null
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": "Gets sets tabIndex for field of combo.",
      "valueOptions": null
    },
    "textKey": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets name of column which contains the displayed text. If it is missing, then \"valueKey\" option will be used.",
      "valueOptions": null
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": "Gets or sets object which contains options supported by igValidator.<br>&nbsp;&nbsp;&nbsp;&nbsp;Notes: in order for validator to work, application should ensure that igValidator is loaded (ig.ui.validator.js/css files).<br>&nbsp;&nbsp;&nbsp;&nbsp;Example:<br>&nbsp;&nbsp;&nbsp;&nbsp;$('#combo1').igCombo({ validatorOptions: { required: true } });",
      "valueOptions": null
    },
    "valueKey": {
      "type": "string",
      "defaultValue": null,
      "description": "Gets sets name of column which contains the \"value\". If it is missing, then name of first column will be used.",
      "valueOptions": null
    },
    "virtualization": {
      "type": "bool",
      "defaultValue": false,
      "description": "Gets sets ability to use virtual rendering for drop-down list.<br>&nbsp;&nbsp;&nbsp;&nbsp;If that option is enabled, then only visible items are created and top edge of first visible item in list is aligned to the top edge of list.",
      "valueOptions": null
    },
    "visibleItemsCount": {
      "type": "number",
      "defaultValue": 15.0,
      "description": "Gets sets how many items should be shown at once. <br>&nbsp;&nbsp;&nbsp;   Notes:<br>&nbsp;&nbsp;&nbsp;   That options is used for virtualization in order to render initial list items.",
      "valueOptions": null
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": " Gets sets width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.",
      "valueOptions": []
    }
  }
}