{
    "overview": null,
    "name": "ui.igDialog",
    "category": null,
    "visual": true,
    "events": {
        "stateChanged": {
            "cancellable": false,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised after state of dialog was changed.<br>    Function takes arguments \"evt\" and \"ui\".<br>    Use evt to obtain browser event. That parameter can be null if state was modified from codes.<br>    Use ui.owner to obtain reference to igDialog.<br>    Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then \"button\" is undefined.<br>    Use ui.oldState to obtain old state of dialog, which can be one of following: \"opened\", \"minimized\", \"maximized\", \"closed\".<br>    Use ui.oldPinned to obtain boolean value of old pin state of dialog.<br>    Use ui.action to obtain name of action. That can be one of the following:<br>    \"open\" - dialog was opened. Note: event is raised before possible \"openAnimation\" started.<br>    \"close\" - dialog was closed. Note: event is raised before possible \"closeAnimation\" started.<br>    \"minimize\" - dialog was minimized<br>    \"maximize\" - dialog was maximized<br>    \"restore\" - dialog was restored from minimized or maximized state<br>    \"pin\" - dialog was pinned<br>    \"unpin\" - dialog was unpinned",
                "jp": "ダイアログの状態が変更された後に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt を使用してブラウザ イベントを取得します。状態がコードから修正された場合、このパラメーターは null になり得ます。<br>    ui.owner を使用して、igDialog への参照を取得します。<br>    ui.button を使用して、イベントを発生させたボタン名を取得します。注: 状態がコードから修正された場合、「button」に下線が引かれます。<br>    ui.oldState を使用して、ダイアログの古い状態を取得します。これは次のいずれかになり得ます: 「opened」、「minimized」、「maximized」、「closed」。<br>    ui.oldPinned を使用して、ダイアログの古い固定状態のブール値を取得します。<br>    ui.action を使用して、アクション名を取得します。これは以下の内のいずれかになり得ます。<br>    「open」- ダイアログが開きました。注:  考えられる「openAnimation」の開始前にイベントが発生します。<br>    「close」 - ダイアログが閉じました。注:  考えられる「closeAnimation」の開始前にイベントが発生します。<br>    「minimize」- ダイアログが最小化されました<br>    「maximize」- ダイアログが最大化されました<br>    「restore」 - 最小化または最大化の状態からダイアログが復元されました<br>    「pin」- ダイアログが固定されました<br>    「unpin」 - ダイアログの固定が解除されました。"
            }
        },
        "stateChanging": {
            "cancellable": true,
            "args": [
                {
                    "name": "evt",
                    "type": "Event",
                    "optional": false
                },
                {
                    "name": "ui",
                    "type": "Object",
                    "optional": false
                }
            ],
            "description": {
                "en": "Event which is raised before state of dialog was changed.<br>    Return false in order to cancel action.<br>    Function takes arguments \"evt\" and \"ui\".<br>    Use evt to obtain browser event. That parameter can be null if state was modified from codes.<br>    Use ui.owner to obtain reference to igDialog.<br>    Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then \"button\" is undefined.<br>    Use ui.oldState to obtain old state of dialog, which can be one of following: \"opened\", \"minimized\", \"maximized\", \"closed\".<br>    Use ui.oldPinned to obtain boolean value of old pin state of dialog.<br>    Use ui.action to obtain name of action. That can be one of the following:<br>    \"open\" - request to open dialog<br>    \"close\" - request to close dialog<br>    \"minimize\" - request to minimize dialog<br>    \"maximize\" - request to maximize dialog<br>    \"restore\" - request to restore dialog from minimized or maximized state<br>    \"pin\" - request to pin dialog<br>    \"unpin\" - request to unpin dialog",
                "jp": "ダイアログの状態が変更される前に発生するイベント。<br>    アクションをキャンセルするには、false を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt を使用してブラウザ イベントを取得します。状態がコードから修正された場合、このパラメーターは null になり得ます。<br>    ui.owner を使用して、igDialog への参照を取得します。<br>    ui.button を使用して、イベントを発生させたボタン名を取得します。注: 状態がコードから修正された場合、「button」に下線が引かれます。<br>    ui.oldState を使用して、ダイアログの古い状態を取得します。これは次のいずれかになり得ます: 「opened」、「minimized」、「maximized」、「closed」。<br>    ui.oldPinned を使用して、ダイアログの古い固定状態のブール値を取得します。<br>    ui.action を使用して、アクション名を取得します。これは以下の内のいずれかになり得ます。<br>    「open」 - ダイアログを開くリクエスト<br>    「close」 - ダイアログを閉じるリクエスト<br>    「minimize」 - ダイアログを最小化するリクエスト<br>    「maximize」 - ダイアログを最大化するリクエスト<br>    「restore」 - 最小化または最大化の状態からダイアログを復元するリクエスト<br>    「pin」 - ダイアログを固定するリクエスト<br>    「unpin」 - ダイアログの固定を解除するリクエスト"
            }
        }
    },
    "properties": {
        "draggable": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets ability to drag dialog by end user.",
                "jp": "エンド ユーザーによるダイアログのドラッグ機能を設定、取得します。"
            }
        },
        "enableDblclick": {
            "type": "string",
            "defaultValue": "auto",
            "description": {
                "en": " Sets gets processing dblclick on dialog-header.",
                "jp": " dialog-header で dblclick の処理を取得または設定します。"
            },
            "valueOptions": [
                {
                    "name": "auto",
                    "type": "string",
                    "description": {
                        "en": "If the dialog was minimized, then on double click its state will be set to normal. If option is set to 'auto' and showMaximizeButton is enabled then dialog will be maximized when it was in normal state, and dialog-state will be set to normal if it was maximized.",
                        "jp": "ダイアログが最小化された場合、ダブルクリックで状態を標準に設定します。オプションが 'auto' に設定し、showMaximizeButton が有効な場合、ダイアログは標準状態から最大化され、最大状態から標準状態に設定します。"
                    }
                },
                {
                    "name": "true",
                    "type": "string",
                    "description": {
                        "en": "If dialog was minimized, then its state will be set to normal. The dialog will be maximized when it was in normal state, and dialog-state will be set to normal if it was maximized.",
                        "jp": "ダイアログが最小化された場合、状態を標準に設定します。ダイアログは標準状態から最大化され、最大状態から標準状態に設定します。"
                    }
                },
                {
                    "name": "false",
                    "type": "string",
                    "description": {
                        "en": "Dialog will not respond on double click",
                        "jp": "ダイアログはダブルクリックで操作しません。"
                    }
                }
            ]
        },
        "footerText": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets text which appears in footer of dialog.",
                "jp": "ダイアログのフッターに現れるテキストを設定、取得します。"
            }
        },
        "headerText": {
            "type": "string",
            "defaultValue": null,
            "description": {
                "en": "Sets gets text which appears in header of dialog.",
                "jp": "ダイアログのヘッダーに現れるテキストを設定、取得します。"
            }
        },
        "height": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets initial height of dialog in pixels for normal state.<br>    Besides numeric values, following units are supported: \"px\", \"em\" and \"%\".<br>    In case of \"%\", the size of browser window is used and it has effect only on open action.",
                "jp": "通常の状態でのダイアログの初期高さ (ピクセル単位) を設定、取得します。<br>    数値以外に、次の単位がサポートされています: 「px」、「em」および「%」。<br>    「%」の場合、ブラウザのウィンドウ サイズが使用され、これは開くアクションのみに有効です。"
            }
        },
        "maxHeight": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets maximal height of dialog in normal state. Note: that option has effect only while resizing dialog by end user.",
                "jp": "通常の状態でのダイアログの最大高さを設定、取得します。注: このオプションは、エンド ユーザーがダイアログのサイズを変更する時にのみ有効です。"
            }
        },
        "maxWidth": {
            "type": "number",
            "defaultValue": null,
            "description": {
                "en": "Sets gets maximal width of dialog in normal state. Note: that option has effect only while resizing dialog by end user.",
                "jp": "通常の状態でのダイアログの最大幅を設定、取得します。注: このオプションは、エンド ユーザーがダイアログのサイズを変更する時にのみ有効です。"
            }
        },
        "minHeight": {
            "type": "number",
            "defaultValue": 100.0,
            "description": {
                "en": "Sets gets minimal height of dialog in normal state.",
                "jp": "通常の状態でのダイアログの最小高さを設定、取得します。"
            }
        },
        "minWidth": {
            "type": "number",
            "defaultValue": 150.0,
            "description": {
                "en": "Sets gets minimal width of dialog in normal state.",
                "jp": "通常の状態でのダイアログの最小幅を設定、取得します。"
            }
        },
        "modal": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets modal state of dialog.<br>    If there are more than 1 modal igDialog, then last opened dialog wins and becomes on the top.<br>    Note: modal functionality is not supported when dialog is minimized or pinned, because that will trigger misbehavior.",
                "jp": "ダイアログのモード状態を設定、取得します。<br>    2 つ以上のモーダル igDialog がある場合、最後に開いたダイアログは前景に表示されます。<br>    注: モーダル機能は、ダイアログが最小化またはピン固定された場合に正しく動作しないため、サポートされません。"
            }
        },
        "pinned": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets pinned state of dialog.<br>    When dialog is pinned, then the html element of dialog is moved to the original container where target element was located and position:absolute is removed.<br>    Pinned dialog does not support modal state, maximized state and it can not be moved.<br>    Notes:<br>    1. If parent element of original target-element is invisible, then pinned dialog becomes invisible as well.<br>    2. Pinned state is not supported for modal dialog.",
                "jp": "ダイアログの固定状態を設定、取得します。<br>    ダイアログが固定される場合、ダイアログの HTML 要素は、ターゲット要素が配置される元のコンテナーに移動され、position:absolute は削除されます。<br>    固定されたダイアログはモーダル状態および最大化された状態をサポートせず、またこれは移動できません。<br>    注:<br>    1.元の target-element の親要素が非表示の場合、固定ダイアログも非表示になります。<br>    2.固定状態はモーダル ダイアログでサポートされません。"
            }
        },
        "pinOnMinimized": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets ability to automatically pin dialog when dialog was minimized.",
                "jp": "ダイアログが最小化された時に、ダイアログを自動的に固定する機能を設定、取得します。"
            }
        },
        "position": {
            "type": "object",
            "defaultValue": null,
            "description": {
                "en": "Sets gets initial position of dialog. That can be array of 2 numeric values, which represent left/top coordinates.<br>    Or it can be object supported by jquery.position(param) method, such as { my: \"left top\", at: \"left top\", offset: \"100 200\" }",
                "jp": "ダイアログの初期位置を設定、取得します。位置は、左座標と上座標を表す 2 つの数値の配列で指定できます。<br>    または、これは { my: \"left top\", at: \"left top\", offset: \"100 200\" } などの、jquery.position(param) メソッドがサポートするオブジェクトになり得ます。"
            },
            "schema": {
                "left": {
                    "type": "number",
                    "defaultValue": null,
                    "description": {
                        "en": "X value",
                        "jp": "X 値。"
                    },
                    "required": true
                },
                "top": {
                    "type": "number",
                    "defaultValue": null,
                    "description": {
                        "en": "Y value",
                        "jp": "Y 値"
                    },
                    "required": true
                }
            }
        },
        "resizable": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets ability to resize dialog by end user.",
                "jp": "エンド ユーザーによるダイアログのサイズ変更機能を設定、取得します。"
            }
        },
        "showCloseButton": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets visibility of close button in header.",
                "jp": "ヘッダーの閉じるボタンの可視性を設定、取得します。"
            }
        },
        "showFooter": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets visibility of footer.",
                "jp": "フッターの可視性を設定、取得します。"
            }
        },
        "showHeader": {
            "type": "bool",
            "defaultValue": true,
            "description": {
                "en": "Sets gets visibility of header.",
                "jp": "ヘッダーの可視性を設定、取得します。"
            }
        },
        "showMaximizeButton": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets visibility of maximize button in header.",
                "jp": "ヘッダーの最大化ボタンの可視性を設定、取得します。"
            }
        },
        "showMinimizeButton": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets visibility of minimize button in header.",
                "jp": "ヘッダーの最小化ボタンの可視性を設定、取得します。"
            }
        },
        "showPinButton": {
            "type": "bool",
            "defaultValue": false,
            "description": {
                "en": "Sets gets visibility of pin button in header.",
                "jp": "ヘッダーの固定ボタンの可視性を設定、取得します。"
            }
        },
        "state": {
            "type": "string",
            "defaultValue": "opened",
            "description": {
                "en": " Sets gets state of dialog.",
                "jp": " ダイアログの状態を設定、取得します。"
            },
            "valueOptions": [
                {
                    "name": "opened",
                    "type": "string",
                    "description": {
                        "en": " Dialog is opened.",
                        "jp": " ダイアログが開きます。"
                    }
                },
                {
                    "name": "minimized",
                    "type": "string",
                    "description": {
                        "en": " Dialog is minimized.",
                        "jp": " ダイアログが最小化されます。"
                    }
                },
                {
                    "name": "maximized",
                    "type": "string",
                    "description": {
                        "en": " Dialog is maximized.",
                        "jp": " ダイアログが最大化されます。"
                    }
                },
                {
                    "name": "closed",
                    "type": "string",
                    "description": {
                        "en": " Dialog is closed.",
                        "jp": " ダイアログが閉じます。"
                    }
                }
            ]
        },
        "width": {
            "type": "number",
            "defaultValue": 300.0,
            "description": {
                "en": "Sets gets initial width of dialog in pixels for normal state.<br>    Besides numeric values, following units are supported: \"px\", \"em\" and \"%\".<br>    In case of \"%\", the size of browser window is used and it has effect only on open action.",
                "jp": "通常の状態でのダイアログの初期幅 (ピクセル単位) を設定、取得します。<br>    数値以外に、次の単位がサポートされています: 「px」、「em」および「%」。<br>    「%」の場合、ブラウザのウィンドウ サイズが使用され、これは開くアクションのみに有効です。"
            }
        }
    }
}
