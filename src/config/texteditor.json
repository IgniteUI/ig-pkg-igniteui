{
  "overview": null,
  "name": "ui.igTextEditor",
  "category": null,
  "visual": true,
  "events": {
    "blur": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor loses focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "エディターの入力フィールドがフォーカスを失ったとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
      }
    },
    "dropDownItemSelected": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selected. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier. <br>    Use ui.item to obtain reference to the list item which is selected.",
        "jp": "ドロップダウン リストが選択されるときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。<br>     ui.items を使用して、選択されたリスト項目への参照を取得します。"
      }
    },
    "dropDownItemSelecting": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down list item is selecting. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier. <br>    Use ui.item to obtain reference to the list item which is about to be selected.",
        "jp": "ドロップダウン リストが選択されるときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。<br>     ui.item を使用して、選択されようとしているリスト項目への参照を取得します。"
      }
    },
    "dropDownListClosed": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already closed. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストがすでに閉じているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListClosing": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is closing. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストが閉じているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListOpened": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is already opened. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストがすでに開いているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "dropDownListOpening": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when the drop down is opening. <br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.editorInput to obtain reference to the editable input<br>    Use ui.list to obtain reference to the list contaier.",
        "jp": "ドロップダウン リストが開いているときに発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.editorInput を使用して、編集可能な入力への参照を取得します。<br>    ui.list を使用して、リスト コンテナーへの参照を取得します。"
      }
    },
    "focus": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised when input field of editor gets focus.<br>    Function takes argument evt.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use evt.originalEvent to obtain reference to event of browser.",
        "jp": "エディターの入力フィールドがフォーカスを取得したとき発生するイベント。<br>    関数は引数 evt を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。"
      }
    },
    "keydown": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keydown event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
        "jp": "keydown イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
      }
    },
    "keypress": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keypress event.<br>    Return false in order to cancel key action.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.<br>    Set ui.key to another character which will replace original entry.",
        "jp": "keypress イベントに対して発生するイベント。<br>    キー操作をキャンセルするには、False を返します。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。<br>    ui.key を元のエントリを置き換える別の文字に設定します。"
      }
    },
    "keyup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on keyup event.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.key to obtain value of keyCode.",
        "jp": "keyup イベントに対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.key を使用して keyCode の値を取得します。"
      }
    },
    "mousedown": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousedown at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mousedown に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mousemove": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mousemove at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mousemove に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseout": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseleave at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseleave に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseover": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseover at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseover に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "mouseup": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised on mouseup at any part of editor including drop-down list.<br>    Function takes arguments evt and ui.<br>    Use evt.originalEvent to obtain reference to event of browser.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.<br>    Use ui.id and ui.elementType to obtain flag which represents html element under mouse.",
        "jp": "ドロップダウン リストを含むエディターの任意の部分での mouseup に対して発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    evt.originalEvent を使用して、ブラウザーのイベントへの参照を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.elementType を使用して、マウス位置の HTML 要素のタイプ (field、button、spinUpper、spinLower、または item# など) を取得します。<br>    ui.id および ui.elementType を使用して、マウス位置の HTML 要素を表すフラグを取得します。"
      }
    },
    "rendered": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after rendering of the editor completes.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get a reference to the editor performing rendering.<br>    Use ui.element to get a reference to the editor element.",
        "jp": "エディターの描画が完了した後に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して、レンダリングを実行するエディターへの参照を取得します。<br>    ui.element を使用して、エディター要素への参照を取得します。"
      }
    },
    "rendering": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before rendering of the editor completes.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to get a reference to the editor performing rendering.<br>    Use ui.element to get a reference to the editor element.",
        "jp": "エディターの描画が完了する前に発生するイベント。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して、レンダリングを実行するエディターへの参照を取得します。<br>    ui.element を使用して、エディター要素への参照を取得します。"
      }
    },
    "textChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after text in editor was changed. It can be raised when keyUp event occurs, <br>    or when the clear button is clicked or when an item from a list is selected.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.text to obtain new text<br>    Use ui.oldTExt to obtain the old text.",
        "jp": "エディター内のテキストが変更された後に発生するイベント。keyUp イベントが発生するときに発生できます。<br>    または、クリアボタンがクリックされたときまたはリストの項目がせんたくされたときに発生できます。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.text を使用して、新しいテキストを取得します。<br>    古いテキストの取得に ui.oldTExt を使用します。"
      }
    },
    "valueChanged": {
      "cancellable": false,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "エディター内の値が変更された後に発生するイベント。フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
      }
    },
    "valueChanging": {
      "cancellable": true,
      "args": [
        {
          "name": "evt",
          "type": "Event",
          "optional": false
        },
        {
          "name": "ui",
          "type": "Object",
          "optional": false
        }
      ],
      "description": {
        "en": "Event which is raised before value in editor was changed.<br>    Return false in order to cancel change.<br>    It can be raised on lost focus or on spin events.<br>    Function takes arguments evt and ui.<br>    Use ui.owner to obtain reference to igEditor.<br>    Use ui.value to obtain new value and ui.oldValue to obtain old value.",
        "jp": "エディター内の値が変更される前に発生するイベント。<br>    変更をキャンセルするには、False を返します。<br>    フォーカスの消失またはスピン イベントに対して発生します。<br>    関数は引数 evt および ui を取得します。<br>    ui.owner を使用して igEditor への参照を取得します。<br>    ui.value を使用して新しい値を取得し、ui.oldValue を使用して古い値を取得します。"
      }
    }
  },
  "properties": {
    "allowNullValue": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to prevent null value.<br>    If that option is false, and editor has no value, then value is set to an empty string.",
        "jp": "null 値を回避する機能を取得または設定します。<br>    このオプションが false で、エディターに値がない場合、値は空の文字列になります。"
      },
      "valueOptions": null
    },
    "buttonType": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.",
        "jp": " スピンおよびドロップダウン ボタンの可視性を取得または設定します。このオプションは、初期化時にのみ設定できます。「dropdown,spin」または「spinclear」などの組み合わせもサポートされています。"
      },
      "valueOptions": [
        {
          "name": "dropdown",
          "type": "string",
          "description": {
            "en": " button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);",
            "jp": " リストを開くボタンが入力フィールドの右側に配置されます (base HTML 要素が direction:rtl を持つ場合は左側)。"
          }
        },
        {
          "name": "clear",
          "type": "string",
          "description": {
            "en": " button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);",
            "jp": " 値をクリアするボタンが入力フィールドの右側に配置されます (base HTML 要素が direction:rtl を持つ場合は左側)。"
          }
        },
        {
          "name": "spin",
          "type": "string",
          "description": {
            "en": " spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).",
            "jp": " スピン ボタンが入力フィールドの右側に置かれます (基本 HTML 要素が direction:rtl を持つ場合は左側)。"
          }
        }
      ]
    },
    "disabled": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request",
        "jp": "disabled 属性を設定します。編集を許可しません。すべてのボタンおよび適用される操作を無効にします。送信において現在の値が要求に送られません。"
      },
      "valueOptions": null
    },
    "dropDownAnimationDuration": {
      "type": "number",
      "defaultValue": 300.0,
      "description": {
        "en": "Gets sets show/hide drop-down list animation duration in milliseconds.",
        "jp": "ドロップダウン リストの表示/非表示アニメーションの期間 (ミリ秒) を取得または設定します。"
      },
      "valueOptions": null
    },
    "dropDownAttachedToBody": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets location of drop-down list.<br>    Value false will create html element for list as a child of main html element.<br>    Value true creates list as a child of body.",
        "jp": "ドロップダウン リストの場所を取得または設定します。<br>    値が false の場合、main HTML 要素の子として、リストの HTML 要素を作成します。<br>    値が true の場合、body の子として、リストを作成します。"
      },
      "valueOptions": null
    },
    "dropDownOnReadOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable. <br>    Note! In case there are no list items - the editor will reamin readonly",
        "jp": "ドロップダウン リストからの項目のみにエディターを制限する機能を設定または取得します。True に設定すると、エディターのテキストは編集できません。<br>     注:リスト項目がない場合もエディターは読み取り専用です。"
      },
      "valueOptions": null
    },
    "dropDownOrientation": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.",
        "jp": " 開くボタンがクリックされたとき、ドロップダウン リストを開く方向を取得または設定します。自動オプションを設定した場合、コンポーネントは下に十分なスペースがあるか計算します。もしない場合、コンポーネントの上のスペースを確認し、上下とも十分なスペースがない場合、ドロップダウンを開きます。"
      },
      "valueOptions": []
    },
    "excludeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to prevent entering specific characters from keyboard or on paste.<br>    Notes:<br>    If a character is specified in \"includeKeys\" option also, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
        "jp": "キーボードまたは貼り付けによって特定の文字を入力できないようにする機能を取得または設定します。<br>    注:<br>    文字が includeKeys オプションに指定した場合、excludeKeys は優先があります。<br>    文字は大文字で設定する必要があります。<br>    大文字と小文字を区別することはサポートされていません。"
      },
      "valueOptions": null
    },
    "height": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The height can be set in pixels (px) and percentage (%).",
            "jp": " 高さをピクセル (px) またはパーセンテージ (%) に設定できます。"
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The height can be set as a number in pixels.",
            "jp": " 高さをピクセル単位の数値で設定できます。"
          }
        }
      ]
    },
    "includeKeys": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets ability to enter only specific characters in input-field from keyboard and on paste.<br>    Notes:<br>    If \"excludeKeys\" option contains same characters as this option, then \"excludeKeys\" has priority.<br>    Letters should be set in upper case.<br>    Making difference between upper and lower case is not supported.",
        "jp": "キーボードからおよび貼り付けによって特定の文字だけを入力フィールドに入力できるようにする機能を取得または設定します。<br>    注:<br>    \"excludeKeys\" オプションがこのオプションと同じ文字を含んでいる場合、\"excludeKeys\" が優先されます。<br>    文字は大文字で設定する必要があります。<br>    大文字と小文字を区別することはサポートされていません。"
      },
      "valueOptions": null
    },
    "inputName": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.",
        "jp": "値入力の名前属性を設定します。入力はサーバーへ値を送信するために使用されます。ターゲット要素が入力で名前要素があり、開発者が inputName オプションに設定した場合、このオプションは値入力を上書きし要素の属性を削除します。"
      },
      "valueOptions": null
    },
    "isLimitedToListValues": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed",
        "jp": "リスト項目に含まれる値のみに許可を設定します。この検証は、エディターがぼかされるか、Enter キーが押されたときに実行されます。"
      },
      "valueOptions": null
    },
    "listItemHoverDuration": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "type=\"number* Sets the hover/unhover animation duration.",
        "jp": "type=\"number\" ホバー/アンホバーアニメーション期間を設定します。"
      },
      "valueOptions": null
    },
    "listItems": {
      "type": "array",
      "defaultValue": null,
      "description": {
        "en": "Sets gets list of items which are used for drop-down list.<br>    Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.",
        "jp": "ドロップダウン リストに使用される項目リストを設定または取得します。<br>    リスト内の項目は、文字列、数、オブジェクトが使用可能です。項目は、キャストまたは操作なしに直接描画されます。"
      },
      "valueOptions": null
    },
    "listWidth": {
      "type": "number",
      "defaultValue": 0.0,
      "description": {
        "en": "Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.",
        "jp": "ドロップダウン リストのカスタムの幅 (ピクセル単位) を取得または設定します。値がゼロまたは負の場合、エディターの幅が使用されます。"
      },
      "valueOptions": null
    },
    "locale": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.",
        "jp": "ボタンのタイトルに使用する文字列を取得または設定します。オブジェクトの値は一組の値またはキーの値メンバーを含む必要があります。注:ロケールのサブオプションは igEditor のメイン オプションに表示されますこのケースではメインオプションの中の値は最優先でロケールに対応する値をオーバーライドします。"
      },
      "valueOptions": null
    },
    "maxLength": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Sets gets maximum length of text which can be entered by user.<br>    Negative values or 0 disables that behavior.",
        "jp": "ユーザーが入力できるテキストの最大長を取得または設定します。<br>    負の値または 0 はこの動作を無効にします。"
      },
      "valueOptions": null
    },
    "nullValue": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string",
        "jp": " null 値の表現を取得または設定します。デフォルトの場合、入力の値は null に設定され、入力が空文字列を保持します。"
      },
      "valueOptions": null
    },
    "placeHolder": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "Sets gets text which appears in editor when editor has no focus and \"value\" in editor is null or empty string.",
        "jp": "エディターがフォーカスを持たず、エディター内の value が null または空の文字列ときのエディターに表示されるテキストを取得または設定します。"
      },
      "valueOptions": null
    },
    "preventSubmitOnEnter": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the ability of the editor to prevent form submition on enter key pressed.",
        "jp": "Enter キーの押下でフォーム送信を回避する機能を設定します。"
      },
      "valueOptions": null
    },
    "readOnly": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.",
        "jp": "読み取り専用 attribute.Does を編集不可に設定します。すべてのボタンおよび適用される操作を無効にします。送信において現在の値が要求に送られます。"
      },
      "valueOptions": null
    },
    "revertIfNotValid": {
      "type": "bool",
      "defaultValue": true,
      "description": {
        "en": "Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.",
        "jp": "ぼかしまたは Enter キーの押しでエディターの値が無効な場合、以前の値に戻すことを設定します。False に設定される場合、clear は呼び出されます。"
      },
      "valueOptions": null
    },
    "selectionOnFocus": {
      "type": "string",
      "defaultValue": "selectAll",
      "description": {
        "en": "type=\"selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.<br>     selectAll type=\"string\" Setting this option will select all the text into the editor when the edit mode gets enetered.<br>     atStart type=\"string\" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.<br>     atEnd type=\"string\" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.<br>     browserDefault type=\"string\" Setting this option won't do any extra logic, but proceed with browser default behavior.",
        "jp": "type=\"selectAll|atStart|atEnd|browserDefault\" エディターがフォーカスを取得したときの動作を設定します。デフォルト値は selectAll です。<br>     selectAll type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのすべてのテキストを選択します。<br>     atStart type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのテキストの初めにカーソルを移動します。<br>     atEnd type=\"string\" このオプションを設定すると、エディター モードに入ったときにエディターのテキストの最後にカーソルを移動します。<br>     browserDefault type=\"string\" このオプションの設定に追加のロジックはありませんが、ブラウザーのデフォルトの動作で処理されます。"
      },
      "valueOptions": null
    },
    "spinWrapAround": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.",
        "jp": "ホバー項目を開いたドロップダウン リストからその反対側へ自動的に変更する機能を取得または設定します。最後の項目に達してスピン ダウンがクリックされると、最初の項目がホバーされます (逆の場合も同じ) 。"
      },
      "valueOptions": null
    },
    "suppressNotifications": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.",
        "jp": "エディターのビルトイン基本検証シナリオで、必須リスト選択、値ラッピング、スピン制限などのデフォルトの通知を無効にします。"
      },
      "valueOptions": null
    },
    "tabIndex": {
      "type": "number",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in tabIndex for editor.",
        "jp": "エディターの tabIndex の値を取得または設定します。"
      },
      "valueOptions": null
    },
    "textAlign": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.",
        "jp": " エディター内のテキストの水平配置を取得または設定します。このオプションを設定した場合、'right' は 'numeric、'currency' 、および 'percent' エディターで使用され、'left'  はその他のすべてのタイプのエディターで使用されます。"
      },
      "valueOptions": [
        {
          "name": "left",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "right",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        },
        {
          "name": "center",
          "type": "string",
          "description": {
            "en": "",
            "jp": ""
          }
        }
      ]
    },
    "textMode": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": " Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.",
        "jp": " 単一行テキスト エディター、パスワード エディター、複数行エディターなど、エディターのテキスト モードを取得または設定します。このオプションは、初期化時にのみ影響します。ベースとなる要素 (セレクター) が TEXTAREA の場合、それを入力フィールドとして使用します。"
      },
      "valueOptions": [
        {
          "name": "text",
          "type": "string",
          "description": {
            "en": " Single line text editor based on INPUT element is created.",
            "jp": " INPUT 要素に基づく単一行テキスト エディターが作成されます。"
          }
        },
        {
          "name": "password",
          "type": "string",
          "description": {
            "en": " Editor based on INPUT element with type password is created.",
            "jp": " タイプ パスワードで作成される INPUT 要素に基づくエディターが作成されます。"
          }
        },
        {
          "name": "multiline",
          "type": "string",
          "description": {
            "en": " multiline editor based on TEXTAREA element is created.",
            "jp": " TEXTAREA 要素に基づく複数行エディターが作成されます。"
          }
        }
      ]
    },
    "toLower": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "True の場合は、入力された文字列を小文字に変換し、False の場合は、文字列をそのままにしておく機能を取得または設定します。このオプションは、キーボード入力と貼り付けを使用する場合のみ効果があります。"
      },
      "valueOptions": null
    },
    "toUpper": {
      "type": "bool",
      "defaultValue": false,
      "description": {
        "en": "Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.",
        "jp": "True の場合は、入力された文字列を大文字に変換し、False の場合は、文字列をそのままにしておく機能を取得または設定します。このオプションは、キーボード入力と貼り付けを使用する場合のみ効果があります。"
      },
      "valueOptions": null
    },
    "validatorOptions": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Sets gets options supported by the igValidator widget.<br>    Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors, <br>                while similar options of the editor work to prevent wrong values from being entered.",
        "jp": "igValidator ウィジェットによってサポートされるオプションを設定または取得します。<br>    注: エラーをトリガーした際に igValidator の検証ルールは最小値/長さおよび最大値/長さを別々に適用します。<br>                エディターの同様のオプションは、誤った値が入力されるのを防止します。"
      },
       "schemaRef": "validator"
    },
    "value": {
      "type": "object",
      "defaultValue": null,
      "description": {
        "en": "Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.",
        "jp": "エディター内の値を取得または設定します。エディターのタイプおよび各エディター タイプの dataMode オプションに基づいたオプションを取得または設定する効果。"
      },
      "valueOptions": null
    },
    "visibleItemsCount": {
      "type": "number",
      "defaultValue": 5.0,
      "description": {
        "en": "Gets sets how many items should be shown at once. <br>      Notes:<br>      That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.",
        "jp": "一度に表示される項目の数を取得または設定します。<br>     注:<br>      リスト項目の数が値より小さい場合、このオプションは上書きされます。この場合、ドロップダウンの高さが項目の数に基づいて設定されます。"
      },
      "valueOptions": null
    },
    "width": {
      "type": "string",
      "defaultValue": null,
      "description": {
        "en": "",
        "jp": ""
      },
      "valueOptions": [
        {
          "name": null,
          "type": "string",
          "description": {
            "en": " The widget width can be set in pixels (px) and percentage (%).",
            "jp": " ウィジェットの幅をピクセル (px) またはパーセンテージ (%) に設定できます。"
          }
        },
        {
          "name": null,
          "type": "number",
          "description": {
            "en": " The widget width can be set as a number in pixels.",
            "jp": " ウィジェットの幅は数値としてピクセルで設定できます。"
          }
        }
      ]
    }
  }
}
